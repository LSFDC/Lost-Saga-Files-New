/*
 Navicat Premium Data Transfer

 Source Server         : [LSFD] LS
 Source Server Type    : SQL Server
 Source Server Version : 16004105 (16.00.4105)
 Source Host           : 172.17.191.44:1433
 Source Catalog        : LosaGame
 Source Schema         : dbo

 Target Server Type    : SQL Server
 Target Server Version : 16004105 (16.00.4105)
 File Encoding         : 65001

 Date: 24/03/2024 14:37:55
*/


-- ----------------------------
-- Table structure for define_award
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_award]') AND type IN ('U'))
	DROP TABLE [dbo].[define_award]
GO

CREATE TABLE [dbo].[define_award] (
  [idx] smallint  NOT NULL,
  [awardHanName] varchar(32) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [awardEngName] varchar(32) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [limitrankingPoint] int  NOT NULL
)
GO

ALTER TABLE [dbo].[define_award] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_award
-- ----------------------------

-- ----------------------------
-- Table structure for define_blockIP
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_blockIP]') AND type IN ('U'))
	DROP TABLE [dbo].[define_blockIP]
GO

CREATE TABLE [dbo].[define_blockIP] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [userID] nchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [userIP] varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [endDate] datetime DEFAULT '2050-01-01' NULL,
  [note] nvarchar(1000) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[define_blockIP] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_blockIP
-- ----------------------------
SET IDENTITY_INSERT [dbo].[define_blockIP] ON
GO

SET IDENTITY_INSERT [dbo].[define_blockIP] OFF
GO


-- ----------------------------
-- Table structure for define_class
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_class]') AND type IN ('U'))
	DROP TABLE [dbo].[define_class]
GO

CREATE TABLE [dbo].[define_class] (
  [idx] smallint  NOT NULL,
  [classHanName] varchar(32) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [classEngName] varchar(32) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [movieorderby] smallint  NOT NULL,
  [limitrankingLevel] tinyint DEFAULT 0 NOT NULL,
  [limituseLevel] smallint DEFAULT 0 NOT NULL,
  [premiumType] tinyint DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[define_class] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_class
-- ----------------------------

-- ----------------------------
-- Table structure for define_class_price
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_class_price]') AND type IN ('U'))
	DROP TABLE [dbo].[define_class_price]
GO

CREATE TABLE [dbo].[define_class_price] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [class1_price] int DEFAULT 0 NOT NULL,
  [class2_price] int DEFAULT 0 NOT NULL,
  [class3_price] int DEFAULT 0 NOT NULL,
  [class4_price] int DEFAULT 0 NOT NULL,
  [class5_price] int DEFAULT 0 NOT NULL,
  [class6_price] int DEFAULT 0 NOT NULL,
  [class7_price] int DEFAULT 0 NOT NULL,
  [class8_price] int DEFAULT 0 NOT NULL,
  [class9_price] int DEFAULT 0 NOT NULL,
  [class10_price] int DEFAULT 0 NOT NULL,
  [class11_price] int DEFAULT 0 NOT NULL,
  [class12_price] int DEFAULT 0 NOT NULL,
  [class13_price] int DEFAULT 0 NOT NULL,
  [class14_price] int DEFAULT 0 NOT NULL,
  [class15_price] int DEFAULT 0 NOT NULL,
  [class16_price] int DEFAULT 0 NOT NULL,
  [class17_price] int DEFAULT 0 NOT NULL,
  [class18_price] int DEFAULT 0 NOT NULL,
  [class19_price] int DEFAULT 0 NOT NULL,
  [class20_price] int DEFAULT 0 NOT NULL,
  [class21_price] int DEFAULT 0 NOT NULL,
  [class22_price] int DEFAULT 0 NOT NULL,
  [class23_price] int DEFAULT 0 NOT NULL,
  [class24_price] int DEFAULT 0 NOT NULL,
  [class25_price] int DEFAULT 0 NOT NULL,
  [class26_price] int DEFAULT 0 NOT NULL,
  [class27_price] int DEFAULT 0 NOT NULL,
  [class28_price] int DEFAULT 0 NOT NULL,
  [class29_price] int DEFAULT 0 NOT NULL,
  [class30_price] int DEFAULT 0 NOT NULL,
  [class31_price] int DEFAULT 0 NOT NULL,
  [class32_price] int DEFAULT 0 NOT NULL,
  [class33_price] int DEFAULT 0 NOT NULL,
  [class34_price] int DEFAULT 0 NOT NULL,
  [class35_price] int DEFAULT 0 NOT NULL,
  [class36_price] int DEFAULT 0 NOT NULL,
  [class37_price] int DEFAULT 0 NOT NULL,
  [class38_price] int DEFAULT 0 NOT NULL,
  [class39_price] int DEFAULT 0 NOT NULL,
  [class40_price] int DEFAULT 0 NOT NULL,
  [class41_price] int DEFAULT 0 NOT NULL,
  [class42_price] int DEFAULT 0 NOT NULL,
  [class43_price] int DEFAULT 0 NOT NULL,
  [class44_price] int DEFAULT 0 NOT NULL,
  [class45_price] int DEFAULT 0 NOT NULL,
  [class46_price] int DEFAULT 0 NOT NULL,
  [class47_price] int DEFAULT 0 NOT NULL,
  [class48_price] int DEFAULT 0 NOT NULL,
  [class49_price] int DEFAULT 0 NOT NULL,
  [class50_price] int DEFAULT 0 NOT NULL,
  [class51_price] int DEFAULT 0 NOT NULL,
  [class52_price] int DEFAULT 0 NOT NULL,
  [class53_price] int DEFAULT 0 NOT NULL,
  [class54_price] int DEFAULT 0 NOT NULL,
  [class55_price] int DEFAULT 0 NOT NULL,
  [class56_price] int DEFAULT 0 NOT NULL,
  [class57_price] int DEFAULT 0 NOT NULL,
  [class58_price] int DEFAULT 0 NOT NULL,
  [class59_price] int DEFAULT 0 NOT NULL,
  [class60_price] int DEFAULT 0 NOT NULL,
  [class61_price] int DEFAULT 0 NOT NULL,
  [class62_price] int DEFAULT 0 NOT NULL,
  [class63_price] int DEFAULT 0 NOT NULL,
  [class64_price] int DEFAULT 0 NOT NULL,
  [class65_price] int DEFAULT 0 NOT NULL,
  [class66_price] int DEFAULT 0 NOT NULL,
  [class67_price] int DEFAULT 0 NOT NULL,
  [class68_price] int DEFAULT 0 NOT NULL,
  [class69_price] int DEFAULT 0 NOT NULL,
  [class70_price] int DEFAULT 0 NOT NULL,
  [class71_price] int DEFAULT 0 NOT NULL,
  [class72_price] int DEFAULT 0 NOT NULL,
  [class73_price] int DEFAULT 0 NOT NULL,
  [class74_price] int DEFAULT 0 NOT NULL,
  [class75_price] int DEFAULT 0 NOT NULL,
  [class76_price] int DEFAULT 0 NOT NULL,
  [class77_price] int DEFAULT 0 NOT NULL,
  [class78_price] int DEFAULT 0 NOT NULL,
  [class79_price] int DEFAULT 0 NOT NULL,
  [class80_price] int DEFAULT 0 NOT NULL,
  [class81_price] int DEFAULT 0 NOT NULL,
  [class82_price] int DEFAULT 0 NOT NULL,
  [class83_price] int DEFAULT 0 NOT NULL,
  [class84_price] int DEFAULT 0 NOT NULL,
  [class85_price] int DEFAULT 0 NOT NULL,
  [class86_price] int DEFAULT 0 NOT NULL,
  [class87_price] int DEFAULT 0 NOT NULL,
  [class88_price] int DEFAULT 0 NOT NULL,
  [class89_price] int DEFAULT 0 NOT NULL,
  [class90_price] int DEFAULT 0 NOT NULL,
  [class91_price] int DEFAULT 0 NOT NULL,
  [class92_price] int DEFAULT 0 NOT NULL,
  [class93_price] int DEFAULT 0 NOT NULL,
  [class94_price] int DEFAULT 0 NOT NULL,
  [class95_price] int DEFAULT 0 NOT NULL,
  [class96_price] int DEFAULT 0 NOT NULL,
  [class97_price] int DEFAULT 0 NOT NULL,
  [class98_price] int DEFAULT 0 NOT NULL,
  [class99_price] int DEFAULT 0 NOT NULL,
  [class100_price] int DEFAULT 0 NOT NULL,
  [class101_price] int DEFAULT 0 NOT NULL,
  [class102_price] int DEFAULT 0 NOT NULL,
  [class103_price] int DEFAULT 0 NOT NULL,
  [class104_price] int DEFAULT 0 NOT NULL,
  [class105_price] int DEFAULT 0 NOT NULL,
  [class106_price] int DEFAULT 0 NOT NULL,
  [class107_price] int DEFAULT 0 NOT NULL,
  [class108_price] int DEFAULT 0 NOT NULL,
  [class109_price] int DEFAULT 0 NOT NULL,
  [class110_price] int DEFAULT 0 NOT NULL,
  [class111_price] int DEFAULT 0 NOT NULL,
  [class112_price] int DEFAULT 0 NOT NULL,
  [class113_price] int DEFAULT 0 NOT NULL,
  [class114_price] int DEFAULT 0 NOT NULL,
  [class115_price] int DEFAULT 0 NOT NULL,
  [class116_price] int DEFAULT 0 NOT NULL,
  [class117_price] int DEFAULT 0 NOT NULL,
  [class118_price] int DEFAULT 0 NOT NULL,
  [class119_price] int DEFAULT 0 NOT NULL,
  [class120_price] int DEFAULT 0 NOT NULL,
  [class121_price] int DEFAULT 0 NOT NULL,
  [class122_price] int DEFAULT 0 NOT NULL,
  [class123_price] int DEFAULT 0 NOT NULL,
  [class124_price] int DEFAULT 0 NOT NULL,
  [class125_price] int DEFAULT 0 NOT NULL,
  [class126_price] int DEFAULT 0 NOT NULL,
  [class127_price] int DEFAULT 0 NOT NULL,
  [class128_price] int DEFAULT 0 NOT NULL,
  [class129_price] int DEFAULT 0 NOT NULL,
  [class130_price] int DEFAULT 0 NOT NULL,
  [class131_price] int DEFAULT 0 NOT NULL,
  [class132_price] int DEFAULT 0 NOT NULL,
  [class133_price] int DEFAULT 0 NOT NULL,
  [class134_price] int DEFAULT 0 NOT NULL,
  [class135_price] int DEFAULT 0 NOT NULL,
  [class136_price] int DEFAULT 0 NOT NULL,
  [class137_price] int DEFAULT 0 NOT NULL,
  [class138_price] int DEFAULT 0 NOT NULL,
  [class139_price] int DEFAULT 0 NOT NULL,
  [class140_price] int DEFAULT 0 NOT NULL,
  [class141_price] int DEFAULT 0 NOT NULL,
  [class142_price] int DEFAULT 0 NOT NULL,
  [class143_price] int DEFAULT 0 NOT NULL,
  [class144_price] int DEFAULT 0 NOT NULL,
  [class145_price] int DEFAULT 0 NOT NULL,
  [class146_price] int DEFAULT 0 NOT NULL,
  [class147_price] int DEFAULT 0 NOT NULL,
  [class148_price] int DEFAULT 0 NOT NULL,
  [class149_price] int DEFAULT 0 NOT NULL,
  [class150_price] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[define_class_price] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_class_price
-- ----------------------------
SET IDENTITY_INSERT [dbo].[define_class_price] ON
GO

SET IDENTITY_INSERT [dbo].[define_class_price] OFF
GO


-- ----------------------------
-- Table structure for define_config
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_config]') AND type IN ('U'))
	DROP TABLE [dbo].[define_config]
GO

CREATE TABLE [dbo].[define_config] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [objName] varchar(32) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [value1] varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [value2] varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [value3] varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [value4] varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [value5] varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [note] varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[define_config] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_config
-- ----------------------------
SET IDENTITY_INSERT [dbo].[define_config] ON
GO

SET IDENTITY_INSERT [dbo].[define_config] OFF
GO


-- ----------------------------
-- Table structure for define_encode_key
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_encode_key]') AND type IN ('U'))
	DROP TABLE [dbo].[define_encode_key]
GO

CREATE TABLE [dbo].[define_encode_key] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [encodeKey] char(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[define_encode_key] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_encode_key
-- ----------------------------
SET IDENTITY_INSERT [dbo].[define_encode_key] ON
GO

INSERT INTO [dbo].[define_encode_key] ([idx], [encodeKey], [regDate]) VALUES (N'1', N'5zaYmBaIob808G3', N'2024-03-01 15:19:05.460')
GO

SET IDENTITY_INSERT [dbo].[define_encode_key] OFF
GO


-- ----------------------------
-- Table structure for define_game_server
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_game_server]') AND type IN ('U'))
	DROP TABLE [dbo].[define_game_server]
GO

CREATE TABLE [dbo].[define_game_server] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [serverID] bigint DEFAULT 0 NOT NULL,
  [serverIP] varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [serverPort] int  NOT NULL,
  [serverName] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [clientPort] int  NOT NULL,
  [connNumber] int DEFAULT 0 NOT NULL,
  [status] tinyint DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[define_game_server] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_game_server
-- ----------------------------
SET IDENTITY_INSERT [dbo].[define_game_server] ON
GO

SET IDENTITY_INSERT [dbo].[define_game_server] OFF
GO


-- ----------------------------
-- Table structure for define_gear_customidx
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_gear_customidx]') AND type IN ('U'))
	DROP TABLE [dbo].[define_gear_customidx]
GO

CREATE TABLE [dbo].[define_gear_customidx] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[define_gear_customidx] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_gear_customidx
-- ----------------------------
SET IDENTITY_INSERT [dbo].[define_gear_customidx] ON
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'0', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'1', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'2', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'3', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'4', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'5', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'6', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'7', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'8', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'9', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'10', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'11', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'12', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'13', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'14', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'15', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'16', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'17', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'18', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'19', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'20', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'21', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'22', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'23', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'24', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'25', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'26', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'27', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'28', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'29', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'30', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'31', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'32', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'33', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'34', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'35', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'36', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'37', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'38', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'39', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'40', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'41', N'1')
GO

INSERT INTO [dbo].[define_gear_customidx] ([idx], [accountIDX]) VALUES (N'42', N'1')
GO

SET IDENTITY_INSERT [dbo].[define_gear_customidx] OFF
GO


-- ----------------------------
-- Table structure for define_geoip
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_geoip]') AND type IN ('U'))
	DROP TABLE [dbo].[define_geoip]
GO

CREATE TABLE [dbo].[define_geoip] (
  [sip] varchar(16) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [eip] varchar(16) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [sbwv] bigint  NOT NULL,
  [ebwv] bigint  NOT NULL,
  [country] varchar(4) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [countryname] varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL
)
GO

ALTER TABLE [dbo].[define_geoip] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_geoip
-- ----------------------------

-- ----------------------------
-- Table structure for define_hero_price
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_hero_price]') AND type IN ('U'))
	DROP TABLE [dbo].[define_hero_price]
GO

CREATE TABLE [dbo].[define_hero_price] (
  [HeroCode] int DEFAULT 0 NOT NULL,
  [HeroPrice] int DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[define_hero_price] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_hero_price
-- ----------------------------

-- ----------------------------
-- Table structure for define_hwid_blocklist
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_hwid_blocklist]') AND type IN ('U'))
	DROP TABLE [dbo].[define_hwid_blocklist]
GO

CREATE TABLE [dbo].[define_hwid_blocklist] (
  [hwid] varchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL
)
GO

ALTER TABLE [dbo].[define_hwid_blocklist] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_hwid_blocklist
-- ----------------------------

-- ----------------------------
-- Table structure for define_launcher_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_launcher_info]') AND type IN ('U'))
	DROP TABLE [dbo].[define_launcher_info]
GO

CREATE TABLE [dbo].[define_launcher_info] (
  [launcherKey] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [status] int  NULL,
  [regDate] datetime  NULL
)
GO

ALTER TABLE [dbo].[define_launcher_info] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_launcher_info
-- ----------------------------
INSERT INTO [dbo].[define_launcher_info] ([launcherKey], [status], [regDate]) VALUES (N'LSFD', N'1', N'2024-03-15 16:31:15.000')
GO


-- ----------------------------
-- Table structure for define_launcher_whitelist
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_launcher_whitelist]') AND type IN ('U'))
	DROP TABLE [dbo].[define_launcher_whitelist]
GO

CREATE TABLE [dbo].[define_launcher_whitelist] (
  [username] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL
)
GO

ALTER TABLE [dbo].[define_launcher_whitelist] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_launcher_whitelist
-- ----------------------------

-- ----------------------------
-- Table structure for define_manage
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_manage]') AND type IN ('U'))
	DROP TABLE [dbo].[define_manage]
GO

CREATE TABLE [dbo].[define_manage] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [objName] varchar(32) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [code] int  NULL,
  [itemName] varchar(32) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL
)
GO

ALTER TABLE [dbo].[define_manage] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_manage
-- ----------------------------
SET IDENTITY_INSERT [dbo].[define_manage] ON
GO

SET IDENTITY_INSERT [dbo].[define_manage] OFF
GO


-- ----------------------------
-- Table structure for define_medal
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_medal]') AND type IN ('U'))
	DROP TABLE [dbo].[define_medal]
GO

CREATE TABLE [dbo].[define_medal] (
  [idx] int  NOT NULL,
  [medalCode] int  NOT NULL,
  [eng_name] varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [point] int DEFAULT 0 NOT NULL,
  [title] varchar(64) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [content1] varchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [content2] varchar(400) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[define_medal] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_medal
-- ----------------------------

-- ----------------------------
-- Table structure for define_quest
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_quest]') AND type IN ('U'))
	DROP TABLE [dbo].[define_quest]
GO

CREATE TABLE [dbo].[define_quest] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [questIDX] int  NOT NULL,
  [title] varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [progress] varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [content1] varchar(150) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [content2] varchar(150) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [content3] varchar(150) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [content4] varchar(150) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL
)
GO

ALTER TABLE [dbo].[define_quest] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_quest
-- ----------------------------
SET IDENTITY_INSERT [dbo].[define_quest] ON
GO

SET IDENTITY_INSERT [dbo].[define_quest] OFF
GO


-- ----------------------------
-- Table structure for define_site_config
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_site_config]') AND type IN ('U'))
	DROP TABLE [dbo].[define_site_config]
GO

CREATE TABLE [dbo].[define_site_config] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [objName] varchar(32) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [content] varchar(32) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [note] varchar(300) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[define_site_config] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_site_config
-- ----------------------------
SET IDENTITY_INSERT [dbo].[define_site_config] ON
GO

SET IDENTITY_INSERT [dbo].[define_site_config] OFF
GO


-- ----------------------------
-- Table structure for define_zipcode
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[define_zipcode]') AND type IN ('U'))
	DROP TABLE [dbo].[define_zipcode]
GO

CREATE TABLE [dbo].[define_zipcode] (
  [zipcode] varchar(8) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [sido] nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [gugun] nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [dong] nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [ri] nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [bldg] nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [bunji] nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [seq] nvarchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL
)
GO

ALTER TABLE [dbo].[define_zipcode] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of define_zipcode
-- ----------------------------

-- ----------------------------
-- Table structure for event_chuchun
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[event_chuchun]') AND type IN ('U'))
	DROP TABLE [dbo].[event_chuchun]
GO

CREATE TABLE [dbo].[event_chuchun] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [friendIDX] int  NOT NULL,
  [flag] tinyint DEFAULT 0 NOT NULL,
  [userIP] varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [userType] tinyint DEFAULT 0 NOT NULL,
  [itemFlag] tinyint DEFAULT 0 NOT NULL,
  [cpID] nvarchar(32) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [cpType] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[event_chuchun] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of event_chuchun
-- ----------------------------
SET IDENTITY_INSERT [dbo].[event_chuchun] ON
GO

SET IDENTITY_INSERT [dbo].[event_chuchun] OFF
GO


-- ----------------------------
-- Table structure for event_chuchun_conndate
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[event_chuchun_conndate]') AND type IN ('U'))
	DROP TABLE [dbo].[event_chuchun_conndate]
GO

CREATE TABLE [dbo].[event_chuchun_conndate] (
  [accountIDX] int  NOT NULL,
  [connDate] datetime  NOT NULL
)
GO

ALTER TABLE [dbo].[event_chuchun_conndate] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of event_chuchun_conndate
-- ----------------------------

-- ----------------------------
-- Table structure for event_item_limited
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[event_item_limited]') AND type IN ('U'))
	DROP TABLE [dbo].[event_item_limited]
GO

CREATE TABLE [dbo].[event_item_limited] (
  [AccountIDX] int  NOT NULL,
  [EventType] tinyint  NOT NULL,
  [GoodsIndex] int  NOT NULL,
  [GoodsCount] tinyint  NOT NULL
)
GO

ALTER TABLE [dbo].[event_item_limited] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of event_item_limited
-- ----------------------------

-- ----------------------------
-- Table structure for itemCode
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[itemCode]') AND type IN ('U'))
	DROP TABLE [dbo].[itemCode]
GO

CREATE TABLE [dbo].[itemCode] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [itemType] float(53)  NULL,
  [itemCode] float(53)  NULL,
  [itemValue] float(53)  NULL
)
GO

ALTER TABLE [dbo].[itemCode] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of itemCode
-- ----------------------------
SET IDENTITY_INSERT [dbo].[itemCode] ON
GO

SET IDENTITY_INSERT [dbo].[itemCode] OFF
GO


-- ----------------------------
-- Table structure for LOSA_PRIVATE_UserInfo
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[LOSA_PRIVATE_UserInfo]') AND type IN ('U'))
	DROP TABLE [dbo].[LOSA_PRIVATE_UserInfo]
GO

CREATE TABLE [dbo].[LOSA_PRIVATE_UserInfo] (
  [userID] varchar(12) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [UserName] varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [email] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL
)
GO

ALTER TABLE [dbo].[LOSA_PRIVATE_UserInfo] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of LOSA_PRIVATE_UserInfo
-- ----------------------------

-- ----------------------------
-- Table structure for mannerUserID
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[mannerUserID]') AND type IN ('U'))
	DROP TABLE [dbo].[mannerUserID]
GO

CREATE TABLE [dbo].[mannerUserID] (
  [accountIDX] int  NULL,
  [bonus] int  NULL,
  [cnt] int  NULL
)
GO

ALTER TABLE [dbo].[mannerUserID] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of mannerUserID
-- ----------------------------

-- ----------------------------
-- Table structure for TB_LTS_WEEKTIME
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[TB_LTS_WEEKTIME]') AND type IN ('U'))
	DROP TABLE [dbo].[TB_LTS_WEEKTIME]
GO

CREATE TABLE [dbo].[TB_LTS_WEEKTIME] (
  [userID] varchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [GmtCodeNo] int  NOT NULL,
  [Wday] tinyint  NOT NULL,
  [Wtime] tinyint  NOT NULL
)
GO

ALTER TABLE [dbo].[TB_LTS_WEEKTIME] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of TB_LTS_WEEKTIME
-- ----------------------------

-- ----------------------------
-- Table structure for TB_LTS_WEEKTIME_PARENT_CHILD_INFO
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[TB_LTS_WEEKTIME_PARENT_CHILD_INFO]') AND type IN ('U'))
	DROP TABLE [dbo].[TB_LTS_WEEKTIME_PARENT_CHILD_INFO]
GO

CREATE TABLE [dbo].[TB_LTS_WEEKTIME_PARENT_CHILD_INFO] (
  [PARENT_ID] varchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [CHILD_ID] varchar(25) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [Agree_Type] char(1) COLLATE SQL_Latin1_General_CP1_CI_AS DEFAULT 'N' NULL,
  [AgreeDate] datetime  NULL,
  [RegIP] varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [RegDate] datetime DEFAULT getdate() NULL
)
GO

ALTER TABLE [dbo].[TB_LTS_WEEKTIME_PARENT_CHILD_INFO] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of TB_LTS_WEEKTIME_PARENT_CHILD_INFO
-- ----------------------------

-- ----------------------------
-- Table structure for TB_WEEKTIME
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[TB_WEEKTIME]') AND type IN ('U'))
	DROP TABLE [dbo].[TB_WEEKTIME]
GO

CREATE TABLE [dbo].[TB_WEEKTIME] (
  [wday] tinyint  NOT NULL,
  [wtime] tinyint  NOT NULL
)
GO

ALTER TABLE [dbo].[TB_WEEKTIME] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of TB_WEEKTIME
-- ----------------------------

-- ----------------------------
-- Table structure for TEMP_MONTHLY_MANNER_USER
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[TEMP_MONTHLY_MANNER_USER]') AND type IN ('U'))
	DROP TABLE [dbo].[TEMP_MONTHLY_MANNER_USER]
GO

CREATE TABLE [dbo].[TEMP_MONTHLY_MANNER_USER] (
  [AccountIDX] int  NULL
)
GO

ALTER TABLE [dbo].[TEMP_MONTHLY_MANNER_USER] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of TEMP_MONTHLY_MANNER_USER
-- ----------------------------

-- ----------------------------
-- Table structure for userAbilityDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userAbilityDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userAbilityDB]
GO

CREATE TABLE [dbo].[userAbilityDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [class1_type] int DEFAULT 0 NOT NULL,
  [class1_basic01] tinyint DEFAULT 0 NOT NULL,
  [class1_basic02] tinyint DEFAULT 0 NOT NULL,
  [class1_basic03] tinyint DEFAULT 0 NOT NULL,
  [class1_basic04] tinyint DEFAULT 0 NOT NULL,
  [class1_skill1_sd] tinyint DEFAULT 0 NOT NULL,
  [class1_skill1_asd] tinyint DEFAULT 0 NOT NULL,
  [class1_skill1_ad] tinyint DEFAULT 0 NOT NULL,
  [class1_skill1_as] tinyint DEFAULT 0 NOT NULL,
  [class1_timeslot] int DEFAULT 0 NOT NULL,
  [class1_limitdate] datetime DEFAULT getdate() NOT NULL,
  [class2_type] int DEFAULT 0 NOT NULL,
  [class2_basic01] tinyint DEFAULT 0 NOT NULL,
  [class2_basic02] tinyint DEFAULT 0 NOT NULL,
  [class2_basic03] tinyint DEFAULT 0 NOT NULL,
  [class2_basic04] tinyint DEFAULT 0 NOT NULL,
  [class2_skill1_sd] tinyint DEFAULT 0 NOT NULL,
  [class2_skill1_asd] tinyint DEFAULT 0 NOT NULL,
  [class2_skill1_ad] tinyint DEFAULT 0 NOT NULL,
  [class2_skill1_as] tinyint DEFAULT 0 NOT NULL,
  [class2_timeslot] int DEFAULT 0 NOT NULL,
  [class2_limitdate] datetime DEFAULT getdate() NOT NULL,
  [class3_type] int DEFAULT 0 NOT NULL,
  [class3_basic01] tinyint DEFAULT 0 NOT NULL,
  [class3_basic02] tinyint DEFAULT 0 NOT NULL,
  [class3_basic03] tinyint DEFAULT 0 NOT NULL,
  [class3_basic04] tinyint DEFAULT 0 NOT NULL,
  [class3_skill1_sd] tinyint DEFAULT 0 NOT NULL,
  [class3_skill1_asd] tinyint DEFAULT 0 NOT NULL,
  [class3_skill1_ad] tinyint DEFAULT 0 NOT NULL,
  [class3_skill1_as] tinyint DEFAULT 0 NOT NULL,
  [class3_timeslot] int DEFAULT 0 NOT NULL,
  [class3_limitdate] datetime DEFAULT getdate() NOT NULL,
  [class4_type] int DEFAULT 0 NOT NULL,
  [class4_basic01] tinyint DEFAULT 0 NOT NULL,
  [class4_basic02] tinyint DEFAULT 0 NOT NULL,
  [class4_basic03] tinyint DEFAULT 0 NOT NULL,
  [class4_basic04] tinyint DEFAULT 0 NOT NULL,
  [class4_skill1_sd] tinyint DEFAULT 0 NOT NULL,
  [class4_skill1_asd] tinyint DEFAULT 0 NOT NULL,
  [class4_skill1_ad] tinyint DEFAULT 0 NOT NULL,
  [class4_skill1_as] tinyint DEFAULT 0 NOT NULL,
  [class4_timeslot] int DEFAULT 0 NOT NULL,
  [class4_limitdate] datetime DEFAULT getdate() NOT NULL,
  [class5_type] int DEFAULT 0 NOT NULL,
  [class5_basic01] tinyint DEFAULT 0 NOT NULL,
  [class5_basic02] tinyint DEFAULT 0 NOT NULL,
  [class5_basic03] tinyint DEFAULT 0 NOT NULL,
  [class5_basic04] tinyint DEFAULT 0 NOT NULL,
  [class5_skill1_sd] tinyint DEFAULT 0 NOT NULL,
  [class5_skill1_asd] tinyint DEFAULT 0 NOT NULL,
  [class5_skill1_ad] tinyint DEFAULT 0 NOT NULL,
  [class5_skill1_as] tinyint DEFAULT 0 NOT NULL,
  [class5_timeslot] int DEFAULT 0 NOT NULL,
  [class5_limitdate] datetime DEFAULT getdate() NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userAbilityDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userAbilityDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userAbilityDB] ON
GO

SET IDENTITY_INSERT [dbo].[userAbilityDB] OFF
GO


-- ----------------------------
-- Table structure for userAccessoryDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userAccessoryDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userAccessoryDB]
GO

CREATE TABLE [dbo].[userAccessoryDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [AccountIDX] int  NOT NULL,
  [ItemCode] int DEFAULT 0 NOT NULL,
  [PeriodType] tinyint DEFAULT 0 NOT NULL,
  [PeriodDate] datetime DEFAULT '1999-01-01' NOT NULL,
  [StatValue] int DEFAULT 0 NOT NULL,
  [ClassType] int DEFAULT 0 NOT NULL,
  [RegDate] datetime DEFAULT getdate() NOT NULL,
  [ComposeCode] int DEFAULT 0 NOT NULL,
  [ComposeValue] int DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userAccessoryDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userAccessoryDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userAccessoryDB] ON
GO

SET IDENTITY_INSERT [dbo].[userAccessoryDB] OFF
GO


-- ----------------------------
-- Table structure for userAttendanceDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userAttendanceDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userAttendanceDB]
GO

CREATE TABLE [dbo].[userAttendanceDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [checkDate] datetime  NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userAttendanceDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userAttendanceDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userAttendanceDB] ON
GO

SET IDENTITY_INSERT [dbo].[userAttendanceDB] OFF
GO


-- ----------------------------
-- Table structure for userAttendDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userAttendDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userAttendDB]
GO

CREATE TABLE [dbo].[userAttendDB] (
  [AccountIDX] int  NOT NULL,
  [AttendCount] int  NOT NULL,
  [RewardTable] int  NOT NULL,
  [ConnectDate] datetime  NOT NULL,
  [RegDate] datetime  NOT NULL
)
GO

ALTER TABLE [dbo].[userAttendDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userAttendDB
-- ----------------------------

-- ----------------------------
-- Table structure for userAwardDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userAwardDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userAwardDB]
GO

CREATE TABLE [dbo].[userAwardDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int DEFAULT 0 NOT NULL,
  [award1_type] int DEFAULT 0 NOT NULL,
  [award1_number] int DEFAULT 0 NOT NULL,
  [award1_point] int DEFAULT 0 NOT NULL,
  [award2_type] int DEFAULT 0 NOT NULL,
  [award2_number] int DEFAULT 0 NOT NULL,
  [award2_point] int DEFAULT 0 NOT NULL,
  [award3_type] int DEFAULT 0 NOT NULL,
  [award3_number] int DEFAULT 0 NOT NULL,
  [award3_point] int DEFAULT 0 NOT NULL,
  [award4_type] int DEFAULT 0 NOT NULL,
  [award4_number] int DEFAULT 0 NOT NULL,
  [award4_point] int DEFAULT 0 NOT NULL,
  [award5_type] int DEFAULT 0 NOT NULL,
  [award5_number] int DEFAULT 0 NOT NULL,
  [award5_point] int DEFAULT 0 NOT NULL,
  [award6_type] int DEFAULT 0 NOT NULL,
  [award6_number] int DEFAULT 0 NOT NULL,
  [award6_point] int DEFAULT 0 NOT NULL,
  [award7_type] int DEFAULT 0 NOT NULL,
  [award7_number] int DEFAULT 0 NOT NULL,
  [award7_point] int DEFAULT 0 NOT NULL,
  [award8_type] int DEFAULT 0 NOT NULL,
  [award8_number] int DEFAULT 0 NOT NULL,
  [award8_point] int DEFAULT 0 NOT NULL,
  [award9_type] int DEFAULT 0 NOT NULL,
  [award9_number] int DEFAULT 0 NOT NULL,
  [award9_point] int DEFAULT 0 NOT NULL,
  [award10_type] int DEFAULT 0 NOT NULL,
  [award10_number] int DEFAULT 0 NOT NULL,
  [award10_point] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userAwardDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userAwardDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userAwardDB] ON
GO

SET IDENTITY_INSERT [dbo].[userAwardDB] OFF
GO


-- ----------------------------
-- Table structure for userCardMatchingDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userCardMatchingDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userCardMatchingDB]
GO

CREATE TABLE [dbo].[userCardMatchingDB] (
  [AccountIDX] int  NOT NULL,
  [MissionCount] int DEFAULT 0 NOT NULL,
  [MissionType] tinyint DEFAULT 0 NOT NULL,
  [MissionMark1] tinyint DEFAULT 0 NOT NULL,
  [MissionMark2] tinyint DEFAULT 0 NOT NULL,
  [Mark1] tinyint DEFAULT 0 NOT NULL,
  [Mark2] tinyint DEFAULT 0 NOT NULL,
  [UpdateTime] datetime  NOT NULL,
  [RegDate] datetime  NOT NULL
)
GO

ALTER TABLE [dbo].[userCardMatchingDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userCardMatchingDB
-- ----------------------------

-- ----------------------------
-- Table structure for userCashDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userCashDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userCashDB]
GO

CREATE TABLE [dbo].[userCashDB] (
  [accountIDX] int  NOT NULL,
  [amtCash] int DEFAULT 0 NOT NULL,
  [amtBonus] int DEFAULT 0 NOT NULL,
  [amtLimit] int DEFAULT 99900 NOT NULL,
  [amtSum] int DEFAULT 0 NOT NULL,
  [chgDate] datetime DEFAULT getdate() NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userCashDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userCashDB
-- ----------------------------

-- ----------------------------
-- Table structure for userCharacterDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userCharacterDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userCharacterDB]
GO

CREATE TABLE [dbo].[userCharacterDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [ClassType] int DEFAULT 0 NOT NULL,
  [CI_type] int DEFAULT 0 NOT NULL,
  [CI_gender] int DEFAULT 0 NOT NULL,
  [CI_beard] int DEFAULT 0 NOT NULL,
  [CI_face] int DEFAULT 0 NOT NULL,
  [CI_hair] int DEFAULT 0 NOT NULL,
  [CI_skinColor] int DEFAULT 0 NOT NULL,
  [CI_hairColor] int DEFAULT 0 NOT NULL,
  [CI_trinket] int DEFAULT 0 NOT NULL,
  [CI_position] int DEFAULT -1 NOT NULL,
  [CI_underwear] int DEFAULT 0 NOT NULL,
  [EI1_type] int DEFAULT 0 NOT NULL,
  [EI2_type] int DEFAULT 0 NOT NULL,
  [EI3_type] int DEFAULT 0 NOT NULL,
  [EI4_type] int DEFAULT 0 NOT NULL,
  [limitTime] int DEFAULT 0 NOT NULL,
  [limitType] int DEFAULT 0 NOT NULL,
  [leaderType] smallint DEFAULT 0 NOT NULL,
  [rentalType] smallint DEFAULT 0 NOT NULL,
  [rentalTime] int DEFAULT 0 NOT NULL,
  [awakeType] tinyint DEFAULT 0 NOT NULL,
  [awakeTime] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userCharacterDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userCharacterDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userCharacterDB] ON
GO

SET IDENTITY_INSERT [dbo].[userCharacterDB] OFF
GO


-- ----------------------------
-- Table structure for userClassDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userClassDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userClassDB]
GO

CREATE TABLE [dbo].[userClassDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [class1_type] int DEFAULT 0 NOT NULL,
  [class1_level] int DEFAULT 0 NOT NULL,
  [class1_expert] int DEFAULT 0 NOT NULL,
  [class1_stat] tinyint DEFAULT 0 NOT NULL,
  [class2_type] int DEFAULT 0 NOT NULL,
  [class2_level] int DEFAULT 0 NOT NULL,
  [class2_expert] int DEFAULT 0 NOT NULL,
  [class2_stat] tinyint DEFAULT 0 NOT NULL,
  [class3_type] int DEFAULT 0 NOT NULL,
  [class3_level] int DEFAULT 0 NOT NULL,
  [class3_expert] int DEFAULT 0 NOT NULL,
  [class3_stat] tinyint DEFAULT 0 NOT NULL,
  [class4_type] int DEFAULT 0 NOT NULL,
  [class4_level] int DEFAULT 0 NOT NULL,
  [class4_expert] int DEFAULT 0 NOT NULL,
  [class4_stat] tinyint DEFAULT 0 NOT NULL,
  [class5_type] int DEFAULT 0 NOT NULL,
  [class5_level] int DEFAULT 0 NOT NULL,
  [class5_expert] int DEFAULT 0 NOT NULL,
  [class5_stat] tinyint DEFAULT 0 NOT NULL,
  [class6_type] int DEFAULT 0 NOT NULL,
  [class6_level] int DEFAULT 0 NOT NULL,
  [class6_expert] int DEFAULT 0 NOT NULL,
  [class6_stat] tinyint DEFAULT 0 NOT NULL,
  [class7_type] int DEFAULT 0 NOT NULL,
  [class7_level] int DEFAULT 0 NOT NULL,
  [class7_expert] int DEFAULT 0 NOT NULL,
  [class7_stat] tinyint DEFAULT 0 NOT NULL,
  [class8_type] int DEFAULT 0 NOT NULL,
  [class8_level] int DEFAULT 0 NOT NULL,
  [class8_expert] int DEFAULT 0 NOT NULL,
  [class8_stat] tinyint DEFAULT 0 NOT NULL,
  [class9_type] int DEFAULT 0 NOT NULL,
  [class9_level] int DEFAULT 0 NOT NULL,
  [class9_expert] int DEFAULT 0 NOT NULL,
  [class9_stat] tinyint DEFAULT 0 NOT NULL,
  [class10_type] int DEFAULT 0 NOT NULL,
  [class10_level] int DEFAULT 0 NOT NULL,
  [class10_expert] int DEFAULT 0 NOT NULL,
  [class10_stat] tinyint DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userClassDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userClassDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userClassDB] ON
GO

SET IDENTITY_INSERT [dbo].[userClassDB] OFF
GO


-- ----------------------------
-- Table structure for userCloverDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userCloverDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userCloverDB]
GO

CREATE TABLE [dbo].[userCloverDB] (
  [accountIDX] int  NOT NULL,
  [CloverCnt] int DEFAULT 0 NOT NULL,
  [LastChargeDate] int DEFAULT 0 NOT NULL,
  [RemainTime] smallint DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userCloverDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userCloverDB
-- ----------------------------

-- ----------------------------
-- Table structure for userCoinDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userCoinDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userCoinDB]
GO

CREATE TABLE [dbo].[userCoinDB] (
  [AccountIDX] int  NOT NULL,
  [UpdateDate] datetime  NOT NULL,
  [CoinType] tinyint DEFAULT 0 NOT NULL,
  [RegDate] datetime DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userCoinDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userCoinDB
-- ----------------------------

-- ----------------------------
-- Table structure for userConfigDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userConfigDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userConfigDB]
GO

CREATE TABLE [dbo].[userConfigDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [keyvalue] varchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userConfigDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userConfigDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userConfigDB] ON
GO

SET IDENTITY_INSERT [dbo].[userConfigDB] OFF
GO


-- ----------------------------
-- Table structure for userConfigDB_TEST
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userConfigDB_TEST]') AND type IN ('U'))
	DROP TABLE [dbo].[userConfigDB_TEST]
GO

CREATE TABLE [dbo].[userConfigDB_TEST] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [keyvalue] varchar(200) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userConfigDB_TEST] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userConfigDB_TEST
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userConfigDB_TEST] ON
GO

SET IDENTITY_INSERT [dbo].[userConfigDB_TEST] OFF
GO


-- ----------------------------
-- Table structure for userCooperationDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userCooperationDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userCooperationDB]
GO

CREATE TABLE [dbo].[userCooperationDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [userID] varchar(12) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [cpIDX] int DEFAULT 0 NULL,
  [cpID] varchar(32) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [cpType] int  NOT NULL,
  [note] varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userCooperationDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userCooperationDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userCooperationDB] ON
GO

SET IDENTITY_INSERT [dbo].[userCooperationDB] OFF
GO


-- ----------------------------
-- Table structure for userCostumeDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userCostumeDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userCostumeDB]
GO

CREATE TABLE [dbo].[userCostumeDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [itemCode] int DEFAULT 0 NOT NULL,
  [mcustom] int DEFAULT 0 NOT NULL,
  [fcustom] int DEFAULT 0 NOT NULL,
  [periodType] tinyint DEFAULT 0 NOT NULL,
  [periodDate] datetime DEFAULT '1999-01-01' NOT NULL,
  [classType] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userCostumeDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userCostumeDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userCostumeDB] ON
GO

SET IDENTITY_INSERT [dbo].[userCostumeDB] OFF
GO


-- ----------------------------
-- Table structure for userCustomMedalDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userCustomMedalDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userCustomMedalDB]
GO

CREATE TABLE [dbo].[userCustomMedalDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [AccountIDX] int DEFAULT 0 NOT NULL,
  [MedalCode] int DEFAULT 0 NOT NULL,
  [BasicGrowth1] int DEFAULT 0 NOT NULL,
  [BasicGrowth2] int DEFAULT 0 NOT NULL,
  [BasicGrowth3] int DEFAULT 0 NOT NULL,
  [BasicGrowth4] int DEFAULT 0 NOT NULL,
  [SkillGrowth1] int DEFAULT 0 NOT NULL,
  [SkillGrowth2] int DEFAULT 0 NOT NULL,
  [SkillGrowth3] int DEFAULT 0 NOT NULL,
  [SkillGrowth4] int DEFAULT 0 NOT NULL,
  [SetCharaterNum] int DEFAULT 0 NOT NULL,
  [LimitType] int DEFAULT 0 NOT NULL,
  [LimitDate] datetime DEFAULT getdate() NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userCustomMedalDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userCustomMedalDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userCustomMedalDB] ON
GO

SET IDENTITY_INSERT [dbo].[userCustomMedalDB] OFF
GO


-- ----------------------------
-- Table structure for userDiceGameDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userDiceGameDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userDiceGameDB]
GO

CREATE TABLE [dbo].[userDiceGameDB] (
  [AccountIDX] int  NOT NULL,
  [Position] int  NOT NULL,
  [Trace01] int  NOT NULL,
  [Trace02] int  NOT NULL,
  [Trace03] int  NOT NULL,
  [Trace04] int  NOT NULL,
  [Trace05] int  NOT NULL,
  [Trace06] int  NOT NULL,
  [Board] tinyint  NOT NULL,
  [RewardStep01] int  NOT NULL,
  [RewardStep02] int  NOT NULL,
  [RewardStep03] int  NOT NULL,
  [RewardStep04] int  NOT NULL,
  [RewardStep05] int  NOT NULL,
  [RewardStep06] int  NOT NULL,
  [RewardStep07] int  NOT NULL,
  [RewardStep08] int  NOT NULL,
  [RewardStep09] int  NOT NULL,
  [RewardStep10] int  NOT NULL,
  [UpdateTime] datetime  NULL,
  [RegDate] datetime  NULL
)
GO

ALTER TABLE [dbo].[userDiceGameDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userDiceGameDB
-- ----------------------------

-- ----------------------------
-- Table structure for userEventBingo_Number
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userEventBingo_Number]') AND type IN ('U'))
	DROP TABLE [dbo].[userEventBingo_Number]
GO

CREATE TABLE [dbo].[userEventBingo_Number] (
  [accountidx] int  NOT NULL,
  [number1] tinyint  NOT NULL,
  [number2] tinyint  NOT NULL,
  [number3] tinyint  NOT NULL,
  [number4] tinyint  NOT NULL,
  [number5] tinyint  NOT NULL,
  [number6] tinyint  NOT NULL,
  [number7] tinyint  NOT NULL,
  [number8] tinyint  NOT NULL,
  [number9] tinyint  NOT NULL,
  [number10] tinyint  NOT NULL,
  [number11] tinyint  NOT NULL,
  [number12] tinyint  NOT NULL,
  [number13] tinyint  NOT NULL,
  [number14] tinyint  NOT NULL,
  [number15] tinyint  NOT NULL,
  [number16] tinyint  NOT NULL,
  [number17] tinyint  NOT NULL,
  [number18] tinyint  NOT NULL,
  [number19] tinyint  NOT NULL,
  [number20] tinyint  NOT NULL,
  [number21] tinyint  NOT NULL,
  [number22] tinyint  NOT NULL,
  [number23] tinyint  NOT NULL,
  [number24] tinyint  NOT NULL,
  [number25] tinyint  NOT NULL,
  [regDate] datetime  NOT NULL
)
GO

ALTER TABLE [dbo].[userEventBingo_Number] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userEventBingo_Number
-- ----------------------------

-- ----------------------------
-- Table structure for userEventBingo_Present
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userEventBingo_Present]') AND type IN ('U'))
	DROP TABLE [dbo].[userEventBingo_Present]
GO

CREATE TABLE [dbo].[userEventBingo_Present] (
  [accountidx] int  NOT NULL,
  [item1] tinyint  NOT NULL,
  [item2] tinyint  NOT NULL,
  [item3] tinyint  NOT NULL,
  [item4] tinyint  NOT NULL,
  [item5] tinyint  NOT NULL,
  [item6] tinyint  NOT NULL,
  [item7] tinyint  NOT NULL,
  [item8] tinyint  NOT NULL,
  [item9] tinyint  NOT NULL,
  [item10] tinyint  NOT NULL,
  [item11] tinyint  NOT NULL,
  [item12] tinyint  NOT NULL,
  [item13] tinyint  NOT NULL,
  [regDate] datetime  NOT NULL
)
GO

ALTER TABLE [dbo].[userEventBingo_Present] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userEventBingo_Present
-- ----------------------------

-- ----------------------------
-- Table structure for userEventDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userEventDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userEventDB]
GO

CREATE TABLE [dbo].[userEventDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [value1] int DEFAULT 0 NOT NULL,
  [value2] int DEFAULT 0 NOT NULL,
  [eventType] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userEventDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userEventDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userEventDB] ON
GO

SET IDENTITY_INSERT [dbo].[userEventDB] OFF
GO


-- ----------------------------
-- Table structure for userEventPirateRoulette_Number
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userEventPirateRoulette_Number]') AND type IN ('U'))
	DROP TABLE [dbo].[userEventPirateRoulette_Number]
GO

CREATE TABLE [dbo].[userEventPirateRoulette_Number] (
  [accountidx] int  NOT NULL,
  [HP] int  NOT NULL,
  [slot1] tinyint DEFAULT 0 NOT NULL,
  [slot2] tinyint DEFAULT 0 NOT NULL,
  [slot3] tinyint DEFAULT 0 NOT NULL,
  [slot4] tinyint DEFAULT 0 NOT NULL,
  [slot5] tinyint DEFAULT 0 NOT NULL,
  [slot6] tinyint DEFAULT 0 NOT NULL,
  [slot7] tinyint DEFAULT 0 NOT NULL,
  [slot8] tinyint DEFAULT 0 NOT NULL,
  [slot9] tinyint DEFAULT 0 NOT NULL,
  [slot10] tinyint DEFAULT 0 NOT NULL,
  [slot11] tinyint DEFAULT 0 NOT NULL,
  [slot12] tinyint DEFAULT 0 NOT NULL,
  [slot13] tinyint DEFAULT 0 NOT NULL,
  [slot14] tinyint DEFAULT 0 NOT NULL,
  [slot15] tinyint DEFAULT 0 NOT NULL,
  [slot16] tinyint DEFAULT 0 NOT NULL,
  [slot17] tinyint DEFAULT 0 NOT NULL,
  [slot18] tinyint DEFAULT 0 NOT NULL,
  [slot19] tinyint DEFAULT 0 NOT NULL,
  [slot20] tinyint DEFAULT 0 NOT NULL,
  [slot21] tinyint DEFAULT 0 NOT NULL,
  [slot22] tinyint DEFAULT 0 NOT NULL,
  [slot23] tinyint DEFAULT 0 NOT NULL,
  [slot24] tinyint DEFAULT 0 NOT NULL,
  [slot25] tinyint DEFAULT 0 NOT NULL,
  [slot26] tinyint DEFAULT 0 NOT NULL,
  [slot27] tinyint DEFAULT 0 NOT NULL,
  [slot28] tinyint DEFAULT 0 NOT NULL,
  [slot29] tinyint DEFAULT 0 NOT NULL,
  [slot30] tinyint DEFAULT 0 NOT NULL,
  [slot31] tinyint DEFAULT 0 NOT NULL,
  [slot32] tinyint DEFAULT 0 NOT NULL,
  [slot33] tinyint DEFAULT 0 NOT NULL,
  [slot34] tinyint DEFAULT 0 NOT NULL,
  [slot35] tinyint DEFAULT 0 NOT NULL,
  [slot36] tinyint DEFAULT 0 NOT NULL,
  [slot37] tinyint DEFAULT 0 NOT NULL,
  [slot38] tinyint DEFAULT 0 NOT NULL,
  [slot39] tinyint DEFAULT 0 NOT NULL,
  [slot40] tinyint DEFAULT 0 NOT NULL,
  [regDate] datetime  NOT NULL
)
GO

ALTER TABLE [dbo].[userEventPirateRoulette_Number] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userEventPirateRoulette_Number
-- ----------------------------

-- ----------------------------
-- Table structure for userEventPirateRoulette_Present
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userEventPirateRoulette_Present]') AND type IN ('U'))
	DROP TABLE [dbo].[userEventPirateRoulette_Present]
GO

CREATE TABLE [dbo].[userEventPirateRoulette_Present] (
  [accountidx] int  NOT NULL,
  [reward1] tinyint DEFAULT 0 NOT NULL,
  [reward2] tinyint DEFAULT 0 NOT NULL,
  [reward3] tinyint DEFAULT 0 NOT NULL,
  [reward4] tinyint DEFAULT 0 NOT NULL,
  [reward5] tinyint DEFAULT 0 NOT NULL,
  [reward6] tinyint DEFAULT 0 NOT NULL,
  [reward7] tinyint DEFAULT 0 NOT NULL,
  [reward8] tinyint DEFAULT 0 NOT NULL,
  [reward9] tinyint DEFAULT 0 NOT NULL,
  [reward10] tinyint DEFAULT 0 NOT NULL,
  [reward11] tinyint DEFAULT 0 NOT NULL,
  [reward12] tinyint DEFAULT 0 NOT NULL,
  [reward13] tinyint DEFAULT 0 NOT NULL,
  [reward14] tinyint DEFAULT 0 NOT NULL,
  [reward15] tinyint DEFAULT 0 NOT NULL,
  [regDate] datetime  NOT NULL
)
GO

ALTER TABLE [dbo].[userEventPirateRoulette_Present] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userEventPirateRoulette_Present
-- ----------------------------

-- ----------------------------
-- Table structure for userFishDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userFishDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userFishDB]
GO

CREATE TABLE [dbo].[userFishDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [fish1_type] tinyint DEFAULT 0 NOT NULL,
  [fish1_an] int DEFAULT 0 NOT NULL,
  [fish2_type] tinyint DEFAULT 0 NOT NULL,
  [fish2_an] int DEFAULT 0 NOT NULL,
  [fish3_type] tinyint DEFAULT 0 NOT NULL,
  [fish3_an] int DEFAULT 0 NOT NULL,
  [fish4_type] tinyint DEFAULT 0 NOT NULL,
  [fish4_an] int DEFAULT 0 NOT NULL,
  [fish5_type] tinyint DEFAULT 0 NOT NULL,
  [fish5_an] int DEFAULT 0 NOT NULL,
  [fish6_type] tinyint DEFAULT 0 NOT NULL,
  [fish6_an] int DEFAULT 0 NOT NULL,
  [fish7_type] tinyint DEFAULT 0 NOT NULL,
  [fish7_an] int DEFAULT 0 NOT NULL,
  [fish8_type] tinyint DEFAULT 0 NOT NULL,
  [fish8_an] int DEFAULT 0 NOT NULL,
  [fish9_type] tinyint DEFAULT 0 NOT NULL,
  [fish9_an] int DEFAULT 0 NOT NULL,
  [fish10_type] tinyint DEFAULT 0 NOT NULL,
  [fish10_an] int DEFAULT 0 NOT NULL,
  [fish11_type] tinyint DEFAULT 0 NOT NULL,
  [fish11_an] int DEFAULT 0 NOT NULL,
  [fish12_type] tinyint DEFAULT 0 NOT NULL,
  [fish12_an] int DEFAULT 0 NOT NULL,
  [fish13_type] tinyint DEFAULT 0 NOT NULL,
  [fish13_an] int DEFAULT 0 NOT NULL,
  [fish14_type] tinyint DEFAULT 0 NOT NULL,
  [fish14_an] int DEFAULT 0 NOT NULL,
  [fish15_type] tinyint DEFAULT 0 NOT NULL,
  [fish15_an] int DEFAULT 0 NOT NULL,
  [fish16_type] tinyint DEFAULT 0 NOT NULL,
  [fish16_an] int DEFAULT 0 NOT NULL,
  [fish17_type] tinyint DEFAULT 0 NOT NULL,
  [fish17_an] int DEFAULT 0 NOT NULL,
  [fish18_type] tinyint DEFAULT 0 NOT NULL,
  [fish18_an] int DEFAULT 0 NOT NULL,
  [fish19_type] tinyint DEFAULT 0 NOT NULL,
  [fish19_an] int DEFAULT 0 NOT NULL,
  [fish20_type] tinyint DEFAULT 0 NOT NULL,
  [fish20_an] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userFishDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userFishDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userFishDB] ON
GO

SET IDENTITY_INSERT [dbo].[userFishDB] OFF
GO


-- ----------------------------
-- Table structure for userFriendBestDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userFriendBestDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userFriendBestDB]
GO

CREATE TABLE [dbo].[userFriendBestDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [friendIDX] int  NOT NULL,
  [flag] int DEFAULT 0 NOT NULL,
  [flagTime] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userFriendBestDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userFriendBestDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userFriendBestDB] ON
GO

SET IDENTITY_INSERT [dbo].[userFriendBestDB] OFF
GO


-- ----------------------------
-- Table structure for userFriendDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userFriendDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userFriendDB]
GO

CREATE TABLE [dbo].[userFriendDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [userAccIDX] int  NOT NULL,
  [friendAccIDX] int  NOT NULL,
  [sendCloverCnt] int DEFAULT 0 NOT NULL,
  [sendCloverDate] int DEFAULT 0 NOT NULL,
  [receiveCloverCnt] int DEFAULT 0 NOT NULL,
  [receiveCloverDate] int DEFAULT 0 NOT NULL,
  [receiveBCloverCnt] int DEFAULT 0 NOT NULL,
  [flag] tinyint DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userFriendDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userFriendDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userFriendDB] ON
GO

SET IDENTITY_INSERT [dbo].[userFriendDB] OFF
GO


-- ----------------------------
-- Table structure for userGameDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userGameDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userGameDB]
GO

CREATE TABLE [dbo].[userGameDB] (
  [accountIDX] int  NOT NULL,
  [userState] int DEFAULT 0 NOT NULL,
  [gameMoney] bigint DEFAULT 0 NOT NULL,
  [playTime] int DEFAULT 0 NOT NULL,
  [conn_count] int DEFAULT 0 NOT NULL,
  [userLevel] int DEFAULT 0 NOT NULL,
  [userEXP] int DEFAULT 0 NOT NULL,
  [userFishingLevel] int DEFAULT 0 NOT NULL,
  [userFishingEXP] int DEFAULT 0 NOT NULL,
  [userExcavationLevel] int DEFAULT 0 NOT NULL,
  [userExcavationEXP] int DEFAULT 0 NOT NULL,
  [userHerocEXP] int DEFAULT 0 NOT NULL,
  [userHerosEXP] int DEFAULT 0 NOT NULL,
  [rencpoint] int DEFAULT 0 NOT NULL,
  [renspoint] int DEFAULT 0 NOT NULL,
  [relateLevel] int DEFAULT 0 NOT NULL,
  [regionType] int DEFAULT 0 NOT NULL,
  [refillData] int DEFAULT 0 NOT NULL,
  [connDate] datetime DEFAULT getdate() NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL,
  [Practice] smallint DEFAULT 1 NOT NULL
)
GO

ALTER TABLE [dbo].[userGameDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userGameDB
-- ----------------------------

-- ----------------------------
-- Table structure for userGoldDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userGoldDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userGoldDB]
GO

CREATE TABLE [dbo].[userGoldDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [AccountIDX] int  NOT NULL,
  [OriginalAmount] int DEFAULT 0 NOT NULL,
  [Amount] int DEFAULT 0 NOT NULL,
  [GoldType] tinyint DEFAULT 1 NOT NULL,
  [GoldStatus] tinyint DEFAULT 0 NOT NULL,
  [ExpirationDate] datetime DEFAULT getdate() NOT NULL,
  [RegDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userGoldDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userGoldDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userGoldDB] ON
GO

SET IDENTITY_INSERT [dbo].[userGoldDB] OFF
GO


-- ----------------------------
-- Table structure for userGuildAttendDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userGuildAttendDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userGuildAttendDB]
GO

CREATE TABLE [dbo].[userGuildAttendDB] (
  [InitDate] datetime  NOT NULL,
  [AccountIDX] int  NOT NULL,
  [GuildIDX] int  NOT NULL,
  [RegDate] datetime  NOT NULL
)
GO

ALTER TABLE [dbo].[userGuildAttendDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userGuildAttendDB
-- ----------------------------

-- ----------------------------
-- Table structure for userGuildDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userGuildDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userGuildDB]
GO

CREATE TABLE [dbo].[userGuildDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [guildName] varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [aboutguild] varchar(110) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [guildmark] int  NOT NULL,
  [ranking] int DEFAULT 0 NOT NULL,
  [point] int DEFAULT 0 NOT NULL,
  [todaypoint] int DEFAULT 0 NOT NULL,
  [guildLevel] int DEFAULT 0 NOT NULL,
  [maxcount] int DEFAULT 0 NOT NULL,
  [membercount] int DEFAULT 0 NOT NULL,
  [today_vc] int DEFAULT 0 NOT NULL,
  [total_vc] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userGuildDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userGuildDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userGuildDB] ON
GO

SET IDENTITY_INSERT [dbo].[userGuildDB] OFF
GO


-- ----------------------------
-- Table structure for userGuildHQDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userGuildHQDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userGuildHQDB]
GO

CREATE TABLE [dbo].[userGuildHQDB] (
  [GuildIDX] int  NOT NULL,
  [ItemSerial] bigint  IDENTITY(1,1) NOT NULL,
  [ItemCode] int  NOT NULL,
  [ItemXZ] int DEFAULT 0 NOT NULL,
  [ItemY] int DEFAULT 0 NOT NULL,
  [ItemRotate] tinyint DEFAULT 0 NOT NULL,
  [ItemDecoScore] int DEFAULT 0 NOT NULL,
  [ItemStatus] tinyint DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userGuildHQDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userGuildHQDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userGuildHQDB] ON
GO

SET IDENTITY_INSERT [dbo].[userGuildHQDB] OFF
GO


-- ----------------------------
-- Table structure for userGuildHQVerDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userGuildHQVerDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userGuildHQVerDB]
GO

CREATE TABLE [dbo].[userGuildHQVerDB] (
  [GuildIDX] int  NOT NULL,
  [VerStatus] bigint DEFAULT 0 NOT NULL,
  [UptDate] datetime DEFAULT 0 NOT NULL,
  [RegDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userGuildHQVerDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userGuildHQVerDB
-- ----------------------------

-- ----------------------------
-- Table structure for userGuildInfoDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userGuildInfoDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userGuildInfoDB]
GO

CREATE TABLE [dbo].[userGuildInfoDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [guildIDX] int  NOT NULL,
  [guildPosition] nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [guildJoinType] int DEFAULT 0 NOT NULL,
  [msg] int DEFAULT 0 NOT NULL,
  [AttendDate] datetime DEFAULT 0 NOT NULL,
  [GuildRankDate] datetime DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userGuildInfoDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userGuildInfoDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userGuildInfoDB] ON
GO

SET IDENTITY_INSERT [dbo].[userGuildInfoDB] OFF
GO


-- ----------------------------
-- Table structure for userHqDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userHqDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userHqDB]
GO

CREATE TABLE [dbo].[userHqDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [class1_type] int DEFAULT 0 NOT NULL,
  [class1_posx] int DEFAULT 0 NOT NULL,
  [class1_posy] int DEFAULT 0 NOT NULL,
  [class2_type] int DEFAULT 0 NOT NULL,
  [class2_posx] int DEFAULT 0 NOT NULL,
  [class2_posy] int DEFAULT 0 NOT NULL,
  [class3_type] int DEFAULT 0 NOT NULL,
  [class3_posx] int DEFAULT 0 NOT NULL,
  [class3_posy] int DEFAULT 0 NOT NULL,
  [class4_type] int DEFAULT 0 NOT NULL,
  [class4_posx] int DEFAULT 0 NOT NULL,
  [class4_posy] int DEFAULT 0 NOT NULL,
  [class5_type] int DEFAULT 0 NOT NULL,
  [class5_posx] int DEFAULT 0 NOT NULL,
  [class5_posy] int DEFAULT 0 NOT NULL,
  [class6_type] int DEFAULT 0 NOT NULL,
  [class6_posx] int DEFAULT 0 NOT NULL,
  [class6_posy] int DEFAULT 0 NOT NULL,
  [class7_type] int DEFAULT 0 NOT NULL,
  [class7_posx] int DEFAULT 0 NOT NULL,
  [class7_posy] int DEFAULT 0 NOT NULL,
  [class8_type] int DEFAULT 0 NOT NULL,
  [class8_posx] int DEFAULT 0 NOT NULL,
  [class8_posy] int DEFAULT 0 NOT NULL,
  [class9_type] int DEFAULT 0 NOT NULL,
  [class9_posx] int DEFAULT 0 NOT NULL,
  [class9_posy] int DEFAULT 0 NOT NULL,
  [class10_type] int DEFAULT 0 NOT NULL,
  [class10_posx] int DEFAULT 0 NOT NULL,
  [class10_posy] int DEFAULT 0 NOT NULL,
  [lockType] smallint DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userHqDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userHqDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userHqDB] ON
GO

SET IDENTITY_INSERT [dbo].[userHqDB] OFF
GO


-- ----------------------------
-- Table structure for userInfoBDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userInfoBDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userInfoBDB]
GO

CREATE TABLE [dbo].[userInfoBDB] (
  [accountIDX] int  NOT NULL,
  [tel] varchar(16) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [mobile] varchar(16) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [zipcode] varchar(8) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [address1] varchar(150) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [address2] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userInfoBDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userInfoBDB
-- ----------------------------

-- ----------------------------
-- Table structure for userInfoDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userInfoDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userInfoDB]
GO

CREATE TABLE [dbo].[userInfoDB] (
  [accountIDX] int  NOT NULL,
  [visit_count] int  NOT NULL,
  [checkDate] datetime  NOT NULL,
  [rec_index] int  NOT NULL,
  [rec_inc] int  NOT NULL,
  [rec_dec] int  NOT NULL,
  [cnnDate] datetime DEFAULT getdate() NOT NULL,
  [clickDate] datetime  NULL,
  [userIP] varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userInfoDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userInfoDB
-- ----------------------------

-- ----------------------------
-- Table structure for userItemDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userItemDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userItemDB]
GO

CREATE TABLE [dbo].[userItemDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [item1_type] int DEFAULT 0 NOT NULL,
  [item1_code] int DEFAULT 0 NOT NULL,
  [item2_type] int DEFAULT 0 NOT NULL,
  [item2_code] int DEFAULT 0 NOT NULL,
  [item3_type] int DEFAULT 0 NOT NULL,
  [item3_code] int DEFAULT 0 NOT NULL,
  [item4_type] int DEFAULT 0 NOT NULL,
  [item4_code] int DEFAULT 0 NOT NULL,
  [item5_type] int DEFAULT 0 NOT NULL,
  [item5_code] int DEFAULT 0 NOT NULL,
  [item6_type] int DEFAULT 0 NOT NULL,
  [item6_code] int DEFAULT 0 NOT NULL,
  [item7_type] int DEFAULT 0 NOT NULL,
  [item7_code] int DEFAULT 0 NOT NULL,
  [item8_type] int DEFAULT 0 NOT NULL,
  [item8_code] int DEFAULT 0 NOT NULL,
  [item9_type] int DEFAULT 0 NOT NULL,
  [item9_code] int DEFAULT 0 NOT NULL,
  [item10_type] int DEFAULT 0 NOT NULL,
  [item10_code] int DEFAULT 0 NOT NULL,
  [item11_type] int DEFAULT 0 NOT NULL,
  [item11_code] int DEFAULT 0 NOT NULL,
  [item12_type] int DEFAULT 0 NOT NULL,
  [item12_code] int DEFAULT 0 NOT NULL,
  [item13_type] int DEFAULT 0 NOT NULL,
  [item13_code] int DEFAULT 0 NOT NULL,
  [item14_type] int DEFAULT 0 NOT NULL,
  [item14_code] int DEFAULT 0 NOT NULL,
  [item15_type] int DEFAULT 0 NOT NULL,
  [item15_code] int DEFAULT 0 NOT NULL,
  [item16_type] int DEFAULT 0 NOT NULL,
  [item16_code] int DEFAULT 0 NOT NULL,
  [item17_type] int DEFAULT 0 NOT NULL,
  [item17_code] int DEFAULT 0 NOT NULL,
  [item18_type] int DEFAULT 0 NOT NULL,
  [item18_code] int DEFAULT 0 NOT NULL,
  [item19_type] int DEFAULT 0 NOT NULL,
  [item19_code] int DEFAULT 0 NOT NULL,
  [item20_type] int DEFAULT 0 NOT NULL,
  [item20_code] int DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userItemDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userItemDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userItemDB] ON
GO

SET IDENTITY_INSERT [dbo].[userItemDB] OFF
GO


-- ----------------------------
-- Table structure for userItemEtcDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userItemEtcDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userItemEtcDB]
GO

CREATE TABLE [dbo].[userItemEtcDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [item1_type] int DEFAULT 0 NOT NULL,
  [item1_value1] int DEFAULT 0 NOT NULL,
  [item1_value2] int DEFAULT 0 NOT NULL,
  [item2_type] int DEFAULT 0 NOT NULL,
  [item2_value1] int DEFAULT 0 NOT NULL,
  [item2_value2] int DEFAULT 0 NOT NULL,
  [item3_type] int DEFAULT 0 NOT NULL,
  [item3_value1] int DEFAULT 0 NOT NULL,
  [item3_value2] int DEFAULT 0 NOT NULL,
  [item4_type] int DEFAULT 0 NOT NULL,
  [item4_value1] int DEFAULT 0 NOT NULL,
  [item4_value2] int DEFAULT 0 NOT NULL,
  [item5_type] int DEFAULT 0 NOT NULL,
  [item5_value1] int DEFAULT 0 NOT NULL,
  [item5_value2] int DEFAULT 0 NOT NULL,
  [item6_type] int DEFAULT 0 NOT NULL,
  [item6_value1] int DEFAULT 0 NOT NULL,
  [item6_value2] int DEFAULT 0 NOT NULL,
  [item7_type] int DEFAULT 0 NOT NULL,
  [item7_value1] int DEFAULT 0 NOT NULL,
  [item7_value2] int DEFAULT 0 NOT NULL,
  [item8_type] int DEFAULT 0 NOT NULL,
  [item8_value1] int DEFAULT 0 NOT NULL,
  [item8_value2] int DEFAULT 0 NOT NULL,
  [item9_type] int DEFAULT 0 NOT NULL,
  [item9_value1] int DEFAULT 0 NOT NULL,
  [item9_value2] int DEFAULT 0 NOT NULL,
  [item10_type] int DEFAULT 0 NOT NULL,
  [item10_value1] int DEFAULT 0 NOT NULL,
  [item10_value2] int DEFAULT 0 NOT NULL,
  [item11_type] int DEFAULT 0 NOT NULL,
  [item11_value1] int DEFAULT 0 NOT NULL,
  [item11_value2] int DEFAULT 0 NOT NULL,
  [item12_type] int DEFAULT 0 NOT NULL,
  [item12_value1] int DEFAULT 0 NOT NULL,
  [item12_value2] int DEFAULT 0 NOT NULL,
  [item13_type] int DEFAULT 0 NOT NULL,
  [item13_value1] int DEFAULT 0 NOT NULL,
  [item13_value2] int DEFAULT 0 NOT NULL,
  [item14_type] int DEFAULT 0 NOT NULL,
  [item14_value1] int DEFAULT 0 NOT NULL,
  [item14_value2] int DEFAULT 0 NOT NULL,
  [item15_type] int DEFAULT 0 NOT NULL,
  [item15_value1] int DEFAULT 0 NOT NULL,
  [item15_value2] int DEFAULT 0 NOT NULL,
  [item16_type] int DEFAULT 0 NOT NULL,
  [item16_value1] int DEFAULT 0 NOT NULL,
  [item16_value2] int DEFAULT 0 NOT NULL,
  [item17_type] int DEFAULT 0 NOT NULL,
  [item17_value1] int DEFAULT 0 NOT NULL,
  [item17_value2] int DEFAULT 0 NOT NULL,
  [item18_type] int DEFAULT 0 NOT NULL,
  [item18_value1] int DEFAULT 0 NOT NULL,
  [item18_value2] int DEFAULT 0 NOT NULL,
  [item19_type] int DEFAULT 0 NOT NULL,
  [item19_value1] int DEFAULT 0 NOT NULL,
  [item19_value2] int DEFAULT 0 NOT NULL,
  [item20_type] int DEFAULT 0 NOT NULL,
  [item20_value1] int DEFAULT 0 NOT NULL,
  [item20_value2] int DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userItemEtcDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userItemEtcDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userItemEtcDB] ON
GO

SET IDENTITY_INSERT [dbo].[userItemEtcDB] OFF
GO


-- ----------------------------
-- Table structure for userItemExtraDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userItemExtraDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userItemExtraDB]
GO

CREATE TABLE [dbo].[userItemExtraDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [item1_type] int DEFAULT 0 NOT NULL,
  [item1_reinforce] int DEFAULT 0 NOT NULL,
  [item1_slotindex] int DEFAULT 0 NOT NULL,
  [item1_tradetype] int DEFAULT 0 NOT NULL,
  [item1_mcustom] int DEFAULT 0 NOT NULL,
  [item1_fcustom] int DEFAULT 0 NOT NULL,
  [item1_failexp] smallint DEFAULT 0 NOT NULL,
  [item1_limitType] int DEFAULT 0 NOT NULL,
  [item1_limitDate] datetime  NOT NULL,
  [item2_type] int DEFAULT 0 NOT NULL,
  [item2_reinforce] int DEFAULT 0 NOT NULL,
  [item2_slotindex] int DEFAULT 0 NOT NULL,
  [item2_tradetype] int DEFAULT 0 NOT NULL,
  [item2_mcustom] int DEFAULT 0 NOT NULL,
  [item2_fcustom] int DEFAULT 0 NOT NULL,
  [item2_failexp] smallint DEFAULT 0 NOT NULL,
  [item2_limitType] int DEFAULT 0 NOT NULL,
  [item2_limitDate] datetime  NOT NULL,
  [item3_type] int DEFAULT 0 NOT NULL,
  [item3_reinforce] int DEFAULT 0 NOT NULL,
  [item3_slotindex] int DEFAULT 0 NOT NULL,
  [item3_tradetype] int DEFAULT 0 NOT NULL,
  [item3_mcustom] int DEFAULT 0 NOT NULL,
  [item3_fcustom] int DEFAULT 0 NOT NULL,
  [item3_failexp] smallint DEFAULT 0 NOT NULL,
  [item3_limitType] int DEFAULT 0 NOT NULL,
  [item3_limitDate] datetime  NOT NULL,
  [item4_type] int DEFAULT 0 NOT NULL,
  [item4_reinforce] int DEFAULT 0 NOT NULL,
  [item4_slotindex] int DEFAULT 0 NOT NULL,
  [item4_tradetype] int DEFAULT 0 NOT NULL,
  [item4_mcustom] int DEFAULT 0 NOT NULL,
  [item4_fcustom] int DEFAULT 0 NOT NULL,
  [item4_failexp] smallint DEFAULT 0 NOT NULL,
  [item4_limitType] int DEFAULT 0 NOT NULL,
  [item4_limitDate] datetime  NOT NULL,
  [item5_type] int DEFAULT 0 NOT NULL,
  [item5_reinforce] int DEFAULT 0 NOT NULL,
  [item5_slotindex] int DEFAULT 0 NOT NULL,
  [item5_tradetype] int DEFAULT 0 NOT NULL,
  [item5_mcustom] int DEFAULT 0 NOT NULL,
  [item5_fcustom] int DEFAULT 0 NOT NULL,
  [item5_failexp] smallint DEFAULT 0 NOT NULL,
  [item5_limitType] int DEFAULT 0 NOT NULL,
  [item5_limitDate] datetime  NOT NULL,
  [item6_type] int DEFAULT 0 NOT NULL,
  [item6_reinforce] int DEFAULT 0 NOT NULL,
  [item6_slotindex] int DEFAULT 0 NOT NULL,
  [item6_tradetype] int DEFAULT 0 NOT NULL,
  [item6_mcustom] int DEFAULT 0 NOT NULL,
  [item6_fcustom] int DEFAULT 0 NOT NULL,
  [item6_failexp] smallint DEFAULT 0 NOT NULL,
  [item6_limitType] int DEFAULT 0 NOT NULL,
  [item6_limitDate] datetime  NOT NULL,
  [item7_type] int DEFAULT 0 NOT NULL,
  [item7_reinforce] int DEFAULT 0 NOT NULL,
  [item7_slotindex] int DEFAULT 0 NOT NULL,
  [item7_tradetype] int DEFAULT 0 NOT NULL,
  [item7_mcustom] int DEFAULT 0 NOT NULL,
  [item7_fcustom] int DEFAULT 0 NOT NULL,
  [item7_failexp] smallint DEFAULT 0 NOT NULL,
  [item7_limitType] int DEFAULT 0 NOT NULL,
  [item7_limitDate] datetime  NOT NULL,
  [item8_type] int DEFAULT 0 NOT NULL,
  [item8_reinforce] int DEFAULT 0 NOT NULL,
  [item8_slotindex] int DEFAULT 0 NOT NULL,
  [item8_tradetype] int DEFAULT 0 NOT NULL,
  [item8_mcustom] int DEFAULT 0 NOT NULL,
  [item8_fcustom] int DEFAULT 0 NOT NULL,
  [item8_failexp] smallint DEFAULT 0 NOT NULL,
  [item8_limitType] int DEFAULT 0 NOT NULL,
  [item8_limitDate] datetime  NOT NULL,
  [item9_type] int DEFAULT 0 NOT NULL,
  [item9_reinforce] int DEFAULT 0 NOT NULL,
  [item9_slotindex] int DEFAULT 0 NOT NULL,
  [item9_tradetype] int DEFAULT 0 NOT NULL,
  [item9_mcustom] int DEFAULT 0 NOT NULL,
  [item9_fcustom] int DEFAULT 0 NOT NULL,
  [item9_failexp] smallint DEFAULT 0 NOT NULL,
  [item9_limitType] int DEFAULT 0 NOT NULL,
  [item9_limitDate] datetime  NOT NULL,
  [item10_type] int DEFAULT 0 NOT NULL,
  [item10_reinforce] int DEFAULT 0 NOT NULL,
  [item10_slotindex] int DEFAULT 0 NOT NULL,
  [item10_tradetype] int DEFAULT 0 NOT NULL,
  [item10_mcustom] int DEFAULT 0 NOT NULL,
  [item10_fcustom] int DEFAULT 0 NOT NULL,
  [item10_failexp] smallint DEFAULT 0 NOT NULL,
  [item10_limitType] int DEFAULT 0 NOT NULL,
  [item10_limitDate] datetime  NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userItemExtraDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userItemExtraDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userItemExtraDB] ON
GO

SET IDENTITY_INSERT [dbo].[userItemExtraDB] OFF
GO


-- ----------------------------
-- Table structure for userItemMedalDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userItemMedalDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userItemMedalDB]
GO

CREATE TABLE [dbo].[userItemMedalDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [item1_type] int DEFAULT 0 NOT NULL,
  [item1_class] int DEFAULT 0 NOT NULL,
  [item1_limitType] int DEFAULT 0 NOT NULL,
  [item1_limitDate] datetime  NOT NULL,
  [item2_type] int DEFAULT 0 NOT NULL,
  [item2_class] int DEFAULT 0 NOT NULL,
  [item2_limitType] int DEFAULT 0 NOT NULL,
  [item2_limitDate] datetime  NOT NULL,
  [item3_type] int DEFAULT 0 NOT NULL,
  [item3_class] int DEFAULT 0 NOT NULL,
  [item3_limitType] int DEFAULT 0 NOT NULL,
  [item3_limitDate] datetime  NOT NULL,
  [item4_type] int DEFAULT 0 NOT NULL,
  [item4_class] int DEFAULT 0 NOT NULL,
  [item4_limitType] int DEFAULT 0 NOT NULL,
  [item4_limitDate] datetime  NOT NULL,
  [item5_type] int DEFAULT 0 NOT NULL,
  [item5_class] int DEFAULT 0 NOT NULL,
  [item5_limitType] int DEFAULT 0 NOT NULL,
  [item5_limitDate] datetime  NOT NULL,
  [item6_type] int DEFAULT 0 NOT NULL,
  [item6_class] int DEFAULT 0 NOT NULL,
  [item6_limitType] int DEFAULT 0 NOT NULL,
  [item6_limitDate] datetime  NOT NULL,
  [item7_type] int DEFAULT 0 NOT NULL,
  [item7_class] int DEFAULT 0 NOT NULL,
  [item7_limitType] int DEFAULT 0 NOT NULL,
  [item7_limitDate] datetime  NOT NULL,
  [item8_type] int DEFAULT 0 NOT NULL,
  [item8_class] int DEFAULT 0 NOT NULL,
  [item8_limitType] int DEFAULT 0 NOT NULL,
  [item8_limitDate] datetime  NOT NULL,
  [item9_type] int DEFAULT 0 NOT NULL,
  [item9_class] int DEFAULT 0 NOT NULL,
  [item9_limitType] int DEFAULT 0 NOT NULL,
  [item9_limitDate] datetime  NOT NULL,
  [item10_type] int DEFAULT 0 NOT NULL,
  [item10_class] int DEFAULT 0 NOT NULL,
  [item10_limitType] int DEFAULT 0 NOT NULL,
  [item10_limitDate] datetime  NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userItemMedalDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userItemMedalDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userItemMedalDB] ON
GO

SET IDENTITY_INSERT [dbo].[userItemMedalDB] OFF
GO


-- ----------------------------
-- Table structure for userItemMedalExtendDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userItemMedalExtendDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userItemMedalExtendDB]
GO

CREATE TABLE [dbo].[userItemMedalExtendDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [medal1_class] int DEFAULT 0 NOT NULL,
  [medal1_slot] tinyint DEFAULT 0 NOT NULL,
  [medal1_period] int DEFAULT 0 NOT NULL,
  [medal2_class] int DEFAULT 0 NOT NULL,
  [medal2_slot] tinyint DEFAULT 0 NOT NULL,
  [medal2_period] int DEFAULT 0 NOT NULL,
  [medal3_class] int DEFAULT 0 NOT NULL,
  [medal3_slot] tinyint DEFAULT 0 NOT NULL,
  [medal3_period] int DEFAULT 0 NOT NULL,
  [medal4_class] int DEFAULT 0 NOT NULL,
  [medal4_slot] tinyint DEFAULT 0 NOT NULL,
  [medal4_period] int DEFAULT 0 NOT NULL,
  [medal5_class] int DEFAULT 0 NOT NULL,
  [medal5_slot] tinyint DEFAULT 0 NOT NULL,
  [medal5_period] int DEFAULT 0 NOT NULL,
  [medal6_class] int DEFAULT 0 NOT NULL,
  [medal6_slot] tinyint DEFAULT 0 NOT NULL,
  [medal6_period] int DEFAULT 0 NOT NULL,
  [medal7_class] int DEFAULT 0 NOT NULL,
  [medal7_slot] tinyint DEFAULT 0 NOT NULL,
  [medal7_period] int DEFAULT 0 NOT NULL,
  [medal8_class] int DEFAULT 0 NOT NULL,
  [medal8_slot] tinyint DEFAULT 0 NOT NULL,
  [medal8_period] int DEFAULT 0 NOT NULL,
  [medal9_class] int DEFAULT 0 NOT NULL,
  [medal9_slot] tinyint DEFAULT 0 NOT NULL,
  [medal9_period] int DEFAULT 0 NOT NULL,
  [medal10_class] int DEFAULT 0 NOT NULL,
  [medal10_slot] tinyint DEFAULT 0 NOT NULL,
  [medal10_period] int DEFAULT 0 NOT NULL,
  [regDate] nchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userItemMedalExtendDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userItemMedalExtendDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userItemMedalExtendDB] ON
GO

SET IDENTITY_INSERT [dbo].[userItemMedalExtendDB] OFF
GO


-- ----------------------------
-- Table structure for userLeagueAuthDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userLeagueAuthDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userLeagueAuthDB]
GO

CREATE TABLE [dbo].[userLeagueAuthDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [leagueIDX] int  NOT NULL,
  [accountIDX] int  NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userLeagueAuthDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userLeagueAuthDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userLeagueAuthDB] ON
GO

SET IDENTITY_INSERT [dbo].[userLeagueAuthDB] OFF
GO


-- ----------------------------
-- Table structure for userLeagueCheerDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userLeagueCheerDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userLeagueCheerDB]
GO

CREATE TABLE [dbo].[userLeagueCheerDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [leagueIDX] int  NOT NULL,
  [teamIDX] int  NOT NULL,
  [regDate] datetime  NOT NULL
)
GO

ALTER TABLE [dbo].[userLeagueCheerDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userLeagueCheerDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userLeagueCheerDB] ON
GO

SET IDENTITY_INSERT [dbo].[userLeagueCheerDB] OFF
GO


-- ----------------------------
-- Table structure for userLeagueInfoDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userLeagueInfoDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userLeagueInfoDB]
GO

CREATE TABLE [dbo].[userLeagueInfoDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [leagueIDX] int DEFAULT 0 NOT NULL,
  [leagueName] nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [maxRound] smallint  NOT NULL,
  [bannerA] int DEFAULT 0 NOT NULL,
  [bannerB] int DEFAULT 0 NOT NULL,
  [modeType] int DEFAULT 0 NOT NULL,
  [maxcount] tinyint DEFAULT 0 NOT NULL,
  [autoType] tinyint DEFAULT 0 NOT NULL,
  [announce] nvarchar(512) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [recruitDate] int DEFAULT 0 NOT NULL,
  [waitDate] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userLeagueInfoDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userLeagueInfoDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userLeagueInfoDB] ON
GO

SET IDENTITY_INSERT [dbo].[userLeagueInfoDB] OFF
GO


-- ----------------------------
-- Table structure for userLeagueListDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userLeagueListDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userLeagueListDB]
GO

CREATE TABLE [dbo].[userLeagueListDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [startDate] int  NOT NULL,
  [endDate] int  NOT NULL,
  [leagueType] tinyint DEFAULT 0 NOT NULL,
  [leagueState] tinyint DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userLeagueListDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userLeagueListDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userLeagueListDB] ON
GO

SET IDENTITY_INSERT [dbo].[userLeagueListDB] OFF
GO


-- ----------------------------
-- Table structure for userLeagueRewardCheerDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userLeagueRewardCheerDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userLeagueRewardCheerDB]
GO

CREATE TABLE [dbo].[userLeagueRewardCheerDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [rewardPeso] int  NOT NULL,
  [startDate] int  NOT NULL,
  [flag] tinyint DEFAULT 0 NOT NULL,
  [regDate] datetime  NOT NULL
)
GO

ALTER TABLE [dbo].[userLeagueRewardCheerDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userLeagueRewardCheerDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userLeagueRewardCheerDB] ON
GO

SET IDENTITY_INSERT [dbo].[userLeagueRewardCheerDB] OFF
GO


-- ----------------------------
-- Table structure for userLeagueRewardDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userLeagueRewardDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userLeagueRewardDB]
GO

CREATE TABLE [dbo].[userLeagueRewardDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [startDate] int  NOT NULL,
  [currentRound] tinyint DEFAULT 0 NOT NULL,
  [userFactionType] int DEFAULT 0 NOT NULL,
  [winnerFactionType] int DEFAULT 0 NOT NULL,
  [rewardPeso] int DEFAULT 0 NOT NULL,
  [factionRank] int DEFAULT 0 NOT NULL,
  [factionPoint] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userLeagueRewardDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userLeagueRewardDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userLeagueRewardDB] ON
GO

SET IDENTITY_INSERT [dbo].[userLeagueRewardDB] OFF
GO


-- ----------------------------
-- Table structure for userLeagueRewardUserDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userLeagueRewardUserDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userLeagueRewardUserDB]
GO

CREATE TABLE [dbo].[userLeagueRewardUserDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [leagueIDX] int DEFAULT 0 NOT NULL,
  [sendNickname] nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [leagueName] nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [roundnum] int DEFAULT 0 NOT NULL,
  [maxRound] smallint DEFAULT 0 NOT NULL,
  [presentCode1] int DEFAULT 0 NOT NULL,
  [presentCode2] int DEFAULT 0 NOT NULL,
  [presentCode3] int DEFAULT 0 NOT NULL,
  [presentCode4] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userLeagueRewardUserDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userLeagueRewardUserDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userLeagueRewardUserDB] ON
GO

SET IDENTITY_INSERT [dbo].[userLeagueRewardUserDB] OFF
GO


-- ----------------------------
-- Table structure for userLeagueRoundDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userLeagueRoundDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userLeagueRoundDB]
GO

CREATE TABLE [dbo].[userLeagueRoundDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [infoIDX] int DEFAULT 0 NOT NULL,
  [roundType1_playDate] int DEFAULT 0 NOT NULL,
  [roundType1_presentCode1] int DEFAULT 0 NOT NULL,
  [roundType1_presentCode2] int DEFAULT 0 NOT NULL,
  [roundType1_presentCode3] int DEFAULT 0 NOT NULL,
  [roundType1_presentCode4] int DEFAULT 0 NOT NULL,
  [roundType2_playDate] int DEFAULT 0 NOT NULL,
  [roundType2_presentCode1] int DEFAULT 0 NOT NULL,
  [roundType2_presentCode2] int DEFAULT 0 NOT NULL,
  [roundType2_presentCode3] int DEFAULT 0 NOT NULL,
  [roundType2_presentCode4] int DEFAULT 0 NOT NULL,
  [roundType3_playDate] int DEFAULT 0 NOT NULL,
  [roundType3_presentCode1] int DEFAULT 0 NOT NULL,
  [roundType3_presentCode2] int DEFAULT 0 NOT NULL,
  [roundType3_presentCode3] int DEFAULT 0 NOT NULL,
  [roundType3_presentCode4] int DEFAULT 0 NOT NULL,
  [roundType4_playDate] int DEFAULT 0 NOT NULL,
  [roundType4_presentCode1] int DEFAULT 0 NOT NULL,
  [roundType4_presentCode2] int DEFAULT 0 NOT NULL,
  [roundType4_presentCode3] int DEFAULT 0 NOT NULL,
  [roundType4_presentCode4] int DEFAULT 0 NOT NULL,
  [roundType5_playDate] int DEFAULT 0 NOT NULL,
  [roundType5_presentCode1] int DEFAULT 0 NOT NULL,
  [roundType5_presentCode2] int DEFAULT 0 NOT NULL,
  [roundType5_presentCode3] int DEFAULT 0 NOT NULL,
  [roundType5_presentCode4] int DEFAULT 0 NOT NULL,
  [roundType6_playDate] int DEFAULT 0 NOT NULL,
  [roundType6_presentCode1] int DEFAULT 0 NOT NULL,
  [roundType6_presentCode2] int DEFAULT 0 NOT NULL,
  [roundType6_presentCode3] int DEFAULT 0 NOT NULL,
  [roundType6_presentCode4] int DEFAULT 0 NOT NULL,
  [roundType7_playDate] int DEFAULT 0 NOT NULL,
  [roundType7_presentCode1] int DEFAULT 0 NOT NULL,
  [roundType7_presentCode2] int DEFAULT 0 NOT NULL,
  [roundType7_presentCode3] int DEFAULT 0 NOT NULL,
  [roundType7_presentCode4] int DEFAULT 0 NOT NULL,
  [roundType8_playDate] int DEFAULT 0 NOT NULL,
  [roundType8_presentCode1] int DEFAULT 0 NOT NULL,
  [roundType8_presentCode2] int DEFAULT 0 NOT NULL,
  [roundType8_presentCode3] int DEFAULT 0 NOT NULL,
  [roundType8_presentCode4] int DEFAULT 0 NOT NULL,
  [roundType9_playDate] int DEFAULT 0 NOT NULL,
  [roundType9_presentCode1] int DEFAULT 0 NOT NULL,
  [roundType9_presentCode2] int DEFAULT 0 NOT NULL,
  [roundType9_presentCode3] int DEFAULT 0 NOT NULL,
  [roundType9_presentCode4] int DEFAULT 0 NOT NULL,
  [roundType10_playDate] int DEFAULT 0 NOT NULL,
  [roundType10_presentCode1] int DEFAULT 0 NOT NULL,
  [roundType10_presentCode2] int DEFAULT 0 NOT NULL,
  [roundType10_presentCode3] int DEFAULT 0 NOT NULL,
  [roundType10_presentCode4] int DEFAULT 0 NOT NULL,
  [roundType11_playDate] int DEFAULT 0 NOT NULL,
  [roundType11_presentCode1] int DEFAULT 0 NOT NULL,
  [roundType11_presentCode2] int DEFAULT 0 NOT NULL,
  [roundType11_presentCode3] int DEFAULT 0 NOT NULL,
  [roundType11_presentCode4] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userLeagueRoundDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userLeagueRoundDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userLeagueRoundDB] ON
GO

SET IDENTITY_INSERT [dbo].[userLeagueRoundDB] OFF
GO


-- ----------------------------
-- Table structure for userLeagueTeamDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userLeagueTeamDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userLeagueTeamDB]
GO

CREATE TABLE [dbo].[userLeagueTeamDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [leagueIDX] int  NOT NULL,
  [teamName] nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [leaderIDX] int  NOT NULL,
  [leagueStartPosition] smallint DEFAULT 0 NOT NULL,
  [leaguePosition] smallint DEFAULT 0 NOT NULL,
  [maxcount] tinyint DEFAULT 0 NOT NULL,
  [cheerPoint] int DEFAULT 0 NOT NULL,
  [currentRound] tinyint DEFAULT 0 NOT NULL,
  [factionPoint] int DEFAULT 0 NOT NULL,
  [factionType] tinyint DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userLeagueTeamDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userLeagueTeamDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userLeagueTeamDB] ON
GO

SET IDENTITY_INSERT [dbo].[userLeagueTeamDB] OFF
GO


-- ----------------------------
-- Table structure for userLeagueTeamMemberDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userLeagueTeamMemberDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userLeagueTeamMemberDB]
GO

CREATE TABLE [dbo].[userLeagueTeamMemberDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [leagueIDX] int DEFAULT 0 NOT NULL,
  [teamIDX] int DEFAULT 0 NOT NULL,
  [joinType] tinyint DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userLeagueTeamMemberDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userLeagueTeamMemberDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userLeagueTeamMemberDB] ON
GO

SET IDENTITY_INSERT [dbo].[userLeagueTeamMemberDB] OFF
GO


-- ----------------------------
-- Table structure for userLeagueWinnerHistoryDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userLeagueWinnerHistoryDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userLeagueWinnerHistoryDB]
GO

CREATE TABLE [dbo].[userLeagueWinnerHistoryDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [leagueTitle] nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [startDate] int  NOT NULL,
  [endDate] int  NOT NULL,
  [teamIDX] int  NOT NULL,
  [teamName] nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [factionName] nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [factionType] int  NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userLeagueWinnerHistoryDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userLeagueWinnerHistoryDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userLeagueWinnerHistoryDB] ON
GO

SET IDENTITY_INSERT [dbo].[userLeagueWinnerHistoryDB] OFF
GO


-- ----------------------------
-- Table structure for userLeagueWinnerInfoDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userLeagueWinnerInfoDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userLeagueWinnerInfoDB]
GO

CREATE TABLE [dbo].[userLeagueWinnerInfoDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [nickName] nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [userLevel] int  NOT NULL,
  [historyIDX] int DEFAULT 0 NOT NULL,
  [teamIDX] int DEFAULT 0 NOT NULL,
  [classType] int DEFAULT 0 NOT NULL,
  [classGender] int DEFAULT 0 NOT NULL,
  [classFace] int DEFAULT 0 NOT NULL,
  [classHair] int DEFAULT 0 NOT NULL,
  [classSkinColor] int DEFAULT 0 NOT NULL,
  [classHairColor] int DEFAULT 0 NOT NULL,
  [classUnderwear] int DEFAULT 0 NOT NULL,
  [classGear1] int DEFAULT 0 NOT NULL,
  [classGear2] int DEFAULT 0 NOT NULL,
  [classGear3] int DEFAULT 0 NOT NULL,
  [classGear4] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userLeagueWinnerInfoDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userLeagueWinnerInfoDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userLeagueWinnerInfoDB] ON
GO

SET IDENTITY_INSERT [dbo].[userLeagueWinnerInfoDB] OFF
GO


-- ----------------------------
-- Table structure for userLoginDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userLoginDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userLoginDB]
GO

CREATE TABLE [dbo].[userLoginDB] (
  [accountIDX] int  NOT NULL,
  [encodeKey] char(15) COLLATE SQL_Latin1_General_CP1_CI_AS DEFAULT 111111111111111. NOT NULL,
  [gameServerID] bigint DEFAULT 0 NOT NULL,
  [userIP] varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [connDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userLoginDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userLoginDB
-- ----------------------------

-- ----------------------------
-- Table structure for userMatchModeDailyRankingDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userMatchModeDailyRankingDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userMatchModeDailyRankingDB]
GO

CREATE TABLE [dbo].[userMatchModeDailyRankingDB] (
  [Ranking] int  NOT NULL,
  [AccountIDX] int  NOT NULL,
  [MatchPoint] int DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userMatchModeDailyRankingDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userMatchModeDailyRankingDB
-- ----------------------------

-- ----------------------------
-- Table structure for userMatchModeDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userMatchModeDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userMatchModeDB]
GO

CREATE TABLE [dbo].[userMatchModeDB] (
  [AccountIDX] int  NOT NULL,
  [MatchPoint] int  NOT NULL,
  [WinCount] int DEFAULT 0 NOT NULL,
  [LoseCount] int DEFAULT 0 NOT NULL,
  [MaxWinCount] int DEFAULT 0 NOT NULL,
  [PlayCount] int DEFAULT 0 NOT NULL,
  [RankMMR] int DEFAULT 0 NOT NULL,
  [RegDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userMatchModeDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userMatchModeDB
-- ----------------------------

-- ----------------------------
-- Table structure for userMatchModeHistoryDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userMatchModeHistoryDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userMatchModeHistoryDB]
GO

CREATE TABLE [dbo].[userMatchModeHistoryDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [AccountIDX] int  NOT NULL,
  [WinLoseType] tinyint DEFAULT 0 NOT NULL,
  [TeamWinCount] int DEFAULT 0 NOT NULL,
  [OpposingTeamWinCount] int DEFAULT 0 NOT NULL,
  [PlayDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userMatchModeHistoryDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userMatchModeHistoryDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userMatchModeHistoryDB] ON
GO

SET IDENTITY_INSERT [dbo].[userMatchModeHistoryDB] OFF
GO


-- ----------------------------
-- Table structure for userMatchModeSeasonRankingDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userMatchModeSeasonRankingDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userMatchModeSeasonRankingDB]
GO

CREATE TABLE [dbo].[userMatchModeSeasonRankingDB] (
  [AccountIDX] int  NOT NULL,
  [S1_Ranking] int DEFAULT 0 NOT NULL,
  [S1_MatchPoint] int DEFAULT 0 NOT NULL,
  [S1_SeasonDate] datetime DEFAULT 0 NOT NULL,
  [S2_Ranking] int DEFAULT 0 NOT NULL,
  [S2_MatchPoint] int DEFAULT 0 NOT NULL,
  [S2_SeasonDate] datetime DEFAULT 0 NOT NULL,
  [S3_Ranking] int DEFAULT 0 NOT NULL,
  [S3_MatchPoint] int DEFAULT 0 NOT NULL,
  [S3_SeasonDate] datetime DEFAULT 0 NOT NULL,
  [S4_Ranking] int DEFAULT 0 NOT NULL,
  [S4_MatchPoint] int DEFAULT 0 NOT NULL,
  [S4_SeasonDate] datetime DEFAULT 0 NOT NULL,
  [S5_Ranking] int DEFAULT 0 NOT NULL,
  [S5_MatchPoint] int DEFAULT 0 NOT NULL,
  [S5_SeasonDate] datetime DEFAULT 0 NOT NULL,
  [S6_Ranking] int DEFAULT 0 NOT NULL,
  [S6_MatchPoint] int DEFAULT 0 NOT NULL,
  [S6_SeasonDate] datetime DEFAULT 0 NOT NULL,
  [S7_Ranking] int DEFAULT 0 NOT NULL,
  [S7_MatchPoint] int DEFAULT 0 NOT NULL,
  [S7_SeasonDate] datetime DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userMatchModeSeasonRankingDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userMatchModeSeasonRankingDB
-- ----------------------------

-- ----------------------------
-- Table structure for userMedalDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userMedalDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userMedalDB]
GO

CREATE TABLE [dbo].[userMedalDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [medal1_type] int DEFAULT 0 NOT NULL,
  [medal2_type] int DEFAULT 0 NOT NULL,
  [medal3_type] int DEFAULT 0 NOT NULL,
  [medal4_type] int DEFAULT 0 NOT NULL,
  [medal5_type] int DEFAULT 0 NOT NULL,
  [medal6_type] int DEFAULT 0 NOT NULL,
  [medal7_type] int DEFAULT 0 NOT NULL,
  [medal8_type] int DEFAULT 0 NOT NULL,
  [medal9_type] int DEFAULT 0 NOT NULL,
  [medal10_type] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userMedalDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userMedalDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userMedalDB] ON
GO

SET IDENTITY_INSERT [dbo].[userMedalDB] OFF
GO


-- ----------------------------
-- Table structure for userMedalDB_receive
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userMedalDB_receive]') AND type IN ('U'))
	DROP TABLE [dbo].[userMedalDB_receive]
GO

CREATE TABLE [dbo].[userMedalDB_receive] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [medalIDX] int  NOT NULL,
  [flag] tinyint DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userMedalDB_receive] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userMedalDB_receive
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userMedalDB_receive] ON
GO

SET IDENTITY_INSERT [dbo].[userMedalDB_receive] OFF
GO


-- ----------------------------
-- Table structure for userMemberDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userMemberDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userMemberDB]
GO

CREATE TABLE [dbo].[userMemberDB] (
  [accountIDX] int  IDENTITY(2001,1) NOT NULL,
  [userID] varchar(12) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [nickName] varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [userPWD] varchar(255) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [email] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [mailling] tinyint  NOT NULL,
  [userType] smallint DEFAULT 100 NOT NULL,
  [joinType] smallint DEFAULT 1 NOT NULL,
  [eventType] int DEFAULT 0 NOT NULL,
  [cpType] smallint DEFAULT 0 NOT NULL,
  [limitType] smallint DEFAULT 0 NOT NULL,
  [limitDate] datetime DEFAULT 0 NOT NULL,
  [trackingcode] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL,
  [makeType] tinyint DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userMemberDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userMemberDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userMemberDB] ON
GO

SET IDENTITY_INSERT [dbo].[userMemberDB] OFF
GO


-- ----------------------------
-- Table structure for userMissionDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userMissionDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userMissionDB]
GO

CREATE TABLE [dbo].[userMissionDB] (
  [AccountIDX] int  NOT NULL,
  [MissionType] tinyint  NOT NULL,
  [MissionCode] int  NOT NULL,
  [MissionValue] int  NOT NULL,
  [MissionStatus] tinyint DEFAULT 1 NOT NULL,
  [RegDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userMissionDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userMissionDB
-- ----------------------------

-- ----------------------------
-- Table structure for userNameDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userNameDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userNameDB]
GO

CREATE TABLE [dbo].[userNameDB] (
  [accountIDX] int  NOT NULL,
  [userName] varchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [userBirthday] char(6) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [userJumin1] char(12) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [userJumin2] char(14) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [virtualJumin] varchar(13) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [ipinCI] varchar(88) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [ipinDI] varchar(64) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [userEnCode] varchar(64) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [userNumber] tinyint  NOT NULL,
  [userGender] tinyint  NOT NULL,
  [returnValue] tinyint  NOT NULL,
  [userIP] varchar(15) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [realType] tinyint DEFAULT 0 NOT NULL,
  [certType] char(1) COLLATE SQL_Latin1_General_CP1_CI_AS DEFAULT 'J' NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userNameDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userNameDB
-- ----------------------------

-- ----------------------------
-- Table structure for userOakBarrelDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userOakBarrelDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userOakBarrelDB]
GO

CREATE TABLE [dbo].[userOakBarrelDB] (
  [AccountIDX] int  NOT NULL,
  [Step] tinyint DEFAULT 0 NOT NULL,
  [Slot1] tinyint DEFAULT 0 NOT NULL,
  [Slot2] tinyint DEFAULT 0 NOT NULL,
  [Slot3] tinyint DEFAULT 0 NOT NULL,
  [Slot4] tinyint DEFAULT 0 NOT NULL,
  [Slot5] tinyint DEFAULT 0 NOT NULL,
  [Slot6] tinyint DEFAULT 0 NOT NULL,
  [Slot7] tinyint DEFAULT 0 NOT NULL,
  [Slot8] tinyint DEFAULT 0 NOT NULL,
  [Slot9] tinyint DEFAULT 0 NOT NULL,
  [Slot10] tinyint DEFAULT 0 NOT NULL,
  [Slot11] tinyint DEFAULT 0 NOT NULL,
  [Slot12] tinyint DEFAULT 0 NOT NULL,
  [UpdateTime] datetime DEFAULT getdate() NOT NULL,
  [RegDate] datetime DEFAULT getdate() NOT NULL,
  [LimitSword] int DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userOakBarrelDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userOakBarrelDB
-- ----------------------------

-- ----------------------------
-- Table structure for userParentDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userParentDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userParentDB]
GO

CREATE TABLE [dbo].[userParentDB] (
  [accountIDX] int  NOT NULL,
  [parentName] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [parentBirth] char(6) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [parentJumin1] char(12) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [parentJumin2] char(14) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [parentEncode] varchar(64) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [parentNumber] tinyint  NULL,
  [email] varchar(50) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [agreeSDate] datetime  NULL,
  [agreeEDate] datetime  NULL,
  [agreeType] tinyint DEFAULT 0 NOT NULL,
  [logIDX] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL,
  [Certify_Type] char(1) COLLATE SQL_Latin1_General_CP1_CI_AS DEFAULT 'R' NULL,
  [PIpinCI] varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [PIpinDI] varchar(100) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL
)
GO

ALTER TABLE [dbo].[userParentDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userParentDB
-- ----------------------------

-- ----------------------------
-- Table structure for userPCBangPlayTimeDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userPCBangPlayTimeDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userPCBangPlayTimeDB]
GO

CREATE TABLE [dbo].[userPCBangPlayTimeDB] (
  [PCBangDate] nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS DEFAULT '' NOT NULL,
  [PCBangIndex] int DEFAULT 0 NOT NULL,
  [AccountIDX] int DEFAULT 0 NOT NULL,
  [PCBangPlayTime] int DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userPCBangPlayTimeDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userPCBangPlayTimeDB
-- ----------------------------

-- ----------------------------
-- Table structure for userPCBangPregentDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userPCBangPregentDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userPCBangPregentDB]
GO

CREATE TABLE [dbo].[userPCBangPregentDB] (
  [PCBangDate] nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS DEFAULT '' NOT NULL,
  [AccountIDX] int DEFAULT 0 NOT NULL,
  [PCBangCount] int DEFAULT 0 NOT NULL,
  [PCBangBonusCash] int DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userPCBangPregentDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userPCBangPregentDB
-- ----------------------------

-- ----------------------------
-- Table structure for userPersonalHQDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userPersonalHQDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userPersonalHQDB]
GO

CREATE TABLE [dbo].[userPersonalHQDB] (
  [AccountIDX] int  NOT NULL,
  [ItemSerial] bigint  IDENTITY(1,1) NOT NULL,
  [ItemCode] int  NOT NULL,
  [ItemXZ] int DEFAULT 0 NOT NULL,
  [ItemY] int DEFAULT 0 NOT NULL,
  [ItemRotate] tinyint DEFAULT 0 NOT NULL,
  [ItemDecoScore] int DEFAULT 0 NOT NULL,
  [ItemStatus] tinyint DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userPersonalHQDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userPersonalHQDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userPersonalHQDB] ON
GO

SET IDENTITY_INSERT [dbo].[userPersonalHQDB] OFF
GO


-- ----------------------------
-- Table structure for userPetDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userPetDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userPetDB]
GO

CREATE TABLE [dbo].[userPetDB] (
  [accountIDX] int  NOT NULL,
  [petIDX] int  IDENTITY(1,1) NOT NULL,
  [petCode] int DEFAULT 0 NOT NULL,
  [petRank] tinyint DEFAULT 0 NOT NULL,
  [petLevel] int DEFAULT 0 NOT NULL,
  [petExp] int DEFAULT 0 NOT NULL,
  [petEquip] tinyint DEFAULT 0 NOT NULL,
  [petStatus] tinyint DEFAULT 1 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userPetDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userPetDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userPetDB] ON
GO

SET IDENTITY_INSERT [dbo].[userPetDB] OFF
GO


-- ----------------------------
-- Table structure for userPieceDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userPieceDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userPieceDB]
GO

CREATE TABLE [dbo].[userPieceDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [piece1_type] int DEFAULT 0 NOT NULL,
  [piece1_value1] int DEFAULT 0 NOT NULL,
  [piece1_value2] int DEFAULT 0 NOT NULL,
  [piece1_cnt] int DEFAULT 0 NOT NULL,
  [piece2_type] int DEFAULT 0 NOT NULL,
  [piece2_value1] int DEFAULT 0 NOT NULL,
  [piece2_value2] int DEFAULT 0 NOT NULL,
  [piece2_cnt] int DEFAULT 0 NOT NULL,
  [piece3_type] int DEFAULT 0 NOT NULL,
  [piece3_value1] int DEFAULT 0 NOT NULL,
  [piece3_value2] int DEFAULT 0 NOT NULL,
  [piece3_cnt] int DEFAULT 0 NOT NULL,
  [piece4_type] int DEFAULT 0 NOT NULL,
  [piece4_value1] int DEFAULT 0 NOT NULL,
  [piece4_value2] int DEFAULT 0 NOT NULL,
  [piece4_cnt] int DEFAULT 0 NOT NULL,
  [piece5_type] int DEFAULT 0 NOT NULL,
  [piece5_value1] int DEFAULT 0 NOT NULL,
  [piece5_value2] int DEFAULT 0 NOT NULL,
  [piece5_cnt] int DEFAULT 0 NOT NULL,
  [piece6_type] int DEFAULT 0 NOT NULL,
  [piece6_value1] int DEFAULT 0 NOT NULL,
  [piece6_value2] int DEFAULT 0 NOT NULL,
  [piece6_cnt] int DEFAULT 0 NOT NULL,
  [piece7_type] int DEFAULT 0 NOT NULL,
  [piece7_value1] int DEFAULT 0 NOT NULL,
  [piece7_value2] int DEFAULT 0 NOT NULL,
  [piece7_cnt] int DEFAULT 0 NOT NULL,
  [piece8_type] int DEFAULT 0 NOT NULL,
  [piece8_value1] int DEFAULT 0 NOT NULL,
  [piece8_value2] int DEFAULT 0 NOT NULL,
  [piece8_cnt] int DEFAULT 0 NOT NULL,
  [piece9_type] int DEFAULT 0 NOT NULL,
  [piece9_value1] int DEFAULT 0 NOT NULL,
  [piece9_value2] int DEFAULT 0 NOT NULL,
  [piece9_cnt] int DEFAULT 0 NOT NULL,
  [piece10_type] int DEFAULT 0 NOT NULL,
  [piece10_value1] int DEFAULT 0 NOT NULL,
  [piece10_value2] int DEFAULT 0 NOT NULL,
  [piece10_cnt] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userPieceDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userPieceDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userPieceDB] ON
GO

SET IDENTITY_INSERT [dbo].[userPieceDB] OFF
GO


-- ----------------------------
-- Table structure for userPopStoreDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userPopStoreDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userPopStoreDB]
GO

CREATE TABLE [dbo].[userPopStoreDB] (
  [AccountIDX] int  NOT NULL,
  [PopupSlot] int  NOT NULL,
  [RegDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userPopStoreDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userPopStoreDB
-- ----------------------------

-- ----------------------------
-- Table structure for userPracticeDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userPracticeDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userPracticeDB]
GO

CREATE TABLE [dbo].[userPracticeDB] (
  [AccountIDX] int  NOT NULL,
  [PracticeIDX] int DEFAULT 0 NOT NULL,
  [PracticeCount] int DEFAULT 0 NOT NULL,
  [PracticeGrade] int DEFAULT 0 NOT NULL,
  [PracticeTime] int DEFAULT 999999999 NOT NULL,
  [PracticeRank] int DEFAULT 99999999 NOT NULL,
  [UpdateDate] datetime DEFAULT getdate() NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userPracticeDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userPracticeDB
-- ----------------------------

-- ----------------------------
-- Table structure for userPracticeDB_Present
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userPracticeDB_Present]') AND type IN ('U'))
	DROP TABLE [dbo].[userPracticeDB_Present]
GO

CREATE TABLE [dbo].[userPracticeDB_Present] (
  [PresentValue] int  NOT NULL,
  [PresentType1] int  NOT NULL,
  [Code1] int  NOT NULL,
  [Value1] int  NOT NULL,
  [PresentType2] int  NOT NULL,
  [Code2] int  NOT NULL,
  [Value2] int  NOT NULL,
  [PresentType3] int  NOT NULL,
  [Code3] int  NOT NULL,
  [Value3] int  NOT NULL,
  [PresentType4] int  NOT NULL,
  [Code4] int  NOT NULL,
  [Value4] int  NOT NULL,
  [PresentType5] int  NOT NULL,
  [Code5] int  NOT NULL,
  [Value5] int  NOT NULL
)
GO

ALTER TABLE [dbo].[userPracticeDB_Present] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userPracticeDB_Present
-- ----------------------------

-- ----------------------------
-- Table structure for userPracticeDB_Ranking
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userPracticeDB_Ranking]') AND type IN ('U'))
	DROP TABLE [dbo].[userPracticeDB_Ranking]
GO

CREATE TABLE [dbo].[userPracticeDB_Ranking] (
  [StartDate] nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [EndDate] nvarchar(10) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [AccountIDX] int  NOT NULL,
  [PracticeIDX] int DEFAULT 0 NOT NULL,
  [PracticeRank] int DEFAULT 999999999 NOT NULL,
  [sendIDX] int  NOT NULL,
  [value] int  NOT NULL,
  [msgType] int  NULL,
  [limitDate] datetime  NULL
)
GO

ALTER TABLE [dbo].[userPracticeDB_Ranking] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userPracticeDB_Ranking
-- ----------------------------

-- ----------------------------
-- Table structure for userPresentDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userPresentDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userPresentDB]
GO

CREATE TABLE [dbo].[userPresentDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [sendIDX] int  NOT NULL,
  [receiveIDX] int  NOT NULL,
  [presentType] smallint DEFAULT 0 NOT NULL,
  [value1] int DEFAULT 0 NOT NULL,
  [value2] int DEFAULT 0 NOT NULL,
  [value3] int DEFAULT 0 NOT NULL,
  [value4] int DEFAULT 0 NOT NULL,
  [msgType] smallint  NOT NULL,
  [flag] smallint  NOT NULL,
  [limitDate] datetime  NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL,
  [TranIDX] bigint DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userPresentDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userPresentDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userPresentDB] ON
GO

SET IDENTITY_INSERT [dbo].[userPresentDB] OFF
GO


-- ----------------------------
-- Table structure for userQuestCompleteDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userQuestCompleteDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userQuestCompleteDB]
GO

CREATE TABLE [dbo].[userQuestCompleteDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [quest1_type] int DEFAULT 0 NOT NULL,
  [quest1_time] int DEFAULT 0 NOT NULL,
  [quest2_type] int DEFAULT 0 NOT NULL,
  [quest2_time] int DEFAULT 0 NOT NULL,
  [quest3_type] int DEFAULT 0 NOT NULL,
  [quest3_time] int DEFAULT 0 NOT NULL,
  [quest4_type] int DEFAULT 0 NOT NULL,
  [quest4_time] int DEFAULT 0 NOT NULL,
  [quest5_type] int DEFAULT 0 NOT NULL,
  [quest5_time] int DEFAULT 0 NOT NULL,
  [quest6_type] int DEFAULT 0 NOT NULL,
  [quest6_time] int DEFAULT 0 NOT NULL,
  [quest7_type] int DEFAULT 0 NOT NULL,
  [quest7_time] int DEFAULT 0 NOT NULL,
  [quest8_type] int DEFAULT 0 NOT NULL,
  [quest8_time] int DEFAULT 0 NOT NULL,
  [quest9_type] int DEFAULT 0 NOT NULL,
  [quest9_time] int DEFAULT 0 NOT NULL,
  [quest10_type] int DEFAULT 0 NOT NULL,
  [quest10_time] int DEFAULT 0 NOT NULL,
  [quest11_type] int DEFAULT 0 NOT NULL,
  [quest11_time] int DEFAULT 0 NOT NULL,
  [quest12_type] int DEFAULT 0 NOT NULL,
  [quest12_time] int DEFAULT 0 NOT NULL,
  [quest13_type] int DEFAULT 0 NOT NULL,
  [quest13_time] int DEFAULT 0 NOT NULL,
  [quest14_type] int DEFAULT 0 NOT NULL,
  [quest14_time] int DEFAULT 0 NOT NULL,
  [quest15_type] int DEFAULT 0 NOT NULL,
  [quest15_time] int DEFAULT 0 NOT NULL,
  [quest16_type] int DEFAULT 0 NOT NULL,
  [quest16_time] int DEFAULT 0 NOT NULL,
  [quest17_type] int DEFAULT 0 NOT NULL,
  [quest17_time] int DEFAULT 0 NOT NULL,
  [quest18_type] int DEFAULT 0 NOT NULL,
  [quest18_time] int DEFAULT 0 NOT NULL,
  [quest19_type] int DEFAULT 0 NOT NULL,
  [quest19_time] int DEFAULT 0 NOT NULL,
  [quest20_type] int DEFAULT 0 NOT NULL,
  [quest20_time] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userQuestCompleteDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userQuestCompleteDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userQuestCompleteDB] ON
GO

SET IDENTITY_INSERT [dbo].[userQuestCompleteDB] OFF
GO


-- ----------------------------
-- Table structure for userQuestDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userQuestDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userQuestDB]
GO

CREATE TABLE [dbo].[userQuestDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [quest1_type] int DEFAULT 0 NOT NULL,
  [quest1_value1] int DEFAULT 0 NOT NULL,
  [quest1_value2] int DEFAULT 0 NOT NULL,
  [quest1_time] int DEFAULT 0 NOT NULL,
  [quest2_type] int DEFAULT 0 NOT NULL,
  [quest2_value1] int DEFAULT 0 NOT NULL,
  [quest2_value2] int DEFAULT 0 NOT NULL,
  [quest2_time] int DEFAULT 0 NOT NULL,
  [quest3_type] int DEFAULT 0 NOT NULL,
  [quest3_value1] int DEFAULT 0 NOT NULL,
  [quest3_value2] int DEFAULT 0 NOT NULL,
  [quest3_time] int DEFAULT 0 NOT NULL,
  [quest4_type] int DEFAULT 0 NOT NULL,
  [quest4_value1] int DEFAULT 0 NOT NULL,
  [quest4_value2] int DEFAULT 0 NOT NULL,
  [quest4_time] int DEFAULT 0 NOT NULL,
  [quest5_type] int DEFAULT 0 NOT NULL,
  [quest5_value1] int DEFAULT 0 NOT NULL,
  [quest5_value2] int DEFAULT 0 NOT NULL,
  [quest5_time] int DEFAULT 0 NOT NULL,
  [quest6_type] int DEFAULT 0 NOT NULL,
  [quest6_value1] int DEFAULT 0 NOT NULL,
  [quest6_value2] int DEFAULT 0 NOT NULL,
  [quest6_time] int DEFAULT 0 NOT NULL,
  [quest7_type] int DEFAULT 0 NOT NULL,
  [quest7_value1] int DEFAULT 0 NOT NULL,
  [quest7_value2] int DEFAULT 0 NOT NULL,
  [quest7_time] int DEFAULT 0 NOT NULL,
  [quest8_type] int DEFAULT 0 NOT NULL,
  [quest8_value1] int DEFAULT 0 NOT NULL,
  [quest8_value2] int DEFAULT 0 NOT NULL,
  [quest8_time] int DEFAULT 0 NOT NULL,
  [quest9_type] int DEFAULT 0 NOT NULL,
  [quest9_value1] int DEFAULT 0 NOT NULL,
  [quest9_value2] int DEFAULT 0 NOT NULL,
  [quest9_time] int DEFAULT 0 NOT NULL,
  [quest10_type] int DEFAULT 0 NOT NULL,
  [quest10_value1] int DEFAULT 0 NOT NULL,
  [quest10_value2] int DEFAULT 0 NOT NULL,
  [quest10_time] int DEFAULT 0 NOT NULL,
  [quest11_type] int DEFAULT 0 NOT NULL,
  [quest11_value1] int DEFAULT 0 NOT NULL,
  [quest11_value2] int DEFAULT 0 NOT NULL,
  [quest11_time] int DEFAULT 0 NOT NULL,
  [quest12_type] int DEFAULT 0 NOT NULL,
  [quest12_value1] int DEFAULT 0 NOT NULL,
  [quest12_value2] int DEFAULT 0 NOT NULL,
  [quest12_time] int DEFAULT 0 NOT NULL,
  [quest13_type] int DEFAULT 0 NOT NULL,
  [quest13_value1] int DEFAULT 0 NOT NULL,
  [quest13_value2] int DEFAULT 0 NOT NULL,
  [quest13_time] int DEFAULT 0 NOT NULL,
  [quest14_type] int DEFAULT 0 NOT NULL,
  [quest14_value1] int DEFAULT 0 NOT NULL,
  [quest14_value2] int DEFAULT 0 NOT NULL,
  [quest14_time] int DEFAULT 0 NOT NULL,
  [quest15_type] int DEFAULT 0 NOT NULL,
  [quest15_value1] int DEFAULT 0 NOT NULL,
  [quest15_value2] int DEFAULT 0 NOT NULL,
  [quest15_time] int DEFAULT 0 NOT NULL,
  [quest16_type] int DEFAULT 0 NOT NULL,
  [quest16_value1] int DEFAULT 0 NOT NULL,
  [quest16_value2] int DEFAULT 0 NOT NULL,
  [quest16_time] int DEFAULT 0 NOT NULL,
  [quest17_type] int DEFAULT 0 NOT NULL,
  [quest17_value1] int DEFAULT 0 NOT NULL,
  [quest17_value2] int DEFAULT 0 NOT NULL,
  [quest17_time] int DEFAULT 0 NOT NULL,
  [quest18_type] int DEFAULT 0 NOT NULL,
  [quest18_value1] int DEFAULT 0 NOT NULL,
  [quest18_value2] int DEFAULT 0 NOT NULL,
  [quest18_time] int DEFAULT 0 NOT NULL,
  [quest19_type] int DEFAULT 0 NOT NULL,
  [quest19_value1] int DEFAULT 0 NOT NULL,
  [quest19_value2] int DEFAULT 0 NOT NULL,
  [quest19_time] int DEFAULT 0 NOT NULL,
  [quest20_type] int DEFAULT 0 NOT NULL,
  [quest20_value1] int DEFAULT 0 NOT NULL,
  [quest20_value2] int DEFAULT 0 NOT NULL,
  [quest20_time] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userQuestDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userQuestDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userQuestDB] ON
GO

SET IDENTITY_INSERT [dbo].[userQuestDB] OFF
GO


-- ----------------------------
-- Table structure for userRankingDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB]
GO

CREATE TABLE [dbo].[userRankingDB] (
  [accountIDX] int  NOT NULL,
  [class] int DEFAULT 0 NOT NULL,
  [battle] int DEFAULT 0 NOT NULL,
  [training] int DEFAULT 0 NOT NULL,
  [award] int DEFAULT 0 NOT NULL,
  [medal] int DEFAULT 0 NOT NULL,
  [tester] int DEFAULT 0 NOT NULL,
  [region] int DEFAULT 0 NOT NULL,
  [regDate] smalldatetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userRankingDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB
-- ----------------------------

-- ----------------------------
-- Table structure for userRankingDB_award
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_award]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_award]
GO

CREATE TABLE [dbo].[userRankingDB_award] (
  [accountIDX] int  NOT NULL,
  [awardLevel] int DEFAULT 0 NOT NULL,
  [expert] int DEFAULT 0 NOT NULL,
  [award1_prev] int DEFAULT 0 NOT NULL,
  [award1_now] int DEFAULT 0 NOT NULL,
  [award1_point] int DEFAULT 0 NOT NULL,
  [award2_prev] int DEFAULT 0 NOT NULL,
  [award2_now] int DEFAULT 0 NOT NULL,
  [award2_point] int DEFAULT 0 NOT NULL,
  [award3_prev] int DEFAULT 0 NOT NULL,
  [award3_now] int DEFAULT 0 NOT NULL,
  [award3_point] int DEFAULT 0 NOT NULL,
  [award4_prev] int DEFAULT 0 NOT NULL,
  [award4_now] int DEFAULT 0 NOT NULL,
  [award4_point] int DEFAULT 0 NOT NULL,
  [award5_prev] int DEFAULT 0 NOT NULL,
  [award5_now] int DEFAULT 0 NOT NULL,
  [award5_point] int DEFAULT 0 NOT NULL,
  [award6_prev] int DEFAULT 0 NOT NULL,
  [award6_now] int DEFAULT 0 NOT NULL,
  [award6_point] int DEFAULT 0 NOT NULL,
  [award7_prev] int DEFAULT 0 NOT NULL,
  [award7_now] int DEFAULT 0 NOT NULL,
  [award7_point] int DEFAULT 0 NOT NULL,
  [award8_prev] int DEFAULT 0 NOT NULL,
  [award8_now] int DEFAULT 0 NOT NULL,
  [award8_point] int DEFAULT 0 NOT NULL,
  [award9_prev] int DEFAULT 0 NOT NULL,
  [award9_now] int DEFAULT 0 NOT NULL,
  [award9_point] int DEFAULT 0 NOT NULL,
  [award10_prev] int DEFAULT 0 NOT NULL,
  [award10_now] int DEFAULT 0 NOT NULL,
  [award10_point] int DEFAULT 0 NOT NULL,
  [award11_prev] int DEFAULT 0 NOT NULL,
  [award11_now] int DEFAULT 0 NOT NULL,
  [award11_point] int DEFAULT 0 NOT NULL,
  [award12_prev] int DEFAULT 0 NOT NULL,
  [award12_now] int DEFAULT 0 NOT NULL,
  [award12_point] int DEFAULT 0 NOT NULL,
  [award13_prev] int DEFAULT 0 NOT NULL,
  [award13_now] int DEFAULT 0 NOT NULL,
  [award13_point] int DEFAULT 0 NOT NULL,
  [award14_prev] int DEFAULT 0 NOT NULL,
  [award14_now] int DEFAULT 0 NOT NULL,
  [award14_point] int DEFAULT 0 NOT NULL,
  [award15_prev] int DEFAULT 0 NOT NULL,
  [award15_now] int DEFAULT 0 NOT NULL,
  [award15_point] int DEFAULT 0 NOT NULL,
  [award16_prev] int DEFAULT 0 NOT NULL,
  [award16_now] int DEFAULT 0 NOT NULL,
  [award16_point] int DEFAULT 0 NOT NULL,
  [award17_prev] int DEFAULT 0 NOT NULL,
  [award17_now] int DEFAULT 0 NOT NULL,
  [award17_point] int DEFAULT 0 NOT NULL,
  [award18_prev] int DEFAULT 0 NOT NULL,
  [award18_now] int DEFAULT 0 NOT NULL,
  [award18_point] int DEFAULT 0 NOT NULL,
  [award19_prev] int DEFAULT 0 NOT NULL,
  [award19_now] int DEFAULT 0 NOT NULL,
  [award19_point] int DEFAULT 0 NOT NULL,
  [award20_prev] int DEFAULT 0 NOT NULL,
  [award20_now] int DEFAULT 0 NOT NULL,
  [award20_point] int DEFAULT 0 NOT NULL,
  [award21_prev] int DEFAULT 0 NOT NULL,
  [award21_now] int DEFAULT 0 NOT NULL,
  [award21_point] int DEFAULT 0 NOT NULL,
  [award22_prev] int DEFAULT 0 NOT NULL,
  [award22_now] int DEFAULT 0 NOT NULL,
  [award22_point] int DEFAULT 0 NOT NULL,
  [award23_prev] int DEFAULT 0 NOT NULL,
  [award23_now] int DEFAULT 0 NOT NULL,
  [award23_point] int DEFAULT 0 NOT NULL,
  [award24_prev] int DEFAULT 0 NOT NULL,
  [award24_now] int DEFAULT 0 NOT NULL,
  [award24_point] int DEFAULT 0 NOT NULL,
  [award25_prev] int DEFAULT 0 NOT NULL,
  [award25_now] int DEFAULT 0 NOT NULL,
  [award25_point] int DEFAULT 0 NOT NULL,
  [award26_prev] int DEFAULT 0 NOT NULL,
  [award26_now] int DEFAULT 0 NOT NULL,
  [award26_point] int DEFAULT 0 NOT NULL,
  [award27_prev] int DEFAULT 0 NOT NULL,
  [award27_now] int DEFAULT 0 NOT NULL,
  [award27_point] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_award] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_award
-- ----------------------------

-- ----------------------------
-- Table structure for userRankingDB_award_top100
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_award_top100]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_award_top100]
GO

CREATE TABLE [dbo].[userRankingDB_award_top100] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [nickName] varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [userLevel] int  NULL,
  [guildIDX] int  NULL,
  [awardType] int DEFAULT 0 NOT NULL,
  [rank_prev] int DEFAULT 0 NOT NULL,
  [rank_now] int DEFAULT 0 NOT NULL,
  [awardEXP] int DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_award_top100] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_award_top100
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userRankingDB_award_top100] ON
GO

SET IDENTITY_INSERT [dbo].[userRankingDB_award_top100] OFF
GO


-- ----------------------------
-- Table structure for userRankingDB_award_top3
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_award_top3]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_award_top3]
GO

CREATE TABLE [dbo].[userRankingDB_award_top3] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [awardType] int  NOT NULL,
  [rank1_accountIDX] int  NOT NULL,
  [rank1_userLevel] int  NOT NULL,
  [rank1_nickName] varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [rank2_accountIDX] int  NOT NULL,
  [rank2_userLevel] int  NOT NULL,
  [rank2_nickName] varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [rank3_accountIDX] int  NOT NULL,
  [rank3_userLevel] int  NOT NULL,
  [rank3_nickName] varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [dateIDX] char(8) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_award_top3] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_award_top3
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userRankingDB_award_top3] ON
GO

SET IDENTITY_INSERT [dbo].[userRankingDB_award_top3] OFF
GO


-- ----------------------------
-- Table structure for userRankingDB_battle
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_battle]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_battle]
GO

CREATE TABLE [dbo].[userRankingDB_battle] (
  [accountIDX] int  NOT NULL,
  [win_fix] int DEFAULT 0 NOT NULL,
  [tie_fix] int DEFAULT 0 NOT NULL,
  [lose_fix] int DEFAULT 0 NOT NULL,
  [win_prev] int DEFAULT 0 NOT NULL,
  [tie_prev] int DEFAULT 0 NOT NULL,
  [lose_prev] int DEFAULT 0 NOT NULL,
  [rank_prev] int DEFAULT 0 NOT NULL,
  [rank_now] int DEFAULT 0 NOT NULL,
  [rank_total] int DEFAULT 0 NOT NULL,
  [rank_battle] int DEFAULT 0 NOT NULL,
  [regDate] smalldatetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_battle] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_battle
-- ----------------------------

-- ----------------------------
-- Table structure for userRankingDB_class
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_class]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_class]
GO

CREATE TABLE [dbo].[userRankingDB_class] (
  [accountIDX] int  NULL,
  [classType] int  NULL,
  [prevRanking] int  NULL,
  [nowRanking] int  NULL,
  [userLevel] int  NULL,
  [expert] int  NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_class] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_class
-- ----------------------------

-- ----------------------------
-- Table structure for userRankingDB_class_top100
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_class_top100]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_class_top100]
GO

CREATE TABLE [dbo].[userRankingDB_class_top100] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [nickName] varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [userLevel] int  NULL,
  [guildIDX] int  NULL,
  [classType] int DEFAULT 0 NOT NULL,
  [rank_prev] int DEFAULT 0 NOT NULL,
  [rank_now] int DEFAULT 0 NOT NULL,
  [classLevel] int DEFAULT 0 NOT NULL,
  [classEXP] int DEFAULT 0 NOT NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_class_top100] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_class_top100
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userRankingDB_class_top100] ON
GO

SET IDENTITY_INSERT [dbo].[userRankingDB_class_top100] OFF
GO


-- ----------------------------
-- Table structure for userRankingDB_class_top3
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_class_top3]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_class_top3]
GO

CREATE TABLE [dbo].[userRankingDB_class_top3] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [classType] int  NOT NULL,
  [rank1_accountIDX] int  NOT NULL,
  [rank1_userLevel] int  NOT NULL,
  [rank1_nickName] varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [rank2_accountIDX] int  NOT NULL,
  [rank2_userLevel] int  NOT NULL,
  [rank2_nickName] varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [rank3_accountIDX] int  NOT NULL,
  [rank3_userLevel] int  NOT NULL,
  [rank3_nickName] varchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [dateIDX] char(8) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_class_top3] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_class_top3
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userRankingDB_class_top3] ON
GO

SET IDENTITY_INSERT [dbo].[userRankingDB_class_top3] OFF
GO


-- ----------------------------
-- Table structure for userRankingDB_classgroup
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_classgroup]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_classgroup]
GO

CREATE TABLE [dbo].[userRankingDB_classgroup] (
  [accountIDX] int  NOT NULL,
  [nickName] nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [userLevel] int DEFAULT 0 NOT NULL,
  [expert] int DEFAULT 0 NOT NULL,
  [ranking_8day] int DEFAULT 0 NOT NULL,
  [ranking_7day] int DEFAULT 0 NOT NULL,
  [ranking_6day] int DEFAULT 0 NOT NULL,
  [ranking_5day] int DEFAULT 0 NOT NULL,
  [ranking_4day] int DEFAULT 0 NOT NULL,
  [ranking_3day] int DEFAULT 0 NOT NULL,
  [ranking_2day] int DEFAULT 0 NOT NULL,
  [ranking_1day] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_classgroup] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_classgroup
-- ----------------------------

-- ----------------------------
-- Table structure for userRankingDB_classgroup_top10000
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_classgroup_top10000]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_classgroup_top10000]
GO

CREATE TABLE [dbo].[userRankingDB_classgroup_top10000] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [nickName] nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [userLevel] int  NOT NULL,
  [expert] int  NOT NULL,
  [rank_now] int  NOT NULL,
  [rank_prev] int  NOT NULL,
  [guildIDX] int  NULL,
  [guildName] nvarchar(20) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [guildMark] int  NULL,
  [regDate] datetime  NOT NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_classgroup_top10000] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_classgroup_top10000
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userRankingDB_classgroup_top10000] ON
GO

SET IDENTITY_INSERT [dbo].[userRankingDB_classgroup_top10000] OFF
GO


-- ----------------------------
-- Table structure for userRankingDB_faction
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_faction]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_faction]
GO

CREATE TABLE [dbo].[userRankingDB_faction] (
  [accountIDX] int  NOT NULL,
  [win_fix] int DEFAULT 0 NOT NULL,
  [tie_fix] int DEFAULT 0 NOT NULL,
  [lose_fix] int DEFAULT 0 NOT NULL,
  [win_prev] int DEFAULT 0 NOT NULL,
  [tie_prev] int DEFAULT 0 NOT NULL,
  [lose_prev] int DEFAULT 0 NOT NULL,
  [rank_prev] int DEFAULT 0 NOT NULL,
  [rank_now] int DEFAULT 0 NOT NULL,
  [rank_total] int DEFAULT 0 NOT NULL,
  [rank_faction] int DEFAULT 0 NOT NULL,
  [regDate] smalldatetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_faction] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_faction
-- ----------------------------

-- ----------------------------
-- Table structure for userRankingDB_hero
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_hero]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_hero]
GO

CREATE TABLE [dbo].[userRankingDB_hero] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [title] int DEFAULT 0 NOT NULL,
  [daily] int DEFAULT 0 NOT NULL,
  [dailyB] int DEFAULT 0 NOT NULL,
  [season1] int DEFAULT 0 NOT NULL,
  [season2] int DEFAULT 0 NOT NULL,
  [season3] int DEFAULT 0 NOT NULL,
  [season4] int DEFAULT 0 NOT NULL,
  [season5] int DEFAULT 0 NOT NULL,
  [season6] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_hero] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_hero
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userRankingDB_hero] ON
GO

SET IDENTITY_INSERT [dbo].[userRankingDB_hero] OFF
GO


-- ----------------------------
-- Table structure for userRankingDB_medal
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_medal]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_medal]
GO

CREATE TABLE [dbo].[userRankingDB_medal] (
  [accountIDX] int  NOT NULL,
  [medalLevel] int DEFAULT 0 NOT NULL,
  [expert] int DEFAULT 0 NOT NULL,
  [ranking_prev] int DEFAULT 0 NOT NULL,
  [ranking_now] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_medal] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_medal
-- ----------------------------

-- ----------------------------
-- Table structure for userRankingDB_temp
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_temp]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_temp]
GO

CREATE TABLE [dbo].[userRankingDB_temp] (
  [accountIDX] int  NOT NULL,
  [rank] bigint  NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_temp] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_temp
-- ----------------------------

-- ----------------------------
-- Table structure for userRankingDB_temp_expert
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_temp_expert]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_temp_expert]
GO

CREATE TABLE [dbo].[userRankingDB_temp_expert] (
  [accountIDX] int  NOT NULL,
  [expert] int  NOT NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_temp_expert] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_temp_expert
-- ----------------------------

-- ----------------------------
-- Table structure for userRankingDB_temp_level
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_temp_level]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_temp_level]
GO

CREATE TABLE [dbo].[userRankingDB_temp_level] (
  [accountIDX] int  NOT NULL,
  [level] int  NOT NULL,
  [expert] int  NOT NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_temp_level] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_temp_level
-- ----------------------------

-- ----------------------------
-- Table structure for userRankingDB_temp_ranking
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRankingDB_temp_ranking]') AND type IN ('U'))
	DROP TABLE [dbo].[userRankingDB_temp_ranking]
GO

CREATE TABLE [dbo].[userRankingDB_temp_ranking] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL
)
GO

ALTER TABLE [dbo].[userRankingDB_temp_ranking] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRankingDB_temp_ranking
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userRankingDB_temp_ranking] ON
GO

SET IDENTITY_INSERT [dbo].[userRankingDB_temp_ranking] OFF
GO


-- ----------------------------
-- Table structure for userRecordBattleDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRecordBattleDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userRecordBattleDB]
GO

CREATE TABLE [dbo].[userRecordBattleDB] (
  [accountIDX] int  NOT NULL,
  [type1_win] int DEFAULT 0 NOT NULL,
  [type1_lose] int DEFAULT 0 NOT NULL,
  [type1_kill] int DEFAULT 0 NOT NULL,
  [type1_death] int DEFAULT 0 NOT NULL,
  [type2_win] int DEFAULT 0 NOT NULL,
  [type2_lose] int DEFAULT 0 NOT NULL,
  [type2_kill] int DEFAULT 0 NOT NULL,
  [type2_death] int DEFAULT 0 NOT NULL,
  [type3_win] int DEFAULT 0 NOT NULL,
  [type3_lose] int DEFAULT 0 NOT NULL,
  [type3_kill] int DEFAULT 0 NOT NULL,
  [type3_death] int DEFAULT 0 NOT NULL,
  [type4_win] int DEFAULT 0 NOT NULL,
  [type4_lose] int DEFAULT 0 NOT NULL,
  [type4_kill] int DEFAULT 0 NOT NULL,
  [type4_death] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userRecordBattleDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRecordBattleDB
-- ----------------------------

-- ----------------------------
-- Table structure for userRecordGuildDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRecordGuildDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userRecordGuildDB]
GO

CREATE TABLE [dbo].[userRecordGuildDB] (
  [guildIDX] int  NOT NULL,
  [type1_win] int DEFAULT 0 NOT NULL,
  [type1_lose] int DEFAULT 0 NOT NULL,
  [type1_kill] int DEFAULT 0 NOT NULL,
  [type1_death] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userRecordGuildDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRecordGuildDB
-- ----------------------------

-- ----------------------------
-- Table structure for userRegionDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRegionDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userRegionDB]
GO

CREATE TABLE [dbo].[userRegionDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [rt1point] int DEFAULT 0 NOT NULL,
  [rt1point_bonus] int DEFAULT 0 NOT NULL,
  [rt1point_today] int DEFAULT 0 NOT NULL,
  [rt2point] int DEFAULT 0 NOT NULL,
  [rt2point_bonus] int DEFAULT 0 NOT NULL,
  [rt2point_today] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userRegionDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRegionDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userRegionDB] ON
GO

SET IDENTITY_INSERT [dbo].[userRegionDB] OFF
GO


-- ----------------------------
-- Table structure for userRegionDB_compen
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRegionDB_compen]') AND type IN ('U'))
	DROP TABLE [dbo].[userRegionDB_compen]
GO

CREATE TABLE [dbo].[userRegionDB_compen] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [rt1point] int DEFAULT 0 NOT NULL,
  [rt1point_bonus] int DEFAULT 0 NOT NULL,
  [rt1count] int DEFAULT 0 NOT NULL,
  [rt2point] int DEFAULT 0 NOT NULL,
  [rt2point_bonus] int DEFAULT 0 NOT NULL,
  [rt2count] int DEFAULT 0 NOT NULL,
  [regionType] int DEFAULT 0 NOT NULL,
  [renspoint] int DEFAULT 0 NOT NULL,
  [regionRanking] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userRegionDB_compen] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRegionDB_compen
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userRegionDB_compen] ON
GO

SET IDENTITY_INSERT [dbo].[userRegionDB_compen] OFF
GO


-- ----------------------------
-- Table structure for userRegionDB_history
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRegionDB_history]') AND type IN ('U'))
	DROP TABLE [dbo].[userRegionDB_history]
GO

CREATE TABLE [dbo].[userRegionDB_history] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [point] int DEFAULT 0 NOT NULL,
  [point_bonus] int DEFAULT 0 NOT NULL,
  [membercount] int DEFAULT 0 NOT NULL,
  [regionType] tinyint DEFAULT 0 NOT NULL,
  [season] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userRegionDB_history] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRegionDB_history
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userRegionDB_history] ON
GO

SET IDENTITY_INSERT [dbo].[userRegionDB_history] OFF
GO


-- ----------------------------
-- Table structure for userRelativeLevelDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userRelativeLevelDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userRelativeLevelDB]
GO

CREATE TABLE [dbo].[userRelativeLevelDB] (
  [accountIDX] int  NOT NULL,
  [weekend_BackupLevel] int DEFAULT 0 NOT NULL,
  [weekend_BackupExp] int DEFAULT 0 NOT NULL,
  [init_time] int DEFAULT 0 NOT NULL,
  [reward_State] tinyint DEFAULT 0 NOT NULL,
  [regDate] datetime  NOT NULL
)
GO

ALTER TABLE [dbo].[userRelativeLevelDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userRelativeLevelDB
-- ----------------------------

-- ----------------------------
-- Table structure for userSBoxDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userSBoxDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userSBoxDB]
GO

CREATE TABLE [dbo].[userSBoxDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [presentType] smallint DEFAULT 0 NOT NULL,
  [value1] int DEFAULT 0 NOT NULL,
  [value2] int DEFAULT 0 NOT NULL,
  [amount] int DEFAULT 0 NOT NULL,
  [bonusAmount] int DEFAULT 0 NOT NULL,
  [flag] smallint DEFAULT 0 NOT NULL,
  [billingID] varchar(64) COLLATE SQL_Latin1_General_CP1_CI_AS  NOT NULL,
  [limitDate] datetime  NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userSBoxDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userSBoxDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userSBoxDB] ON
GO

SET IDENTITY_INSERT [dbo].[userSBoxDB] OFF
GO


-- ----------------------------
-- Table structure for userSpentGoldDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userSpentGoldDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userSpentGoldDB]
GO

CREATE TABLE [dbo].[userSpentGoldDB] (
  [AccountIDX] int  NOT NULL,
  [UserSpentGold] int  NOT NULL,
  [RegDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userSpentGoldDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userSpentGoldDB
-- ----------------------------

-- ----------------------------
-- Table structure for userSpentGoldLogDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userSpentGoldLogDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userSpentGoldLogDB]
GO

CREATE TABLE [dbo].[userSpentGoldLogDB] (
  [RegDate] datetime  NOT NULL,
  [AccountIDX] int  NOT NULL,
  [UserSpentGold] int  NOT NULL
)
GO

ALTER TABLE [dbo].[userSpentGoldLogDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userSpentGoldLogDB
-- ----------------------------

-- ----------------------------
-- Table structure for userSpiritDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userSpiritDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userSpiritDB]
GO

CREATE TABLE [dbo].[userSpiritDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [AccountIDX] int  NOT NULL,
  [SpiritType] int DEFAULT 0 NOT NULL,
  [SpiritCount] int DEFAULT 0 NOT NULL,
  [RegDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userSpiritDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userSpiritDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userSpiritDB] ON
GO

SET IDENTITY_INSERT [dbo].[userSpiritDB] OFF
GO


-- ----------------------------
-- Table structure for userTimeCashDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userTimeCashDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userTimeCashDB]
GO

CREATE TABLE [dbo].[userTimeCashDB] (
  [AccountIDX] int  NOT NULL,
  [ItemCode] int  NOT NULL,
  [ItemCount] int DEFAULT 0 NOT NULL,
  [ItemStatus] tinyint DEFAULT 1 NOT NULL,
  [RegDate] datetime  NOT NULL,
  [StartDate] datetime  NOT NULL,
  [OverDate] datetime  NOT NULL,
  [UpdDate] datetime  NOT NULL
)
GO

ALTER TABLE [dbo].[userTimeCashDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userTimeCashDB
-- ----------------------------

-- ----------------------------
-- Table structure for userTimeGateDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userTimeGateDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userTimeGateDB]
GO

CREATE TABLE [dbo].[userTimeGateDB] (
  [AccountIDX] int  NOT NULL,
  [GetTime] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userTimeGateDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userTimeGateDB
-- ----------------------------

-- ----------------------------
-- Table structure for userTitleDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userTitleDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userTitleDB]
GO

CREATE TABLE [dbo].[userTitleDB] (
  [AccountIDX] int  NOT NULL,
  [TitleCode] int  NOT NULL,
  [TitleValue] bigint  NOT NULL,
  [TitleLevel] int DEFAULT 1 NOT NULL,
  [TitlePremium] tinyint DEFAULT 0 NOT NULL,
  [TitleEquip] tinyint DEFAULT 0 NOT NULL,
  [TitleStatus] tinyint DEFAULT 0 NOT NULL,
  [UpdDate] datetime DEFAULT 0 NOT NULL,
  [RegDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userTitleDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userTitleDB
-- ----------------------------

-- ----------------------------
-- Table structure for userTradeDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userTradeDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userTradeDB]
GO

CREATE TABLE [dbo].[userTradeDB] (
  [idx] int  IDENTITY(1,1) NOT NULL,
  [accountIDX] int  NOT NULL,
  [itemType] int DEFAULT 0 NOT NULL,
  [value1] int DEFAULT 0 NOT NULL,
  [value2] int DEFAULT 0 NOT NULL,
  [price] bigint DEFAULT 0 NOT NULL,
  [mcustom] int DEFAULT 0 NOT NULL,
  [fcustom] int DEFAULT 0 NOT NULL,
  [userIP] varchar(16) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL,
  [periodDate] int DEFAULT 0 NOT NULL,
  [regDate] datetime DEFAULT getdate() NOT NULL
)
GO

ALTER TABLE [dbo].[userTradeDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userTradeDB
-- ----------------------------
SET IDENTITY_INSERT [dbo].[userTradeDB] ON
GO

SET IDENTITY_INSERT [dbo].[userTradeDB] OFF
GO


-- ----------------------------
-- Table structure for userVIPDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userVIPDB]') AND type IN ('U'))
	DROP TABLE [dbo].[userVIPDB]
GO

CREATE TABLE [dbo].[userVIPDB] (
  [accountIDX] int  NOT NULL,
  [vipType] smallint  NULL,
  [vipStatus] smallint  NULL,
  [regDate] datetime  NULL,
  [endDate] datetime  NULL
)
GO

ALTER TABLE [dbo].[userVIPDB] SET (LOCK_ESCALATION = TABLE)
GO


-- ----------------------------
-- Records of userVIPDB
-- ----------------------------

-- ----------------------------
-- View structure for classPriceView
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[classPriceView]') AND type IN ('V'))
	DROP VIEW [dbo].[classPriceView]
GO

CREATE VIEW [dbo].[classPriceView] AS SELECT * FROM (
		SELECT idx, class1_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class2_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class3_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class4_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class5_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class6_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class7_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class8_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class9_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class10_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class11_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class12_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class13_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class14_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class15_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class16_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class17_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class18_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class19_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class20_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class21_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class22_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class23_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class24_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class25_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class26_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class27_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class28_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class29_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class30_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class31_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class32_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class33_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class34_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class35_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class36_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class37_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class38_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class39_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class40_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class41_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class42_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class43_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class44_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class45_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class46_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class47_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class48_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class49_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class50_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class51_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class52_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class53_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class54_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class55_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class56_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class57_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class58_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class59_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class60_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class61_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class62_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class63_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class64_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class65_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class66_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class67_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class68_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class69_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class70_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class71_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class72_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class73_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class74_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class75_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class76_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class77_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class78_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class79_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class80_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class81_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class82_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class83_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class84_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class85_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class86_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class87_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class88_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class89_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class90_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class91_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class92_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class93_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class94_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class95_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class96_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class97_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class98_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class99_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
	UNION ALL 
		SELECT idx, class100_price AS class_price FROM dbo.define_class_price WITH (NOLOCK)
) AS A
GO


-- ----------------------------
-- View structure for userFriendListDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userFriendListDB]') AND type IN ('V'))
	DROP VIEW [dbo].[userFriendListDB]
GO

CREATE VIEW [dbo].[userFriendListDB] AS SELECT userAccIDX, friendAccIDX, guildIDX FROM DBO.userFriendListDB_table
GO


-- ----------------------------
-- View structure for userFriendListDB_table
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userFriendListDB_table]') AND type IN ('V'))
	DROP VIEW [dbo].[userFriendListDB_table]
GO

CREATE VIEW [dbo].[userFriendListDB_table] AS SELECT userAccIDX, friendAccIDX, 0 AS 'guildIDX' FROM DBO.userFriendDB WHERE flag=1 and friendAccIDX not in (SELECT accountIDX FROM DBO.userMemberDB WHERE userType < 10)
UNION ALL
SELECT 0 AS 'userAccIDX', accountIDX AS 'friendAccIDX', guildIDX FROM DBO.userGuildInfoDB WHERE guildJoinType=1
GO


-- ----------------------------
-- View structure for userItemExtraView
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userItemExtraView]') AND type IN ('V'))
	DROP VIEW [dbo].[userItemExtraView]
GO

CREATE VIEW [dbo].[userItemExtraView] AS SELECT * FROM (
	SELECT	idx, accountIDX, 1 AS pos, item1_type AS itemType, item1_reinforce AS reinforce, item1_limitType AS limitType, item1_limitDate AS limitDate
	FROM userItemExtraDB WITH (NOLOCK)

	UNION ALL 

	SELECT	idx, accountIDX, 2 AS pos, item2_type AS itemType, item2_reinforce AS reinforce, item2_limitType AS limitType, item2_limitDate AS limitDate
	FROM userItemExtraDB WITH (NOLOCK)

	UNION ALL 

	SELECT	idx, accountIDX, 3 AS pos, item3_type AS itemType, item3_reinforce AS reinforce, item3_limitType AS limitType, item3_limitDate AS limitDate
	FROM userItemExtraDB WITH (NOLOCK)

	UNION ALL 

	SELECT	idx, accountIDX, 4 AS pos, item4_type AS itemType, item4_reinforce AS reinforce, item4_limitType AS limitType, item4_limitDate AS limitDate
	FROM userItemExtraDB WITH (NOLOCK)

	UNION ALL 

	SELECT	idx, accountIDX, 5 AS pos, item5_type AS itemType, item5_reinforce AS reinforce, item5_limitType AS limitType, item5_limitDate AS limitDate
	FROM userItemExtraDB WITH (NOLOCK)

	UNION ALL 

	SELECT	idx, accountIDX, 6 AS pos, item6_type AS itemType, item6_reinforce AS reinforce, item6_limitType AS limitType, item6_limitDate AS limitDate
	FROM userItemExtraDB WITH (NOLOCK)

	UNION ALL 

	SELECT	idx, accountIDX, 7 AS pos, item7_type AS itemType, item7_reinforce AS reinforce, item7_limitType AS limitType, item7_limitDate AS limitDate
	FROM userItemExtraDB WITH (NOLOCK)

	UNION ALL 

	SELECT	idx, accountIDX, 8 AS pos, item8_type AS itemType, item8_reinforce AS reinforce, item8_limitType AS limitType, item8_limitDate AS limitDate
	FROM userItemExtraDB WITH (NOLOCK)

	UNION ALL 

	SELECT	idx, accountIDX, 9 AS pos, item9_type AS itemType, item9_reinforce AS reinforce, item9_limitType AS limitType, item9_limitDate AS limitDate
	FROM userItemExtraDB WITH (NOLOCK)

	UNION ALL 

	SELECT	idx, accountIDX, 10 AS pos, item10_type AS itemType, item10_reinforce AS reinforce, item10_limitType AS limitType, item10_limitDate AS limitDate
	FROM userItemExtraDB WITH (NOLOCK)
) AS A
WHERE itemType <> 0
GO


-- ----------------------------
-- View structure for userMannerpointDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userMannerpointDB]') AND type IN ('V'))
	DROP VIEW [dbo].[userMannerpointDB]
GO

CREATE VIEW [dbo].[userMannerpointDB] AS SELECT receiveIDX as 'accountIDX', receivepoint as 'point', reportpubIP as 'userIP', resultType, regDate FROM LosaGame_log.DBO.log_mannerpoint
UNION ALL
SELECT accountIDX, point, userIP, 1, regDate FROM LosaGame_log.DBO.log_mannerpoint_sitevisit
GO


-- ----------------------------
-- View structure for userQuestCompleteView
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userQuestCompleteView]') AND type IN ('V'))
	DROP VIEW [dbo].[userQuestCompleteView]
GO

CREATE VIEW [dbo].[userQuestCompleteView] AS SELECT * FROM (
		SELECT idx, accountIDX, 1 as pos, quest1_type as quest_type, quest1_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 2 as pos, quest2_type as quest_type, quest2_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 3 as pos, quest3_type as quest_type, quest3_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 4 as pos, quest4_type as quest_type, quest4_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 5 as pos, quest5_type as quest_type, quest5_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 6 as pos, quest6_type as quest_type, quest6_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 7 as pos, quest7_type as quest_type, quest7_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 8 as pos, quest8_type as quest_type, quest8_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 9 as pos, quest9_type as quest_type, quest9_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 10 as pos, quest10_type as quest_type, quest10_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 11 as pos, quest11_type as quest_type, quest11_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 12 as pos, quest12_type as quest_type, quest12_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 13 as pos, quest13_type as quest_type, quest13_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 14 as pos, quest14_type as quest_type, quest14_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 15 as pos, quest15_type as quest_type, quest15_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 16 as pos, quest16_type as quest_type, quest16_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 17 as pos, quest17_type as quest_type, quest17_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 18 as pos, quest18_type as quest_type, quest18_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 19 as pos, quest19_type as quest_type, quest19_time as quest_time FROM userQuestCompleteDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 20 as pos, quest20_type as quest_type, quest20_time as quest_time FROM userQuestCompleteDB WITH (nolock)
) as a
WHERE quest_type <> 0
GO


-- ----------------------------
-- View structure for userQuestView
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[userQuestView]') AND type IN ('V'))
	DROP VIEW [dbo].[userQuestView]
GO

CREATE VIEW [dbo].[userQuestView] AS SELECT * FROM (
		SELECT idx, accountIDX, 1 as pos, quest1_type as quest_type, quest1_value1 as quest_value1, quest1_value2 as quest_value2, quest1_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 2 as pos, quest2_type as quest_type, quest2_value1 as quest_value1, quest2_value2 as quest_value2, quest2_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 3 as pos, quest3_type as quest_type, quest3_value1 as quest_value1, quest3_value2 as quest_value2, quest3_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 4 as pos, quest4_type as quest_type, quest4_value1 as quest_value1, quest4_value2 as quest_value2, quest4_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 5 as pos, quest5_type as quest_type, quest5_value1 as quest_value1, quest5_value2 as quest_value2, quest5_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 6 as pos, quest6_type as quest_type, quest6_value1 as quest_value1, quest6_value2 as quest_value2, quest6_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 7 as pos, quest7_type as quest_type, quest7_value1 as quest_value1, quest7_value2 as quest_value2, quest7_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 8 as pos, quest8_type as quest_type, quest8_value1 as quest_value1, quest8_value2 as quest_value2, quest8_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 9 as pos, quest9_type as quest_type, quest9_value1 as quest_value1, quest9_value2 as quest_value2, quest9_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 10 as pos, quest10_type as quest_type, quest10_value1 as quest_value1, quest10_value2 as quest_value2, quest10_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 11 as pos, quest11_type as quest_type, quest11_value1 as quest_value1, quest11_value2 as quest_value2, quest11_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 12 as pos, quest12_type as quest_type, quest12_value1 as quest_value1, quest12_value2 as quest_value2, quest12_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 13 as pos, quest13_type as quest_type, quest13_value1 as quest_value1, quest13_value2 as quest_value2, quest13_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 14 as pos, quest14_type as quest_type, quest14_value1 as quest_value1, quest14_value2 as quest_value2, quest14_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 15 as pos, quest15_type as quest_type, quest15_value1 as quest_value1, quest15_value2 as quest_value2, quest15_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 16 as pos, quest16_type as quest_type, quest16_value1 as quest_value1, quest16_value2 as quest_value2, quest16_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 17 as pos, quest17_type as quest_type, quest17_value1 as quest_value1, quest17_value2 as quest_value2, quest17_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 18 as pos, quest18_type as quest_type, quest18_value1 as quest_value1, quest18_value2 as quest_value2, quest18_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 19 as pos, quest19_type as quest_type, quest19_value1 as quest_value1, quest19_value2 as quest_value2, quest19_time as quest_time FROM userQuestDB WITH (nolock)
	UNION ALL 
		SELECT idx, accountIDX, 20 as pos, quest20_type as quest_type, quest20_value1 as quest_value1, quest20_value2 as quest_value2, quest20_time as quest_time FROM userQuestDB WITH (nolock)
) as a
WHERE quest_type <> 0
GO


-- ----------------------------
-- procedure structure for game_practice_set_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_practice_set_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_practice_set_data]
GO

CREATE PROCEDURE [dbo].[game_practice_set_data]


	@ACCOUNT_IDX			INT,			-- 유저 인덱스
	@PRACTICE_IDX			INT,			-- 연습 인덱스
	@PRACTICE_GRADE			INT,			-- 수련장 등급
	@PRACTICE_COUNT			INT,			-- 수련장 입장횟수
	@PRACTICE_TIME			INT,			-- 수련장 시간
	@PRACTICE_RANK			INT				-- 수련장 랭크

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;
	
	DECLARE @nReturn		INT	
	SET @nReturn=0			-- True
	
	BEGIN TRAN

		IF (EXISTS(SELECT * FROM dbo.userPracticeDB WITH (NOLOCK) WHERE AccountIDX = @ACCOUNT_IDX AND PracticeIDX = @PRACTICE_IDX))
		BEGIN
			UPDATE dbo.userPracticeDB
			   SET PracticeGrade = @PRACTICE_GRADE, PracticeCount=@PRACTICE_COUNT
				, PracticeTime=@PRACTICE_TIME, PracticeRank=@PRACTICE_RANK
			 WHERE AccountIDX = @ACCOUNT_IDX
			   AND PracticeIDX = @PRACTICE_IDX;
		END
		ELSE
		BEGIN
			INSERT INTO dbo.userPracticeDB (AccountIDX, PracticeIDX, PracticeCount, PracticeGrade, PracticeTime, PracticeRank, UpdateDate, regDate) 
			VALUES ( @ACCOUNT_IDX, @PRACTICE_IDX, @PRACTICE_COUNT, @PRACTICE_GRADE, @PRACTICE_TIME, @PRACTICE_RANK, GETDATE(), GETDATE());
		END


		IF (@@ROWCOUNT = 0) or (@@ERROR <> 0)			
		BEGIN
			ROLLBACK TRAN
			SELECT -1;
			RETURN;
		END

	COMMIT TRAN
	
	SELECT @nReturn;
	RETURN;
GO


-- ----------------------------
-- procedure structure for usp_web_get_userAge
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_web_get_userAge]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[usp_web_get_userAge]
GO

CREATE PROCEDURE [dbo].[usp_web_get_userAge]
	@accountIDX	int		-- 사용자 IDX 조회 
AS
BEGIN
	SET NOCOUNT ON

	SELECT YEAR(GETDATE() - (Case When userNumber = 1 OR userNumber = 2 Then	
											Convert(datetime, Convert(varchar(8), '19' + userBirthday)) 
									       Else 
											Case When userNumber = 3 OR userNumber = 4 Then 
												Convert(datetime, Convert(varchar(8), '20' + userBirthday)) 
											End 
									       End) - 1) - YEAR(0)
	  FROM userNameDB WITH(NOLOCK) 
	 WHERE accountIDX = @accountIDX  

	SET NOCOUNT OFF
END
GO


-- ----------------------------
-- procedure structure for game_event_PirateRoulette_present_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_PirateRoulette_present_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_PirateRoulette_present_add]
GO

CREATE PROCEDURE [dbo].[game_event_PirateRoulette_present_add]
(
	@accountIDX int
)
AS

SET NOCOUNT ON

IF( EXISTS( SELECT * FROM dbo.userEventPirateRoulette_Present WITH( NOLOCK ) WHERE accountIDX = @accountIDX ) )
BEGIN
	RETURN
END
ELSE
BEGIN
	INSERT
	  INTO dbo.userEventPirateRoulette_Present( accountidx, regDate )
	VALUES ( @accountIDX, GETDATE() )
END
GO


-- ----------------------------
-- procedure structure for web_medal_temp_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_medal_temp_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_medal_temp_add]
GO

CREATE PROCEDURE [dbo].[web_medal_temp_add]
(
	@accountIDX int
,	@medalIDX int
)
AS
	INSERT INTO userMedalDB_receive (accountIDX, medalIDX, flag, regDate) VALUES (@accountIDX, @medalIDX, 0, getdate())
GO


-- ----------------------------
-- procedure structure for game_member_namecheck_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_member_namecheck_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_member_namecheck_get_data]
GO

CREATE PROCEDURE [dbo].[game_member_namecheck_get_data]
(
	@accountIDX int
)
AS
  SELECT joinType FROM userMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_buddybuddy_transfer
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_buddybuddy_transfer]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_buddybuddy_transfer]
GO

CREATE PROCEDURE [dbo].[web_buddybuddy_transfer]
(
	@accountIDX int
,	@userPWD varchar(24)
,	@mailling int
,	@userName varchar(10)
,	@userbirthday char(6)
,	@userEnCode varchar(64)
,	@userNumber tinyint
,	@userGender tinyint
)
AS
BEGIN

	SET NOCOUNT ON

	DECLARE @channelType int

	SELECT @channelType = cpType
	FROM userMemberDB WITH(NOLOCK)
	WHERE accountIDX=@accountIDX

	IF (@@ROWCOUNT = 0)
	BEGIN
		RETURN (-1)
	END

	IF (@channelType <> 500)
  	BEGIN
		RETURN (-2)
	END

	IF (EXISTS (SELECT * FROM userLoginDB WITH(NOLOCK) WHERE accountIDX=@accountIDX AND gameServerID > 0))
  	BEGIN
		RETURN (-3)
	END

	IF (EXISTS (SELECT * FROM userNameDB WITH(NOLOCK) WHERE userEnCode=@userEnCode))
  	BEGIN
		RETURN (-4)
	END


	BEGIN TRAN

	UPDATE userNameDB
	SET userName = @userName
	,	userbirthday = @userbirthday
	,	userEnCode = @userEnCode
	,	userNumber = @userNumber
	,	userGender = @userGender
	,	returnValue = 0
	WHERE accountIDX = @accountIDX

	IF (@@ROWCOUNT <> 1 OR @@ERROR <> 0)
	BEGIN
		ROLLBACK TRAN
		RETURN (-5)
	END

	UPDATE userMemberDB
	SET userPWD = @userPWD
	,	joinType = 5
	,	cpType = 0
	,	mailling = @mailling
	WHERE accountIDX = @accountIDX

	IF (@@ROWCOUNT <> 1 OR @@ERROR <> 0)
	BEGIN
		ROLLBACK TRAN
		RETURN (-6)
	END

	DELETE FROM userCooperationDB WHERE accountIDX=@accountIDX AND cpType=500

	IF (@@ROWCOUNT <> 1 OR @@ERROR <> 0)
	BEGIN
		ROLLBACK TRAN
		RETURN (-7)
	END

	COMMIT TRAN
	RETURN (1)  

END
GO


-- ----------------------------
-- procedure structure for manage_userinfo_get_item_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_get_item_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_get_item_data]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_get_item_data]
(
	@accountIDX int
)
AS
	SELECT	idx, item1_type, item1_code, item2_type, item2_code, item3_type, item3_code, item4_type, item4_code, item5_type, item5_code, 
			item6_type, item6_code, item7_type, item7_code, item8_type, item8_code, item9_type, item9_code, item10_type, item10_code, 
			item11_type, item11_code, item12_type, item12_code, item13_type, item13_code, item14_type, item14_code, item15_type, item15_code, 
			item16_type, item16_code, item17_type, item17_code, item18_type, item18_code, item19_type, item19_code, item20_type, item20_code 
	FROM userItemDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_honor_honorIDX_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_honor_honorIDX_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_honor_honorIDX_count]
GO

CREATE PROCEDURE [dbo].[web_event_honor_honorIDX_count]
(
	@honorIDX int
)
AS
	SELECT count(*) FROM event_honor WHERE honorIDX=@honorIDX
GO


-- ----------------------------
-- procedure structure for game_practice_rank_reward
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_practice_rank_reward]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_practice_rank_reward]
GO

CREATE PROCEDURE [dbo].[game_practice_rank_reward]
	@RankAStart Int, @RankAEnd Int, @RankAMent Int, @RankAPeriad Int, 
	@RankAType01 Int, @RankACode01 Int, @RankACount01 Int, 
	@RankAType02 Int, @RankACode02 Int, @RankACount02 Int, 
	@RankAType03 Int, @RankACode03 Int, @RankACount03 Int, 
	@RankAType04 Int, @RankACode04 Int, @RankACount04 Int, 
	@RankAType05 Int, @RankACode05 Int, @RankACount05 Int, 
	@RankBStart Int, @RankBEnd Int, @RankBMent Int, @RankBPeriad Int,
	@RankBType01 Int, @RankBCode01 Int, @RankBCount01 Int, 
	@RankBType02 Int, @RankBCode02 Int, @RankBCount02 Int, 
	@RankBType03 Int, @RankBCode03 Int, @RankBCount03 Int, 
	@RankBType04 Int, @RankBCode04 Int, @RankBCount04 Int, 
	@RankBType05 Int, @RankBCode05 Int, @RankBCount05 Int, 
	@RankCStart Int, @RankCEnd Int, @RankCMent Int, @RankCPeriad Int,
	@RankCType01 Int, @RankCCode01 Int, @RankCCount01 Int, 
	@RankCType02 Int, @RankCCode02 Int, @RankCCount02 Int, 
	@RankCType03 Int, @RankCCode03 Int, @RankCCount03 Int, 
	@RankCType04 Int, @RankCCode04 Int, @RankCCount04 Int, 
	@RankCType05 Int, @RankCCode05 Int, @RankCCount05 Int, 
	@RankDStart Int, @RankDEnd Int, @RankDMent Int, @RankDPeriad Int,
	@RankDType01 Int, @RankDCode01 Int, @RankDCount01 Int, 
	@RankDType02 Int, @RankDCode02 Int, @RankDCount02 Int, 
	@RankDType03 Int, @RankDCode03 Int, @RankDCount03 Int, 
	@RankDType04 Int, @RankDCode04 Int, @RankDCount04 Int, 
	@RankDType05 Int, @RankDCode05 Int, @RankDCount05 Int, 
	@RankDID varchar(20)
AS
BEGIN

	DECLARE @sendIDX int, @receiveIDX int
	SET @sendIDX = (
		SELECT accountIDX
		  FROM [LosaGame].dbo.userMemberDB WITH(NOLOCK)
		 WHERE nickName=@RankDID
	)

	IF (@sendIDX IS NULL)
	BEGIN
		SET @sendIDX = (
			SELECT accountIDX
			  FROM [LosaGame].dbo.userMemberDB WITH(NOLOCK)
			 WHERE nickName='DeveloperK'
		)
	END  


	BEGIN TRAN

		TRUNCATE TABLE [LosaGame].[dbo].[userPracticeDB_Ranking]
		TRUNCATE TABLE [LosaGame].[dbo].[userPracticeDB_Present]

		Declare @CurrentDate DateTime
		declare @StartDate NVARCHAR(10), @EndDate NVARCHAR(10), @TableDate NVARCHAR(10)
		SET @CurrentDate = GetDate()
		SET @StartDate = CONVERT(NVARCHAR(10), @CurrentDate - 7, 23)
		SET @EndDate = CONVERT(NVARCHAR(10), @CurrentDate, 23)
		SET @TableDate = CONVERT(NVARCHAR(10), @CurrentDate , 112)

		INSERT INTO [LosaGame].[dbo].[userPracticeDB_Present]
		( 
			PresentValue, PresentType1, Code1 , Value1, PresentType2, Code2 , Value2, PresentType3, Code3 , Value3, PresentType4, Code4 , Value4, PresentType5, Code5 , Value5
		)
		VALUES
        (	1, @RankAType01, @RankACode01, @RankACount01, @RankAType02, @RankACode02, @RankACount02, @RankAType03, @RankACode03, @RankACount03, @RankAType04, @RankACode04, @RankACount04, @RankAType05, @RankACode05, @RankACount05	), 
		(	2, @RankBType01, @RankBCode01, @RankBCount01, @RankBType02, @RankBCode02, @RankBCount02, @RankBType03, @RankBCode03, @RankBCount03, @RankBType04, @RankBCode04, @RankBCount04, @RankBType05, @RankBCode05, @RankBCount05	), 
		(	3, @RankCType01, @RankCCode01, @RankCCount01, @RankCType02, @RankCCode02, @RankCCount02, @RankCType03, @RankCCode03, @RankCCount03, @RankCType04, @RankCCode04, @RankCCount04, @RankCType05, @RankCCode05, @RankCCount05	), 
		(	4, @RankDType01, @RankDCode01, @RankDCount01, @RankDType02, @RankDCode02, @RankDCount02, @RankDType03, @RankDCode03, @RankDCount03, @RankDType04, @RankDCode04, @RankDCount04, @RankDType05, @RankDCode05, @RankDCount05	)
		

		INSERT INTO [LosaGame].[dbo].[userPracticeDB_Ranking]
		(
			StartDate, EndDate, AccountIDX, PracticeIDX, PracticeRank, sendIDX, value, msgType, limitDate
		)
		SELECT @StartDate, @EndDate, AccountIDX as AccountIDX, PracticeIDX AS PracticeIDX, PracticeRank AS PracticeRank, @sendIDX AS sendIDX
			, CASE WHEN @RankAStart <= PracticeRank AND PracticeRank <= @RankAEnd THEN 1
				WHEN @RankBStart <= PracticeRank AND PracticeRank <= @RankBEnd THEN 2
				WHEN @RankCStart <= PracticeRank AND PracticeRank <= @RankCEnd THEN 3
				WHEN @RankDStart <= PracticeRank AND PracticeRank <= @RankDEnd THEN 4
				END AS presentType
		, CASE WHEN @RankAStart <= PracticeRank AND PracticeRank <= @RankAEnd THEN @RankAMent
				WHEN @RankBStart <= PracticeRank AND PracticeRank <= @RankBEnd THEN @RankBMent
				WHEN @RankCStart <= PracticeRank AND PracticeRank <= @RankCEnd THEN @RankCMent
				WHEN @RankDStart <= PracticeRank AND PracticeRank <= @RankDEnd THEN @RankDMent
			END AS msgType
		, CASE WHEN @RankAStart <= PracticeRank AND PracticeRank <= @RankAEnd THEN GETDATE() + @RankAPeriad
				WHEN @RankBStart <= PracticeRank AND PracticeRank <= @RankBEnd THEN GETDATE() + @RankBPeriad
				WHEN @RankCStart <= PracticeRank AND PracticeRank <= @RankCEnd THEN GETDATE() + @RankCPeriad
				WHEN @RankDStart <= PracticeRank AND PracticeRank <= @RankDEnd THEN GETDATE() + @RankDPeriad
			END AS limitDate
		FROM
		(
			SELECT [AccountIDX], RANK()over(PARTITION BY PracticeIDX ORDER BY PracticeTime, UpdateDate) AS PracticeRank, PracticeIDX, PracticeTime 
			FROM [LosaGame].[dbo].[userPracticeDB]
		) PracticeDB
		IF (@@ROWCOUNT = 0) OR (@@ERROR <> 0)
		BEGIN
			ROLLBACK TRAN
			RETURN;
		END

		TRUNCATE TABLE [LosaGame].[dbo].[userPracticeDB]

		INSERT INTO dbo.userPresentDB
		(
			sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate
		)
		SELECT sendIDX, AccountIDX, PresentType1, Code1, Value1, 0, 0, msgType, 0, limitDate, @CurrentDate FROM [LosaGame].[dbo].[userPracticeDB_Ranking] AS UPR
		INNER JOIN [LosaGame].[dbo].[userPracticeDB_Present] AS UPP ON UPR.value = UPP.PresentValue
		WHERE Code1 > 0

		INSERT INTO dbo.userPresentDB
		(
			sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate
		)
		SELECT sendIDX, AccountIDX, PresentType2, Code2, Value2, 0, 0, msgType, 0, limitDate, @CurrentDate FROM [LosaGame].[dbo].[userPracticeDB_Ranking] AS UPR
		INNER JOIN [LosaGame].[dbo].[userPracticeDB_Present] AS UPP ON UPR.value = UPP.PresentValue
		WHERE Code2 > 0

		INSERT INTO dbo.userPresentDB
		(
			sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate
		)
		SELECT sendIDX, AccountIDX, PresentType3, Code3, Value3, 0, 0, msgType, 0, limitDate, @CurrentDate FROM [LosaGame].[dbo].[userPracticeDB_Ranking] AS UPR
		INNER JOIN [LosaGame].[dbo].[userPracticeDB_Present] AS UPP ON UPR.value = UPP.PresentValue
		WHERE Code3 > 0

		INSERT INTO dbo.userPresentDB
		(
			sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate
		)
		SELECT sendIDX, AccountIDX, PresentType4, Code4, Value4, 0, 0, msgType, 0, limitDate, @CurrentDate FROM [LosaGame].[dbo].[userPracticeDB_Ranking] AS UPR
		INNER JOIN [LosaGame].[dbo].[userPracticeDB_Present] AS UPP ON UPR.value = UPP.PresentValue
		WHERE Code4 > 0

		INSERT INTO dbo.userPresentDB
		(
			sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate
		)
		SELECT sendIDX, AccountIDX, PresentType5, Code5, Value5, 0, 0, msgType, 0, limitDate, @CurrentDate FROM [LosaGame].[dbo].[userPracticeDB_Ranking] AS UPR
		INNER JOIN [LosaGame].[dbo].[userPracticeDB_Present] AS UPP ON UPR.value = UPP.PresentValue
		WHERE Code5 > 0

		UPDATE dbo.userGameDB SET practice = 1

		--------------------------------------------------------------------
		-- 0. 프로시져 시작 할때 userGameDB 백업 하자.	
		--------------------------------------------------------------------
		DECLARE @tblName varchar(256), @sql varchar(256)
		SET @tblName = '[Backup].dbo.LosaGame_' + @TableDate + '_userPracticeDB_Ranking'
		SET @sql = 'SELECT * INTO ' + @tblName + ' FROM [LosaGame].[dbo].[userPracticeDB_Ranking] AS UPR
		INNER JOIN [LosaGame].[dbo].[userPracticeDB_Present] AS UPP ON UPR.value = UPP.PresentValue'
		execute (@sql)
	COMMIT TRAN

END
GO


-- ----------------------------
-- procedure structure for usp_web_challing_idx_srch
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_web_challing_idx_srch]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[usp_web_challing_idx_srch]
GO

CREATE PROCEDURE [dbo].[usp_web_challing_idx_srch]
	@nCpIDX		int,			-- 채널링IDX
	@nCpType	int			-- CP타입(300:엠게임, 400:엠게임, 500:버디버디, 600:네이버, 700:투니랜드)
AS
BEGIN
	SET NOCOUNT ON 

	SELECT accountIDX, cpID 
	  FROM userCooperationDB WITH (NOLOCK)
	 WHERE cpIDX = @nCpIDX 
	   AND cpType = @nCpType
	
	SET NOCOUNT OFF 
END
GO


-- ----------------------------
-- procedure structure for game_event_PirateRoulette_number_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_PirateRoulette_number_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_PirateRoulette_number_save]
GO

CREATE PROCEDURE [dbo].[game_event_PirateRoulette_number_save]
(
	@accountIDX int,
	@HP	int
,	@slot1 tinyint,	@slot2 tinyint,	@slot3 tinyint,	@slot4 tinyint,	@slot5 tinyint,	@slot6 tinyint,	@slot7 tinyint,	@slot8 tinyint,	@slot9 tinyint,	@slot10 tinyint
,	@slot11 tinyint,	@slot12 tinyint,	@slot13 tinyint,	@slot14 tinyint,	@slot15 tinyint,	@slot16 tinyint,	@slot17 tinyint,	@slot18 tinyint,	@slot19 tinyint,	@slot20 tinyint
,	@slot21 tinyint,	@slot22 tinyint,	@slot23 tinyint,	@slot24 tinyint,	@slot25 tinyint,	@slot26 tinyint,	@slot27 tinyint,	@slot28 tinyint,	@slot29 tinyint,	@slot30 tinyint
,	@slot31 tinyint,	@slot32 tinyint,	@slot33 tinyint,	@slot34 tinyint,	@slot35 tinyint,	@slot36 tinyint,	@slot37 tinyint,	@slot38 tinyint,	@slot39 tinyint,	@slot40 tinyint
)
AS

SET NOCOUNT ON

UPDATE dbo.userEventPirateRoulette_Number
   SET HP = @HP, slot1 = @slot1, slot2 = @slot2, slot3 = @slot3, slot4 = @slot4, slot5 = @slot5
	, slot6 = @slot6, slot7 = @slot7, slot8 = @slot8, slot9 = @slot9, slot10 = @slot10
	, slot11 = @slot11, slot12 = @slot12, slot13 = @slot13, slot14 = @slot14, slot15 = @slot15
	, slot16 = @slot16, slot17 = @slot17, slot18 = @slot18, slot19 = @slot19, slot20 = @slot20
	, slot21 = @slot21, slot22 = @slot22, slot23 = @slot23, slot24 = @slot24, slot25 = @slot25
	, slot26 = @slot26, slot27 = @slot27, slot28 = @slot28, slot29 = @slot29, slot30 = @slot30
	, slot31 = @slot31, slot32 = @slot32, slot33 = @slot33, slot34 = @slot34, slot35 = @slot35
	, slot36 = @slot36, slot37 = @slot37, slot38 = @slot38, slot39 = @slot39, slot40 = @slot40

WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_main_user_ranking
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_main_user_ranking]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_main_user_ranking]
GO

CREATE PROCEDURE [dbo].[web_main_user_ranking]

AS
	SELECT TOP 5 b.accountIDX, b.nickName, a.userLevel, a.ranking_2day, a.ranking_1day 
	FROM userRankingDB_classgroup a WITH(NOLOCK) JOIN userMemberDB b WITH(NOLOCK) ON a.accountIDX=b.accountIDX 
	ORDER BY a.ranking_1day ASC
GO


-- ----------------------------
-- procedure structure for game_member_get_userNickname_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_member_get_userNickname_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_member_get_userNickname_count]
GO

CREATE PROCEDURE [dbo].[game_member_get_userNickname_count]
(
	@userID varchar(20)
)
AS
	DECLARE @cnt1 int, @cnt2 int, @cnt3 int
	SET @cnt1 = (SELECT count(*) FROM userMemberDB WHERE userID=@userID)
	SET @cnt2 = (SELECT count(*) FROM userMemberDB WHERE nickName=@userID)
	SET @cnt3 = (SELECT count(*) FROM manage_memberDB WHERE userID=@userID)

	SELECT @cnt1 + @cnt2 + @cnt3 AS 'recordCnt'
GO


-- ----------------------------
-- procedure structure for web_block_ip_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_block_ip_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_block_ip_get_list]
GO

CREATE PROCEDURE [dbo].[web_block_ip_get_list]
AS
	SELECT content FROM define_site_config WHERE objName = 'blockIP'
GO


-- ----------------------------
-- procedure structure for manage_userinfo_get_guild_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_get_guild_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_get_guild_data]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_get_guild_data]
(
	@accountIDX int
)
AS

SELECT b.guildName, a.guildPosition, a.guildJoinType, b.ranking, b.point, b.guildLevel, b.maxcount, b.membercount FROM userGuildInfoDB a JOIN userGuildDB b ON a.guildIDX = b.idx 
WHERE a.accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_honor_accountIDX_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_honor_accountIDX_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_honor_accountIDX_count]
GO

CREATE PROCEDURE [dbo].[web_event_honor_accountIDX_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM event_honor WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_practice_Init_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_practice_Init_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_practice_Init_count]
GO

CREATE PROCEDURE [dbo].[game_practice_Init_count]

	@ACCOUNT_IDX			INT,
	@PRACTICE_IDX			INT,			-- 연습 인덱스
	@PRACTICE_COUNT			INT			-- 수련장 입장횟수

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	SELECT COUNT(*) FROM dbo.userPracticeDB WHERE AccountIDX = @ACCOUNT_IDX AND PracticeIDX = @PRACTICE_IDX
	IF(@@ROWCOUNT = 0)
	BEGIN
		SELECT -1;
		RETURN ;
	END

	BEGIN TRAN

		UPDATE dbo.userPracticeDB 
		SET PracticeCount = @PRACTICE_COUNT
		WHERE AccountIDX = @ACCOUNT_IDX AND PracticeIDX = @PRACTICE_IDX

		IF (@@ROWCOUNT = 0) or (@@ERROR <> 0)			
		BEGIN
			ROLLBACK TRAN
			SELECT -1;
			RETURN;
		END

	COMMIT TRAN
	
	SELECT 1;
	RETURN;
GO


-- ----------------------------
-- procedure structure for crreate_lsid_member_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[crreate_lsid_member_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[crreate_lsid_member_add]
GO

CREATE PROCEDURE [dbo].[crreate_lsid_member_add]

	@USERID			VARCHAR(20),	
	@NICKNAME		VARCHAR(20)

AS

	DECLARE @ITEMTYPE	INT, @ITEMVALUE INT, @ITEMVALUE2 INT
	
	SET NOCOUNT ON
	
	SELECT *
	  FROM dbo.itemCode
GO


-- ----------------------------
-- procedure structure for game_event_PirateRoulette_number_get
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_PirateRoulette_number_get]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_PirateRoulette_number_get]
GO

CREATE PROCEDURE [dbo].[game_event_PirateRoulette_number_get]
(
	@accountIDX int
)
AS

SET NOCOUNT ON

IF ( EXISTS(SELECT * FROM dbo.userEventPirateRoulette_Number WITH( NOLOCK ) WHERE accountIDX = @accountIDX) )
BEGIN
	SELECT HP, slot1, slot2, slot3, slot4, slot5
		, slot6, slot7, slot8, slot9, slot10
		, slot11, slot12, slot13, slot14, slot15
		, slot16, slot17, slot18, slot19, slot20
		, slot21, slot22, slot23, slot24, slot25
		, slot26, slot27, slot28, slot29, slot30
		, slot31, slot32, slot33, slot34, slot35
		, slot36, slot37, slot38, slot39, slot40	
	  FROM dbo.userEventPirateRoulette_Number WITH( NOLOCK )
 
	 WHERE accountIDX = @accountIDX
END
ELSE
BEGIN
	SELECT -1 AS HP
		, 0 AS slot1, 0 AS slot2, 0 AS slot3, 0 AS slot4, 0 AS slot5
		, 0 AS slot6, 0 AS slot7, 0 AS slot8, 0 AS slot9, 0 AS slot10
		, 0 AS slot11, 0 AS slot12, 0 AS slot13, 0 AS slot14, 0 AS slot15
		, 0 AS slot16, 0 AS slot17, 0 AS slot18, 0 AS slot19, 0 AS slot20
		, 0 AS slot21, 0 AS slot22, 0 AS slot23, 0 AS slot24, 0 AS slot25
		, 0 AS slot26, 0 AS slot27, 0 AS slot28, 0 AS slot29, 0 AS slot30
		, 0 AS slot31, 0 AS slot32, 0 AS slot33, 0 AS slot34, 0 AS slot35
		, 0 AS slot36, 0 AS slot37, 0 AS slot38, 0 AS slot39, 0 AS slot40
END
GO


-- ----------------------------
-- procedure structure for web_main_get_limit_reason
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_main_get_limit_reason]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_main_get_limit_reason]
GO

CREATE PROCEDURE [dbo].[web_main_get_limit_reason]
(
	@accountIDX int
)
AS
	SELECT TOP 1 reason FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK) WHERE receiveidx=@accountIDX and resultType=1 and reason is not null ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for log_event_marble_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[log_event_marble_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[log_event_marble_add]
GO

CREATE PROCEDURE [dbo].[log_event_marble_add]
(
	@accountidx	int
,	@userID		varchar(20)
,	@cpType		int
)
AS

BEGIN
	SET NOCOUNT ON;

    INSERT INTO [LosaGame_log].[dbo].log_event_marble (accountidx, userID, cpType, regDate)
	VALUES (@accountidx, @userID, @cpType, GETDATE())
END
GO


-- ----------------------------
-- procedure structure for web_avatar_shop_buy_log
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_avatar_shop_buy_log]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_avatar_shop_buy_log]
GO

CREATE PROCEDURE [dbo].[web_avatar_shop_buy_log]
(
	@accountIDX varchar(12)
,	@userIP varchar(16)
,	@DBID varchar(16)
,	@applyType char(2)
,	@amount int
,	@note varchar(500)
)
AS
	INSERT INTO LosaGame_log.DBO.log_cash (accountIDX, userIP, DBID, applyType, amount, note, regDate)
	VALUES (@accountIDX, @userIP, @DBID, @applyType, @amount, @note, getdate())
GO


-- ----------------------------
-- procedure structure for manage_userinfo_get_gear_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_get_gear_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_get_gear_data]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_get_gear_data]
(
	@accountIDX int
)
AS

SELECT idx, 
	   item1_type, item1_reinforce, item1_tradetype, item1_mcustom, item1_fcustom, item1_limitType, item1_limitDate, 
	   item2_type, item2_reinforce, item2_tradetype, item2_mcustom, item2_fcustom, item2_limitType, item2_limitDate,
	   item3_type, item3_reinforce, item3_tradetype, item3_mcustom, item3_fcustom, item3_limitType, item3_limitDate,
	   item4_type, item4_reinforce, item4_tradetype, item4_mcustom, item4_fcustom, item4_limitType, item4_limitDate,
	   item5_type, item5_reinforce, item5_tradetype, item5_mcustom, item5_fcustom, item5_limitType, item5_limitDate,
	   item6_type, item6_reinforce, item6_tradetype, item6_mcustom, item6_fcustom, item6_limitType, item6_limitDate,
	   item7_type, item7_reinforce, item7_tradetype, item7_mcustom, item7_fcustom, item7_limitType, item7_limitDate,
	   item8_type, item8_reinforce, item8_tradetype, item8_mcustom, item8_fcustom, item8_limitType, item8_limitDate,
	   item9_type, item9_reinforce, item9_tradetype, item9_mcustom, item9_fcustom, item9_limitType, item9_limitDate,
	   item10_type, item10_reinforce, item10_tradetype, item10_mcustom, item10_fcustom, item10_limitType, item10_limitDate 
FROM userItemExtraDB WITH(NOLOCK)
WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_practice_get_my_Ranking_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_practice_get_my_Ranking_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_practice_get_my_Ranking_list]
GO

CREATE PROCEDURE [dbo].[game_practice_get_my_Ranking_list]

	@ACCOUNT_IDX		INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	SELECT StartDate, EndDate, PracticeIDX, PracticeRank, PresentType1, Code1, Value1, PresentType2, Code2, Value2, PresentType3, Code3, Value3, PresentType4, Code4, Value4, PresentType5, Code5, Value5
	FROM dbo.userPracticeDB_Ranking AS UPR WITH (READUNCOMMITTED) 
	INNER JOIN dbo.userPracticeDB_Present AS UPP ON UPR.value = UPP.PresentValue
	 WHERE AccountIDX = @ACCOUNT_IDX
GO


-- ----------------------------
-- procedure structure for z_nouse_100910_web_friend_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_100910_web_friend_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_100910_web_friend_list]
GO

CREATE PROCEDURE [dbo].[z_nouse_100910_web_friend_list]
(
	@accountIDX varchar(10)
,	@pagesize varchar(8)
,	@notpage varchar(8)
)
AS
	DECLARE @sql varchar(1000)

	SET @sql = 'SELECT TOP ' + @pagesize + ' b.userLevel, d.accountIDX, d.nickName, b.connDate, c.gameServerID, ISNULL(e.class, 0) as ''userRanking'' '
	SET @sql = @sql + 'FROM userFriendDB a INNER JOIN userGameDB b ON a.friendAccIDX = b.accountIDX INNER JOIN userLoginDB c ON a.friendAccIDX = c.accountIDX INNER JOIN userMemberDB d ON a.friendAccIDX = d.accountIDX LEFT JOIN userRankingDB e ON a.friendAccIDX = e.accountIDX '
	SET @sql = @sql + 'WHERE a.userAccIDX=' + @accountIDX + ' and a.flag=1 and friendAccIDX not in (SELECT accountIDX FROM userMemberDB WHERE userType < 100) and a.idx not in (SELECT TOP ' + @notpage + ' a.idx FROM userFriendDB a INNER JOIN userGameDB b ON a.friendAccIDX = b.accountIDX INNER JOIN userLoginDB c ON a.friendAccIDX = c.accountIDX INNER JOIN userMemberDB d ON a.friendAccIDX = d.accountIDX LEFT JOIN userRankingDB e ON a.friendAccIDX = e.accountIDX WHERE a.userAccIDX=' + @accountIDX + ' and a.flag=1 and friendAccIDX not in (SELECT accountIDX FROM userMemberDB WHERE userType < 10) ORDER BY b.userLevel DESC) '
	SET @sql = @sql + 'ORDER BY b.userLevel DESC'

	EXECUTE(@sql)
GO


-- ----------------------------
-- procedure structure for create_member_add_2014_v1411
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[create_member_add_2014_v1411]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[create_member_add_2014_v1411]
GO

CREATE PROCEDURE [dbo].[create_member_add_2014_v1411]
(
	@userID varchar(20)
,	@nickName varchar(20)
)
AS

BEGIN

SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN TRAN

DECLARE @accountIDX int

INSERT INTO dbo.userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, limitType, limitDate, regDate)
VALUES (@userID, @nickName, '', '', 0, 100, 10, 0, '1999-01-01', GETDATE())

SET @accountIDX = SCOPE_IDENTITY()

INSERT INTO dbo.userGameDB (
	accountIDX, userState, gameMoney, playTime, conn_count, userLevel, userEXP, rencpoint, renspoint, relateLevel, regionType, refillData, connDate, regDate
)
VALUES (
	@accountIDX, -1, 100000000 , 1000, 1000, 45, 0, 0, 0, 0, 0, 0, GETDATE(), GETDATE()
)


INSERT INTO userRecordBattleDB (
	accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, regDate
)
VALUES (
	@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE()
)

INSERT INTO dbo.userLoginDB (accountIDX, encodeKey, gameServerID, connDate)
VALUES (@accountIDX, '111111111111111', 0, GETDATE())

--용병슬롯 -> 3.4000010 / value 갯수 96
INSERT INTO dbo.userItemEtcDB (
	accountIDX, item1_type, item1_value1, item1_value2
)
VALUES (
	@accountIDX, 4000010, 96, 1
)


--??? ???? 
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	34	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	1	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	15	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	17	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	21	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	27	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	16	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	40	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	51	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	36	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	13	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	28	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	29	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	33	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	25	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	19	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	23	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	64	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	42	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	45	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	47	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	49	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	59	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	63	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	66	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	67	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	70	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	72	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	73	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	68	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	53	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	81	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	12	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	6	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	14	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	69	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	87	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	89	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	92	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	94	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	97	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	3	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	7	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	10	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	18	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	22	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	26	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	11	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	46	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	83	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	85	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	4	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	5	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	20	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	38	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	9	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	24	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	65	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	76	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	8	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	2	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	31	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	44	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	55	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	57	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	75	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	90	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	100	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	103	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	37	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	30	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	52	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	50	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	41	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	48	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	77	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	39	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	54	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	56	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	58	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	61	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	62	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	71	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	74	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	98	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	82	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	84	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	110	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	93	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	104	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())

--장비 (accountIDX, item_type, 25, ???, 0, 0, 0, 1, ??/@accountIDX, 	10034	 ,25, 	1	  ,0 ,0 ,0 ,1 ,GETDATE()
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10034 ,30	,1	  	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10046, 30,	 2		,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110016	,30, 	3	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110037	,30,     4	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210003	,30, 	5	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310013	,30,     6  ,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310041	,30,     7  ,0 ,0 ,0 ,0 ,1 ,GETDATE(),  111037	,30,     8  ,0 ,0, 0 ,0 ,1 ,GETDATE(), 	211040	,30,     9  ,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311032	,30,    10  ,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10001 ,30	,11		,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10083, 30,	 12		,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110040	,30, 	13	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110030	,30, 	14	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210007	,30, 	15	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310028	,30, 	16	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310048	,30, 	17	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111049	,30, 	18	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211044	,30, 	19	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311002	,30, 	20	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10015 ,30	,21		,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10085, 30,	 22		,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110051	,30, 	23	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110052	,30, 	24	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210010	,30, 	25	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310029	,30, 	26	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310077	,30, 	27	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111086	,30, 	28	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211027	,30, 	29	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311024	,30, 	30	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10017 ,30	,31		,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10004, 30,	 32		,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110036	,30, 	33	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110050	,30, 	34	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210018	,30, 	35  ,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310033	,30, 	36	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310039	,30, 	37	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111028	,30, 	38	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211045	,30, 	39	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311040	,30, 	40	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10021 ,30	,41		,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10005, 30,	 42		,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110013	,30, 	43	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110041	,30, 	44	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210022	,30, 	45	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310025	,30, 	46	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310054	,30, 	47	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111048	,30, 	48	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211041	,30, 	49	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311030	,30, 	50	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10027 ,30	,51		,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10020, 30,	 52		,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110028	,30, 	53	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110048	,30, 	54	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210026	,30, 	55	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310019	,30, 	56	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310056	,30, 	57	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111053	,30, 	58	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211029	,30, 	59	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311086	,30, 	60	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10016 ,30	,61		,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10038, 30,	 62		,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110029	,30, 	63	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110077	,30, 	64	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210011	,30, 	65	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310023	,30, 	66	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310058	,30, 	67	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111054	,30, 	68	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211033	,30, 	69	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311039	,30, 	70	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10040 ,30	,71		,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10009, 30,	 72		,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110033	,30, 	73	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110039	,30, 	74	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210046	,30, 	75	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310064	,30, 	76	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310061	,30, 	77	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111057	,30, 	78	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211036	,30, 	79	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311028	,30, 	80	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10051 ,30	,81		,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10024, 30,	 82		,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110025	,30, 	83	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110054	,30, 	84	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210004	,30, 	85	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310042	,30, 	86	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310062	,30, 	87	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111051	,30, 	88	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211018	,30, 	89	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311034	,30, 	90	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10036 ,30	,91		,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10065, 30,	 92		,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110019	,30, 	93	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110056	,30, 	94	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210005	,30, 	95	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310045	,30, 	96	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310071	,30, 	97	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111069	,30, 	98  ,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211061	,30, 	99	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311018	,30, 	100, 0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10013 ,30	,101	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10076, 30,	 102	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110023	,30, 	103	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110058	,30, 	104	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210020	,30, 	105	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310047	,30, 	106	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310074	,30, 	107	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111059	,30, 	108	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211052	,30, 	109	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311036	,30, 	110	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10028 ,30	,111	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10008, 30,	 112	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110064	,30, 	113	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110061	,30, 	114	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210038	,30, 	115	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310049	,30, 	116	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310098	,30, 	117	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111046	,30, 	118	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211037	,30, 	119	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311038	,30, 	120	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10029 ,30	,121	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10002, 30,	 122	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110042	,30, 	123	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110062	,30, 	124	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210009	,30, 	125	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310059	,30, 	126	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111009	,30, 	127	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111055	,30, 	128	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211049	,30, 	129	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311015	,30, 	130	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10033 ,30	,131	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10031, 30,	 132	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110045	,30, 	133	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110071	,30, 	134	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210024	,30, 	135	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310063	,30, 	136	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111008	,30, 	137	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111076	,30, 	138	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211009	,30, 	139	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311042	,30, 	140	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10025 ,30	,141	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10044, 30,	 142	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110047	,30, 	143	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110074	,30, 	144	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210065	,30, 	145	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310066	,30, 	146	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111007	,30, 	147	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111070	,30, 	148	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211042	,30, 	149	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311047	,30, 	150	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10019 ,30	,151	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10055, 30,	 152	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110049	,30, 	153	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110098	,30, 	154	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210008	,30, 	155	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310067	,30, 	156	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111003	,30, 	157	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111042	,30, 	158	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211059	,30, 	159	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311041	,30, 	160	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10023 ,30	,161	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10057, 30,	 162	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110059	,30, 	163	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210034	,30, 	164	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210002	,30, 	165	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310070	,30, 	166	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111010	,30, 	167	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111058	,30, 	168	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211051	,30, 	169	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311035	,30, 	170	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10064 ,30	,171	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10075, 30,	 172	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110063	,30, 	173	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210001	,30, 	174	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210031	,30, 	175	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310072	,30, 	176	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111014	,30, 	177	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111061	,30, 	178	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211058	,30, 	179	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311025	,30, 	180	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10042 ,30	,181	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10090, 30,	 182	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110066	,30, 	183	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210015	,30, 	184	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210044	,30, 	185	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310073	,30, 	186	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111001	,30, 	187	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111062	,30, 	188	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211056	,30, 	189	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311037	,30, 	190	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10045 ,30	,191	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10100, 30,	 192	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110067	,30, 	193	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210017	,30, 	194	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210055	,30, 	195	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310068	,30, 	196	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111002	,30, 	197	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111060	,30, 	198	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211043	,30, 	199	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311033	,30, 	200	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10047 ,30	,201	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10103, 30,	 202	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110070	,30, 	203	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210021	,30, 	204	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210057	,30, 	205	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310053	,30, 	206	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111004	,30, 	207	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111064	,30, 	208	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211057	,30, 	209	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311054	,30, 	210	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10049 ,30	,211	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10037, 30,	 212	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110072	,30, 	213	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210027	,30, 	214	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210075	,30, 	215	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310081	,30, 	216	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111006	,30, 	217	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111068	,30, 	218	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211054	,30, 	219	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311049	,30, 	220	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10059 ,30	,221	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10030, 30,	 222	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110073	,30, 	223	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210016	,30, 	224	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210037	,30, 	225	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310003	,30, 	226	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111025	,30, 	227	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111063	,30, 	228	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211046	,30, 	229	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311029	,30, 	230	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10063 ,30	,231	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10052, 30,	 232	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110068	,30, 	233	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210040	,30, 	234	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210030	,30, 	235	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310007	,30, 	236	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111026	,30, 	237	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111065	,30, 	238	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211072	,30, 	239	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311043	,30, 	240	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10066 ,30	,241	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10050, 30,	 242	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110053	,30, 	243	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210051	,30, 	244	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210052	,30, 	245	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310010	,30, 	246	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111022	,30, 	247	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111032	,30, 	248	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211055	,30, 	249	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311055	,30, 	250	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10067 ,30	,251	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10041, 30,	 252	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110081	,30, 	253	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210036	,30, 	254	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210050	,30, 	255	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310018	,30, 	256	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111023	,30, 	257	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111066	,30, 	258	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211063	,30, 	259	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311053	,30, 	260	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10070 ,30	,261	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10048, 30,	 262	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110003	,30, 	263	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210013	,30, 	264	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210041	,30, 	265	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310022	,30, 	266	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111027	,30, 	267	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111067	,30, 	268	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211039	,30, 	269	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111037	,30, 	270	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10072 ,30	,271	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10077, 30,	 272	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110007	,30, 	273	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210028	,30, 	274	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210048	,30, 	275	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310026	,30, 	276	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111013	,30, 	277	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211013	,30, 	278	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211038	,30, 	279	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311056	,30, 	280	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10073 ,30	,281	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10039, 30,	 282	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110010	,30, 	283	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210029	,30, 	284	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210077	,30, 	285	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310011	,30, 	286	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111036	,30, 	287	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211025	,30, 	288	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211050	,30, 	289	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311046	,30, 	290	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10068 ,30	,291	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10054, 30,	 292	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110018	,30, 	293	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210033	,30, 	294	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210039	,30, 	295	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310046	,30, 	296	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111024	,30, 	297	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211021	,30, 	298	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211060	,30, 	299	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311052	,30, 	300	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10053 ,30	,301	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10056, 30,	 302	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110022	,30, 	303	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210025	,30, 	304	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210054	,30, 	305	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310004	,30, 	306	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111043	,30, 	307	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211023	,30, 	308	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211070	,30, 	309	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311050	,30, 	310	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10081 ,30	,311	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10058, 30,	 312	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110026	,30, 	313	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210019	,30, 	314	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210056	,30, 	315	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310005	,30, 	316	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111033	,30, 	317	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211006	,30, 	318	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211047	,30, 	319	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311048	,30, 	320	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10012 ,30	,321	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10061, 30,	 322	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110011	,30, 	323	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210023	,30, 	324	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210058	,30, 	325	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310020	,30, 	326	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111031	,30, 	327	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211005	,30, 	328	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211062	,30, 	329	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311063	,30, 	330	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10006 ,30	,331	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10062, 30,	 332	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110046	,30, 	333	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210064	,30, 	334	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210061	,30, 	335	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310038	,30, 	336	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111045	,30, 	337	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211003	,30, 	338	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211078	,30, 	339	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311059	,30, 	340	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10014 ,30	,341	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10071, 30,	 342	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110004	,30, 	343	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210042	,30, 	344	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210062	,30, 	345	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310009	,30, 	346	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111034	,30, 	347	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211007	,30, 	348	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311021	,30, 	349	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311020	,30, 	350	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10069 ,30	,351	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10074, 30,	 352	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110005	,30, 	353	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210045	,30, 	354	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210071	,30, 	355	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310024	,30, 	356	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111021	,30, 	357	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211004	,30, 	358	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311022	,30, 	359	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311067	,30, 	360	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10087 ,30	,361	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10098, 30,	 362	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110020	,30, 	363	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210047	,30, 	364	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210074	,30, 	365	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310065	,30, 	366	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111029	,30, 	367	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211001	,30, 	368	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311019	,30, 	369	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311057	,30, 	370	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10089 ,30	,371	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10082, 30,	 372	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110038	,30, 	373	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210049	,30, 	374	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210098	,30, 	375	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310008	,30, 	376	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111044	,30, 	377	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211026	,30, 	378	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311013	,30, 	379	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311051	,30, 	380	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10092 ,30	,381	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10084, 30,	 382	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110009	,30, 	383	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210059	,30, 	384	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310034	,30, 	385	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310002	,30, 	386	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111041	,30, 	387	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211019	,30, 	388	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311007	,30, 	389	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311061	,30, 	390	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10094 ,30	,391	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10110, 30,	 392	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110024	,30, 	393	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210063	,30, 	394	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310001	,30, 	395	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310031	,30, 	396	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111035	,30, 	397	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211024	,30, 	398	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311010	,30, 	399	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311062	,30, 	400	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10097 ,30	,401	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10093, 30,	 402	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110065	,30, 	403	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210066	,30, 	404	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310015	,30, 	405	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310044	,30, 	406	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111039	,30, 	407	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211034	,30, 	408	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311009	,30, 	409	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311064	,30, 	410	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10003 ,30	,411	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	10104, 30,	 412	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110008	,30, 	413	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210067	,30, 	414	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310017	,30, 	415	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310055	,30, 	416	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111030	,30, 	417	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211020	,30, 	418	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311003	,30, 	419	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311060	,30, 	420	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10007 ,30	,421	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110034, 30,	 422	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110002	,30, 	423	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210070	,30, 	424	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310021	,30, 	425	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310057	,30, 	426	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111040	,30, 	427	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211030	,30, 	428	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311006	,30, 	429	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211039	,30, 	430	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10010 ,30	,431	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110001, 30,	 432	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110031	,30, 	433	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210072	,30, 	434	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310027	,30, 	435	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310075	,30, 	436	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111047	,30, 	437	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211032	,30, 	438	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311001	,30, 	439	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311070	,30, 	440	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10018 ,30	,441	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110015, 30,	 442	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110044	,30, 	443	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210073	,30, 	444	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310016	,30, 	445	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310037	,30, 	446	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111050	,30, 	447	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211066	,30, 	448	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311008	,30, 	449	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311066	,30, 	450	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10022 ,30	,451	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110017, 30,	 452	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110055	,30, 	453	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210068	,30, 	454	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310040	,30, 	455	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310030	,30, 	456	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111052	,30, 	457	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211014	,30, 	458	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311005	,30, 	459	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311073	,30, 	460	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10026 ,30	,461	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110021, 30,	 462	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110057	,30, 	463	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210053	,30, 	464	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310051	,30, 	465	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310052	,30, 	466	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111038	,30, 	467	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211035	,30, 	468	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311016	,30, 	469	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311023	,30, 	470	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom, item3_failexp, item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom, item4_failexp, item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom, item5_failexp, item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom, item6_failexp, item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom, item7_failexp, item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom, item8_failexp, item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom, item9_failexp, item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom, item10_failexp, item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10011 ,30	,471	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	110027, 30,	 472	,0 ,0 ,0 ,0 ,1  ,GETDATE(),	110075	,30, 	473	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	210081	,30, 	474	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310036	,30, 	475	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	310050	,30, 	476	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	111056	,30, 	477	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	211028	,30, 	478	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311031	,30, 	479	,0 ,0 ,0 ,0 ,1 ,GETDATE(), 	311068	,30, 	480	,0 ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom, item1_failexp, item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom, item2_failexp, item2_limitType,item2_limitDate)VALUES (@accountIDX, 211053 ,30, 481	,0 ,0 ,0,0  ,1 ,GETDATE(), 311065, 30,	 482, 0 ,0 ,0 ,0 ,1 ,GETDATE())
--용병레벨
INSERT INTO dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 34, 50, 0, 36, 50, 0, 42, 50, 0, 72, 50, 0, 87, 50, 0, 22, 50, 0, 38, 50, 0,  55, 50, 0, 50, 50, 0, 62, 50, 0)
INSERT INTO dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX ,  1, 50, 0, 13, 50, 0, 45, 50, 0, 73, 50, 0, 89, 50, 0, 26, 50, 0,  9, 50, 0,  57, 50, 0, 41, 50, 0, 71, 50, 0)
INSERT INTO dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 15, 50, 0, 28, 50, 0, 47, 50, 0, 68, 50, 0, 92, 50, 0, 11, 50, 0, 24, 50, 0,  75, 50, 0, 48, 50, 0, 74, 50, 0)
INSERT INTO dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 17, 50, 0, 29, 50, 0, 49, 50, 0, 53, 50, 0, 94, 50, 0, 46, 50, 0, 65, 50, 0,  90, 50, 0, 77, 50, 0, 98, 50, 0)
INSERT INTO dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 21, 50, 0, 33, 50, 0, 59, 50, 0, 81, 50, 0, 97, 50, 0, 83, 50, 0, 76, 50, 0, 100, 50, 0, 39, 50, 0, 82, 50, 0)
INSERT INTO dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 27, 50, 0, 25, 50, 0, 63, 50, 0, 12, 50, 0,  3, 50, 0, 85, 50, 0,  8, 50, 0, 103, 50, 0, 54, 50, 0, 84, 50, 0)
INSERT INTO dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 16, 50, 0, 19, 50, 0, 66, 50, 0,  6, 50, 0,  7, 50, 0,  4, 50, 0,  2, 50, 0,  37, 50, 0, 56, 50, 0, 110, 50, 0)
INSERT INTO dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 40, 50, 0, 23, 50, 0, 67, 50, 0, 14, 50, 0, 10, 50, 0,  5, 50, 0, 31, 50, 0,  30, 50, 0, 58, 50, 0, 93, 50, 0)
INSERT INTO dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 51, 50, 0, 64, 50, 0, 70, 50, 0, 69, 50, 0, 18, 50, 0, 20, 50, 0, 44, 50, 0,  52, 50, 0, 61, 50, 0, 104, 50, 0)


IF (@@ERROR = 0)
    COMMIT TRAN
ELSE
    ROLLBACK TRAN


END
GO


-- ----------------------------
-- procedure structure for game_event_PirateRoulette_number_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_PirateRoulette_number_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_PirateRoulette_number_add]
GO

CREATE PROCEDURE [dbo].[game_event_PirateRoulette_number_add]
(
	@accountIDX int,
	@HP int
)
AS

SET NOCOUNT ON

IF( EXISTS( SELECT * FROM dbo.userEventPirateRoulette_Number WITH( NOLOCK ) WHERE accountIDX = @accountIDX ) )
BEGIN
	RETURN
END
ELSE
BEGIN
	INSERT
	  INTO dbo.userEventPirateRoulette_Number( accountidx, HP, regDate )
	VALUES ( @accountIDX, @HP, GETDATE() )
END
GO


-- ----------------------------
-- procedure structure for web_main_get_limit
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_main_get_limit]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_main_get_limit]
GO

CREATE PROCEDURE [dbo].[web_main_get_limit]
(
	@accountIDX int
)
AS
	SELECT limitType, limitDate FROM userMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for temp_game_present_add_test
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[temp_game_present_add_test]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[temp_game_present_add_test]
GO

CREATE PROCEDURE [dbo].[temp_game_present_add_test]
(
	@sendNick varchar(20)
,	@receiveNick varchar(20)
,	@persentType smallint
,	@value1 int
,	@value2 int
,	@value3 int
,	@value4 int
,	@msgType smallint
,	@limitDate datetime
,	@flag smallint
)
AS
	DECLARE @sendIDX int, @receiveIDX int
	SET @sendIDX = (SELECT accountIDX FROM userMemberDB WHERE nickName=@sendNick)
	SET @receiveIDX = (SELECT accountIDX FROM userMemberDB WHERE nickName=@receiveNick)

	INSERT INTO temp_userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate)
	VALUES (@sendIDX, @receiveIDX, @persentType, @value1, @value2, @value3, @value4, @msgType, @flag, @limitDate, getdate())
GO


-- ----------------------------
-- procedure structure for web_event_1st_anniversary_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_1st_anniversary_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_1st_anniversary_add]
GO

CREATE PROCEDURE [dbo].[web_event_1st_anniversary_add]
(
	@accountIDX int
,	@cpType int
,	@userIP varchar(15)
,	@flag tinyint
)
AS
	BEGIN TRAN

	INSERT INTO LosaGame_log.DBO.log_event_1st_anniversary (accountIDX, cpType, userIP, flag, regDate)
	VALUES (@accountIDX, @cpType, @userIP, @flag, getdate())

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, 3, 1000022, 1, 20, 1, getdate()+14, getdate())

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, 3, 1000022, 1, 20, 1, getdate()+14, getdate())

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, 3, 1000022, 1, 20, 1, getdate()+14, getdate())

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, 3, 1000022, 1, 20, 1, getdate()+14, getdate())

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, 3, 1000022, 1, 20, 1, getdate()+14, getdate())

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for manage_userinfo_get_edit_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_get_edit_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_get_edit_data]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_get_edit_data]
(
	@accountIDX int
)
AS
	SELECT a.nickName, a.email, a.mailling, a.joinType, b.tel, b.mobile FROM userMemberDB a LEFT JOIN userInfoBDB b ON a.accountIDX=b.accountIDX 
	WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_practice_get_my_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_practice_get_my_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_practice_get_my_list]
GO

CREATE PROCEDURE [dbo].[game_practice_get_my_list]

	@ACCOUNT_IDX		INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	SELECT practiceIDX, PracticeGrade, PracticeCount, PracticeTime, PracticeRank
	  FROM dbo.userPracticeDB WITH (READUNCOMMITTED)
	 WHERE AccountIDX = @ACCOUNT_IDX
GO


-- ----------------------------
-- procedure structure for z_nouse_110414_game_character_get_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_110414_game_character_get_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_110414_game_character_get_self_index]
GO

CREATE PROCEDURE [dbo].[z_nouse_110414_game_character_get_self_index]
(
	@accountIDX varchar(12)
,	@getCount varchar(8)
)
As
	DECLARE @sql varchar(500)
	SET @sql = 'SELECT TOP ' + @getCount + ' idx FROM userCharacterDB WHERE accountIDX = ''' + @accountIDX + ''' ORDER BY idx DESC'
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for create_member_add_2014
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[create_member_add_2014]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[create_member_add_2014]
GO

CREATE PROCEDURE [dbo].[create_member_add_2014]
(
	@userID varchar(20)
,	@nickName varchar(20)
)
AS

BEGIN

SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN TRAN

DECLARE @accountIDX int

INSERT INTO dbo.userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, limitType, limitDate, regDate)
VALUES (@userID, @nickName, '', '', 0, 100, 10, 0, '1999-01-01', GETDATE())

SET @accountIDX = SCOPE_IDENTITY()

INSERT INTO dbo.userGameDB (
	accountIDX, userState, gameMoney, playTime, conn_count, userLevel, userEXP, rencpoint, renspoint, relateLevel, regionType, refillData, connDate, regDate
)
VALUES (
	@accountIDX, -1, 80000000 , 1000, 1000, 30, 0, 0, 0, 0, 0, 0, GETDATE(), GETDATE()
)


INSERT INTO userRecordBattleDB (
	accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, regDate
)
VALUES (
	@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE()
)

INSERT INTO dbo.userLoginDB (accountIDX, encodeKey, gameServerID, connDate)
VALUES (@accountIDX, '111111111111111', 0, GETDATE())

--용병슬롯 -> 3.4000010 / value 갯수 96
INSERT INTO dbo.userItemEtcDB (
	accountIDX, item1_type, item1_value1, item1_value2
)
VALUES (
	@accountIDX, 4000010, 96, 1
)


--??? ???? 
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	34	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	1	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	15	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	17	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	21	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	27	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	16	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	40	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	51	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	36	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	13	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	28	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	29	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	33	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	25	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	19	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	23	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	64	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	42	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	45	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	47	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	49	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	59	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	63	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	66	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	67	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	70	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	72	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	73	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	68	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	53	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	81	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	12	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	6	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	14	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	69	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	87	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	89	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	92	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	94	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	97	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	3	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	7	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	10	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	18	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	22	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	26	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	11	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	46	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	83	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	85	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	4	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	5	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	20	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	38	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	9	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	24	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	65	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	76	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	8	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	2	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	31	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	44	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	55	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	57	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	75	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	90	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	100	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	103	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	37	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	30	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	52	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	50	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	41	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	48	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	77	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	39	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	54	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	56	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	58	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	61	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	62	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	71	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	74	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	98	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	82	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	84	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	110	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	93	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (2, @accountIDX, 1, 	104	, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())

--장비 (accountIDX, item_type, 25, ???, 0, 0, 0, 1, ??/@accountIDX, 	10034	 ,25, 	1	  ,0 ,0 ,0 ,1 ,GETDATE()

INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10034 ,25	,1	  	,0 ,0 ,0 ,1 ,GETDATE(), 	10046, 25,	 2		,0 ,0 ,0 ,1  ,GETDATE(),	110016	,25, 	3	,0 ,0 ,0 ,1 ,GETDATE(), 	110037	,25,     4	,0 ,0 ,0 ,1 ,GETDATE(), 	210003	,25, 	5	,0 ,0 ,0 ,1 ,GETDATE(), 	310013	,25,     6  ,0 ,0 ,0 ,1 ,GETDATE(), 	310041	,25,     7  ,0 ,0 ,0 ,1 ,GETDATE(),     111037	,25,     8  ,0 ,0, 0, 1 ,GETDATE(), 	211040	,25,     9  ,0 ,0 ,0 ,1 ,GETDATE(), 	311032	,25,    10  ,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10001 ,25	,11		,0 ,0 ,0 ,1 ,GETDATE(), 	10083, 25,	 12		,0 ,0 ,0 ,1  ,GETDATE(),	110040	,25, 	13	,0 ,0 ,0 ,1 ,GETDATE(), 	110030	,25, 	14	,0 ,0 ,0 ,1 ,GETDATE(), 	210007	,25, 	15	,0 ,0 ,0 ,1 ,GETDATE(), 	310028	,25, 	16	,0 ,0 ,0 ,1 ,GETDATE(), 	310048	,25, 	17	,0 ,0 ,0 ,1 ,GETDATE(), 	111049	,25, 	18	,0 ,0 ,0 ,1 ,GETDATE(), 	211044	,25, 	19	,0 ,0 ,0 ,1 ,GETDATE(), 	311002	,25, 	20	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10015 ,25	,21		,0 ,0 ,0 ,1 ,GETDATE(), 	10085, 25,	 22		,0 ,0 ,0 ,1  ,GETDATE(),	110051	,25, 	23	,0 ,0 ,0 ,1 ,GETDATE(), 	110052	,25, 	24	,0 ,0 ,0 ,1 ,GETDATE(), 	210010	,25, 	25	,0 ,0 ,0 ,1 ,GETDATE(), 	310029	,25, 	26	,0 ,0 ,0 ,1 ,GETDATE(), 	310077	,25, 	27	,0 ,0 ,0 ,1 ,GETDATE(), 	111086	,25, 	28	,0 ,0 ,0 ,1 ,GETDATE(), 	211027	,25, 	29	,0 ,0 ,0 ,1 ,GETDATE(), 	311024	,25, 	30	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10017 ,25	,31		,0 ,0 ,0 ,1 ,GETDATE(), 	10004, 25,	 32		,0 ,0 ,0 ,1  ,GETDATE(),	110036	,25, 	33	,0 ,0 ,0 ,1 ,GETDATE(), 	110050	,25, 	34	,0 ,0 ,0 ,1 ,GETDATE(), 	210018	,25, 	35  ,0 ,0 ,0 ,1 ,GETDATE(), 	310033	,25, 	36	,0 ,0 ,0 ,1 ,GETDATE(), 	310039	,25, 	37	,0 ,0 ,0 ,1 ,GETDATE(), 	111028	,25, 	38	,0 ,0 ,0 ,1 ,GETDATE(), 	211045	,25, 	39	,0 ,0 ,0 ,1 ,GETDATE(), 	311040	,25, 	40	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10021 ,25	,41		,0 ,0 ,0 ,1 ,GETDATE(), 	10005, 25,	 42		,0 ,0 ,0 ,1  ,GETDATE(),	110013	,25, 	43	,0 ,0 ,0 ,1 ,GETDATE(), 	110041	,25, 	44	,0 ,0 ,0 ,1 ,GETDATE(), 	210022	,25, 	45	,0 ,0 ,0 ,1 ,GETDATE(), 	310025	,25, 	46	,0 ,0 ,0 ,1 ,GETDATE(), 	310054	,25, 	47	,0 ,0 ,0 ,1 ,GETDATE(), 	111048	,25, 	48	,0 ,0 ,0 ,1 ,GETDATE(), 	211041	,25, 	49	,0 ,0 ,0 ,1 ,GETDATE(), 	311030	,25, 	50	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10027 ,25	,51		,0 ,0 ,0 ,1 ,GETDATE(), 	10020, 25,	 52		,0 ,0 ,0 ,1  ,GETDATE(),	110028	,25, 	53	,0 ,0 ,0 ,1 ,GETDATE(), 	110048	,25, 	54	,0 ,0 ,0 ,1 ,GETDATE(), 	210026	,25, 	55	,0 ,0 ,0 ,1 ,GETDATE(), 	310019	,25, 	56	,0 ,0 ,0 ,1 ,GETDATE(), 	310056	,25, 	57	,0 ,0 ,0 ,1 ,GETDATE(), 	111053	,25, 	58	,0 ,0 ,0 ,1 ,GETDATE(), 	211029	,25, 	59	,0 ,0 ,0 ,1 ,GETDATE(), 	311086	,25, 	60	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10016 ,25	,61		,0 ,0 ,0 ,1 ,GETDATE(), 	10038, 25,	 62		,0 ,0 ,0 ,1  ,GETDATE(),	110029	,25, 	63	,0 ,0 ,0 ,1 ,GETDATE(), 	110077	,25, 	64	,0 ,0 ,0 ,1 ,GETDATE(), 	210011	,25, 	65	,0 ,0 ,0 ,1 ,GETDATE(), 	310023	,25, 	66	,0 ,0 ,0 ,1 ,GETDATE(), 	310058	,25, 	67	,0 ,0 ,0 ,1 ,GETDATE(), 	111054	,25, 	68	,0 ,0 ,0 ,1 ,GETDATE(), 	211033	,25, 	69	,0 ,0 ,0 ,1 ,GETDATE(), 	311039	,25, 	70	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10040 ,25	,71		,0 ,0 ,0 ,1 ,GETDATE(), 	10009, 25,	 72		,0 ,0 ,0 ,1  ,GETDATE(),	110033	,25, 	73	,0 ,0 ,0 ,1 ,GETDATE(), 	110039	,25, 	74	,0 ,0 ,0 ,1 ,GETDATE(), 	210046	,25, 	75	,0 ,0 ,0 ,1 ,GETDATE(), 	310064	,25, 	76	,0 ,0 ,0 ,1 ,GETDATE(), 	310061	,25, 	77	,0 ,0 ,0 ,1 ,GETDATE(), 	111057	,25, 	78	,0 ,0 ,0 ,1 ,GETDATE(), 	211036	,25, 	79	,0 ,0 ,0 ,1 ,GETDATE(), 	311028	,25, 	80	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10051 ,25	,81		,0 ,0 ,0 ,1 ,GETDATE(), 	10024, 25,	 82		,0 ,0 ,0 ,1  ,GETDATE(),	110025	,25, 	83	,0 ,0 ,0 ,1 ,GETDATE(), 	110054	,25, 	84	,0 ,0 ,0 ,1 ,GETDATE(), 	210004	,25, 	85	,0 ,0 ,0 ,1 ,GETDATE(), 	310042	,25, 	86	,0 ,0 ,0 ,1 ,GETDATE(), 	310062	,25, 	87	,0 ,0 ,0 ,1 ,GETDATE(), 	111051	,25, 	88	,0 ,0 ,0 ,1 ,GETDATE(), 	211018	,25, 	89	,0 ,0 ,0 ,1 ,GETDATE(), 	311034	,25, 	90	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10036 ,25	,91		,0 ,0 ,0 ,1 ,GETDATE(), 	10065, 25,	 92		,0 ,0 ,0 ,1  ,GETDATE(),	110019	,25, 	93	,0 ,0 ,0 ,1 ,GETDATE(), 	110056	,25, 	94	,0 ,0 ,0 ,1 ,GETDATE(), 	210005	,25, 	95	,0 ,0 ,0 ,1 ,GETDATE(), 	310045	,25, 	96	,0 ,0 ,0 ,1 ,GETDATE(), 	310071	,25, 	97	,0 ,0 ,0 ,1 ,GETDATE(), 	111069	,25, 	98  ,0 ,0 ,0 ,1 ,GETDATE(), 	211061	,25, 	99	,0 ,0 ,0 ,1 ,GETDATE(), 	311018	,25, 	100, 0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10013 ,25	,101	,0 ,0 ,0 ,1 ,GETDATE(), 	10076, 25,	 102	,0 ,0 ,0 ,1  ,GETDATE(),	110023	,25, 	103	,0 ,0 ,0 ,1 ,GETDATE(), 	110058	,25, 	104	,0 ,0 ,0 ,1 ,GETDATE(), 	210020	,25, 	105	,0 ,0 ,0 ,1 ,GETDATE(), 	310047	,25, 	106	,0 ,0 ,0 ,1 ,GETDATE(), 	310074	,25, 	107	,0 ,0 ,0 ,1 ,GETDATE(), 	111059	,25, 	108	,0 ,0 ,0 ,1 ,GETDATE(), 	211052	,25, 	109	,0 ,0 ,0 ,1 ,GETDATE(), 	311036	,25, 	110	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10028 ,25	,111	,0 ,0 ,0 ,1 ,GETDATE(), 	10008, 25,	 112	,0 ,0 ,0 ,1  ,GETDATE(),	110064	,25, 	113	,0 ,0 ,0 ,1 ,GETDATE(), 	110061	,25, 	114	,0 ,0 ,0 ,1 ,GETDATE(), 	210038	,25, 	115	,0 ,0 ,0 ,1 ,GETDATE(), 	310049	,25, 	116	,0 ,0 ,0 ,1 ,GETDATE(), 	310098	,25, 	117	,0 ,0 ,0 ,1 ,GETDATE(), 	111046	,25, 	118	,0 ,0 ,0 ,1 ,GETDATE(), 	211037	,25, 	119	,0 ,0 ,0 ,1 ,GETDATE(), 	311038	,25, 	120	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10029 ,25	,121	,0 ,0 ,0 ,1 ,GETDATE(), 	10002, 25,	 122	,0 ,0 ,0 ,1  ,GETDATE(),	110042	,25, 	123	,0 ,0 ,0 ,1 ,GETDATE(), 	110062	,25, 	124	,0 ,0 ,0 ,1 ,GETDATE(), 	210009	,25, 	125	,0 ,0 ,0 ,1 ,GETDATE(), 	310059	,25, 	126	,0 ,0 ,0 ,1 ,GETDATE(), 	111009	,25, 	127	,0 ,0 ,0 ,1 ,GETDATE(), 	111055	,25, 	128	,0 ,0 ,0 ,1 ,GETDATE(), 	211049	,25, 	129	,0 ,0 ,0 ,1 ,GETDATE(), 	311015	,25, 	130	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10033 ,25	,131	,0 ,0 ,0 ,1 ,GETDATE(), 	10031, 25,	 132	,0 ,0 ,0 ,1  ,GETDATE(),	110045	,25, 	133	,0 ,0 ,0 ,1 ,GETDATE(), 	110071	,25, 	134	,0 ,0 ,0 ,1 ,GETDATE(), 	210024	,25, 	135	,0 ,0 ,0 ,1 ,GETDATE(), 	310063	,25, 	136	,0 ,0 ,0 ,1 ,GETDATE(), 	111008	,25, 	137	,0 ,0 ,0 ,1 ,GETDATE(), 	111076	,25, 	138	,0 ,0 ,0 ,1 ,GETDATE(), 	211009	,25, 	139	,0 ,0 ,0 ,1 ,GETDATE(), 	311042	,25, 	140	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10025 ,25	,141	,0 ,0 ,0 ,1 ,GETDATE(), 	10044, 25,	 142	,0 ,0 ,0 ,1  ,GETDATE(),	110047	,25, 	143	,0 ,0 ,0 ,1 ,GETDATE(), 	110074	,25, 	144	,0 ,0 ,0 ,1 ,GETDATE(), 	210065	,25, 	145	,0 ,0 ,0 ,1 ,GETDATE(), 	310066	,25, 	146	,0 ,0 ,0 ,1 ,GETDATE(), 	111007	,25, 	147	,0 ,0 ,0 ,1 ,GETDATE(), 	111070	,25, 	148	,0 ,0 ,0 ,1 ,GETDATE(), 	211042	,25, 	149	,0 ,0 ,0 ,1 ,GETDATE(), 	311047	,25, 	150	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10019 ,25	,151	,0 ,0 ,0 ,1 ,GETDATE(), 	10055, 25,	 152	,0 ,0 ,0 ,1  ,GETDATE(),	110049	,25, 	153	,0 ,0 ,0 ,1 ,GETDATE(), 	110098	,25, 	154	,0 ,0 ,0 ,1 ,GETDATE(), 	210008	,25, 	155	,0 ,0 ,0 ,1 ,GETDATE(), 	310067	,25, 	156	,0 ,0 ,0 ,1 ,GETDATE(), 	111003	,25, 	157	,0 ,0 ,0 ,1 ,GETDATE(), 	111042	,25, 	158	,0 ,0 ,0 ,1 ,GETDATE(), 	211059	,25, 	159	,0 ,0 ,0 ,1 ,GETDATE(), 	311041	,25, 	160	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10023 ,25	,161	,0 ,0 ,0 ,1 ,GETDATE(), 	10057, 25,	 162	,0 ,0 ,0 ,1  ,GETDATE(),	110059	,25, 	163	,0 ,0 ,0 ,1 ,GETDATE(), 	210034	,25, 	164	,0 ,0 ,0 ,1 ,GETDATE(), 	210002	,25, 	165	,0 ,0 ,0 ,1 ,GETDATE(), 	310070	,25, 	166	,0 ,0 ,0 ,1 ,GETDATE(), 	111010	,25, 	167	,0 ,0 ,0 ,1 ,GETDATE(), 	111058	,25, 	168	,0 ,0 ,0 ,1 ,GETDATE(), 	211051	,25, 	169	,0 ,0 ,0 ,1 ,GETDATE(), 	311035	,25, 	170	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10064 ,25	,171	,0 ,0 ,0 ,1 ,GETDATE(), 	10075, 25,	 172	,0 ,0 ,0 ,1  ,GETDATE(),	110063	,25, 	173	,0 ,0 ,0 ,1 ,GETDATE(), 	210001	,25, 	174	,0 ,0 ,0 ,1 ,GETDATE(), 	210031	,25, 	175	,0 ,0 ,0 ,1 ,GETDATE(), 	310072	,25, 	176	,0 ,0 ,0 ,1 ,GETDATE(), 	111014	,25, 	177	,0 ,0 ,0 ,1 ,GETDATE(), 	111061	,25, 	178	,0 ,0 ,0 ,1 ,GETDATE(), 	211058	,25, 	179	,0 ,0 ,0 ,1 ,GETDATE(), 	311025	,25, 	180	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10042 ,25	,181	,0 ,0 ,0 ,1 ,GETDATE(), 	10090, 25,	 182	,0 ,0 ,0 ,1  ,GETDATE(),	110066	,25, 	183	,0 ,0 ,0 ,1 ,GETDATE(), 	210015	,25, 	184	,0 ,0 ,0 ,1 ,GETDATE(), 	210044	,25, 	185	,0 ,0 ,0 ,1 ,GETDATE(), 	310073	,25, 	186	,0 ,0 ,0 ,1 ,GETDATE(), 	111001	,25, 	187	,0 ,0 ,0 ,1 ,GETDATE(), 	111062	,25, 	188	,0 ,0 ,0 ,1 ,GETDATE(), 	211056	,25, 	189	,0 ,0 ,0 ,1 ,GETDATE(), 	311037	,25, 	190	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10045 ,25	,191	,0 ,0 ,0 ,1 ,GETDATE(), 	10100, 25,	 192	,0 ,0 ,0 ,1  ,GETDATE(),	110067	,25, 	193	,0 ,0 ,0 ,1 ,GETDATE(), 	210017	,25, 	194	,0 ,0 ,0 ,1 ,GETDATE(), 	210055	,25, 	195	,0 ,0 ,0 ,1 ,GETDATE(), 	310068	,25, 	196	,0 ,0 ,0 ,1 ,GETDATE(), 	111002	,25, 	197	,0 ,0 ,0 ,1 ,GETDATE(), 	111060	,25, 	198	,0 ,0 ,0 ,1 ,GETDATE(), 	211043	,25, 	199	,0 ,0 ,0 ,1 ,GETDATE(), 	311033	,25, 	200	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10047 ,25	,201	,0 ,0 ,0 ,1 ,GETDATE(), 	10103, 25,	 202	,0 ,0 ,0 ,1  ,GETDATE(),	110070	,25, 	203	,0 ,0 ,0 ,1 ,GETDATE(), 	210021	,25, 	204	,0 ,0 ,0 ,1 ,GETDATE(), 	210057	,25, 	205	,0 ,0 ,0 ,1 ,GETDATE(), 	310053	,25, 	206	,0 ,0 ,0 ,1 ,GETDATE(), 	111004	,25, 	207	,0 ,0 ,0 ,1 ,GETDATE(), 	111064	,25, 	208	,0 ,0 ,0 ,1 ,GETDATE(), 	211057	,25, 	209	,0 ,0 ,0 ,1 ,GETDATE(), 	311054	,25, 	210	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10049 ,25	,211	,0 ,0 ,0 ,1 ,GETDATE(), 	10037, 25,	 212	,0 ,0 ,0 ,1  ,GETDATE(),	110072	,25, 	213	,0 ,0 ,0 ,1 ,GETDATE(), 	210027	,25, 	214	,0 ,0 ,0 ,1 ,GETDATE(), 	210075	,25, 	215	,0 ,0 ,0 ,1 ,GETDATE(), 	310081	,25, 	216	,0 ,0 ,0 ,1 ,GETDATE(), 	111006	,25, 	217	,0 ,0 ,0 ,1 ,GETDATE(), 	111068	,25, 	218	,0 ,0 ,0 ,1 ,GETDATE(), 	211054	,25, 	219	,0 ,0 ,0 ,1 ,GETDATE(), 	311049	,25, 	220	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10059 ,25	,221	,0 ,0 ,0 ,1 ,GETDATE(), 	10030, 25,	 222	,0 ,0 ,0 ,1  ,GETDATE(),	110073	,25, 	223	,0 ,0 ,0 ,1 ,GETDATE(), 	210016	,25, 	224	,0 ,0 ,0 ,1 ,GETDATE(), 	210037	,25, 	225	,0 ,0 ,0 ,1 ,GETDATE(), 	310003	,25, 	226	,0 ,0 ,0 ,1 ,GETDATE(), 	111025	,25, 	227	,0 ,0 ,0 ,1 ,GETDATE(), 	111063	,25, 	228	,0 ,0 ,0 ,1 ,GETDATE(), 	211046	,25, 	229	,0 ,0 ,0 ,1 ,GETDATE(), 	311029	,25, 	230	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10063 ,25	,231	,0 ,0 ,0 ,1 ,GETDATE(), 	10052, 25,	 232	,0 ,0 ,0 ,1  ,GETDATE(),	110068	,25, 	233	,0 ,0 ,0 ,1 ,GETDATE(), 	210040	,25, 	234	,0 ,0 ,0 ,1 ,GETDATE(), 	210030	,25, 	235	,0 ,0 ,0 ,1 ,GETDATE(), 	310007	,25, 	236	,0 ,0 ,0 ,1 ,GETDATE(), 	111026	,25, 	237	,0 ,0 ,0 ,1 ,GETDATE(), 	111065	,25, 	238	,0 ,0 ,0 ,1 ,GETDATE(), 	211072	,25, 	239	,0 ,0 ,0 ,1 ,GETDATE(), 	311043	,25, 	240	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10066 ,25	,241	,0 ,0 ,0 ,1 ,GETDATE(), 	10050, 25,	 242	,0 ,0 ,0 ,1  ,GETDATE(),	110053	,25, 	243	,0 ,0 ,0 ,1 ,GETDATE(), 	210051	,25, 	244	,0 ,0 ,0 ,1 ,GETDATE(), 	210052	,25, 	245	,0 ,0 ,0 ,1 ,GETDATE(), 	310010	,25, 	246	,0 ,0 ,0 ,1 ,GETDATE(), 	111022	,25, 	247	,0 ,0 ,0 ,1 ,GETDATE(), 	111032	,25, 	248	,0 ,0 ,0 ,1 ,GETDATE(), 	211055	,25, 	249	,0 ,0 ,0 ,1 ,GETDATE(), 	311055	,25, 	250	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10067 ,25	,251	,0 ,0 ,0 ,1 ,GETDATE(), 	10041, 25,	 252	,0 ,0 ,0 ,1  ,GETDATE(),	110081	,25, 	253	,0 ,0 ,0 ,1 ,GETDATE(), 	210036	,25, 	254	,0 ,0 ,0 ,1 ,GETDATE(), 	210050	,25, 	255	,0 ,0 ,0 ,1 ,GETDATE(), 	310018	,25, 	256	,0 ,0 ,0 ,1 ,GETDATE(), 	111023	,25, 	257	,0 ,0 ,0 ,1 ,GETDATE(), 	111066	,25, 	258	,0 ,0 ,0 ,1 ,GETDATE(), 	211063	,25, 	259	,0 ,0 ,0 ,1 ,GETDATE(), 	311053	,25, 	260	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10070 ,25	,261	,0 ,0 ,0 ,1 ,GETDATE(), 	10048, 25,	 262	,0 ,0 ,0 ,1  ,GETDATE(),	110003	,25, 	263	,0 ,0 ,0 ,1 ,GETDATE(), 	210013	,25, 	264	,0 ,0 ,0 ,1 ,GETDATE(), 	210041	,25, 	265	,0 ,0 ,0 ,1 ,GETDATE(), 	310022	,25, 	266	,0 ,0 ,0 ,1 ,GETDATE(), 	111027	,25, 	267	,0 ,0 ,0 ,1 ,GETDATE(), 	111067	,25, 	268	,0 ,0 ,0 ,1 ,GETDATE(), 	211039	,25, 	269	,0 ,0 ,0 ,1 ,GETDATE(), 	111037	,25, 	270	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10072 ,25	,271	,0 ,0 ,0 ,1 ,GETDATE(), 	10077, 25,	 272	,0 ,0 ,0 ,1  ,GETDATE(),	110007	,25, 	273	,0 ,0 ,0 ,1 ,GETDATE(), 	210028	,25, 	274	,0 ,0 ,0 ,1 ,GETDATE(), 	210048	,25, 	275	,0 ,0 ,0 ,1 ,GETDATE(), 	310026	,25, 	276	,0 ,0 ,0 ,1 ,GETDATE(), 	111013	,25, 	277	,0 ,0 ,0 ,1 ,GETDATE(), 	211013	,25, 	278	,0 ,0 ,0 ,1 ,GETDATE(), 	211038	,25, 	279	,0 ,0 ,0 ,1 ,GETDATE(), 	311056	,25, 	280	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10073 ,25	,281	,0 ,0 ,0 ,1 ,GETDATE(), 	10039, 25,	 282	,0 ,0 ,0 ,1  ,GETDATE(),	110010	,25, 	283	,0 ,0 ,0 ,1 ,GETDATE(), 	210029	,25, 	284	,0 ,0 ,0 ,1 ,GETDATE(), 	210077	,25, 	285	,0 ,0 ,0 ,1 ,GETDATE(), 	310011	,25, 	286	,0 ,0 ,0 ,1 ,GETDATE(), 	111036	,25, 	287	,0 ,0 ,0 ,1 ,GETDATE(), 	211025	,25, 	288	,0 ,0 ,0 ,1 ,GETDATE(), 	211050	,25, 	289	,0 ,0 ,0 ,1 ,GETDATE(), 	311046	,25, 	290	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10068 ,25	,291	,0 ,0 ,0 ,1 ,GETDATE(), 	10054, 25,	 292	,0 ,0 ,0 ,1  ,GETDATE(),	110018	,25, 	293	,0 ,0 ,0 ,1 ,GETDATE(), 	210033	,25, 	294	,0 ,0 ,0 ,1 ,GETDATE(), 	210039	,25, 	295	,0 ,0 ,0 ,1 ,GETDATE(), 	310046	,25, 	296	,0 ,0 ,0 ,1 ,GETDATE(), 	111024	,25, 	297	,0 ,0 ,0 ,1 ,GETDATE(), 	211021	,25, 	298	,0 ,0 ,0 ,1 ,GETDATE(), 	211060	,25, 	299	,0 ,0 ,0 ,1 ,GETDATE(), 	311052	,25, 	300	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10053 ,25	,301	,0 ,0 ,0 ,1 ,GETDATE(), 	10056, 25,	 302	,0 ,0 ,0 ,1  ,GETDATE(),	110022	,25, 	303	,0 ,0 ,0 ,1 ,GETDATE(), 	210025	,25, 	304	,0 ,0 ,0 ,1 ,GETDATE(), 	210054	,25, 	305	,0 ,0 ,0 ,1 ,GETDATE(), 	310004	,25, 	306	,0 ,0 ,0 ,1 ,GETDATE(), 	111043	,25, 	307	,0 ,0 ,0 ,1 ,GETDATE(), 	211023	,25, 	308	,0 ,0 ,0 ,1 ,GETDATE(), 	211070	,25, 	309	,0 ,0 ,0 ,1 ,GETDATE(), 	311050	,25, 	310	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10081 ,25	,311	,0 ,0 ,0 ,1 ,GETDATE(), 	10058, 25,	 312	,0 ,0 ,0 ,1  ,GETDATE(),	110026	,25, 	313	,0 ,0 ,0 ,1 ,GETDATE(), 	210019	,25, 	314	,0 ,0 ,0 ,1 ,GETDATE(), 	210056	,25, 	315	,0 ,0 ,0 ,1 ,GETDATE(), 	310005	,25, 	316	,0 ,0 ,0 ,1 ,GETDATE(), 	111033	,25, 	317	,0 ,0 ,0 ,1 ,GETDATE(), 	211006	,25, 	318	,0 ,0 ,0 ,1 ,GETDATE(), 	211047	,25, 	319	,0 ,0 ,0 ,1 ,GETDATE(), 	311048	,25, 	320	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10012 ,25	,321	,0 ,0 ,0 ,1 ,GETDATE(), 	10061, 25,	 322	,0 ,0 ,0 ,1  ,GETDATE(),	110011	,25, 	323	,0 ,0 ,0 ,1 ,GETDATE(), 	210023	,25, 	324	,0 ,0 ,0 ,1 ,GETDATE(), 	210058	,25, 	325	,0 ,0 ,0 ,1 ,GETDATE(), 	310020	,25, 	326	,0 ,0 ,0 ,1 ,GETDATE(), 	111031	,25, 	327	,0 ,0 ,0 ,1 ,GETDATE(), 	211005	,25, 	328	,0 ,0 ,0 ,1 ,GETDATE(), 	211062	,25, 	329	,0 ,0 ,0 ,1 ,GETDATE(), 	311063	,25, 	330	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10006 ,25	,331	,0 ,0 ,0 ,1 ,GETDATE(), 	10062, 25,	 332	,0 ,0 ,0 ,1  ,GETDATE(),	110046	,25, 	333	,0 ,0 ,0 ,1 ,GETDATE(), 	210064	,25, 	334	,0 ,0 ,0 ,1 ,GETDATE(), 	210061	,25, 	335	,0 ,0 ,0 ,1 ,GETDATE(), 	310038	,25, 	336	,0 ,0 ,0 ,1 ,GETDATE(), 	111045	,25, 	337	,0 ,0 ,0 ,1 ,GETDATE(), 	211003	,25, 	338	,0 ,0 ,0 ,1 ,GETDATE(), 	211078	,25, 	339	,0 ,0 ,0 ,1 ,GETDATE(), 	311059	,25, 	340	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10014 ,25	,341	,0 ,0 ,0 ,1 ,GETDATE(), 	10071, 25,	 342	,0 ,0 ,0 ,1  ,GETDATE(),	110004	,25, 	343	,0 ,0 ,0 ,1 ,GETDATE(), 	210042	,25, 	344	,0 ,0 ,0 ,1 ,GETDATE(), 	210062	,25, 	345	,0 ,0 ,0 ,1 ,GETDATE(), 	310009	,25, 	346	,0 ,0 ,0 ,1 ,GETDATE(), 	111034	,25, 	347	,0 ,0 ,0 ,1 ,GETDATE(), 	211007	,25, 	348	,0 ,0 ,0 ,1 ,GETDATE(), 	311021	,25, 	349	,0 ,0 ,0 ,1 ,GETDATE(), 	311020	,25, 	350	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10069 ,25	,351	,0 ,0 ,0 ,1 ,GETDATE(), 	10074, 25,	 352	,0 ,0 ,0 ,1  ,GETDATE(),	110005	,25, 	353	,0 ,0 ,0 ,1 ,GETDATE(), 	210045	,25, 	354	,0 ,0 ,0 ,1 ,GETDATE(), 	210071	,25, 	355	,0 ,0 ,0 ,1 ,GETDATE(), 	310024	,25, 	356	,0 ,0 ,0 ,1 ,GETDATE(), 	111021	,25, 	357	,0 ,0 ,0 ,1 ,GETDATE(), 	211004	,25, 	358	,0 ,0 ,0 ,1 ,GETDATE(), 	311022	,25, 	359	,0 ,0 ,0 ,1 ,GETDATE(), 	311067	,25, 	360	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10087 ,25	,361	,0 ,0 ,0 ,1 ,GETDATE(), 	10098, 25,	 362	,0 ,0 ,0 ,1  ,GETDATE(),	110020	,25, 	363	,0 ,0 ,0 ,1 ,GETDATE(), 	210047	,25, 	364	,0 ,0 ,0 ,1 ,GETDATE(), 	210074	,25, 	365	,0 ,0 ,0 ,1 ,GETDATE(), 	310065	,25, 	366	,0 ,0 ,0 ,1 ,GETDATE(), 	111029	,25, 	367	,0 ,0 ,0 ,1 ,GETDATE(), 	211001	,25, 	368	,0 ,0 ,0 ,1 ,GETDATE(), 	311019	,25, 	369	,0 ,0 ,0 ,1 ,GETDATE(), 	311057	,25, 	370	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10089 ,25	,371	,0 ,0 ,0 ,1 ,GETDATE(), 	10082, 25,	 372	,0 ,0 ,0 ,1  ,GETDATE(),	110038	,25, 	373	,0 ,0 ,0 ,1 ,GETDATE(), 	210049	,25, 	374	,0 ,0 ,0 ,1 ,GETDATE(), 	210098	,25, 	375	,0 ,0 ,0 ,1 ,GETDATE(), 	310008	,25, 	376	,0 ,0 ,0 ,1 ,GETDATE(), 	111044	,25, 	377	,0 ,0 ,0 ,1 ,GETDATE(), 	211026	,25, 	378	,0 ,0 ,0 ,1 ,GETDATE(), 	311013	,25, 	379	,0 ,0 ,0 ,1 ,GETDATE(), 	311051	,25, 	380	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())


--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10092 ,25	,381	,0 ,0 ,0 ,1 ,GETDATE(), 	10084, 25,	 382	,0 ,0 ,0 ,1  ,GETDATE(),	110009	,25, 	383	,0 ,0 ,0 ,1 ,GETDATE(), 	210059	,25, 	384	,0 ,0 ,0 ,1 ,GETDATE(), 	310034	,25, 	385	,0 ,0 ,0 ,1 ,GETDATE(), 	310002	,25, 	386	,0 ,0 ,0 ,1 ,GETDATE(), 	111041	,25, 	387	,0 ,0 ,0 ,1 ,GETDATE(), 	211019	,25, 	388	,0 ,0 ,0 ,1 ,GETDATE(), 	311007	,25, 	389	,0 ,0 ,0 ,1 ,GETDATE(), 	311061	,25, 	390	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10094 ,25	,391	,0 ,0 ,0 ,1 ,GETDATE(), 	10110, 25,	 392	,0 ,0 ,0 ,1  ,GETDATE(),	110024	,25, 	393	,0 ,0 ,0 ,1 ,GETDATE(), 	210063	,25, 	394	,0 ,0 ,0 ,1 ,GETDATE(), 	310001	,25, 	395	,0 ,0 ,0 ,1 ,GETDATE(), 	310031	,25, 	396	,0 ,0 ,0 ,1 ,GETDATE(), 	111035	,25, 	397	,0 ,0 ,0 ,1 ,GETDATE(), 	211024	,25, 	398	,0 ,0 ,0 ,1 ,GETDATE(), 	311010	,25, 	399	,0 ,0 ,0 ,1 ,GETDATE(), 	311062	,25, 	400	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10097 ,25	,401	,0 ,0 ,0 ,1 ,GETDATE(), 	10093, 25,	 402	,0 ,0 ,0 ,1  ,GETDATE(),	110065	,25, 	403	,0 ,0 ,0 ,1 ,GETDATE(), 	210066	,25, 	404	,0 ,0 ,0 ,1 ,GETDATE(), 	310015	,25, 	405	,0 ,0 ,0 ,1 ,GETDATE(), 	310044	,25, 	406	,0 ,0 ,0 ,1 ,GETDATE(), 	111039	,25, 	407	,0 ,0 ,0 ,1 ,GETDATE(), 	211034	,25, 	408	,0 ,0 ,0 ,1 ,GETDATE(), 	311009	,25, 	409	,0 ,0 ,0 ,1 ,GETDATE(), 	311064	,25, 	410	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10003 ,25	,411	,0 ,0 ,0 ,1 ,GETDATE(), 	10104, 25,	 412	,0 ,0 ,0 ,1  ,GETDATE(),	110008	,25, 	413	,0 ,0 ,0 ,1 ,GETDATE(), 	210067	,25, 	414	,0 ,0 ,0 ,1 ,GETDATE(), 	310017	,25, 	415	,0 ,0 ,0 ,1 ,GETDATE(), 	310055	,25, 	416	,0 ,0 ,0 ,1 ,GETDATE(), 	111030	,25, 	417	,0 ,0 ,0 ,1 ,GETDATE(), 	211020	,25, 	418	,0 ,0 ,0 ,1 ,GETDATE(), 	311003	,25, 	419	,0 ,0 ,0 ,1 ,GETDATE(), 	311060	,25, 	420	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10007 ,25	,421	,0 ,0 ,0 ,1 ,GETDATE(), 	110034, 25,	 422	,0 ,0 ,0 ,1  ,GETDATE(),	110002	,25, 	423	,0 ,0 ,0 ,1 ,GETDATE(), 	210070	,25, 	424	,0 ,0 ,0 ,1 ,GETDATE(), 	310021	,25, 	425	,0 ,0 ,0 ,1 ,GETDATE(), 	310057	,25, 	426	,0 ,0 ,0 ,1 ,GETDATE(), 	111040	,25, 	427	,0 ,0 ,0 ,1 ,GETDATE(), 	211030	,25, 	428	,0 ,0 ,0 ,1 ,GETDATE(), 	311006	,25, 	429	,0 ,0 ,0 ,1 ,GETDATE(), 	211039	,25, 	430	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10010 ,25	,431	,0 ,0 ,0 ,1 ,GETDATE(), 	110001, 25,	 432	,0 ,0 ,0 ,1  ,GETDATE(),	110031	,25, 	433	,0 ,0 ,0 ,1 ,GETDATE(), 	210072	,25, 	434	,0 ,0 ,0 ,1 ,GETDATE(), 	310027	,25, 	435	,0 ,0 ,0 ,1 ,GETDATE(), 	310075	,25, 	436	,0 ,0 ,0 ,1 ,GETDATE(), 	111047	,25, 	437	,0 ,0 ,0 ,1 ,GETDATE(), 	211032	,25, 	438	,0 ,0 ,0 ,1 ,GETDATE(), 	311001	,25, 	439	,0 ,0 ,0 ,1 ,GETDATE(), 	311070	,25, 	440	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10018 ,25	,441	,0 ,0 ,0 ,1 ,GETDATE(), 	110015, 25,	 442	,0 ,0 ,0 ,1  ,GETDATE(),	110044	,25, 	443	,0 ,0 ,0 ,1 ,GETDATE(), 	210073	,25, 	444	,0 ,0 ,0 ,1 ,GETDATE(), 	310016	,25, 	445	,0 ,0 ,0 ,1 ,GETDATE(), 	310037	,25, 	446	,0 ,0 ,0 ,1 ,GETDATE(), 	111050	,25, 	447	,0 ,0 ,0 ,1 ,GETDATE(), 	211066	,25, 	448	,0 ,0 ,0 ,1 ,GETDATE(), 	311008	,25, 	449	,0 ,0 ,0 ,1 ,GETDATE(), 	311066	,25, 	450	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10022 ,25	,451	,0 ,0 ,0 ,1 ,GETDATE(), 	110017, 25,	 452	,0 ,0 ,0 ,1  ,GETDATE(),	110055	,25, 	453	,0 ,0 ,0 ,1 ,GETDATE(), 	210068	,25, 	454	,0 ,0 ,0 ,1 ,GETDATE(), 	310040	,25, 	455	,0 ,0 ,0 ,1 ,GETDATE(), 	310030	,25, 	456	,0 ,0 ,0 ,1 ,GETDATE(), 	111052	,25, 	457	,0 ,0 ,0 ,1 ,GETDATE(), 	211014	,25, 	458	,0 ,0 ,0 ,1 ,GETDATE(), 	311005	,25, 	459	,0 ,0 ,0 ,1 ,GETDATE(), 	311073	,25, 	460	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10026 ,25	,461	,0 ,0 ,0 ,1 ,GETDATE(), 	110021, 25,	 462	,0 ,0 ,0 ,1  ,GETDATE(),	110057	,25, 	463	,0 ,0 ,0 ,1 ,GETDATE(), 	210053	,25, 	464	,0 ,0 ,0 ,1 ,GETDATE(), 	310051	,25, 	465	,0 ,0 ,0 ,1 ,GETDATE(), 	310052	,25, 	466	,0 ,0 ,0 ,1 ,GETDATE(), 	111038	,25, 	467	,0 ,0 ,0 ,1 ,GETDATE(), 	211035	,25, 	468	,0 ,0 ,0 ,1 ,GETDATE(), 	311016	,25, 	469	,0 ,0 ,0 ,1 ,GETDATE(), 	311023	,25, 	470	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
--INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate,item3_type,item3_reinforce,item3_slotindex,item3_tradetype,item3_mcustom,item3_fcustom,item3_limitType,item3_limitDate,item4_type,item4_reinforce,item4_slotindex,item4_tradetype,item4_mcustom,item4_fcustom,item4_limitType,item4_limitDate,item5_type,item5_reinforce,item5_slotindex,item5_tradetype,item5_mcustom,item5_fcustom,item5_limitType,item5_limitDate,item6_type,item6_reinforce,item6_slotindex,item6_tradetype,item6_mcustom,item6_fcustom,item6_limitType,item6_limitDate,item7_type,item7_reinforce,item7_slotindex,item7_tradetype,item7_mcustom,item7_fcustom,item7_limitType,item7_limitDate,item8_type,item8_reinforce,item8_slotindex,item8_tradetype,item8_mcustom,item8_fcustom,item8_limitType,item8_limitDate,item9_type,item9_reinforce,item9_slotindex,item9_tradetype,item9_mcustom,item9_fcustom,item9_limitType,item9_limitDate,item10_type,item10_reinforce,item10_slotindex,item10_tradetype,item10_mcustom,item10_fcustom,item10_limitType,item10_limitDate,regDate)VALUES (@accountIDX, 	10011 ,25	,471	,0 ,0 ,0 ,1 ,GETDATE(), 	110027, 25,	 472	,0 ,0 ,0 ,1  ,GETDATE(),	110075	,25, 	473	,0 ,0 ,0 ,1 ,GETDATE(), 	210081	,25, 	474	,0 ,0 ,0 ,1 ,GETDATE(), 	310036	,25, 	475	,0 ,0 ,0 ,1 ,GETDATE(), 	310050	,25, 	476	,0 ,0 ,0 ,1 ,GETDATE(), 	111056	,25, 	477	,0 ,0 ,0 ,1 ,GETDATE(), 	211028	,25, 	478	,0 ,0 ,0 ,1 ,GETDATE(), 	311031	,25, 	479	,0 ,0 ,0 ,1 ,GETDATE(), 	311068	,25, 	480	,0 ,0 ,0 ,1 ,GETDATE(), GETDATE())
INSERT INTO dbo.userItemExtraDB (accountIDX,item1_type,item1_reinforce,item1_slotindex,item1_tradetype,item1_mcustom,item1_fcustom,item1_limitType,item1_limitDate,item2_type,item2_reinforce,item2_slotindex,item2_tradetype,item2_mcustom,item2_fcustom,item2_limitType,item2_limitDate, regDate)VALUES (@accountIDX, 211053 ,25, 481	,0 ,0 ,0 ,1 ,GETDATE(), 311065, 25,	

--?? ?? ??
INSERT INTO LosaGame.dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 34, 50, 0, 36, 50, 0, 42, 50, 0, 72, 50, 0, 87, 50, 0, 22, 50, 0, 38, 50, 0,  55, 50, 0, 50, 50, 0, 62, 50, 0)
INSERT INTO LosaGame.dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX ,  1, 50, 0, 13, 50, 0, 45, 50, 0, 73, 50, 0, 89, 50, 0, 26, 50, 0,  9, 50, 0,  57, 50, 0, 41, 50, 0, 71, 50, 0)
INSERT INTO LosaGame.dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 15, 50, 0, 28, 50, 0, 47, 50, 0, 68, 50, 0, 92, 50, 0, 11, 50, 0, 24, 50, 0,  75, 50, 0, 48, 50, 0, 74, 50, 0)
INSERT INTO LosaGame.dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 17, 50, 0, 29, 50, 0, 49, 50, 0, 53, 50, 0, 94, 50, 0, 46, 50, 0, 65, 50, 0,  90, 50, 0, 77, 50, 0, 98, 50, 0)
INSERT INTO LosaGame.dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 21, 50, 0, 33, 50, 0, 59, 50, 0, 81, 50, 0, 97, 50, 0, 83, 50, 0, 76, 50, 0, 100, 50, 0, 39, 50, 0, 82, 50, 0)
INSERT INTO LosaGame.dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 27, 50, 0, 25, 50, 0, 63, 50, 0, 12, 50, 0,  3, 50, 0, 85, 50, 0,  8, 50, 0, 103, 50, 0, 54, 50, 0, 84, 50, 0)
INSERT INTO LosaGame.dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 16, 50, 0, 19, 50, 0, 66, 50, 0,  6, 50, 0,  7, 50, 0,  4, 50, 0,  2, 50, 0,  37, 50, 0, 56, 50, 0, 110, 50, 0)
INSERT INTO LosaGame.dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 40, 50, 0, 23, 50, 0, 67, 50, 0, 14, 50, 0, 10, 50, 0,  5, 50, 0, 31, 50, 0,  30, 50, 0, 58, 50, 0, 93, 50, 0)
INSERT INTO LosaGame.dbo.userClassDB(accountIDX,class1_type,class1_level,class1_expert,class2_type,class2_level,class2_expert,class3_type,class3_level,class3_expert,class4_type,class4_level,class4_expert,class5_type,class5_level,class5_expert,class6_type,class6_level,class6_expert,class7_type,class7_level,class7_expert,class8_type,class8_level,class8_expert,class9_type,class9_level,class9_expert,class10_type,class10_level,class10_expert) VALUES ( @accountIDX , 51, 50, 0, 64, 50, 0, 70, 50, 0, 69, 50, 0, 18, 50, 0, 20, 50, 0, 44, 50, 0,  52, 50, 0, 61, 50, 0, 104, 50, 0)


IF (@@ERROR = 0)
    COMMIT TRAN
ELSE
    ROLLBACK TRAN


END
GO


-- ----------------------------
-- procedure structure for game_event_openbeta_coin_log
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_openbeta_coin_log]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_openbeta_coin_log]
GO

CREATE PROCEDURE [dbo].[game_event_openbeta_coin_log]
(
	@accountIDX int
,	@coin int
)
AS
	INSERT INTO LosaGame_log.DBO.log_event_openbeta_coin (accountIDX, coin, flag, regDate)
	VALUES (@accountIDX, @coin, 0, getdate())
GO


-- ----------------------------
-- procedure structure for web_main_cafe_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_main_cafe_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_main_cafe_list]
GO

CREATE PROCEDURE [dbo].[web_main_cafe_list]

AS
	SELECT TOP 5 value1, value2 FROM define_config WITH(NOLOCK) WHERE objName='cafe' ORDER BY idx ASC
GO


-- ----------------------------
-- procedure structure for manage_singo_log_get_resultType
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_singo_log_get_resultType]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_singo_log_get_resultType]
GO

CREATE PROCEDURE [dbo].[manage_singo_log_get_resultType]
(
	@idx varchar(200)
)
AS
	SELECT resultType FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK)
	WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_define_quest_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_define_quest_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_define_quest_save]
GO

CREATE PROCEDURE [dbo].[web_define_quest_save]
(
	@questIDX int
,	@title varchar(100)
,	@progress varchar(100)
,	@content1 varchar(150)
,	@content2 varchar(150)
,	@content3 varchar(150)
,	@content4 varchar(150)
)
AS
	UPDATE define_quest SET
		title = @title
,		progress = @progress
,		content1 = @content1
,		content2 = @content2
,		content3 = @content3
,		content4 = @content4
	WHERE questIDX = @questIDX
GO


-- ----------------------------
-- procedure structure for manage_userinfo_get_character_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_get_character_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_get_character_data]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_get_character_data]
(
	@accountIDX int
)
AS
	SELECT idx, classType, limitTime, limitType, regDate FROM userCharacterDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_practice_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_practice_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_practice_get_list]
GO

CREATE PROCEDURE [dbo].[game_practice_get_list]

	@topn				INT,
	@ACCOUNT_IDX		INT,
	@PRACTICE_IDX		INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	SELECT TOP (@topn) practiceIDX, UPD.AccountIDX, UMD.NickName, PracticeTime, UpdateDate
	  FROM dbo.userPracticeDB  AS UPD WITH (READUNCOMMITTED)
	 JOIN dbo.userMemberDB AS UMD on UPD.AccountIDX = UMD.accountIDX
	 WHERE practiceIDX < @ACCOUNT_IDX ANd UPD.AccountIDX < @ACCOUNT_IDX
	 ORDER by practiceIDX DESC , UPD.AccountIDX DESC
GO


-- ----------------------------
-- procedure structure for z_nouse_101006_web_ranking_class_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_101006_web_ranking_class_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_101006_web_ranking_class_list]
GO

CREATE PROCEDURE [dbo].[z_nouse_101006_web_ranking_class_list]
(
	@pagesize varchar(8)
,	@notpage varchar(8)
,	@classType varchar(4)
,	@tblName varchar(32)
)
AS

	DECLARE @sql varchar(800)
	SET @sql = 'SELECT TOP ' + @pagesize + ' b.accountIDX, b.nickName, a.class' + @classType + '_expert, a.class' + @classType + '_prev, a.class' + @classType + '_now, a.class' + @classType + '_lv, isnull(d.idx,'''') as ''idx'', isnull(d.guildName,'''') as ''guildName'', isnull(d.guildmark, '''') as ''guildmark'', e.userLevel FROM ' + @tblName + ' a JOIN userMemberDB b ON a.accountIDX = b.accountIDX LEFT JOIN (SELECT accountIDX, max(guildIDX) AS ''guildIDX'' FROM userGuildInfoDB WHERE guildJoinType=1 GROUP BY accountIDX) c ON a.accountIDX = c.accountIDX LEFT JOIN userGuildDB d ON c.guildIDX = d.idx JOIN userGameDB e ON a.accountIDX = e.accountIDX '
	SET @sql = @sql + 'WHERE a.class' + @classType + '_now > 0 and a.accountIDX not in (SELECT TOP ' + @notpage + ' accountIDX FROM ' + @tblName + ' WHERE class' + @classType + '_now > 0 ORDER BY class' + @classType + '_now ASC) ORDER BY class' + @classType + '_now ASC'

	EXECUTE(@sql)
GO


-- ----------------------------
-- procedure structure for create_member_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[create_member_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[create_member_add]
GO

CREATE PROCEDURE [dbo].[create_member_add]
(
	@userID varchar(12)
,	@nickName varchar(20)
)
AS

BEGIN

SET NOCOUNT ON
SET XACT_ABORT ON

BEGIN TRAN

DECLARE @accountIDX int

INSERT INTO dbo.userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, limitType, limitDate, regDate)
VALUES (@userID, @nickName, '', '', 0, 100, 10, 0, '1999-01-01', GETDATE())

SET @accountIDX = SCOPE_IDENTITY()

INSERT INTO dbo.userGameDB (
	accountIDX, userState, gameMoney, playTime, conn_count, userLevel, userEXP, rencpoint, renspoint, relateLevel, regionType, refillData, connDate, regDate
)
VALUES (
	@accountIDX, -1, 80000000 , 1000, 1000, 30, 0, 0, 0, 0, 0, 0, GETDATE(), GETDATE()
)


INSERT INTO userRecordBattleDB (
	accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, regDate
)
VALUES (
	@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE()
)

INSERT INTO dbo.userLoginDB (accountIDX, encodeKey, gameServerID, connDate)
VALUES (@accountIDX, '111111111111111', 0, GETDATE())

--slot -> 3.4000010 / value2 96
INSERT INTO dbo.userItemEtcDB (
	accountIDX, item1_type, item1_value1, item1_value2
)
VALUES (
	@accountIDX, 4000010, 96, 1
)



INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	34, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	 1, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	15, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	17, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	21, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	27, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	16, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	40, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	51, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	36, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	13, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	28, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	29, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	33, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	25, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	19, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	23, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	64, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	42, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	45, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	47, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	49, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	59, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	63, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	66, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	67, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	70, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	72, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	73, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	68, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	53, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	81, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	3, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	7, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	10, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	18, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	22, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	26, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	11, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	46, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	4, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	5, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	20, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	38, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	9, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	24, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	65, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	8, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	2, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	31, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	44, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	55, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	57, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	75, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	37, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	30, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	52, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	50, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	41, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	48, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	77, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	39, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	54, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	56, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	58, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	61, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	62, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	71, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	74, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())
INSERT INTO dbo.userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate ) values (1105, @accountIDX, 1, 	98, 0, 0, 0,  3, 1, GETDATE()+28, GETDATE())



INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10034,25, 	1,0,0,0,1,GETDATE(), 	10003, 25,	 2,0,0,0,1,GETDATE(),	110034,25, 	3,0,0,0,1,GETDATE(), 	110003,25,   4,0,0,0,1,GETDATE(), 	210034,25, 	 5,0,0,0,1,GETDATE(), 	210003,25,   6,0,0,0,1,GETDATE(), 	310034,25,   7,0,0,0,1,GETDATE(),   310003,25,   8,0,0, 0, 1,GETDATE(), 	111009,25,   9,0,0,0,1,GETDATE(), 	211013,25,  10,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10001,25, 	11,0,0,0,1,GETDATE(), 	10007, 25,	 12,0,0,0,1,GETDATE(),	110001,25, 	13,0,0,0,1,GETDATE(), 	110007,25, 	14,0,0,0,1,GETDATE(), 	210001,25, 	15,0,0,0,1,GETDATE(), 	210007,25, 	16,0,0,0,1,GETDATE(), 	310001,25, 	17,0,0,0,1,GETDATE(), 	310007,25, 	18,0,0,0,1,GETDATE(), 	111008,25, 	19,0,0,0,1,GETDATE(), 	211025,25, 	20,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10006,25, 	21,0,0,0,1,GETDATE(), 	10010, 25,	 22,0,0,0,1,GETDATE(),	110006,25, 	23,0,0,0,1,GETDATE(), 	110010,25, 	24,0,0,0,1,GETDATE(), 	210006,25, 	25,0,0,0,1,GETDATE(), 	210010,25, 	26,0,0,0,1,GETDATE(), 	310006,25, 	27,0,0,0,1,GETDATE(), 	310010,25, 	28,0,0,0,1,GETDATE(), 	111007,25, 	29,0,0,0,1,GETDATE(), 	211021,25, 	30,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10014,25, 	31,0,0,0,1,GETDATE(), 	10018, 25,	 32,0,0,0,1,GETDATE(),	110014,25, 	33,0,0,0,1,GETDATE(), 	110018,25, 	34,0,0,0,1,GETDATE(), 	210014,25, 	35,0,0,0,1,GETDATE(), 	210018,25, 	36,0,0,0,1,GETDATE(), 	310014,25, 	37,0,0,0,1,GETDATE(), 	310018,25, 	38,0,0,0,1,GETDATE(), 	111003,25, 	39,0,0,0,1,GETDATE(), 	211023,25, 	40,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10015,25, 	41,0,0,0,1,GETDATE(), 	10022, 25,	 42,0,0,0,1,GETDATE(),	110015,25, 	43,0,0,0,1,GETDATE(), 	110022,25, 	44,0,0,0,1,GETDATE(), 	210015,25, 	45,0,0,0,1,GETDATE(), 	210022,25, 	46,0,0,0,1,GETDATE(), 	310015,25, 	47,0,0,0,1,GETDATE(), 	310022,25, 	48,0,0,0,1,GETDATE(), 	111010,25, 	49,0,0,0,1,GETDATE(), 	211006,25, 	50,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10017,25, 	51,0,0,0,1,GETDATE(), 	10026, 25,	 52,0,0,0,1,GETDATE(),	110017,25, 	53,0,0,0,1,GETDATE(), 	110026,25, 	54,0,0,0,1,GETDATE(), 	210017,25, 	55,0,0,0,1,GETDATE(), 	210026,25, 	56,0,0,0,1,GETDATE(), 	310017,25, 	57,0,0,0,1,GETDATE(), 	310026,25, 	58,0,0,0,1,GETDATE(), 	111014,25, 	59,0,0,0,1,GETDATE(), 	211005,25, 	60,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10021,25, 	61,0,0,0,1,GETDATE(), 	10011, 25,	 62,0,0,0,1,GETDATE(),	110021,25, 	63,0,0,0,1,GETDATE(), 	110011,25, 	64,0,0,0,1,GETDATE(), 	210021,25, 	65,0,0,0,1,GETDATE(), 	210011,25, 	66,0,0,0,1,GETDATE(), 	310021,25, 	67,0,0,0,1,GETDATE(), 	310011,25, 	68,0,0,0,1,GETDATE(), 	111001,25, 	69,0,0,0,1,GETDATE(), 	211003,25, 	70,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10027,25, 	71,0,0,0,1,GETDATE(), 	10046, 25,	 72,0,0,0,1,GETDATE(),	110027,25, 	73,0,0,0,1,GETDATE(), 	110046,25, 	74,0,0,0,1,GETDATE(), 	210027,25, 	75,0,0,0,1,GETDATE(), 	210046,25, 	76,0,0,0,1,GETDATE(), 	310027,25, 	77,0,0,0,1,GETDATE(), 	310046,25, 	78,0,0,0,1,GETDATE(), 	111002,25, 	79,0,0,0,1,GETDATE(), 	211004,25, 	80,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10012,25, 	81,0,0,0,1,GETDATE(), 	10004, 25,	 82,0,0,0,1,GETDATE(),	110012,25, 	83,0,0,0,1,GETDATE(), 	110004,25, 	84,0,0,0,1,GETDATE(), 	210012,25, 	85,0,0,0,1,GETDATE(), 	210004,25, 	86,0,0,0,1,GETDATE(), 	310012,25, 	87,0,0,0,1,GETDATE(), 	310004,25, 	88,0,0,0,1,GETDATE(), 	111004,25, 	89,0,0,0,1,GETDATE(), 	211007,25, 	90,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10016,25, 	91,0,0,0,1,GETDATE(), 	10005, 25,	 92,0,0,0,1,GETDATE(),	110016,25, 	93,0,0,0,1,GETDATE(), 	110005,25, 	94,0,0,0,1,GETDATE(), 	210016,25, 	95,0,0,0,1,GETDATE(), 	210005,25, 	96,0,0,0,1,GETDATE(), 	310016,25, 	97,0,0,0,1,GETDATE(), 	310005,25, 	98,0,0,0,1,GETDATE(), 	111006,25, 	99,0,0,0,1,GETDATE(), 	211001,25, 	100, 0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10040,25, 	101,0,0,0,1,GETDATE(), 	10020, 25,	 102,0,0,0,1,GETDATE(),	110040,25, 	103,0,0,0,1,GETDATE(), 	110020,25, 	104,0,0,0,1,GETDATE(), 	210040,25, 	105,0,0,0,1,GETDATE(), 	210020,25, 	106,0,0,0,1,GETDATE(), 	310040,25, 	107,0,0,0,1,GETDATE(), 	310020,25, 	108,0,0,0,1,GETDATE(), 	111025,25, 	109,0,0,0,1,GETDATE(), 	211030,25, 	110,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10036,25, 	111,0,0,0,1,GETDATE(), 	10038, 25,	 112,0,0,0,1,GETDATE(),	110036,25, 	113,0,0,0,1,GETDATE(), 	110038,25, 	114,0,0,0,1,GETDATE(), 	210036,25, 	115,0,0,0,1,GETDATE(), 	210038,25, 	116,0,0,0,1,GETDATE(), 	310036,25, 	117,0,0,0,1,GETDATE(), 	310038,25, 	118,0,0,0,1,GETDATE(), 	111026,25, 	119,0,0,0,1,GETDATE(), 	211026,25, 	120,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10013,25, 	121,0,0,0,1,GETDATE(), 	10009, 25,	 122,0,0,0,1,GETDATE(),	110013,25, 	123,0,0,0,1,GETDATE(), 	110009,25, 	124,0,0,0,1,GETDATE(), 	210013,25, 	125,0,0,0,1,GETDATE(), 	210009,25, 	126,0,0,0,1,GETDATE(), 	310013,25, 	127,0,0,0,1,GETDATE(), 	310009,25, 	128,0,0,0,1,GETDATE(), 	111022,25, 	129,0,0,0,1,GETDATE(), 	211019,25, 	130,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10028,25, 	131,0,0,0,1,GETDATE(), 	10024, 25,	 132,0,0,0,1,GETDATE(),	110028,25, 	133,0,0,0,1,GETDATE(), 	110024,25, 	134,0,0,0,1,GETDATE(), 	210028,25, 	135,0,0,0,1,GETDATE(), 	210024,25, 	136,0,0,0,1,GETDATE(), 	310028,25, 	137,0,0,0,1,GETDATE(), 	310024,25, 	138,0,0,0,1,GETDATE(), 	111023,25, 	139,0,0,0,1,GETDATE(), 	211024,25, 	140,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10029,25, 	141,0,0,0,1,GETDATE(), 	10065, 25,	 142,0,0,0,1,GETDATE(),	110029,25, 	143,0,0,0,1,GETDATE(), 	110065,25, 	144,0,0,0,1,GETDATE(), 	210029,25, 	145,0,0,0,1,GETDATE(), 	210065,25, 	146,0,0,0,1,GETDATE(), 	310029,25, 	147,0,0,0,1,GETDATE(), 	310065,25, 	148,0,0,0,1,GETDATE(), 	111027,25, 	149,0,0,0,1,GETDATE(), 	211034,25, 	150,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10033,25, 	151,0,0,0,1,GETDATE(), 	10008, 25,	 152,0,0,0,1,GETDATE(),	110033,25, 	153,0,0,0,1,GETDATE(), 	110008,25, 	154,0,0,0,1,GETDATE(), 	210033,25, 	155,0,0,0,1,GETDATE(), 	210008,25, 	156,0,0,0,1,GETDATE(), 	310033,25, 	157,0,0,0,1,GETDATE(), 	310008,25, 	158,0,0,0,1,GETDATE(), 	111013,25, 	159,0,0,0,1,GETDATE(), 	211020,25, 	160,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10025,25, 	161,0,0,0,1,GETDATE(), 	10002, 25,	 162,0,0,0,1,GETDATE(),	110025,25, 	163,0,0,0,1,GETDATE(), 	110002,25, 	164,0,0,0,1,GETDATE(), 	210025,25, 	165,0,0,0,1,GETDATE(), 	210002,25, 	166,0,0,0,1,GETDATE(), 	310025,25, 	167,0,0,0,1,GETDATE(), 	310002,25, 	168,0,0,0,1,GETDATE(), 	111036,25, 	169,0,0,0,1,GETDATE(), 	211030,25, 	170,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10019,25, 	171,0,0,0,1,GETDATE(), 	10031, 25,	 172,0,0,0,1,GETDATE(),	110019,25, 	173,0,0,0,1,GETDATE(), 	110031,25, 	174,0,0,0,1,GETDATE(), 	210019,25, 	175,0,0,0,1,GETDATE(), 	210031,25, 	176,0,0,0,1,GETDATE(), 	310019,25, 	177,0,0,0,1,GETDATE(), 	310031,25, 	178,0,0,0,1,GETDATE(), 	111024,25, 	179,0,0,0,1,GETDATE(), 	211032,25, 	180,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10023,25, 	181,0,0,0,1,GETDATE(), 	10044, 25,	 182,0,0,0,1,GETDATE(),	110023,25, 	183,0,0,0,1,GETDATE(), 	110044,25, 	184,0,0,0,1,GETDATE(), 	210023,25, 	185,0,0,0,1,GETDATE(), 	210044,25, 	186,0,0,0,1,GETDATE(), 	310023,25, 	187,0,0,0,1,GETDATE(), 	310044,25, 	188,0,0,0,1,GETDATE(), 	111033,25, 	189,0,0,0,1,GETDATE(), 	211035,25, 	190,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10042,25, 	191,0,0,0,1,GETDATE(), 	10055, 25,	 192,0,0,0,1,GETDATE(),	110042,25, 	193,0,0,0,1,GETDATE(), 	110055,25, 	194,0,0,0,1,GETDATE(), 	210042,25, 	195,0,0,0,1,GETDATE(), 	210055,25, 	196,0,0,0,1,GETDATE(), 	310042,25, 	197,0,0,0,1,GETDATE(), 	310055,25, 	198,0,0,0,1,GETDATE(), 	111043,25, 	199,0,0,0,1,GETDATE(), 	211028,25, 	200,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10047,25, 	201,0,0,0,1,GETDATE(), 	10057, 25,	 202,0,0,0,1,GETDATE(),	110047,25, 	203,0,0,0,1,GETDATE(), 	110057,25, 	204,0,0,0,1,GETDATE(), 	210047,25, 	205,0,0,0,1,GETDATE(), 	210057,25, 	206,0,0,0,1,GETDATE(), 	310047,25, 	207,0,0,0,1,GETDATE(), 	310057,25, 	208,0,0,0,1,GETDATE(), 	111031,25, 	209,0,0,0,1,GETDATE(), 	211040,25, 	210,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10049,25, 	211,0,0,0,1,GETDATE(), 	10075, 25,	 212,0,0,0,1,GETDATE(),	110049,25, 	213,0,0,0,1,GETDATE(), 	110075,25, 	214,0,0,0,1,GETDATE(), 	210049,25, 	215,0,0,0,1,GETDATE(), 	210075,25, 	216,0,0,0,1,GETDATE(), 	310049,25, 	217,0,0,0,1,GETDATE(), 	310075,25, 	218,0,0,0,1,GETDATE(), 	111034,25, 	219,0,0,0,1,GETDATE(), 	211044,25, 	220,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10059,25, 	221,0,0,0,1,GETDATE(), 	10037, 25,	 222,0,0,0,1,GETDATE(),	110059,25, 	223,0,0,0,1,GETDATE(), 	110037,25, 	224,0,0,0,1,GETDATE(), 	210059,25, 	225,0,0,0,1,GETDATE(), 	210037,25, 	226,0,0,0,1,GETDATE(), 	310059,25, 	227,0,0,0,1,GETDATE(), 	310037,25, 	228,0,0,0,1,GETDATE(), 	111021,25, 	229,0,0,0,1,GETDATE(), 	211027,25, 	230,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10063,25, 	231,0,0,0,1,GETDATE(), 	10030, 25,	 232,0,0,0,1,GETDATE(),	110063,25, 	233,0,0,0,1,GETDATE(), 	110030,25, 	234,0,0,0,1,GETDATE(), 	210063,25, 	235,0,0,0,1,GETDATE(), 	210030,25, 	236,0,0,0,1,GETDATE(), 	310063,25, 	237,0,0,0,1,GETDATE(), 	310030,25, 	238,0,0,0,1,GETDATE(), 	111029,25, 	239,0,0,0,1,GETDATE(), 	211045,25, 	240,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10066,25, 	241,0,0,0,1,GETDATE(), 	10041, 25,	 242,0,0,0,1,GETDATE(),	110066,25, 	243,0,0,0,1,GETDATE(), 	110041,25, 	244,0,0,0,1,GETDATE(), 	210066,25, 	245,0,0,0,1,GETDATE(), 	210041,25, 	246,0,0,0,1,GETDATE(), 	310066,25, 	247,0,0,0,1,GETDATE(), 	310041,25, 	248,0,0,0,1,GETDATE(), 	111044,25, 	249,0,0,0,1,GETDATE(), 	211041,25, 	250,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10067,25, 	251,0,0,0,1,GETDATE(), 	10052, 25,	 252,0,0,0,1,GETDATE(),	110067,25, 	253,0,0,0,1,GETDATE(), 	110052,25, 	254,0,0,0,1,GETDATE(), 	210067,25, 	255,0,0,0,1,GETDATE(), 	210052,25, 	256,0,0,0,1,GETDATE(), 	310067,25, 	257,0,0,0,1,GETDATE(), 	310052,25, 	258,0,0,0,1,GETDATE(), 	111041,25, 	259,0,0,0,1,GETDATE(), 	211033,25, 	260,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10070,25, 	261,0,0,0,1,GETDATE(), 	10050, 25,	 262,0,0,0,1,GETDATE(),	110070,25, 	263,0,0,0,1,GETDATE(), 	110050,25, 	264,0,0,0,1,GETDATE(), 	210070,25, 	265,0,0,0,1,GETDATE(), 	210050,25, 	266,0,0,0,1,GETDATE(), 	310070,25, 	267,0,0,0,1,GETDATE(), 	310050,25, 	268,0,0,0,1,GETDATE(), 	111035,25, 	269,0,0,0,1,GETDATE(), 	211036,25, 	270,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10072,25, 	271,0,0,0,1,GETDATE(), 	10048, 25,	 272,0,0,0,1,GETDATE(),	110072,25, 	273,0,0,0,1,GETDATE(), 	110048,25, 	274,0,0,0,1,GETDATE(), 	210072,25, 	275,0,0,0,1,GETDATE(), 	210048,25, 	276,0,0,0,1,GETDATE(), 	310072,25, 	277,0,0,0,1,GETDATE(), 	310048,25, 	278,0,0,0,1,GETDATE(), 	111039,25, 	279,0,0,0,1,GETDATE(), 	211061,25, 	280,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10073,25, 	281,0,0,0,1,GETDATE(), 	10077, 25,	 282,0,0,0,1,GETDATE(),	110073,25, 	283,0,0,0,1,GETDATE(), 	110077,25, 	284,0,0,0,1,GETDATE(), 	210073,25, 	285,0,0,0,1,GETDATE(), 	210077,25, 	286,0,0,0,1,GETDATE(), 	310073,25, 	287,0,0,0,1,GETDATE(), 	310077,25, 	288,0,0,0,1,GETDATE(), 	111030,25, 	289,0,0,0,1,GETDATE(), 	211052,25, 	290,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10068,25, 	291,0,0,0,1,GETDATE(), 	10039, 25,	 292,0,0,0,1,GETDATE(),	110068,25, 	293,0,0,0,1,GETDATE(), 	110039,25, 	294,0,0,0,1,GETDATE(), 	210068,25, 	295,0,0,0,1,GETDATE(), 	210039,25, 	296,0,0,0,1,GETDATE(), 	310068,25, 	297,0,0,0,1,GETDATE(), 	310039,25, 	298,0,0,0,1,GETDATE(), 	111040,25, 	299,0,0,0,1,GETDATE(), 	211037,25, 	300,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10053,25, 	301,0,0,0,1,GETDATE(), 	10054, 25,	 302,0,0,0,1,GETDATE(),	110053,25, 	303,0,0,0,1,GETDATE(), 	110054,25, 	304,0,0,0,1,GETDATE(), 	210053,25, 	305,0,0,0,1,GETDATE(), 	210054,25, 	306,0,0,0,1,GETDATE(), 	310053,25, 	307,0,0,0,1,GETDATE(), 	310054,25, 	308,0,0,0,1,GETDATE(), 	111047,25, 	309,0,0,0,1,GETDATE(), 	211049,25, 	310,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	10081,25, 	311,0,0,0,1,GETDATE(), 	10056, 25,	 312,0,0,0,1,GETDATE(),	110081,25, 	313,0,0,0,1,GETDATE(), 	110056,25, 	314,0,0,0,1,GETDATE(), 	210081,25, 	315,0,0,0,1,GETDATE(), 	210056,25, 	316,0,0,0,1,GETDATE(), 	310081,25, 	317,0,0,0,1,GETDATE(), 	310056,25, 	318,0,0,0,1,GETDATE(), 	111050,25, 	319,0,0,0,1,GETDATE(), 	311041,25, 	320,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	311021,25, 	321,0,0,0,1,GETDATE(), 	10058, 25,	 322,0,0,0,1,GETDATE(),	311009,25, 	323,0,0,0,1,GETDATE(), 	110058,25, 	324,0,0,0,1,GETDATE(), 	311016,25, 	325,0,0,0,1,GETDATE(), 	210058,25, 	326,0,0,0,1,GETDATE(), 	311030,25, 	327,0,0,0,1,GETDATE(), 	310058,25, 	328,0,0,0,1,GETDATE(), 	111052,25, 	329,0,0,0,1,GETDATE(), 	311035,25, 	330,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	311022,25, 	331,0,0,0,1,GETDATE(), 	10061, 25,	 332,0,0,0,1,GETDATE(),	311003,25, 	333,0,0,0,1,GETDATE(), 	110061,25, 	334,0,0,0,1,GETDATE(), 	311031,25, 	335,0,0,0,1,GETDATE(), 	210061,25, 	336,0,0,0,1,GETDATE(), 	311039,25, 	337,0,0,0,1,GETDATE(), 	310061,25, 	338,0,0,0,1,GETDATE(), 	111038,25, 	339,0,0,0,1,GETDATE(), 	311025,25, 	340,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	311019,25, 	341,0,0,0,1,GETDATE(), 	10062, 25,	 342,0,0,0,1,GETDATE(),	311006,25, 	343,0,0,0,1,GETDATE(), 	110062,25, 	344,0,0,0,1,GETDATE(), 	311032,25, 	345,0,0,0,1,GETDATE(), 	210062,25, 	346,0,0,0,1,GETDATE(), 	311028,25, 	347,0,0,0,1,GETDATE(), 	310062,25, 	348,0,0,0,1,GETDATE(), 	111056,25, 	349,0,0,0,1,GETDATE(), 	311033,25, 	350,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	311013,25, 	351,0,0,0,1,GETDATE(), 	10071, 25,	 352,0,0,0,1,GETDATE(),	311001,25, 	353,0,0,0,1,GETDATE(), 	110071,25, 	354,0,0,0,1,GETDATE(), 	311002,25, 	355,0,0,0,1,GETDATE(), 	210071,25, 	356,0,0,0,1,GETDATE(), 	311034,25, 	357,0,0,0,1,GETDATE(), 	310071,25, 	358,0,0,0,1,GETDATE(), 	311038,25, 	359,0,0,0,1,GETDATE(), 	311054,25, 	360,0,0,0,1,GETDATE(), GETDATE())
INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	311007,25, 	361,0,0,0,1,GETDATE(), 	10074, 25,	 362,0,0,0,1,GETDATE(),	311008,25, 	363,0,0,0,1,GETDATE(), 	110074,25, 	364,0,0,0,1,GETDATE(), 	311024,25, 	365,0,0,0,1,GETDATE(), 	210074,25, 	366,0,0,0,1,GETDATE(), 	311018,25, 	367,0,0,0,1,GETDATE(), 	310074,25, 	368,0,0,0,1,GETDATE(), 	311015,25, 	369,0,0,0,1,GETDATE(), 	311029,25, 	370,0,0,0,1,GETDATE(), GETDATE())
--INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	311010,25, 	371,0,0,0,1,GETDATE(), 	10098, 25,	 372,0,0,0,1,GETDATE(),	311005,25, 	373,0,0,0,1,GETDATE(), 	110098,25, 	374,0,0,0,1,GETDATE(), 	311040,25, 	375,0,0,0,1,GETDATE(), 	210098,25, 	376,0,0,0,1,GETDATE(), 	311036,25, 	377,0,0,0,1,GETDATE(), 	310098,25, 	378,0,0,0,1,GETDATE(), 	311047,25, 	379,0,0,0,1,GETDATE(), 	311043,25, 	380,0,0,0,1,GETDATE(), GETDATE())
--INSERT INTO [dbo].[userItemExtraDB] ([accountIDX],[item1_type],[item1_reinforce],[item1_slotindex],[item1_tradetype],[item1_mcustom],[item1_fcustom],[item1_limitType],[item1_limitDate],[item2_type],[item2_reinforce],[item2_slotindex],[item2_tradetype],[item2_mcustom],[item2_fcustom],[item2_limitType],[item2_limitDate],[item3_type],[item3_reinforce],[item3_slotindex],[item3_tradetype],[item3_mcustom],[item3_fcustom],[item3_limitType],[item3_limitDate],[item4_type],[item4_reinforce],[item4_slotindex],[item4_tradetype],[item4_mcustom],[item4_fcustom],[item4_limitType],[item4_limitDate],[item5_type],[item5_reinforce],[item5_slotindex],[item5_tradetype],[item5_mcustom],[item5_fcustom],[item5_limitType],[item5_limitDate],[item6_type],[item6_reinforce],[item6_slotindex],[item6_tradetype],[item6_mcustom],[item6_fcustom],[item6_limitType],[item6_limitDate],[item7_type],[item7_reinforce],[item7_slotindex],[item7_tradetype],[item7_mcustom],[item7_fcustom],[item7_limitType],[item7_limitDate],[item8_type],[item8_reinforce],[item8_slotindex],[item8_tradetype],[item8_mcustom],[item8_fcustom],[item8_limitType],[item8_limitDate],[item9_type],[item9_reinforce],[item9_slotindex],[item9_tradetype],[item9_mcustom],[item9_fcustom],[item9_limitType],[item9_limitDate],[item10_type],[item10_reinforce],[item10_slotindex],[item10_tradetype],[item10_mcustom],[item10_fcustom],[item10_limitType],[item10_limitDate],[regDate])VALUES (@accountIDX, 	311055,25, 	381,0,0,0,1,GETDATE(),     311053, 25,	 382,0,0,0,1,GETDATE(),        0, 0,     0,0,0,0,0,GETDATE(),          0, 0,     0,0,0,0,0,GETDATE(),          0, 0,     0,0,0,0,0,GETDATE(),          0, 0,     0,0,0,0,0,GETDATE(),          0, 0,     0,0,0,0,0,GETDATE(),          0, 0,     0,0,0,0,0,GETDATE(),          0, 0,     0,0,0,0,0,GETDATE(),          0, 0,     0,0,0,0,0,GETDATE(), GETDATE())



INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 34, 50, 0, 1, 50, 0, 15, 50, 0, 17, 50, 0, 21, 50, 0, 27, 50, 0, 16, 50, 0, 40, 50, 0, 51, 50, 0, 36, 50, 0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 13, 50, 0, 28, 50, 0, 29, 50, 0, 33, 50, 0, 25, 50, 0, 19, 50, 0, 23, 50, 0, 64, 50, 0, 42, 50, 0, 45, 50, 0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 47, 50, 0, 49, 50, 0, 59, 50, 0, 63, 50, 0, 66, 50, 0, 67, 50, 0, 70, 50, 0, 72, 50, 0, 73, 50, 0, 68, 50, 0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 53, 50, 0, 81, 50, 0,  3, 50, 0,  7, 50, 0, 10, 50, 0, 18, 50, 0, 22, 50, 0, 26, 50, 0, 11, 50, 0, 46, 50, 0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX ,  4, 50, 0,  5, 50, 0, 20, 50, 0, 38, 50, 0,  9, 50, 0, 24, 50, 0, 65, 50, 0,  8, 50, 0,  2, 50, 0, 31, 50, 0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 44, 50, 0, 55, 50, 0, 57, 50, 0, 75, 50, 0, 37, 50, 0, 30, 50, 0, 52, 50, 0, 50, 50, 0, 41, 50, 0, 48, 50, 0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 77, 50, 0, 39, 50, 0, 54, 50, 0, 56, 50, 0, 58, 50, 0, 61, 50, 0, 62, 50, 0, 71, 50, 0, 74, 50, 0, 98, 50, 0)




IF (@@ERROR = 0)
    COMMIT TRAN
ELSE
    ROLLBACK TRAN


END
GO


-- ----------------------------
-- procedure structure for game_event_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_get_data]
GO

CREATE PROCEDURE [dbo].[game_event_get_data]
(
	@accountIDX int
)
AS
	SELECT idx, eventType, value1, value2 FROM userEventDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_login_myRanking
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_login_myRanking]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_login_myRanking]
GO

CREATE PROCEDURE [dbo].[web_login_myRanking]
(
	@accountIDX int
)
AS
	SELECT ranking_2day, ranking_1day FROM userRankingDB_classgroup WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for manage_singo_log_get_limitdata
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_singo_log_get_limitdata]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_singo_log_get_limitdata]
GO

CREATE PROCEDURE [dbo].[manage_singo_log_get_limitdata]
(
	@nickname varchar(20)
)
AS
	SELECT accountIDX, limitType, limitDate FROM userMemberDB WITH(NOLOCK)
	WHERE nickname=@nickname
GO


-- ----------------------------
-- procedure structure for web_define_quest_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_define_quest_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_define_quest_count]
GO

CREATE PROCEDURE [dbo].[web_define_quest_count]
(
	@questIDX int
)
AS
	SELECT count(*) FROM define_quest WITH(NOLOCK) WHERE questIDX=@questIDX
GO


-- ----------------------------
-- procedure structure for manage_userinfo_change_password
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_change_password]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_change_password]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_change_password]
(
	@accountIDX int
,	@userPWD varchar(24)
)
AS
	UPDATE userMemberDB SET userPWD=@userPWD WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_practice_BlockList
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_practice_BlockList]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_practice_BlockList]
GO

CREATE PROCEDURE [dbo].[game_practice_BlockList]
 	@KickID varchar(20)
AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;
	
	SELECT accountIDX FROM LosaGame.dbo.userMemberDB WHERE userID = @KickID
GO


-- ----------------------------
-- procedure structure for z_nouse_101006_web_ranking_class_detail_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_101006_web_ranking_class_detail_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_101006_web_ranking_class_detail_count]
GO

CREATE PROCEDURE [dbo].[z_nouse_101006_web_ranking_class_detail_count]
(
	@tblID int
)
AS
	SELECT rowcnt FROM sysindexes WHERE id=@tblID and indid < 2
GO


-- ----------------------------
-- procedure structure for create_LSNC_member_add_2015
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[create_LSNC_member_add_2015]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[create_LSNC_member_add_2015]
GO

CREATE PROCEDURE [dbo].[create_LSNC_member_add_2015]      
(      
 @userID varchar(12)      
, @nickName varchar(20)      
)      
AS      
      
BEGIN      
      
SET NOCOUNT ON      
SET XACT_ABORT ON      
      
BEGIN TRAN      
      
DECLARE @accountIDX int      
      
INSERT INTO dbo.userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, limitType, limitDate, regDate)      
VALUES (@userID, @nickName, '', '', 0, 100, 10, 0, '1999-01-01', GETDATE())      
      
SET @accountIDX = SCOPE_IDENTITY()      
      
      
      
INSERT INTO dbo.userGameDB (      
 accountIDX, userState, gameMoney, playTime, conn_count, userLevel, userEXP, rencpoint, renspoint, relateLevel, regionType, refillData, connDate, regDate      
)      
VALUES (      
 @accountIDX, -1, 10000000 , 1000, 1000, 30, 0, 0, 0, 0, 0, 0, GETDATE(), GETDATE()      
)      
      
      
INSERT INTO userRecordBattleDB (      
 accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, regDate      
)      
VALUES (      
 @accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE()      
)      
      
INSERT INTO dbo.userLoginDB (accountIDX, encodeKey, gameServerID, connDate)      
VALUES (@accountIDX, '111111111111111', 0, GETDATE())      
      
--    
/*
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 1, 50, 0,  7,   50, 0, 13, 50, 0, 19, 50, 0, 25, 50, 0, 31, 50, 0, 39, 50, 0, 46, 50, 0, 53, 50, 0, 59, 50, 0)      
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 2, 50, 0,  8,   50, 0, 14, 50, 0, 20, 50, 0, 26, 50, 0, 33, 50, 0, 40, 50, 0, 47, 50, 0, 54, 50, 0, 61, 50, 0)      
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 3, 50, 0,  9,   50, 0, 15, 50, 0, 21, 50, 0, 27, 50, 0, 34, 50, 0, 41, 50, 0, 48, 50, 0, 55, 50, 0, 62, 50, 0)      
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 4, 50, 0, 10,   50, 0, 16, 50, 0, 22, 50, 0, 28, 50, 0, 36, 50, 0, 42, 50, 0, 49, 50, 0, 56, 50, 0, 63, 50, 0)      
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 5, 50, 0, 11,   50, 0, 17, 50, 0, 23, 50, 0, 29, 50, 0, 37, 50, 0, 44, 50, 0, 50, 50, 0, 57, 50, 0, 64, 50, 0)      
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 6, 50, 0, 12,   50, 0, 18, 50, 0, 24, 50, 0, 30, 50, 0, 38, 50, 0, 45, 50, 0, 51, 50, 0, 58, 50, 0, 65, 50, 0)      
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 66, 50, 0, 72,  50, 0, 78, 50, 0, 85, 50, 0, 91, 50, 0,  99, 50, 0, 106, 50, 0, 115, 50, 0, 125, 50, 0, 0, 0, 0)      
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 67, 50, 0, 73,  50, 0, 79, 50, 0, 86, 50, 0, 92, 50, 0, 100, 50, 0, 107, 50, 0, 117, 50, 0, 0, 0, 0, 0, 0, 0)      
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 68, 50, 0, 74,  50, 0, 81, 50, 0, 87, 50, 0, 93, 50, 0, 102, 50, 0, 109, 50, 0, 119, 50, 0, 0, 0, 0, 0, 0, 0)      
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 69, 50, 0, 75,  50, 0, 82, 50, 0, 88, 50, 0, 94, 50, 0, 103, 50, 0, 111, 50, 0, 120, 50, 0, 0, 0, 0, 0, 0, 0)      
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 70, 50, 0, 76,  50, 0, 83, 50, 0, 89, 50, 0, 96, 50, 0, 104, 50, 0, 113, 50, 0, 122, 50, 0, 0, 0, 0, 0, 0, 0)      
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 71, 50, 0, 77,  50, 0, 84, 50, 0, 90, 50, 0, 97, 50, 0, 105, 50, 0, 114, 50, 0, 124, 50, 0, 0, 0, 0, 0, 0, 0)      
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 39, 50, 0, 41 , 50, 0, 48 ,50, 0 ,56, 50, 0 ,58 ,50, 0  ,62, 50, 0  ,77 ,50, 0  ,78, 50, 0 ,79 , 50, 0,85 , 50, 0   )  
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 89, 50, 0, 90 , 50, 0, 92 ,50, 0,102, 50, 0 ,103,50, 0 ,104, 50, 0  ,105,50, 0 ,106, 50, 0 ,107, 50, 0 ,109, 50, 0  )  
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX ,111, 50, 0,113 , 50, 0,114 ,50, 0,115, 50, 0 ,117,50, 0 ,119, 50, 0  ,120,50, 0 ,122, 50, 0 ,124, 50, 0 ,125, 50, 0  )
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX ,111, 50, 0,113 , 50, 0,114 ,50, 0,115, 50, 0 ,117,50, 0 ,119, 50, 0  ,120,50, 0 ,122, 50, 0 ,124, 50, 0 ,125, 50, 0  )
*/
--
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES (@accountIDX,	1	,50,0, 11	,50,0 ,21,50,0,31,50,0,41,50,0,51,50,0,61,50,0,71,50,0,81,50,0,91 ,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES (@accountIDX,	2	,50,0, 12	,50,0 ,22,50,0,32,50,0,42,50,0,52,50,0,62,50,0,72,50,0,82,50,0,92 ,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES (@accountIDX,	3	,50,0, 13	,50,0 ,23,50,0,33,50,0,43,50,0,53,50,0,63,50,0,73,50,0,83,50,0,93 ,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES (@accountIDX,	4	,50,0, 14	,50,0 ,24,50,0,34,50,0,44,50,0,54,50,0,64,50,0,74,50,0,84,50,0,94 ,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES (@accountIDX,	5	,50,0, 15	,50,0 ,25,50,0,35,50,0,45,50,0,55,50,0,65,50,0,75,50,0,85,50,0,95 ,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES (@accountIDX,	6	,50,0, 16	,50,0 ,26,50,0,36,50,0,46,50,0,56,50,0,66,50,0,76,50,0,86,50,0,96 ,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES (@accountIDX,	7	,50,0, 17	,50,0 ,27,50,0,37,50,0,47,50,0,57,50,0,67,50,0,77,50,0,87,50,0,97 ,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES (@accountIDX,	8	,50,0, 18	,50,0 ,28,50,0,38,50,0,48,50,0,58,50,0,68,50,0,78,50,0,88,50,0,98 ,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES (@accountIDX,	9	,50,0, 19	,50,0 ,29,50,0,39,50,0,49,50,0,59,50,0,69,50,0,79,50,0,89,50,0,99 ,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES (@accountIDX,	10	,50,0, 20	,50,0 ,30,50,0,40,50,0,50,50,0,60,50,0,70,50,0,80,50,0,90,50,0,100,50,0)

INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert]) VALUES (@accountIDX,101,50,0,111,50,0,121,50,0,131,50,0,141,50,0,151,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert]) VALUES (@accountIDX,102,50,0,112,50,0,122,50,0,132,50,0,142,50,0,152,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert]) VALUES (@accountIDX,103,50,0,113,50,0,123,50,0,133,50,0,143,50,0,153,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert]) VALUES (@accountIDX,104,50,0,114,50,0,124,50,0,134,50,0,144,50,0,154,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert]) VALUES (@accountIDX,105,50,0,115,50,0,125,50,0,135,50,0,145,50,0,155,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert]) VALUES (@accountIDX,106,50,0,116,50,0,126,50,0,136,50,0,146,50,0,156,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert]) VALUES (@accountIDX,107,50,0,117,50,0,127,50,0,137,50,0,147,50,0,157,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert]) VALUES (@accountIDX,108,50,0,118,50,0,128,50,0,138,50,0,148,50,0,158,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert]) VALUES (@accountIDX,109,50,0,119,50,0,129,50,0,139,50,0,149,50,0,159,50,0)
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert]) VALUES (@accountIDX,110,50,0,120,50,0,130,50,0,140,50,0,150,50,0,160,50,0)     

IF (@@ERROR = 0)
    COMMIT TRAN 
ELSE      
    ROLLBACK TRAN      
     
      
END
GO


-- ----------------------------
-- procedure structure for game_event_get_createIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_get_createIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_get_createIDX]
GO

CREATE PROCEDURE [dbo].[game_event_get_createIDX]
(
	@accountIDX int
,	@eventType int
)
AS
	SELECT Max(idx) FROM userEventDB WHERE accountIDX=@accountIDX and eventType=@eventType
GO


-- ----------------------------
-- procedure structure for web_login_info_saveB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_login_info_saveB]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_login_info_saveB]
GO

CREATE PROCEDURE [dbo].[web_login_info_saveB]
(
	@accountIDX int
)
AS
	UPDATE userInfoDB SET cnnDate = getdate() WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for manage_singo_log_count_searchB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_singo_log_count_searchB]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_singo_log_count_searchB]
GO

CREATE PROCEDURE [dbo].[manage_singo_log_count_searchB]
(
	@searchType varchar(12)
,	@searchIDX int
)
AS
	If (@searchType = 'reportIDX')
	BEGIN
		SELECT count(*) FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK)
		WHERE reportIDX = @searchIDX
	END
	ELSE
	BEGIN
		SELECT count(*) FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK)
		WHERE receiveIDX = @searchIDX
	END
GO


-- ----------------------------
-- procedure structure for web_define_quest_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_define_quest_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_define_quest_add]
GO

CREATE PROCEDURE [dbo].[web_define_quest_add]
(
	@questIDX int
,	@title varchar(100)
,	@progress varchar(100)
,	@content1 varchar(150)
,	@content2 varchar(150)
,	@content3 varchar(150)
,	@content4 varchar(150)
)
AS
	INSERT INTO define_quest (questIDX, title, progress, content1, content2, content3, content4)
	VALUES (@questIDX, @title, @progress, @content1, @content2, @content3, @content4)
GO


-- ----------------------------
-- procedure structure for AGENT_TABLE_RESET_IDENTITY
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_TABLE_RESET_IDENTITY]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_TABLE_RESET_IDENTITY]
GO

CREATE PROCEDURE [dbo].[AGENT_TABLE_RESET_IDENTITY]
AS
BEGIN
	DBCC CHECKIDENT (define_blockIP, RESEED, 1)
DBCC CHECKIDENT (define_class_price, RESEED, 1)
DBCC CHECKIDENT (define_config, RESEED, 1)
DBCC CHECKIDENT (define_encode_key, RESEED, 1)
DBCC CHECKIDENT (define_game_server, RESEED, 1)
DBCC CHECKIDENT (define_gear_customidx, RESEED, 1)
DBCC CHECKIDENT (define_manage, RESEED, 1)
DBCC CHECKIDENT (define_quest, RESEED, 1)
DBCC CHECKIDENT (define_site_config, RESEED, 1)
DBCC CHECKIDENT (event_chuchun, RESEED, 1)
DBCC CHECKIDENT (itemCode, RESEED, 1)
DBCC CHECKIDENT (userAbilityDB, RESEED, 1)
DBCC CHECKIDENT (userAccessoryDB, RESEED, 1)
DBCC CHECKIDENT (userAttendanceDB, RESEED, 1)
DBCC CHECKIDENT (userAwardDB, RESEED, 1)
DBCC CHECKIDENT (userCharacterDB, RESEED, 1)
DBCC CHECKIDENT (userClassDB, RESEED, 1)
DBCC CHECKIDENT (userConfigDB, RESEED, 1)
DBCC CHECKIDENT (userConfigDB_TEST, RESEED, 1)
DBCC CHECKIDENT (userCooperationDB, RESEED, 1)
DBCC CHECKIDENT (userCostumeDB, RESEED, 1)
DBCC CHECKIDENT (userCustomMedalDB, RESEED, 1)
DBCC CHECKIDENT (userEventDB, RESEED, 1)
DBCC CHECKIDENT (userFishDB, RESEED, 1)
DBCC CHECKIDENT (userFriendBestDB, RESEED, 1)
DBCC CHECKIDENT (userFriendDB, RESEED, 1)
DBCC CHECKIDENT (userGoldDB, RESEED, 1)
DBCC CHECKIDENT (userGuildDB, RESEED, 1)
DBCC CHECKIDENT (userGuildInfoDB, RESEED, 1)
DBCC CHECKIDENT (userHqDB, RESEED, 1)
DBCC CHECKIDENT (userItemDB, RESEED, 1)
DBCC CHECKIDENT (userItemEtcDB, RESEED, 1)
DBCC CHECKIDENT (userItemExtraDB, RESEED, 1)
DBCC CHECKIDENT (userItemMedalDB, RESEED, 1)
DBCC CHECKIDENT (userItemMedalExtendDB, RESEED, 1)
DBCC CHECKIDENT (userLeagueAuthDB, RESEED, 1)
DBCC CHECKIDENT (userLeagueCheerDB, RESEED, 1)
DBCC CHECKIDENT (userLeagueInfoDB, RESEED, 1)
DBCC CHECKIDENT (userLeagueListDB, RESEED, 1)
DBCC CHECKIDENT (userLeagueRewardCheerDB, RESEED, 1)
DBCC CHECKIDENT (userLeagueRewardDB, RESEED, 1)
DBCC CHECKIDENT (userLeagueRewardUserDB, RESEED, 1)
DBCC CHECKIDENT (userLeagueRoundDB, RESEED, 1)
DBCC CHECKIDENT (userLeagueTeamDB, RESEED, 1)
DBCC CHECKIDENT (userLeagueTeamMemberDB, RESEED, 1)
DBCC CHECKIDENT (userLeagueWinnerInfoDB, RESEED, 1)
DBCC CHECKIDENT (userLeagueWinnerHistoryDB, RESEED, 1)
DBCC CHECKIDENT (userMatchModeHistoryDB, RESEED, 1)
DBCC CHECKIDENT (userMedalDB, RESEED, 1)
DBCC CHECKIDENT (userMedalDB_receive, RESEED, 1)
DBCC CHECKIDENT (userPieceDB, RESEED, 1)
DBCC CHECKIDENT (userPresentDB, RESEED, 1)
DBCC CHECKIDENT (userQuestCompleteDB, RESEED, 1)
DBCC CHECKIDENT (userQuestDB, RESEED, 1)
DBCC CHECKIDENT (userRankingDB_award_top3, RESEED, 1)
DBCC CHECKIDENT (userRankingDB_award_top100, RESEED, 1)
DBCC CHECKIDENT (userRankingDB_class_top3, RESEED, 1)
DBCC CHECKIDENT (userRankingDB_class_top100, RESEED, 1)
DBCC CHECKIDENT (userRankingDB_classgroup_top10000, RESEED, 1)
DBCC CHECKIDENT (userRankingDB_hero, RESEED, 1)
DBCC CHECKIDENT (userRankingDB_temp_ranking, RESEED, 1)
DBCC CHECKIDENT (userRegionDB, RESEED, 1)
DBCC CHECKIDENT (userRegionDB_compen, RESEED, 1)
DBCC CHECKIDENT (userRegionDB_history, RESEED, 1)
DBCC CHECKIDENT (userSBoxDB, RESEED, 1)
DBCC CHECKIDENT (userSpiritDB, RESEED, 1)
DBCC CHECKIDENT (userTradeDB, RESEED, 1)
DBCC CHECKIDENT (userMemberDB, RESEED, 1)
END
GO


-- ----------------------------
-- procedure structure for manage_user_ranking_userlevel_top50
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_user_ranking_userlevel_top50]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_user_ranking_userlevel_top50]
GO

CREATE PROCEDURE [dbo].[manage_user_ranking_userlevel_top50]

As
	SELECT TOP 50 a.accountIDX, c.nickName, a.class, b.userLevel
	FROM userRankingDB a JOIN userGameDB b ON a.accountIDX=b.accountIDX JOIN userMemberDB c ON a.accountIDX = c.accountIDX WHERE a.class > 0 ORDER BY a.class ASC
GO


-- ----------------------------
-- procedure structure for game_popStore_set_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_popStore_set_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_popStore_set_add]
GO

CREATE PROCEDURE [dbo].[game_popStore_set_add]

	@ACCOUNT_IDX		INT,
	@POPUP_SLOT			INT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	BEGIN TRAN

		-- 팝업 스토어 구매 내역 Insert
		INSERT dbo.userPopStoreDB WITH (XLOCK, ROWLOCK) (AccountIDX, PopupSlot) 
		VALUES (@ACCOUNT_IDX, @POPUP_SLOT)

		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
			SELECT -1;
			RETURN;
		END 

	COMMIT TRAN		

	SELECT 0;
	RETURN;
GO


-- ----------------------------
-- procedure structure for z_nouse_game_friend_best_join_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_game_friend_best_join_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_game_friend_best_join_list]
GO

CREATE PROCEDURE [dbo].[z_nouse_game_friend_best_join_list]
(
	@idx int
,	@accountIDX int
,	@topNo int
)
AS

	DECLARE @strSQL nvarchar(1000)
	DECLARE @ParmDefinition nvarchar(500)

	SET @strSQL = N'SELECT TOP (@topNo_in) idx, friendIDX FROM userFriendBestDB '
	SET @strSQL = @strSQL + ' WHERE accountIDX = @accountIDX_in and idx > @idx_in and flag=0 ORDER BY idx ASC'

	SET @ParmDefinition = N'@topNo_in int, @accountIDX_in int, @idx_in int'

	EXECUTE sp_executesql @strSQL, @ParmDefinition, @idx_in=@idx, @accountIDX_in=@accountIDX, @topNo_in=@topNo
GO


-- ----------------------------
-- procedure structure for create_LSNC_member_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[create_LSNC_member_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[create_LSNC_member_add]
GO

CREATE PROCEDURE [dbo].[create_LSNC_member_add]    
(    
 @userID varchar(12)    
, @nickName varchar(20)    
)    
AS    
    
BEGIN    
    
SET NOCOUNT ON    
SET XACT_ABORT ON    
    
BEGIN TRAN    
    
DECLARE @accountIDX int    
    
INSERT INTO dbo.userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, limitType, limitDate, regDate)    
VALUES (@userID, @nickName, '', '', 0, 100, 10, 0, '1999-01-01', GETDATE())    
    
SET @accountIDX = SCOPE_IDENTITY()    
    
    
    
INSERT INTO dbo.userGameDB (  
 accountIDX, userState, gameMoney, playTime, conn_count, userLevel, userEXP, rencpoint, renspoint, relateLevel, regionType, refillData, connDate, regDate  
)  
VALUES (  
 @accountIDX, -1, 100000 , 1000, 1000, 30, 0, 0, 0, 0, 0, 0, GETDATE(), GETDATE()  
)  
  
    
INSERT INTO userRecordBattleDB (    
 accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, regDate    
)    
VALUES (    
 @accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE()    
)    
    
INSERT INTO dbo.userLoginDB (accountIDX, encodeKey, gameServerID, connDate)    
VALUES (@accountIDX, '111111111111111', 0, GETDATE())    
    
--slot : 3.4000010 / value2 96  , 육성복구권 : 100개 3.1000009.100, All 육성복구권 : 3.1001709.100   
INSERT INTO dbo.userItemEtcDB (    
 accountIDX, item1_type, item1_value1, item1_value2, item2_type, item2_value1, item2_value2, item3_type, item3_value1, item3_value2    
)    
VALUES (    
 @accountIDX, 4000010, 96, 1, 1000009, 100, 1,  1001709, 100, 1  
)    
  
  
--  
    
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX ,  1, 50, 0, 6, 50, 0, 12, 50, 0, 13, 50, 0, 14, 50, 0, 15, 50, 0, 16, 50, 0, 17, 50, 0, 19, 50, 0, 21, 50, 0)    
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 23, 50, 0, 25, 50, 0, 27, 50, 0, 28, 50, 0, 29, 50, 0, 33, 50, 0, 34, 50, 0, 36, 50, 0, 40, 50, 0, 42, 50, 0)    
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 45, 50, 0, 47, 50, 0, 49, 50, 0, 51, 50, 0, 53, 50, 0, 59, 50, 0, 61, 50, 0, 63, 50, 0, 64, 50, 0, 66, 50, 0)    
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 67, 50, 0, 68, 50, 0, 70, 50, 0, 72, 50, 0, 73, 50, 0, 81, 50, 0, 3, 50, 0, 7, 50, 0, 10, 50, 0, 11, 50, 0)    
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 18, 50, 0, 22, 50, 0, 26, 50, 0, 46, 50, 0,  4, 50, 0, 5, 50, 0, 9, 50, 0,  20, 50, 0, 24, 50, 0, 38, 50, 0)    
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert],[class6_type],[class6_level],[class6_expert],[class7_type],[class7_level],[class7_expert],[class8_type],[class8_level],[class8_expert],[class9_type],[class9_level],[class9_expert],[class10_type],[class10_level],[class10_expert]) VALUES ( @accountIDX , 65, 50, 0, 76, 50, 0,  2, 50, 0,  8, 50, 0, 31, 50, 0, 44, 50, 0, 55, 50, 0, 57, 50, 0, 75, 50, 0, 30, 50, 0)    
INSERT INTO [dbo].[userClassDB]([accountIDX],[class1_type],[class1_level],[class1_expert],[class2_type],[class2_level],[class2_expert],[class3_type],[class3_level],[class3_expert],[class4_type],[class4_level],[class4_expert],[class5_type],[class5_level],[class5_expert]) VALUES ( @accountIDX , 37, 50, 0, 50, 50, 0, 54, 50, 0, 58, 50, 0, 62, 50, 0)    
    
    
    
    
IF (@@ERROR = 0)    
    COMMIT TRAN    
ELSE    
    ROLLBACK TRAN    
    
    
END
GO


-- ----------------------------
-- procedure structure for game_event_chuchun_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_chuchun_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_chuchun_save]
GO

CREATE PROCEDURE [dbo].[game_event_chuchun_save]
(
	@idx int
)
AS
	UPDATE event_chuchun SET flag=1 WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_login_info_saveA
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_login_info_saveA]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_login_info_saveA]
GO

CREATE PROCEDURE [dbo].[web_login_info_saveA]
(
	@accountIDX int
)
AS
	UPDATE userInfoDB SET checkDate = getDate(), visit_count = visit_count + 1, cnnDate = getdate() WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for manage_singo_log_count_searchA
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_singo_log_count_searchA]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_singo_log_count_searchA]
GO

CREATE PROCEDURE [dbo].[manage_singo_log_count_searchA]
(
	@searchType varchar(12)
)
AS
	If (@searchType = 'A')
	BEGIN
		SELECT count(*) FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK) WHERE resultType = 0
	END
	ELSE
	BEGIN
		SELECT count(*) FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK) WHERE resultType = 1
	END
GO


-- ----------------------------
-- procedure structure for web_coupon_use_coupon_and_give_rndgear
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_coupon_use_coupon_and_give_rndgear]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_coupon_use_coupon_and_give_rndgear]
GO

CREATE PROCEDURE [dbo].[web_coupon_use_coupon_and_give_rndgear]
(
	@accountIDX int
,	@serial varchar(12)
,	@userIP varchar(15)
,	@flag tinyint
)
AS

	BEGIN TRAN

	UPDATE define_serial SET 
		accountIDX = @accountIDX
,		userIP = @userIP
,		regDate = getdate()
	WHERE sn=@serial and couponType=@flag

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate) 
	VALUES (350095, @accountIDX, 6, 1, 1960, 3, 1, getdate() + 28, getdate())

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for manage_user_ranking_userlevel_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_user_ranking_userlevel_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_user_ranking_userlevel_data]
GO

CREATE PROCEDURE [dbo].[manage_user_ranking_userlevel_data]
(
	@accountIDX int
)
As
	SELECT	CONVERT(int, ISNULL(SUM(class1_expert), 0) + ISNULL(SUM(class2_expert), 0) + ISNULL(SUM(class3_expert), 0) + ISNULL(SUM(class4_expert), 0) + ISNULL(SUM(class5_expert), 0) + 
		ISNULL(SUM(class6_expert), 0) + ISNULL(SUM(class7_expert), 0) + ISNULL(SUM(class8_expert), 0) + ISNULL(SUM(class9_expert), 0) + ISNULL(SUM(class10_expert), 0)) AS 'expert'
	FROM userClassDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_popStore_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_popStore_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_popStore_get_data]
GO

CREATE PROCEDURE [dbo].[game_popStore_get_data]

	@ACCOUNT_IDX		INT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	
	SELECT PopupSlot FROM dbo.userPopStoreDB WITH (READUNCOMMITTED) 
	WHERE AccountIDX=@ACCOUNT_IDX


	RETURN;
GO


-- ----------------------------
-- procedure structure for z_nouse_game_friend_best_join_in_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_game_friend_best_join_in_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_game_friend_best_join_in_list]
GO

CREATE PROCEDURE [dbo].[z_nouse_game_friend_best_join_in_list]
(
	@idx int
,	@accountIDX int
,	@topNo int
)
AS

	DECLARE @strSQL nvarchar(1000)
	DECLARE @ParmDefinition nvarchar(500)

	SET @strSQL = N'SELECT TOP (@topNo_in) idx, accountIDX FROM userFriendBestDB '
	SET @strSQL = @strSQL + ' WHERE friendIDX = @accountIDX_in and idx > @idx_in and flag=0 ORDER BY idx ASC'

	SET @ParmDefinition = N'@topNo_in int, @accountIDX_in int, @idx_in int'

	EXECUTE sp_executesql @strSQL, @ParmDefinition, @idx_in=@idx, @accountIDX_in=@accountIDX, @topNo_in=@topNo
GO


-- ----------------------------
-- procedure structure for game_event_chuchun_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_chuchun_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_chuchun_get_data]
GO

CREATE PROCEDURE [dbo].[game_event_chuchun_get_data]
(
	@accountIDX int
)
AS
	SELECT idx, friendIDX FROM event_chuchun WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_login_info_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_login_info_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_login_info_save]
GO

CREATE PROCEDURE [dbo].[web_login_info_save]
(
	@accountIDX int
,	@loginType tinyint
)
AS

	if (@loginType = 1)
	BEGIN
		UPDATE userInfoDB SET checkDate = getDate(), visit_count = visit_count + 1, cnnDate = getdate() WHERE accountIDX = @accountIDX
	END
	else
	BEGIN
		UPDATE userInfoDB SET cnnDate = getdate() WHERE accountIDX = @accountIDX
	END
GO


-- ----------------------------
-- procedure structure for manage_member_search_jumin
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_member_search_jumin]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_member_search_jumin]
GO

CREATE PROCEDURE [dbo].[manage_member_search_jumin]
(
	@schType varchar(8)
,	@schString varchar(64)
)
AS
	SELECT TOP 100 a.accountIDX, a.userID, a.nickName, a.EMail, a.userType, b.cnnDate, a.regDate, b.visit_count
	FROM userMemberDB a WITH(NOLOCK) JOIN userInfoDB b WITH(NOLOCK) on a.accountIDX = b.accountIDX join userNameDB c WITH(NOLOCK) on a.accountIDX = c.accountIDX 
	WHERE c.userEnCode = @schString ORDER BY a.accountIDX DESC
GO


-- ----------------------------
-- procedure structure for web_coupon_use_coupon_and_give_rndclass
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_coupon_use_coupon_and_give_rndclass]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_coupon_use_coupon_and_give_rndclass]
GO

CREATE PROCEDURE [dbo].[web_coupon_use_coupon_and_give_rndclass]
(
	@accountIDX int
,	@serial varchar(12)
,	@userIP varchar(15)
,	@flag tinyint
)
AS

	BEGIN TRAN

	UPDATE define_serial SET 
		accountIDX = @accountIDX
,		userIP = @userIP
,		regDate = getdate()
	WHERE sn=@serial and couponType=@flag

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate) 
	VALUES (350095, @accountIDX, 3, 1000022, 1, 3, 1, getdate() + 28, getdate())

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for manage_mannerpoint_log_admin_give_point
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_mannerpoint_log_admin_give_point]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_mannerpoint_log_admin_give_point]
GO

CREATE PROCEDURE [dbo].[manage_mannerpoint_log_admin_give_point]
(
	@nickName varchar(20)
,	@adminAccountIDX int
,	@adminIP varchar(15)
,	@loopCount int
,	@note varchar(100)
,	@resultType int
)
AS
	DECLARE @i int, @accountIDX int
	SET @i = 0

	SELECT @accountIDX=accountIDX FROM userMemberDB WHERE nickName=@nickName

	WHILE (@loopCount > @i or @i > 10)
	BEGIN
		INSERT INTO LosaGame_log.DBO.log_mannerpoint (playType, modeType, sub1Type, sub2Type, reportIDX, reportpubIP, reportpriIP, reportMP, receiveIDX, receivepubIP, receiveMP, receivepoint, roomInfo, chatInfo, note, flag, resultType, regDate)
		VALUES (0, 0, 0, 0, @adminAccountIDX, @adminIP, @adminIP, 100, @accountIDX, '127.0.0.1', 0, -1, '-', '-', @note, 1, @resultType, getdate())
		SET @i = @i + 1
	END
GO


-- ----------------------------
-- procedure structure for game_piece_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_piece_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_piece_self_index]
GO

CREATE PROCEDURE [dbo].[game_piece_self_index]
(
	@accountIDX int
)
AS

SET NOCOUNT ON

SELECT TOP 1 idx
FROM dbo.userPieceDB
WHERE accountIDX=@accountIDX
ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for manage_blockip_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_blockip_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_blockip_list]
GO

CREATE PROCEDURE [dbo].[manage_blockip_list]
AS
	SELECT idx, userID, userIP, endDate, note, regDate FROM define_blockip ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for game_event_bingo_present_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_bingo_present_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_bingo_present_save]
GO

CREATE PROCEDURE [dbo].[game_event_bingo_present_save]
(
	@accountIDX int
,	@item1 tinyint
,	@item2 tinyint
,	@item3 tinyint
,	@item4 tinyint
,	@item5 tinyint
,	@item6 tinyint
,	@item7 tinyint
,	@item8 tinyint
,	@item9 tinyint
,	@item10 tinyint
,	@item11 tinyint
,	@item12 tinyint
,	@item13 tinyint
)
AS

SET NOCOUNT ON

UPDATE dbo.userEventBingo_Present
   SET item1 = @item1, item2 = @item2, item3 = @item3, item4 = @item4, item5 = @item5, item6 = @item6
	, item7 = @item7, item8 = @item8, item9 = @item9, item10 = @item10, item11 = @item11, item12 = @item12, item13 = @item13
WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_login_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_login_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_login_info]
GO

CREATE PROCEDURE [dbo].[web_login_info]
(
	@accountIDX int
)
AS
	SELECT a.userLevel, a.gameMoney, ISNULL(b.amtcash, 0) AS 'cash', ISNULL(c.class, 0) AS 'ranking'
	FROM userGameDB a WITH(NOLOCK) LEFT JOIN userCashDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX LEFT JOIN userRankingDB c WITH(NOLOCK) ON a.accountIDX = c.accountIDX
	WHERE a.accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for manage_member_search
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_member_search]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_member_search]
GO

CREATE PROCEDURE [dbo].[manage_member_search]
(
	@schType varchar(8)
,	@schString varchar(64)
)
AS
	DECLARE @keyword nvarchar(24)
	SET @keyword = @schString + '%'

	IF (@schType = 'nickName')
	BEGIN
		SELECT TOP 100 a.accountIDX, a.userID, a.nickName, a.EMail, a.userType, b.cnnDate, a.regDate, b.visit_count 
		FROM userMemberDB a WITH(NOLOCK) JOIN userInfoDB b WITH(NOLOCK) on a.accountIDX = b.accountIDX 
		WHERE a.nickName LIKE @keyword ORDER BY a.accountIDX DESC
	END
	ELSE IF (@schType = 'email')
	BEGIN
		SELECT TOP 100 a.accountIDX, a.userID, a.nickName, a.EMail, a.userType, b.cnnDate, a.regDate, b.visit_count 
		FROM userMemberDB a WITH(NOLOCK) JOIN userInfoDB b WITH(NOLOCK) on a.accountIDX = b.accountIDX 
		WHERE a.email LIKE @keyword ORDER BY a.accountIDX DESC
	END
	ELSE
	BEGIN
		SELECT TOP 100 a.accountIDX, a.userID, a.nickName, a.EMail, a.userType, b.cnnDate, a.regDate, b.visit_count 
		FROM userMemberDB a WITH(NOLOCK) JOIN userInfoDB b WITH(NOLOCK) on a.accountIDX = b.accountIDX 
		WHERE a.userID LIKE @keyword ORDER BY a.accountIDX DESC
	END
GO


-- ----------------------------
-- procedure structure for web_coupon_use_coupon_and_give_peso
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_coupon_use_coupon_and_give_peso]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_coupon_use_coupon_and_give_peso]
GO

CREATE PROCEDURE [dbo].[web_coupon_use_coupon_and_give_peso]
(
	@accountIDX int
,	@serial varchar(12)
,	@userIP varchar(15)
,	@flag tinyint
)
AS

	BEGIN TRAN

	UPDATE define_serial SET 
		accountIDX = @accountIDX
,		userIP = @userIP
,		regDate = getdate()
	WHERE sn=@serial and couponType=@flag

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate) 
	VALUES (350095, @accountIDX, 4, 10000, 0, 3, 1, getdate() + 28, getdate())

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for manage_main_cafe_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_main_cafe_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_main_cafe_save]
GO

CREATE PROCEDURE [dbo].[manage_main_cafe_save]
(
	@idx int
,	@cafeName varchar(200)
,	@cafeURL varchar(200)
)
AS
	UPDATE define_config SET value1=@cafeName, value2=@cafeURL WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_piece_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_piece_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_piece_save]
GO

CREATE PROCEDURE [dbo].[game_piece_save]
(
	@idx int
,	@piece1_type int
,	@piece1_cnt int
,	@piece2_type int
,	@piece2_cnt int
,	@piece3_type int
,	@piece3_cnt int
,	@piece4_type int
,	@piece4_cnt int
,	@piece5_type int
,	@piece5_cnt int
,	@piece6_type int
,	@piece6_cnt int
,	@piece7_type int
,	@piece7_cnt int
,	@piece8_type int
,	@piece8_cnt int
,	@piece9_type int
,	@piece9_cnt int
,	@piece10_type int
,	@piece10_cnt int
)
AS

SET NOCOUNT ON

UPDATE dbo.userPieceDB
SET piece1_type = @piece1_type
,	piece1_cnt = @piece1_cnt
,	piece2_type = @piece2_type
,	piece2_cnt = @piece2_cnt
,	piece3_type = @piece3_type
,	piece3_cnt = @piece3_cnt
,	piece4_type = @piece4_type
,	piece4_cnt = @piece4_cnt
,	piece5_type = @piece5_type
,	piece5_cnt = @piece5_cnt
,	piece6_type = @piece6_type
,	piece6_cnt = @piece6_cnt
,	piece7_type = @piece7_type
,	piece7_cnt = @piece7_cnt
,	piece8_type = @piece8_type
,	piece8_cnt = @piece8_cnt
,	piece9_type = @piece9_type
,	piece9_cnt = @piece9_cnt
,	piece10_type = @piece10_type
,	piece10_cnt = @piece10_cnt
WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for manage_blockip_get_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_blockip_get_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_blockip_get_info]
GO

CREATE PROCEDURE [dbo].[manage_blockip_get_info]
(
	@idx int
)
As
	SELECT userIP FROM define_blockip WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_event_bingo_present_get
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_bingo_present_get]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_bingo_present_get]
GO

CREATE PROCEDURE [dbo].[game_event_bingo_present_get]
(
	@accountIDX int
)
AS

SET NOCOUNT ON

IF ( EXISTS(SELECT * FROM dbo.userEventBingo_Present WITH( NOLOCK ) WHERE accountIDX = @accountIDX) )
BEGIN
	SELECT item1, item2, item3, item4, item5, item6
		, item7, item8, item9, item10, item11, item12, item13
	  FROM dbo.userEventBingo_Present WITH( NOLOCK )
	 WHERE accountIDX = @accountIDX
END
ELSE
BEGIN
	-- return 0, 0, 0, ... 0
	SELECT 0 AS item1, 0 AS item2, 0 AS item3, 0 AS item4, 0 AS item5, 0 AS item6
		, 0 AS item7, 0 AS item8, 0 AS item9, 0 AS item10, 0 AS item11, 0 AS item12, 0 AS item13
END
GO


-- ----------------------------
-- procedure structure for web_login_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_login_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_login_get_data]
GO

CREATE PROCEDURE [dbo].[web_login_get_data]
(
	@userID varchar(12)
)
AS

SET NOCOUNT ON

SELECT accountIDX, userID, nickName, userPWD, userType
  FROM dbo.userMemberDB WITH(NOLOCK)
 WHERE userID = @userID
GO


-- ----------------------------
-- procedure structure for manage_member_punish_init
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_member_punish_init]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_member_punish_init]
GO

CREATE PROCEDURE [dbo].[manage_member_punish_init]
(
	@accountIDX int
)
AS
	UPDATE userMemberDB SET limitDate=getdate()-1 WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_coupon_use_coupon_and_give_medal
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_coupon_use_coupon_and_give_medal]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_coupon_use_coupon_and_give_medal]
GO

CREATE PROCEDURE [dbo].[web_coupon_use_coupon_and_give_medal]
(
	@accountIDX int
,	@serial varchar(12)
,	@userIP varchar(15)
,	@flag tinyint
,	@medalIDX int
)
AS

	BEGIN TRAN

	UPDATE define_serial SET 
		accountIDX = @accountIDX
,		userIP = @userIP
,		regDate = getdate()
	WHERE sn=@serial and couponType=@flag

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate) 
	values (1105, @accountIDX, 9, 244, 0, 3, 0, getdate()+90, getdate())

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for manage_main_cafe_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_main_cafe_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_main_cafe_list]
GO

CREATE PROCEDURE [dbo].[manage_main_cafe_list]
AS
	SELECT TOP 100 idx, value1, value2 FROM define_config WHERE objName='cafe' ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for game_piece_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_piece_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_piece_get_list]
GO

CREATE PROCEDURE [dbo].[game_piece_get_list]
(
	@accountIDX int
)
AS

SET NOCOUNT ON

SELECT idx,
	   piece1_type, piece1_cnt, piece2_type, piece2_cnt, piece3_type, piece3_cnt, piece4_type, piece4_cnt, piece5_type, piece5_cnt,
	   piece6_type, piece6_cnt, piece7_type, piece7_cnt, piece8_type, piece8_cnt, piece9_type, piece9_cnt, piece10_type, piece10_cnt
FROM dbo.userPieceDB WITH(NOLOCK)
WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for manage_blockip_del
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_blockip_del]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_blockip_del]
GO

CREATE PROCEDURE [dbo].[manage_blockip_del]
(
	@idx int
)
As
	DELETE FROM define_blockip WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_event_bingo_present_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_bingo_present_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_bingo_present_add]
GO

CREATE PROCEDURE [dbo].[game_event_bingo_present_add]
(
	@accountIDX int
,	@item1 tinyint
,	@item2 tinyint
,	@item3 tinyint
,	@item4 tinyint
,	@item5 tinyint
,	@item6 tinyint
,	@item7 tinyint
,	@item8 tinyint
,	@item9 tinyint
,	@item10 tinyint
,	@item11 tinyint
,	@item12 tinyint
,	@item13 tinyint
)
AS

SET NOCOUNT ON

IF( EXISTS( SELECT * FROM dbo.userEventBingo_Present WITH( NOLOCK ) WHERE accountIDX = @accountIDX ) )
BEGIN
	RETURN
END
ELSE
BEGIN
	INSERT
	  INTO dbo.userEventBingo_Present( accountidx, item1, item2, item3, item4, item5, item6
											, item7, item8, item9, item10, item11, item12, item13, regDate )
	VALUES ( @accountIDX, @item1, @item2, @item3, @item4, @item5, @item6
						, @item7, @item8, @item9, @item10, @item11, @item12, @item13, GETDATE() )
END
GO


-- ----------------------------
-- procedure structure for web_login_get_battle_level
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_login_get_battle_level]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_login_get_battle_level]
GO

CREATE PROCEDURE [dbo].[web_login_get_battle_level]
(
	@accountIDX int
)
As
	SELECT	
			type1_win AS 'battle_win'
,			type1_lose AS 'battle_lose'
,			type1_kill AS 'battle_kill'
,			type1_death AS 'battle_death'
	FROM userRecordBattleDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for manage_member_punish
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_member_punish]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_member_punish]
GO

CREATE PROCEDURE [dbo].[manage_member_punish]
(
	@accountIDX int
,	@receiveNick varchar(20)
,	@limitType tinyint
,	@limitDate datetime
,	@reportIDX int
,	@reportNick varchar(20)
,	@reportIP varchar(15)
,	@reason varchar(1000)
,	@note varchar(1000)
)
AS

	UPDATE userMemberDB SET limitType=@limitType, limitDate=@limitDate WHERE accountIDX=@accountIDX

	INSERT INTO LosaGame_log.DBO.log_mannerpoint (playType, modeType, sub1Type, sub2Type, reportIDX, reportNick, reportpubIP, reportpriIP, receiveIDX, receiveNick, receivepubIP, roomInfo, chatinfo, note, reason, flag, resultType, regDate)
	VALUES (0, 0, 0, 0, @reportIDX, @reportNick, @reportIP, @reportIP, @accountIDX, @receiveNick, '', '', '', @note, @reason, 0, 1, getdate())
GO


-- ----------------------------
-- procedure structure for web_event_chuchun_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_chuchun_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_chuchun_list]
GO

CREATE PROCEDURE [dbo].[web_event_chuchun_list]
	-- Add the parameters for the stored procedure here
	@accountIDX		int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    -- Insert statements for procedure here
	Select 
		C.*, M.userID, nickName 
	From (
		Select * 
		From event_chuchun with (noLock)
		Where friendIDX = @accountIDX
	)As C
	Inner Join dbo.userMemberDB As M with (noLock)
	ON C.accountIDX = M.accountIDX
	Order By idx

END
GO


-- ----------------------------
-- procedure structure for manage_main_cafe_insert
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_main_cafe_insert]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_main_cafe_insert]
GO

CREATE PROCEDURE [dbo].[manage_main_cafe_insert]
(
	@cafeName varchar(200)
,	@cafeURL varchar(200)
)
AS
	INSERT INTO define_config (objName, value1, value2, regDate)
	VALUES ('cafe', @cafeName, @cafeURL, getdate())
GO


-- ----------------------------
-- procedure structure for web_event_get_prizer
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_get_prizer]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_get_prizer]
GO

CREATE PROCEDURE [dbo].[web_event_get_prizer]
(
	@idx int
)
AS
	SELECT prizer FROM userEventDB_prize WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_piece_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_piece_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_piece_add]
GO

CREATE PROCEDURE [dbo].[game_piece_add]
(
	@accountIDX int
,	@piece1_type int
,	@piece1_cnt int
,	@piece2_type int
,	@piece2_cnt int
,	@piece3_type int
,	@piece3_cnt int
,	@piece4_type int
,	@piece4_cnt int
,	@piece5_type int
,	@piece5_cnt int
,	@piece6_type int
,	@piece6_cnt int
,	@piece7_type int
,	@piece7_cnt int
,	@piece8_type int
,	@piece8_cnt int
,	@piece9_type int
,	@piece9_cnt int
,	@piece10_type int
,	@piece10_cnt int
)
AS

SET NOCOUNT ON

INSERT INTO dbo.userPieceDB (
	accountIDX,
	piece1_type, piece1_value1, piece1_value2, piece1_cnt, piece2_type, piece2_value1, piece2_value2, piece2_cnt,
	piece3_type, piece3_value1, piece3_value2, piece3_cnt, piece4_type, piece4_value1, piece4_value2, piece4_cnt,
	piece5_type, piece5_value1, piece5_value2, piece5_cnt, piece6_type, piece6_value1, piece6_value2, piece6_cnt,
	piece7_type, piece7_value1, piece7_value2, piece7_cnt, piece8_type, piece8_value1, piece8_value2, piece8_cnt,
	piece9_type, piece9_value1, piece9_value2, piece9_cnt, piece10_type, piece10_value1, piece10_value2, piece10_cnt,
	regDate
)
VALUES (
	@accountIDX,
	@piece1_type, 0, 0, @piece1_cnt, @piece2_type, 0, 0, @piece2_cnt,
	@piece3_type, 0, 0, @piece3_cnt, @piece4_type, 0, 0, @piece4_cnt,
	@piece5_type, 0, 0, @piece5_cnt, @piece6_type, 0, 0, @piece6_cnt,
	@piece7_type, 0, 0, @piece7_cnt, @piece8_type, 0, 0, @piece8_cnt,
	@piece9_type, 0, 0, @piece9_cnt, @piece10_type, 0, 0, @piece10_cnt,
	GETDATE()
)
GO


-- ----------------------------
-- procedure structure for manage_blockip_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_blockip_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_blockip_count]
GO

CREATE PROCEDURE [dbo].[manage_blockip_count]
(
	@blockIP varchar(16)
)
AS
	SELECT count(*) FROM define_blockip WHERE userIP=@blockIP and endDate < getdate()
GO


-- ----------------------------
-- procedure structure for game_event_bingo_number_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_bingo_number_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_bingo_number_save]
GO

CREATE PROCEDURE [dbo].[game_event_bingo_number_save]
(
	@accountIDX int
,	@num1 tinyint
,	@num2 tinyint
,	@num3 tinyint
,	@num4 tinyint
,	@num5 tinyint
,	@num6 tinyint
,	@num7 tinyint
,	@num8 tinyint
,	@num9 tinyint
,	@num10 tinyint
,	@num11 tinyint
,	@num12 tinyint
,	@num13 tinyint
,	@num14 tinyint
,	@num15 tinyint
,	@num16 tinyint
,	@num17 tinyint
,	@num18 tinyint
,	@num19 tinyint
,	@num20 tinyint
,	@num21 tinyint
,	@num22 tinyint
,	@num23 tinyint
,	@num24 tinyint
,	@num25 tinyint
)
AS

SET NOCOUNT ON

UPDATE dbo.userEventBingo_Number
   SET number1 = @num1, number2 = @num2, number3 = @num3, number4 = @num4, number5 = @num5
	, number6 = @num6, number7 = @num7, number8 = @num8, number9 = @num9, number10 = @num10
	, number11 = @num11, number12 = @num12, number13 = @num13, number14 = @num14, number15 = @num15
	, number16 = @num16, number17 = @num17, number18 = @num18, number19 = @num19, number20 = @num20
	, number21 = @num21, number22 = @num22, number23 = @num23, number24 = @num24, number25 = @num25
WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_login_bonus_point
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_login_bonus_point]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_login_bonus_point]
GO

CREATE PROCEDURE [dbo].[web_login_bonus_point]
(
	@accountIDX varchar(12)
,	@bonusCash int
,	@userIP varchar(16)
)
AS

	UPDATE userCashDB SET
		amtCash = amtCash + @bonusCash
,		amtBonus = amtBonus + @bonusCash
,		chgDate = getdate()
	WHERE accountIDX = @accountIDX

	INSERT INTO LosaGame_log.DBO.log_cash (accountIDX, userIP, DBID, applyType, amount, note, regDate)
	VALUES (@accountIDX, @userIP, 'WEBLOGIN', 'B0', @bonusCash, '로그인 보너스', getdate())
GO


-- ----------------------------
-- procedure structure for manage_member_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_member_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_member_count]
GO

CREATE PROCEDURE [dbo].[manage_member_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM userMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_chuchun_dormancy
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_chuchun_dormancy]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_chuchun_dormancy]
GO

CREATE PROCEDURE [dbo].[web_event_chuchun_dormancy]
	-- Add the parameters for the stored procedure here
	@intAccountIDX		int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    -- Insert statements for procedure here
	IF Exists(Select * From dbo.event_chuchun_conndate with(noLock)
				Where accountIDX = @intAccountIDX
	)
		Begin
			return 21		-- 휴면회원
		End
	Else
		Begin
			return 20		-- 비 휴면회원
		End

END
GO


-- ----------------------------
-- procedure structure for manage_main_cafe_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_main_cafe_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_main_cafe_info]
GO

CREATE PROCEDURE [dbo].[manage_main_cafe_info]
(
	@idx int
)
AS
	SELECT value1, value2 FROM define_config WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_event_address_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_address_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_address_save]
GO

CREATE PROCEDURE [dbo].[web_event_address_save]
(
	@accountIDX int
,	@address varchar(200)
,	@phone varchar(16)
,	@hphone varchar(16)
,	@userIP varchar(15)
)
AS
	UPDATE userEventDB_address SET
		accountIDX = @accountIDX
,		address = @address
,		phone = @phone
,		hphone = @hphone
	WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_member_get_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_member_get_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_member_get_count]
GO

CREATE PROCEDURE [dbo].[game_member_get_count]
(
	@nickname varchar(20)
)
AS
	SELECT count(*) FROM userMemberDB WITH(NOLOCK) WHERE nickname=@nickname
GO


-- ----------------------------
-- procedure structure for manage_coupon_get_accountIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_coupon_get_accountIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_coupon_get_accountIDX]
GO

CREATE PROCEDURE [dbo].[manage_coupon_get_accountIDX]
(
	@searchtype varchar(8)
,	@searchstring varchar(20)
)
AS
	DECLARE @sql varchar(200)

	SET @sql = 'SELECT accountIDX FROM userMemberDB WHERE ' + @searchtype + '=''' + @searchstring + ''''
	EXECUTE(@sql)
GO


-- ----------------------------
-- procedure structure for manage_blockip_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_blockip_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_blockip_add]
GO

CREATE PROCEDURE [dbo].[manage_blockip_add]
(
	@adminID varchar(12)
,	@blockIP varchar(16)
,	@endDate datetime
,	@note nvarchar(1000)
)
As
	INSERT INTO define_blockip (userID, userIP, endDate, note, regDate) VALUES (@adminID, @blockIP, @endDate, @note, getdate())
GO


-- ----------------------------
-- procedure structure for game_event_bingo_number_get
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_bingo_number_get]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_bingo_number_get]
GO

CREATE PROCEDURE [dbo].[game_event_bingo_number_get]
(
	@accountIDX int
)
AS

SET NOCOUNT ON

IF ( EXISTS(SELECT * FROM dbo.userEventBingo_Number WITH( NOLOCK ) WHERE accountIDX = @accountIDX) )
BEGIN
	SELECT number1, number2, number3, number4, number5
		, number6, number7, number8, number9, number10
		, number11, number12, number13, number14, number15
		, number16, number17, number18, number19, number20
		, number21, number22, number23, number24, number25
	  FROM dbo.userEventBingo_Number WITH( NOLOCK )
	 WHERE accountIDX = @accountIDX
END
ELSE
BEGIN
	-- return 0, 0, 0, ... 0
	SELECT 0 AS number1, 0 AS number2, 0 AS number3, 0 AS number4, 0 AS number5
		, 0 AS number6, 0 AS number7, 0 AS number8, 0 AS number9, 0 AS number10
		, 0 AS number11, 0 AS number12, 0 AS number13, 0 AS number14, 0 AS number15
		, 0 AS number16, 0 AS number17, 0 AS number18, 0 AS number19, 0 AS number20
		, 0 AS number21, 0 AS number22, 0 AS number23, 0 AS number24, 0 AS number25
END
GO


-- ----------------------------
-- procedure structure for web_login_block_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_login_block_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_login_block_count]
GO

CREATE PROCEDURE [dbo].[web_login_block_count]
(
	@userIP varchar(15)
)
AS
	SELECT count(*) FROM define_blockIP WITH(NOLOCK) WHERE userIP=@userIP and endDate > getdate()
GO


-- ----------------------------
-- procedure structure for manage_singo_log_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_singo_log_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_singo_log_count]
GO

CREATE PROCEDURE [dbo].[manage_singo_log_count]

AS
	SELECT count(*) FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK)
GO


-- ----------------------------
-- procedure structure for web_event_chuchun
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_chuchun]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_chuchun]
GO

CREATE PROCEDURE [dbo].[web_event_chuchun]
(
	@accountIDX int
,	@friendNick nvarchar(20)
,	@userIP varchar(15)
,	@cpID nvarchar(32)
,	@cpType int
)
AS

BEGIN

	SET NOCOUNT ON

	DECLARE @friendIDX int
	DECLARE @friendJoinType int
	DECLARE @userJoinType int
	DECLARE @userRegDate datetime
	DECLARE @setESDate datetime
	DECLARE @userType tinyint
	DECLARE @TMaxNum int
	DECLARE @FMaxNum int
	DECLARE @NTMaxNum int
	DECLARE @NFMaxNum int

	SET @setESDate = '2013-01-15'
	SET @userType = 0
	SET @TMaxNum = 50000
	SET @FMaxNum = 20

	-- 친구 인덱스, 회원타입
	SELECT @friendIDX = accountIDX,
		   @friendJoinType = joinType
	  FROM dbo.userMemberDB WITH(NOLOCK)
	 WHERE nickName=@friendNick
	--   AND cpType=0

	IF (@@ROWCOUNT = 0)
	BEGIN
		RETURN (-1)
	END

	IF (@friendJoinType <> 10)
	BEGIN
		RETURN (-2)
	END

	-- 유저 회원타입, 가입일
	SELECT @userJoinType = joinType,
		   @userRegDate = regDate
	  FROM dbo.userMemberDB WITH(NOLOCK)
	 WHERE accountIDX=@accountIDX

	IF (@@ROWCOUNT = 0)
	BEGIN
		RETURN (-3)
	END

	IF (@userJoinType <> 10)
	BEGIN
		RETURN (-4)
	END

	IF (DATEDIFF(d, @userRegDate, @setESDate) <= 0)
	BEGIN
		SET @userType = 2
	END

	IF (EXISTS(
		SELECT *
		  FROM dbo.event_chuchun_conndate WITH(NOLOCK)
		 WHERE accountIDX=@accountIDX)
	)
	BEGIN
		SET @userType = 1
	END

	IF (@userType = 0)
	BEGIN
		RETURN (-5)
	END

	IF (EXISTS(
/*
		SELECT *
		  FROM dbo.event_chuchun WITH(NOLOCK)
		 WHERE accountIDX=@accountIDX)
*/
		SELECT *
		  FROM dbo.event_chuchun WITH(NOLOCK)
		 WHERE cpID=@cpID)
	)
	BEGIN
		RETURN (-6)
	END


	INSERT INTO event_chuchun (accountIDX, friendIDX, flag, userIP, userType, itemFlag, cpID, cpType, regDate)
	VALUES (@accountIDX, @friendIDX, 0, @userIP, @userType, 0, @cpID, @cpType, GETDATE())

	IF (@@ROWCOUNT <> 1 OR @@ERROR <> 0)
	BEGIN
		RETURN (-9)
	END

	RETURN (1)

END
GO


-- ----------------------------
-- procedure structure for manage_main_cafe_del
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_main_cafe_del]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_main_cafe_del]
GO

CREATE PROCEDURE [dbo].[manage_main_cafe_del]
(
	@idx int
)
AS
	DELETE FROM define_config WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_event_address_get_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_address_get_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_address_get_count]
GO

CREATE PROCEDURE [dbo].[web_event_address_get_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM userEventDB_address WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_member_change_userNickname
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_member_change_userNickname]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_member_change_userNickname]
GO

CREATE PROCEDURE [dbo].[game_member_change_userNickname]
(
	@accountIDX int
,	@nickname varchar(20)
,	@chageNickname varchar(20)
,	@itemType int
,	@itemCode int
,	@itemRowIDX varchar(12)
,	@itemColIDX varchar(12)
,	@userIP varchar(15)
)
AS

	DECLARE @cnt1 int, @cnt2 int, @cnt3 int, @cnt4 int
	DECLARE @sql varchar(500), @note varchar(100)

	SET @cnt1 = (SELECT count(*) FROM userMemberDB WHERE userID=@chageNickname)
	SET @cnt2 = (SELECT count(*) FROM userMemberDB WHERE nickName=@chageNickname)
--	SET @cnt3 = (SELECT count(*) FROM manage_memberDB WHERE userID=@chageNickname)
	SET @cnt4 = @cnt1 + @cnt2 + @cnt3

	If (@cnt4 = 0)
	BEGIN

		SET @note = @nickname + ' -> ' + @chageNickname

		BEGIN TRAN

		UPDATE userMemberDB SET nickName=@chageNickname WHERE accountIDX=@accountIDX
		SET @sql = 'UPDATE userItemEtcDB SET item' + @itemColIDX + '_type=0, item' + @itemColIDX + '_value1=0, item' + @itemColIDX + '_value2=0 WHERE idx=' + @itemRowIDX
		EXECUTE (@sql)

		COMMIT TRAN

		INSERT INTO Log_Data.DBO.Log_use_item (accountIDX, nickname, itemType, itemCode, rowIDX, colIDX, userIP, note, regDate)
		VALUES (@accountIDX, @nickname, @itemType, @itemCode, @itemRowIDX, @itemColIDX, @userIP, @note, getDate())
	END
GO


-- ----------------------------
-- procedure structure for web_friend_get_friendcount
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_get_friendcount]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_get_friendcount]
GO

CREATE PROCEDURE [dbo].[web_friend_get_friendcount]
(
	@accountIDX varchar(150)
)
AS
	DECLARE @sql varchar(500)
	SET @sql = 'SELECT userAccIDX, count(*) AS ''cnt'' FROM userFriendDB WITH(NOLOCK) WHERE userAccIDX in (' + @accountIDX + ') GROUP BY userAccIDX'
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for manage_block_ip_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_block_ip_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_block_ip_get_list]
GO

CREATE PROCEDURE [dbo].[manage_block_ip_get_list]
As
	SELECT idx, content, note, regDate FROM define_site_config WHERE objName = 'blockIP' ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for game_event_bingo_number_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_bingo_number_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_bingo_number_add]
GO

CREATE PROCEDURE [dbo].[game_event_bingo_number_add]
(
	@accountIDX int
,	@num1 tinyint
,	@num2 tinyint
,	@num3 tinyint
,	@num4 tinyint
,	@num5 tinyint
,	@num6 tinyint
,	@num7 tinyint
,	@num8 tinyint
,	@num9 tinyint
,	@num10 tinyint
,	@num11 tinyint
,	@num12 tinyint
,	@num13 tinyint
,	@num14 tinyint
,	@num15 tinyint
,	@num16 tinyint
,	@num17 tinyint
,	@num18 tinyint
,	@num19 tinyint
,	@num20 tinyint
,	@num21 tinyint
,	@num22 tinyint
,	@num23 tinyint
,	@num24 tinyint
,	@num25 tinyint
)
AS

SET NOCOUNT ON

IF( EXISTS( SELECT * FROM dbo.userEventBingo_Number WITH( NOLOCK ) WHERE accountIDX = @accountIDX ) )
BEGIN
	RETURN
END
ELSE
BEGIN
	INSERT
	  INTO dbo.userEventBingo_Number( accountidx, number1, number2, number3, number4, number5
												, number6, number7, number8, number9, number10
												, number11, number12, number13, number14, number15
												, number16, number17, number18, number19, number20
												, number21, number22, number23, number24, number25, regDate )
	VALUES ( @accountIDX, @num1, @num2, @num3, @num4, @num5
						, @num6, @num7, @num8, @num9, @num10
						, @num11, @num12, @num13, @num14, @num15
						, @num16, @num17, @num18, @num19, @num20
						, @num21, @num22, @num23, @num24, @num25, GETDATE() )
END
GO


-- ----------------------------
-- procedure structure for web_login_block_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_login_block_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_login_block_add]
GO

CREATE PROCEDURE [dbo].[web_login_block_add]
(
	@userIP varchar(15)
)
AS
	INSERT INTO define_blockIP (userIP, note, endDate, regDate) VALUES (@userIP, '비밀번호 500회 이상 틀림', getdate()+30, getdate())
GO


-- ----------------------------
-- procedure structure for manage_singo_log_complete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_singo_log_complete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_singo_log_complete]
GO

CREATE PROCEDURE [dbo].[manage_singo_log_complete]
(
	@idx int
)
AS
	UPDATE LosaGame_log.DBO.log_mannerpoint SET resultType=1 WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_event_banner_click_bonus_peso
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_banner_click_bonus_peso]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_banner_click_bonus_peso]
GO

CREATE PROCEDURE [dbo].[web_event_banner_click_bonus_peso]
(
	@accountIDX varchar(12)
,	@bonusCash int
,	@userIP varchar(16)
)
AS
	UPDATE userInfoDB SET clickDate = getdate() WHERE accountIDX=@accountIDX

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, 4, @bonusCash, 0, 4, 1, getdate() + 28, getdate())

	INSERT INTO LosaGame_log.DBO.log_cash (accountIDX, userIP, [DBID], applyType, amount, note, regDate)
	VALUES (@accountIDX, @userIP, 'BNNCLICK', 'B0', @bonusCash, '배너 클릭 보너스 페소', getdate())
GO


-- ----------------------------
-- procedure structure for manage_issue_singo_remain_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_issue_singo_remain_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_issue_singo_remain_count]
GO

CREATE PROCEDURE [dbo].[manage_issue_singo_remain_count]
AS
	SELECT count(*) FROM losagame_log.dbo.log_mannerpoint WHERE resultType=0
GO


-- ----------------------------
-- procedure structure for web_event_address_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_address_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_address_add]
GO

CREATE PROCEDURE [dbo].[web_event_address_add]
(
	@accountIDX int
,	@address varchar(200)
,	@phone varchar(16)
,	@hphone varchar(16)
,	@userIP varchar(15)
)
AS
	INSERT INTO userEventDB_address (accountIDX, address, phone, hphone, userIP, regDate)
	VALUES (@accountIDX, @address, @phone, @hphone, @userIP, getdate())
GO


-- ----------------------------
-- procedure structure for game_medal_get_top1
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_medal_get_top1]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_medal_get_top1]
GO

CREATE PROCEDURE [dbo].[game_medal_get_top1]
(
	@accountIDX int
)
AS
	SELECT TOP 1 medal1_type, medal2_type, medal3_type, medal4_type, medal5_type, medal6_type, medal7_type, medal8_type, medal9_type, medal10_type 
	FROM userMedalDB WITH(NOLOCK) WHERE accountIDX=@accountIDX ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_friend_list_dev
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_list_dev]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_list_dev]
GO

CREATE PROCEDURE [dbo].[web_friend_list_dev]
(
	@accountIDX int
,	@pagesize int
,	@notpage int
)
AS
	DECLARE @sql nvarchar(1500)
	DECLARE @ParmDefinition nvarchar(500)

	SET @sql = N'SELECT TOP (@pagesize_in) b.userLevel, d.accountIDX, d.nickName, b.connDate, c.gameServerID, ISNULL(e.class, 0) as ''userRanking'' '
	SET @sql = @sql + 'FROM userFriendDB a WITH(NOLOCK) INNER JOIN userGameDB b WITH(NOLOCK) ON a.friendAccIDX = b.accountIDX INNER JOIN userLoginDB c WITH(NOLOCK) ON a.friendAccIDX = c.accountIDX INNER JOIN userMemberDB d WITH(NOLOCK) ON a.friendAccIDX = d.accountIDX LEFT JOIN userRankingDB e WITH(NOLOCK) ON a.friendAccIDX = e.accountIDX '
	SET @sql = @sql + 'WHERE a.userAccIDX=@accountIDX_in  and a.flag=1 and a.idx not in (SELECT TOP (@notpage_in) a.idx FROM userFriendDB a WITH(NOLOCK) INNER JOIN userGameDB b WITH(NOLOCK) ON a.friendAccIDX = b.accountIDX INNER JOIN userLoginDB c WITH(NOLOCK) ON a.friendAccIDX = c.accountIDX INNER JOIN userMemberDB d WITH(NOLOCK) ON a.friendAccIDX = d.accountIDX LEFT JOIN userRankingDB e WITH(NOLOCK) ON a.friendAccIDX = e.accountIDX WHERE a.userAccIDX=@accountIDX_in and a.flag=1 ORDER BY b.userLevel DESC) '
	SET @sql = @sql + 'ORDER BY b.userLevel DESC'

	SET @ParmDefinition = N'@pagesize_in int, @accountIDX_in int, @notpage_in int'

	EXECUTE sp_executesql @sql, @ParmDefinition, @pagesize_in=@pagesize, @accountIDX_in=@accountIDX, @notpage_in=@notpage
GO


-- ----------------------------
-- procedure structure for manage_block_ip_get_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_block_ip_get_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_block_ip_get_info]
GO

CREATE PROCEDURE [dbo].[manage_block_ip_get_info]
(
	@idx int
)
As
	SELECT content FROM define_site_config WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_event_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_add]
GO

CREATE PROCEDURE [dbo].[game_event_add]
(
	@accountIDX int
,	@value1 int
,	@value2 int
,	@eventType int
)
AS
	INSERT INTO userEventDB (accountIDX, value1, value2, eventType, regDate)
	VALUES (@accountIDX, @value1, @value2, @eventType, getdate())
GO


-- ----------------------------
-- procedure structure for web_join_edit_saveB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_join_edit_saveB]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_join_edit_saveB]
GO

CREATE PROCEDURE [dbo].[web_join_edit_saveB]
(
	@accountIDX int
,	@tel varchar(16)
,	@mobile varchar(16)
,	@zipcode varchar(8)
,	@address1 varchar(150)
,	@address2 varchar(50)
,	@returnVal int output
)
As

	UPDATE userInfoBDB SET 
		tel = @tel
,		mobile = @mobile
,		zipcode = @zipcode
,		address1 = @address1
,		address2 = @address2
	WHERE accountIDX = @accountIDX

	SET @returnVal = @@error
GO


-- ----------------------------
-- procedure structure for manage_singo_limit_process_new
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_singo_limit_process_new]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_singo_limit_process_new]
GO

CREATE PROCEDURE [dbo].[manage_singo_limit_process_new]
(
	@accountIDX int
,	@limitType tinyint
,	@limitDate datetime
)
AS

	UPDATE userMemberDB SET limitType=@limitType, limitDate=@limitDate WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_app_add_log
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_app_add_log]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_app_add_log]
GO

CREATE PROCEDURE [dbo].[web_event_app_add_log]
(
	@accountIDX int
,	@giftType tinyint
,	@resultType tinyint
,	@userIP varchar(15)
)
AS

	BEGIN TRAN

	INSERT INTO LosaGame_log.DBO.log_event_openbeta (accountIDX, giftType, resultType, userIP, regDate)
	VALUES (@accountIDX, @giftType, @resultType, @userIP, getdate())

	IF (@giftType < 7)
	BEGIN
		UPDATE userEventDB_prize SET prizer = prizer + 1 WHERE idx=@giftType
	END
	ELSE
	BEGIN
		If (@resultType = 1)
			UPDATE userEventDB_prize SET prizer = prizer + 1 WHERE idx=@giftType
	END

	UPDATE userEventDB SET value1 = value1 - 10 WHERE accountIDX=@accountIDX

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for manage_issue_blockip
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_issue_blockip]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_issue_blockip]
GO

CREATE PROCEDURE [dbo].[manage_issue_blockip]

AS

SET NOCOUNT ON

SELECT TOP 5 userIP, regDate
  FROM dbo.define_blockip
 ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for game_medal_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_medal_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_medal_get_list]
GO

CREATE PROCEDURE [dbo].[game_medal_get_list]
(
	@accountIDX int
)
As
	SELECT idx, medal1_type, medal2_type, medal3_type, medal4_type, medal5_type, medal6_type, medal7_type, medal8_type, medal9_type, medal10_type
	FROM userMedalDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_friend_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_list]
GO

CREATE PROCEDURE [dbo].[web_friend_list]
(
	@accountIDX int
,	@pagesize int
,	@notpage int
)
AS
	SET NOCOUNT ON

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	DECLARE @sql nvarchar(2500)
	DECLARE @ParmDefinition nvarchar(500)

	SET @sql = N'SELECT TOP (@pagesize_in) b.userLevel, c.accountIDX, c.nickName, b.connDate '
	SET @sql = @sql + 'FROM userFriendDB a WITH(NOLOCK) INNER JOIN userGameDB b WITH(NOLOCK) ON a.friendAccIDX = b.accountIDX INNER JOIN userMemberDB c WITH(NOLOCK) ON a.friendAccIDX = c.accountIDX '
	SET @sql = @sql + 'WHERE a.userAccIDX=@accountIDX_in and a.flag=1 and friendAccIDX not in ('
	SET @sql = @sql + '209274,322139,209270,209272,209273,1105,1106,209271,380032,1107,209264,209268,1108,209267,209276,281811,209269,2304,485241,380044,591852,711450,505421,380045,382884,380042,380043,361290,1414836,1871572,1871573,1871574,1896968'
	SET @sql = @sql + ') and a.idx not in (SELECT TOP (@notpage_in) a.idx FROM userFriendDB a WITH(NOLOCK) INNER JOIN userGameDB b WITH(NOLOCK) ON a.friendAccIDX = b.accountIDX INNER JOIN userMemberDB c WITH(NOLOCK) ON a.friendAccIDX = c.accountIDX WHERE a.userAccIDX=(@accountIDX_in) and a.flag=1 and friendAccIDX not in ('
	SET @sql = @sql + '209274,322139,209270,209272,209273,1105,1106,209271,380032,1107,209264,209268,1108,209267,209276,281811,209269,2304,485241,380044,591852,711450,505421,380045,382884,380042,380043,361290,1414836,1871572,1871573,1871574,1896968'
	SET @sql = @sql + ') ORDER BY b.userLevel DESC) ORDER BY b.userLevel DESC'

	SET @ParmDefinition = N'@pagesize_in int, @accountIDX_in int, @notpage_in int'

	EXECUTE sp_executesql @sql, @ParmDefinition, @accountIDX_in=@accountIDX, @pagesize_in=@pagesize, @notpage_in=@notpage
GO


-- ----------------------------
-- procedure structure for manage_block_ip_del
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_block_ip_del]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_block_ip_del]
GO

CREATE PROCEDURE [dbo].[manage_block_ip_del]
(
	@idx int
)
As
	DELETE FROM define_site_config WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_encode_get_fix_key
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_encode_get_fix_key]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_encode_get_fix_key]
GO

CREATE PROCEDURE [dbo].[game_encode_get_fix_key]
As
	SELECT encodeKey FROM define_encode_key WITH(NOLOCK) WHERE idx = (SELECT MAX(idx) FROM define_encode_key WITH(NOLOCK))
GO


-- ----------------------------
-- procedure structure for web_join_edit_save_channeling
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_join_edit_save_channeling]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_join_edit_save_channeling]
GO

CREATE PROCEDURE [dbo].[web_join_edit_save_channeling]
(
	@accountIDX int
,	@EMail varchar(50)
,	@mailling int
,	@returnVal int output
)
As

	UPDATE userMemberDB SET 
		EMail = @EMail
,		mailling = @mailling
	WHERE accountIDX = @accountIDX

	SET @returnVal = @@error
GO


-- ----------------------------
-- procedure structure for manage_singo_limit_process
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_singo_limit_process]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_singo_limit_process]
GO

CREATE PROCEDURE [dbo].[manage_singo_limit_process]
(
	@accountIDX int
,	@limitType tinyint
,	@limitDate datetime
,	@tblIDX int
,	@reason varchar(100)
)
AS

	UPDATE userMemberDB SET limitType=@limitType, limitDate=@limitDate WHERE accountIDX=@accountIDX
	UPDATE LosaGame_log.DBO.log_mannerpoint SET resultType=1, reason=@reason WHERE idx=@tblIDX
GO


-- ----------------------------
-- procedure structure for web_coupon_give_coupon
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_coupon_give_coupon]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_coupon_give_coupon]
GO

CREATE PROCEDURE [dbo].[web_coupon_give_coupon]
(
	@accountIDX int
,	@serial varchar(12)
,	@userIP varchar(15)
,	@flag tinyint
)
AS

	BEGIN TRAN

	UPDATE define_serial SET 
		accountIDX = @accountIDX
,		userIP = @userIP
,		regDate = getdate()
	WHERE sn=@serial and couponType=@flag

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate) 
	VALUES (350095, @accountIDX, 4, 10000, 0, 3, 1, getdate() + 28, getdate())

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for manage_get_userLevel
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_get_userLevel]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_get_userLevel]
GO

CREATE PROCEDURE [dbo].[manage_get_userLevel]
(
	@accountIDX int
)
As
	SELECT userLevel FROM userGameDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_teencash_user_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_teencash_user_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_teencash_user_count]
GO

CREATE PROCEDURE [dbo].[web_event_teencash_user_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM event_teencash WHERE accountIDX=@accountIDX and flag=2
GO


-- ----------------------------
-- procedure structure for game_medal_get_level
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_medal_get_level]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_medal_get_level]
GO

CREATE PROCEDURE [dbo].[game_medal_get_level]
(
	@accountIDX int
)
AS
	SELECT medalLevel, expert FROM userRankingDB_medal WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_mannerpoint_dec_topn
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_mannerpoint_dec_topn]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_mannerpoint_dec_topn]
GO

CREATE PROCEDURE [dbo].[web_mannerpoint_dec_topn]
(
	@accountIDX int
)
AS
--	SELECT ISNULL(SUM(CASE WHEN point < 0 THEN -point ELSE 0 END), 0) FROM (SELECT TOP 25 point FROM userMannerpointDB WHERE accountIDX=@accountIDX and resultType=1 ORDER BY regDate DESC) a
	SELECT 0
GO


-- ----------------------------
-- procedure structure for manage_block_ip_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_block_ip_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_block_ip_count]
GO

CREATE PROCEDURE [dbo].[manage_block_ip_count]
(
	@regIP varchar(16)
)
As
	SELECT count(*) FROM define_site_config WHERE objName='blockIP' and content=@regIP
GO


-- ----------------------------
-- procedure structure for game_dice_game_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_dice_game_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_dice_game_get_data]
GO

CREATE PROCEDURE [dbo].[game_dice_game_get_data]          
          
 @ACCOUNT_IDX INT          
           
AS            
          
 SET NOCOUNT ON;          
 SET LOCK_TIMEOUT 10000;          
           
 SELECT [Position],[Trace01],[Trace02],[Trace03],[Trace04],[Trace05],[Trace06],[Board],
 	[RewardStep01],[RewardStep02],[RewardStep03],[RewardStep04],[RewardStep05],
 	[RewardStep06],[RewardStep07],[RewardStep08],[RewardStep09],[RewardStep10]
 FROM [dbo].[userDiceGameDB] WITH (NOLOCK)          
 WHERE [AccountIDX] = @ACCOUNT_IDX
GO


-- ----------------------------
-- procedure structure for web_join_edit_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_join_edit_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_join_edit_save]
GO

CREATE PROCEDURE [dbo].[web_join_edit_save]
(
	@accountIDX int
,	@userPWD varchar(24)
,	@EMail varchar(50)
,	@mailling int
,	@returnVal int output
)
As

	UPDATE userMemberDB SET 
		userPWD = @userPWD
,		EMail = @EMail
,		mailling = @mailling
	WHERE accountIDX = @accountIDX

	SET @returnVal = @@error
GO


-- ----------------------------
-- procedure structure for game_trade_get_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_trade_get_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_trade_get_self_index]
GO

CREATE PROCEDURE [dbo].[game_trade_get_self_index]
(
	@accountIDX int
)
AS
	SELECT Max(idx) FROM userTradeDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_city_champion_memchk
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_city_champion_memchk]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_city_champion_memchk]
GO

CREATE PROCEDURE [dbo].[web_event_city_champion_memchk]
	-- Add the parameters for the stored procedure here
	@aType				char(1),
	@strLoginID			varchar(20),
	@strNickName		nvarchar(20),
	@intCpCode			int,
	@rtnVal				int		Output
AS
/*
	@aType : I = 팀장아이디, N : 아이디 + 닉네임
*/
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    -- Insert statements for procedure here
	Declare @cpUserId	varchar(20)

	set @rtnVal = 0

	-- 팀장 입력일 경우, @strNickName 값이 아이디가 된다.
	IF @aType = 'I'
		Begin
			-- 채널링 회원일 경우 userCooperationDB 에서 회원(로사) 아이디 정보를 가져온다.
			IF @intCpCode > 0
				Begin
					Select Top 1 @cpUserId = userID From dbo.userCooperationDB with (noLock)
					Where cpID = @strNickName

					Set @strNickName = @cpUserId
				End


			Select Top 1 @rtnVal = accountIDX 
			From dbo.userMemberDB with (noLock)
			Where 
				userID = @strNickName And cpType = @intCpCode
		End
	Else
		Begin
			-- 채널링 회원일 경우 userCooperationDB 에서 회원(로사) 아이디 정보를 가져온다.
			IF @intCpCode > 0
				Begin
					Select Top 1 @cpUserId = userID From dbo.userCooperationDB with (noLock)
					Where cpID = @strLoginID

					Set @strLoginID = @cpUserId
				End

			Select Top 1 @rtnVal = accountIDX 
			From dbo.userMemberDB with (noLock)
			Where 
				userID = @strLoginID And nickName = @strNickName
				And cpType = @intCpCode
		End


	Select @rtnVal

END
GO


-- ----------------------------
-- procedure structure for manage_get_userID_nickname
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_get_userID_nickname]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_get_userID_nickname]
GO

CREATE PROCEDURE [dbo].[manage_get_userID_nickname]
(
	@accountIDX int
)
AS
	SELECT userID, nickname FROM userMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_teencash_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_teencash_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_teencash_save]
GO

CREATE PROCEDURE [dbo].[web_event_teencash_save]
(
	@accountIDX int
,	@sn char(12)
,	@numberth tinyint
,	@userIP varchar(15)
,	@flag tinyint
)
AS
	INSERT INTO event_teencash (accountIDX, sn, numberth, userIP, flag, regDate)
	VALUES (@accountIDX, @sn, @numberth, @userIP, @flag, getdate())
GO


-- ----------------------------
-- procedure structure for game_medal_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_medal_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_medal_add]
GO

CREATE PROCEDURE [dbo].[game_medal_add]
(
	@accountIDX int
,	@medalIDX int
)
AS
	INSERT INTO userMedalDB_receive (accountIDX, medalIDX, flag, regDate) VALUES (@accountIDX, @medalIDX, 0, getdate())
GO


-- ----------------------------
-- procedure structure for web_medal_sum_point
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_medal_sum_point]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_medal_sum_point]
GO

CREATE PROCEDURE [dbo].[web_medal_sum_point]
(
	@medalcode varchar(1000)
)
AS
	DECLARE @sql varchar(1200)
	SET @sql = 'SELECT SUM(point) FROM define_medal WHERE medalCode in (' + @medalcode + ')'
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for manage_block_ip_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_block_ip_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_block_ip_add]
GO

CREATE PROCEDURE [dbo].[manage_block_ip_add]
(
	@regIP varchar(16)
,	@note varchar(300)
)
As
	INSERT INTO define_site_config (objName, content, note) VALUES ('blockIP', @regIP, @note)
GO


-- ----------------------------
-- procedure structure for game_dice_game_data_update
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_dice_game_data_update]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_dice_game_data_update]
GO

CREATE PROCEDURE [dbo].[game_dice_game_data_update]          
          
 @ACCOUNT_IDX		INT, 
 @Position			INT,             
 @Trace01			INT,
 @Trace02			INT,
 @Trace03			INT,
 @Trace04			INT,
 @Trace05			INT,
 @Trace06			INT,
 @Board				TINYINT,    
 @Reward01			INT,
 @Reward02			INT,
 @Reward03			INT,
 @Reward04			INT,
 @Reward05			INT,
 @Reward06			INT,
 @Reward07			INT,
 @Reward08			INT,
 @Reward09			INT,
 @Reward10			INT 
AS          
 SET NOCOUNT ON;          
 SET LOCK_TIMEOUT 10000;          
           
 BEGIN TRAN
 	UPDATE [dbo].[userDiceGameDB] WITH (XLOCK, ROWLOCK) 
	SET [AccountIDX] = @ACCOUNT_IDX,[Position] = @Position,[Trace01] = @Trace01,[Trace02] = @Trace02,[Trace03] = @Trace03,[Trace04] = @Trace04,[Trace05] = @Trace05,[Trace06] = @Trace06,[Board] = @Board,
		[RewardStep01] = @Reward01,[RewardStep02] = @Reward02,[RewardStep03] = @Reward03,[RewardStep04] = @Reward04,[RewardStep05] = @Reward05,
		[RewardStep06] = @Reward06,[RewardStep07] = @Reward07,[RewardStep08] = @Reward08,[RewardStep09] = @Reward09,[RewardStep10] = @Reward10, [UpdateTime] = GETDATE()
		WHERE AccountIDX = @ACCOUNT_IDX;

   IF(@@ROWCOUNT=0)              
   BEGIN    
     INSERT INTO [dbo].[userDiceGameDB] WITH(XLOCK, ROWLOCK) ([AccountIDX],[Position],[Trace01],[Trace02],[Trace03],[Trace04],[Trace05],[Trace06],[Board],
	[RewardStep01],[RewardStep02],[RewardStep03],[RewardStep04],[RewardStep05],[RewardStep06],[RewardStep07],[RewardStep08],[RewardStep09],[RewardStep10],[UpdateTime],[RegDate] )
		VALUES ( @ACCOUNT_IDX,@Position,@Trace01,@Trace02,@Trace03,@Trace04,@Trace05,@Trace06,@Board,
	 @Reward01,@Reward02,@Reward03,@Reward04,@Reward05,@Reward06,@Reward07,@Reward08,@Reward09,@Reward10, GETDATE(),GETDATE())
   END               
 COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for web_join_edit_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_join_edit_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_join_edit_get_data]
GO

CREATE PROCEDURE [dbo].[web_join_edit_get_data]
(
	@accountIDX int
)
AS
	SELECT a.userID, a.nickName, a.userPWD, a.EMail, a.mailling, b.userEnCode FROM userMemberDB a JOIN userNameDB b on a.accountIDX = b.accountIDX WHERE a.accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_league_winner_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_winner_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_winner_info]
GO

CREATE PROCEDURE [dbo].[game_league_winner_info]
(
	@historyIDX int
)
AS

SET NOCOUNT ON

SELECT accountIDX, nickName, userLevel,
	   classType, classGender, classFace, classHair, classSkinColor, classHairColor, classUnderwear,
	   classGear1, classGear2, classGear3, classGear4
  FROM dbo.userLeagueWinnerInfoDB WITH(NOLOCK)
 WHERE historyIDX=@historyIDX
GO


-- ----------------------------
-- procedure structure for web_ranking_myinfo_class_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_myinfo_class_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_myinfo_class_data]
GO

CREATE PROCEDURE [dbo].[web_ranking_myinfo_class_data]
(
	@accountIDX int
)
AS
	SELECT	class1_type, class1_level, class1_expert, class2_type, class2_level, class2_expert, class3_type, class3_level, class3_expert,
			class4_type, class4_level, class4_expert, class5_type, class5_level, class5_expert, class6_type, class6_level, class6_expert,
			class7_type, class7_level, class7_expert, class8_type, class8_level, class8_expert, class9_type, class9_level, class9_expert,
			class10_type, class10_level, class10_expert 
	FROM userClassDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for manage_get_userID
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_get_userID]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_get_userID]
GO

CREATE PROCEDURE [dbo].[manage_get_userID]
(
	@accountIDX int
)
As
	SELECT userID FROM userMemberDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_teencash_get_serial_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_teencash_get_serial_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_teencash_get_serial_count]
GO

CREATE PROCEDURE [dbo].[web_event_teencash_get_serial_count]
(
	@serial varchar(20)
)
AS
	SELECT count(*) FROM event_teencash WHERE sn=@serial
GO


-- ----------------------------
-- procedure structure for game_matchmode_set_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_matchmode_set_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_matchmode_set_data]
GO

CREATE PROCEDURE [dbo].[game_matchmode_set_data]              
              
 @ACCOUNT_IDX   INT,      
 @PLAY_COUNT INT,              
 @MATCH_POINT   INT,              
 @WIN_COUNT    INT,              
 @MAX_WIN_COUNT INT,    
 @LOSE_COUNT INT,  
 @RANK_MMR   INT  
               
              
AS              
              
 SET NOCOUNT ON;              
 SET LOCK_TIMEOUT 10000;              
              
 DECLARE @nReturn INT              
 SET @nReturn = 0  -- True              
              
 BEGIN TRAN              
              
  UPDATE dbo.userMatchModeDB WITH (XLOCK, ROWLOCK)              
     SET MatchPoint = @MATCH_POINT,       
      PlayCount = @PLAY_COUNT,             
      WinCount = @WIN_COUNT,              
      MaxWinCount = @MAX_WIN_COUNT,    
      LoseCount = @LOSE_COUNT,  
      RankMMR = @RANK_MMR    
          
   WHERE AccountIDX = @ACCOUNT_IDX;              
              
  IF (@@ROWCOUNT = 0)              
  BEGIN              
   INSERT INTO dbo.userMatchModeDB WITH (XLOCK, ROWLOCK) (AccountIDX, MatchPoint, WinCount, LoseCount, MaxWinCount, PlayCount, RankMMR, RegDate)              
   VALUES (@ACCOUNT_IDX, @MATCH_POINT, @WIN_COUNT, @LOSE_COUNT, @MAX_WIN_COUNT, @PLAY_COUNT, @RANK_MMR, GETDATE());              
              
   IF (@@ROWCOUNT = 0 OR (@@ERROR <> 0))              
   BEGIN              
    ROLLBACK TRAN              
    SELECT -1              
    RETURN;              
   END              
  END              
              
 COMMIT TRAN              
              
 SELECT @nReturn              
 RETURN;
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_member_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_member_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_member_count]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_member_count]
AS
	SELECT ROWCNT FROM SYSINDEXES WHERE INDID IN (1,0) AND OBJECTPROPERTY(ID, 'ISUSERTABLE') = 1 AND OBJECT_NAME(ID) IN ('userMemberDB')
GO


-- ----------------------------
-- procedure structure for manage_block_id_search_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_block_id_search_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_block_id_search_list]
GO

CREATE PROCEDURE [dbo].[manage_block_id_search_list]
(
	@accountIDX int
)
AS
	SELECT TOP 50 a.idx, a.accountIDX, b.userID, b.nickname, a.actionID, a.note, b.userType, a.regDate FROM LosaGame_log.DBO.log_block a LEFT JOIN userMemberDB b ON a.accountIDX=b.accountIDX 
	WHERE a.accountIDX=@accountIDX ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for game_custom_medal_set_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_custom_medal_set_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_custom_medal_set_delete]
GO

CREATE PROCEDURE [dbo].[game_custom_medal_set_delete]  
  
 @TABLE_IDX   INT,  
 @ACCOUNT_IDX  INT  
  
AS  
  
 SET NOCOUNT ON;  
 SET LOCK_TIMEOUT 10000;  
  
 BEGIN TRAN  
  
  DELETE FROM dbo.userCustomMedalDB  
   WHERE accountIDX = @ACCOUNT_IDX  
     AND idx = @TABLE_IDX;  
  
  IF (@@ROWCOUNT = 0) OR (@@ERROR <> 0)  
  BEGIN  
   SELECT -1  
   ROLLBACK TRAN  
   RETURN;  
  END  
  
 COMMIT TRAN  
  
 RETURN;
GO


-- ----------------------------
-- procedure structure for web_ipadress_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ipadress_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ipadress_info]
GO

CREATE PROCEDURE [dbo].[web_ipadress_info]
(
	@bwvalue bigint
)
AS
	SELECT country, countryname FROM define_geoip WITH(NOLOCK) WHERE sbwv <= @bwvalue and ebwv >= @bwvalue
GO


-- ----------------------------
-- procedure structure for game_trade_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_trade_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_trade_get_list]
GO

CREATE PROCEDURE [dbo].[game_trade_get_list]
(
	@topn int
,	@idx int
)
AS

	SELECT TOP (@topn) a.idx, a.accountIDX, b.nickName, a.itemType, a.value1, a.value2, a.price, a.mcustom, a.fcustom, a.periodDate, a.regDate
	FROM userTradeDB a WITH(NOLOCK)
		JOIN userMemberDB b WITH(NOLOCK)
		ON a.accountIDX = b.accountIDX
	WHERE a.idx < @idx
	ORDER BY a.idx DESC
GO


-- ----------------------------
-- procedure structure for web_ranking_myinfo_award_ranking_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_myinfo_award_ranking_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_myinfo_award_ranking_data]
GO

CREATE PROCEDURE [dbo].[web_ranking_myinfo_award_ranking_data]
(
	@accountIDX int
)
AS
	SELECT	award1_now, award2_now, award3_now, award4_now, award5_now, award6_now, award7_now, award8_now, award9_now, award10_now,
			award11_now, award12_now, award13_now, award14_now, award15_now, award16_now, award17_now, award18_now, award19_now, award20_now, 
			award21_now, award22_now, award23_now, award24_now, award25_now, award26_now, award27_now 
	FROM userRankingDB_award WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_memberout_check_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_memberout_check_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_memberout_check_count]
GO

CREATE PROCEDURE [dbo].[web_memberout_check_count]
(
	@userEnCode varchar(64)
)
AS
	SELECT count(*) FROM LosaGame_log.DBO.log_secession WHERE userEnCode=@userEnCode and outDate >= DateAdd(d,-7,getdate())
GO


-- ----------------------------
-- procedure structure for manage_get_userencode
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_get_userencode]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_get_userencode]
GO

CREATE PROCEDURE [dbo].[manage_get_userencode]
(
	@accountIDX int
)
AS
	SELECT userEnCode FROM userNameDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_teencash_get_day_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_teencash_get_day_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_teencash_get_day_count]
GO

CREATE PROCEDURE [dbo].[web_event_teencash_get_day_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM event_teencash WHERE accountIDX=@accountIDX and regDate > Left(getdate(), 10)
GO


-- ----------------------------
-- procedure structure for game_matchmode_seasonranking_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_matchmode_seasonranking_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_matchmode_seasonranking_get_data]
GO

CREATE PROCEDURE [dbo].[game_matchmode_seasonranking_get_data]

	@ACCOUNT_IDX		INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	SELECT S1_Ranking, S1_MatchPoint, S1_SeasonDate, S2_Ranking, S2_MatchPoint, S2_SeasonDate, S3_Ranking, S3_MatchPoint, S3_SeasonDate,
           S4_Ranking, S4_MatchPoint, S4_SeasonDate, S5_Ranking, S5_MatchPoint, S5_SeasonDate, S6_Ranking, S6_MatchPoint, S6_SeasonDate,
           S7_Ranking, S7_MatchPoint, S7_SeasonDate
	  FROM dbo.userMatchModeSeasonRankingDB WITH (NOLOCK)
	 WHERE AccountIDX = @ACCOUNT_IDX
GO


-- ----------------------------
-- procedure structure for web_minihome_friend_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_friend_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_friend_list]
GO

CREATE PROCEDURE [dbo].[web_minihome_friend_list]
(
	@accountIDX varchar(10)
,	@pagesize varchar(8)
,	@notpage varchar(8)
)
AS
	DECLARE @sql varchar(1000)

	SET @sql = 'SELECT TOP ' + @pagesize + ' b.userLevel, d.accountIDX, d.nickName, b.connDate, c.gameServerID, ISNULL(e.class, 0) as ''userRanking'' FROM userFriendDB a INNER JOIN userGameDB b ON a.friendAccIDX = b.accountIDX INNER JOIN userLoginDB c ON a.friendAccIDX = c.accountIDX INNER JOIN userMemberDB d ON a.friendAccIDX = d.accountIDX LEFT JOIN userRankingDB e ON a.friendAccIDX = e.accountIDX '
	SET @sql = @sql + 'WHERE a.userAccIDX=' + @accountIDX + ' and a.idx not in (SELECT TOP ' + @notpage + ' a.idx FROM userFriendDB a INNER JOIN userGameDB b ON a.friendAccIDX = b.accountIDX INNER JOIN userLoginDB c ON a.friendAccIDX = c.accountIDX INNER JOIN userMemberDB d ON a.friendAccIDX = d.accountIDX LEFT JOIN userRankingDB e ON a.friendAccIDX = e.accountIDX WHERE a.userAccIDX=' + @accountIDX + ' ORDER BY b.userLevel DESC) '
	SET @sql = @sql + 'ORDER BY b.userLevel DESC'

	EXECUTE(@sql)
GO


-- ----------------------------
-- procedure structure for z_nouse_web_ranking_class_top3_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_web_ranking_class_top3_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_web_ranking_class_top3_list]
GO

CREATE PROCEDURE [dbo].[z_nouse_web_ranking_class_top3_list]
(
	@pagesize varchar(8)
,	@notpage varchar(8)
)
AS

	DECLARE @sql varchar(700), @nDate datetime, @dateIDX char(8)
	SET @nDate = Left(getdate(),10)
	SET @dateIDX = convert(char(8),@nDate,112)

	IF (not exists(SELECT TOP 1 * FROM userRankingDB_class_top3 WHERE dateIDX=@dateIDX))
	BEGIN
		SET @dateIDX = (SELECT TOP 1 dateIDX FROM userRankingDB_class_top3 ORDER BY idx DESC)
	END

	SET @sql = 'SELECT TOP ' + @pagesize + ' classType, rank1_accountIDX, rank1_userLevel, rank1_nickName, rank2_accountIDX, rank2_userLevel, rank2_nickName, rank3_accountIDX, rank3_userLevel, rank3_nickName FROM userRankingDB_class_top3 '
	SET @sql = @sql + 'WHERE dateIDX = ''' + @dateIDX + ''' and idx not in (SELECT TOP ' + @notpage + ' idx FROM userRankingDB_class_top3 WHERE dateIDX = ''' + @dateIDX + ''' ORDER BY classType DESC) ORDER BY classType DESC'
	EXECUTE(@sql)
GO


-- ----------------------------
-- procedure structure for game_custom_medal_set_charaternum
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_custom_medal_set_charaternum]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_custom_medal_set_charaternum]
GO

CREATE PROCEDURE [dbo].[game_custom_medal_set_charaternum]  
  
 @TABLE_IDX   INT,  
 @ACCOUNT_IDX  INT,  
 @CHARACTER_NUM  INT  
  
AS  
  
 SET NOCOUNT ON;  
 SET LOCK_TIMEOUT 10000;  
  
 UPDATE dbo.userCustomMedalDB  
    SET SetCharaterNum = @CHARACTER_NUM  
  WHERE AccountIDX = @ACCOUNT_IDX  
    AND idx = @TABLE_IDX;
GO


-- ----------------------------
-- procedure structure for web_intro_character_movie_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_intro_character_movie_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_intro_character_movie_list]
GO

CREATE PROCEDURE [dbo].[web_intro_character_movie_list]
(
	@classIDX int
)
AS
	SELECT idx, classHanName FROM define_class WHERE idx < @classIDX ORDER BY movieorderby DESC
GO


-- ----------------------------
-- procedure structure for game_trade_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_trade_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_trade_delete]
GO

CREATE PROCEDURE [dbo].[game_trade_delete]
(
	@idx int
)
AS
	DELETE FROM userTradeDB WHERE idx = @idx
GO


-- ----------------------------
-- procedure structure for web_ranking_myinfo_award_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_myinfo_award_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_myinfo_award_data]
GO

CREATE PROCEDURE [dbo].[web_ranking_myinfo_award_data]
(
	@accountIDX int
)
As
	SELECT	award1_type, award1_point, award2_type, award2_point, award3_type, award3_point, award4_type, award4_point, award5_type, award5_point,
			award6_type, award6_point, award7_type, award7_point, award8_type, award8_point, award9_type, award9_point, award10_type, award10_point
	FROM userAwardDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_recommend_join_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_recommend_join_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_recommend_join_add]
GO

CREATE PROCEDURE [dbo].[web_recommend_join_add]
(
	@accountIDX int
,	@rinkIP varchar(15)
)
As
	INSERT INTO LosaGame_log.DBO.log_recommend_join (accountIDX, rinkIP, flag, regDate) VALUES (@accountIDX, @rinkIP, 0, getdate())
GO


-- ----------------------------
-- procedure structure for manage_get_user_gameserverid
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_get_user_gameserverid]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_get_user_gameserverid]
GO

CREATE PROCEDURE [dbo].[manage_get_user_gameserverid]
(
	@accountIDX int
)
AS
	SELECT gameServerID FROM userLoginDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_teencash_get_all_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_teencash_get_all_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_teencash_get_all_count]
GO

CREATE PROCEDURE [dbo].[web_event_teencash_get_all_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM event_teencash WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_matchmode_history_set_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_matchmode_history_set_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_matchmode_history_set_add]
GO

CREATE PROCEDURE [dbo].[game_matchmode_history_set_add]

	@ACCOUNT_IDX				INT,
	@WIN_LOSE_TYPE				TINYINT,
	@TEAM_WIN_COUNT				INT,
	@OPPOSING_TEAM_WIN_COUNT	INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	DECLARE @nReturn	INT
	SET @nReturn = 0		-- True
	
	BEGIN TRAN

		INSERT INTO dbo.userMatchModeHistoryDB WITH (XLOCK, ROWLOCK) (AccountIDX, WinLoseType, TeamWinCount, OpposingTeamWinCount, PlayDate)
		VALUES (@ACCOUNT_IDX, @WIN_LOSE_TYPE, @TEAM_WIN_COUNT, @OPPOSING_TEAM_WIN_COUNT, GETDATE());

		IF (@@ROWCOUNT = 0 OR (@@ERROR <> 0))
		BEGIN
			ROLLBACK TRAN
			SELECT -1
			RETURN;
		END

	COMMIT TRAN

	SELECT @nReturn
	RETURN;
GO


-- ----------------------------
-- procedure structure for web_quest_board_get_title
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_quest_board_get_title]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_quest_board_get_title]
GO

CREATE PROCEDURE [dbo].[web_quest_board_get_title]
(
	@questIDX varchar(100)
)
AS
	DECLARE @sql varchar(300)
	SET @sql = 'SELECT questIDX, title FROM define_quest WHERE questIDX in (' + @questIDX + ')'
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for z_nouse_manage_member_list_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_manage_member_list_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_manage_member_list_count]
GO

CREATE PROCEDURE [dbo].[z_nouse_manage_member_list_count]

AS
	SELECT count(*) FROM userMemberDB
GO


-- ----------------------------
-- procedure structure for game_custom_medal_set_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_custom_medal_set_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_custom_medal_set_add]
GO

CREATE PROCEDURE [dbo].[game_custom_medal_set_add]  
  
 @ACCOUNT_IDX  INT,  
 @MEDAL_CODE   INT,  
 @BASIC_GROWTH1  INT,  
 @BASIC_GROWTH2  INT,  
 @BASIC_GROWTH3  INT,  
 @BASIC_GROWTH4  INT,  
 @SKILL_GROWTH1  INT,  
 @SKILL_GROWTH2  INT,  
 @SKILL_GROWTH3  INT,  
 @SKILL_GROWTH4  INT,  
 @CHARATER_NUM  INT,  
 @LIMIT_TYPE   INT,  
 @LIMIT_DATE   DATETIME  
  
AS  
  
 SET NOCOUNT ON;  
 SET LOCK_TIMEOUT 10000;  
   
 DECLARE @TABLE_INDEX INT  
 SET @TABLE_INDEX = 0  
  
 BEGIN TRAN  
  
  INSERT INTO dbo.userCustomMedalDB (  
   AccountIDX, MedalCode, BasicGrowth1, BasicGrowth2, BasicGrowth3, BasicGrowth4, SkillGrowth1, SkillGrowth2, SkillGrowth3, SkillGrowth4, SetCharaterNum, LimitType, LimitDate, RegDate  
  )  
  VALUES (  
   @ACCOUNT_IDX, @MEDAL_CODE, @BASIC_GROWTH1, @BASIC_GROWTH2, @BASIC_GROWTH3, @BASIC_GROWTH4, @SKILL_GROWTH1, @SKILL_GROWTH2, @SKILL_GROWTH3, @SKILL_GROWTH4, @CHARATER_NUM, @LIMIT_TYPE, @LIMIT_DATE, GETDATE()  
  )  
  
  IF (@@ROWCOUNT = 0) OR (@@ERROR <> 0)  
  BEGIN  
   SELECT -1  
   ROLLBACK TRAN  
   RETURN;  
  END  
  
  SET @TABLE_INDEX = @@IDENTITY  
   
 COMMIT TRAN  
   
 SELECT @TABLE_INDEX AS idx;
GO


-- ----------------------------
-- procedure structure for web_intro_character_max_idx
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_intro_character_max_idx]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_intro_character_max_idx]
GO

CREATE PROCEDURE [dbo].[web_intro_character_max_idx]
AS
	SELECT MAX(idx) FROM define_class
GO


-- ----------------------------
-- procedure structure for game_trade_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_trade_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_trade_add]
GO

CREATE PROCEDURE [dbo].[game_trade_add]
(
	@accountIDX int
,	@itemType int
,	@value1 int
,	@value2 int
,	@price bigint
,	@mcustom int
,	@fcustom int
,	@userIP varchar(16)
,	@periodDate int
)
AS
	INSERT INTO userTradeDB (accountIDX, itemType, value1, value2, price, mcustom, fcustom, userIP, periodDate, regDate)
	VALUES (@accountIDX, @itemType, @value1, @value2, @price, @mcustom, @fcustom, @userIP, @periodDate, getdate())
GO


-- ----------------------------
-- procedure structure for web_ranking_myinfo_all_ranking_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_myinfo_all_ranking_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_myinfo_all_ranking_data]
GO

CREATE PROCEDURE [dbo].[web_ranking_myinfo_all_ranking_data]
(
	@accountIDX int
)
As
	SELECT class, battle, training, award, medal, tester FROM userRankingDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_member_recommend_join_get_accountIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_recommend_join_get_accountIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_recommend_join_get_accountIDX]
GO

CREATE PROCEDURE [dbo].[web_member_recommend_join_get_accountIDX]
(
	@rinkIP varchar(15)
)
As
	SELECT accountIDX FROM LosaGame_log.DBO.log_recommend_join WHERE rinkIP=@rinkIP and flag=0
GO


-- ----------------------------
-- procedure structure for manage_get_className
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_get_className]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_get_className]
GO

CREATE PROCEDURE [dbo].[manage_get_className]
AS
	SELECT classHanName FROM define_class WITH(NOLOCK)
GO


-- ----------------------------
-- procedure structure for manage_event_teencash_user_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_teencash_user_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_teencash_user_count]
GO

CREATE PROCEDURE [dbo].[manage_event_teencash_user_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM event_teencash WHERE accountIDX=@accountIDX and flag=2
GO


-- ----------------------------
-- procedure structure for game_matchmode_history_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_matchmode_history_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_matchmode_history_get_list]
GO

CREATE PROCEDURE [dbo].[game_matchmode_history_get_list]

	@ACCOUNT_IDX		INT,
	@PAGE				INT,
	@PAGE_SIZE			INT
	
AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	DECLARE @SELECT_DATE DATETIME
	SET @SELECT_DATE = LEFT(CONVERT(VARCHAR(20), GETDATE(), 120), 10)

	SELECT PlayList, WinLoseType, TeamWinCount, OpposingTeamWinCount
	  FROM (
		SELECT ROW_NUMBER() OVER (ORDER BY idx DESC) AS PlayList, idx, AccountIDX, WinLoseType, TeamWinCount, OpposingTeamWinCount
		  FROM dbo.userMatchModeHistoryDB WITH (NOLOCK)
		 WHERE AccountIDX = @ACCOUNT_IDX
		   AND PlayDate >= @SELECT_DATE
		   AND PlayDate < DATEADD(d, 1, @SELECT_DATE)
	  ) AS USER_PLAY_LIST
	 WHERE PlayList BETWEEN (((@PAGE - 1) * @PAGE_SIZE) + 1) AND @PAGE * @PAGE_SIZE;
GO


-- ----------------------------
-- procedure structure for web_ranking_classgroup_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_classgroup_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_classgroup_list]
GO

CREATE PROCEDURE [dbo].[web_ranking_classgroup_list]
(
	@pagesize int
,	@notpage int
)
AS

	DECLARE @sql nvarchar(2000)
	DECLARE @ParmDefinition nvarchar(500)

	SET @sql = N'SELECT TOP (@pagesize_in) b.accountIDX, b.nickName, a.userLevel, a.ranking_2day, a.ranking_1day, a.expert, isnull(d.idx,'''') as ''idx'', isnull(d.guildName,'''') as ''guildName'', isnull(d.guildmark, '''') as ''guildmark'' FROM userRankingDB_classgroup a WITH(NOLOCK) JOIN userMemberDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX LEFT JOIN (SELECT accountIDX, max(guildIDX) AS ''guildIDX'' FROM userGuildInfoDB WITH(NOLOCK) WHERE guildJoinType=1 GROUP BY accountIDX) c ON a.accountIDX = c.accountIDX LEFT JOIN userGuildDB d ON c.guildIDX = d.idx '
	SET @sql = @sql + 'WHERE a.ranking_1day > 0 and a.accountIDX not in (SELECT TOP (@notpage_in) accountIDX FROM userRankingDB_classgroup WHERE ranking_1day > 0 ORDER BY ranking_1day ASC) ORDER BY ranking_1day ASC'

	SET @ParmDefinition = N'@pagesize_in int, @notpage_in int'

	EXECUTE sp_executesql @sql, @ParmDefinition, @pagesize_in=@pagesize, @notpage_in=@notpage
GO


-- ----------------------------
-- procedure structure for z_nouse_manage_mannerpoint_log_user_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_manage_mannerpoint_log_user_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_manage_mannerpoint_log_user_info]
GO

CREATE PROCEDURE [dbo].[z_nouse_manage_mannerpoint_log_user_info]
(
	@accountIDX int
)
AS
	SELECT a.userID, a.nickName, b.userLevel, b.playTime, c.visit_count, a.email, c.cnnDate, b.connDate, a.regDate FROM
	userMemberDB a JOIN userGameDB b ON a.accountIDX = b.accountIDX JOIN userInfoDB c ON a.accountIDX = c.accountIDX
	WHERE a.accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_custom_medal_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_custom_medal_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_custom_medal_get_data]
GO

CREATE PROCEDURE [dbo].[game_custom_medal_get_data]  
  
 @ACCOUNT_IDX  INT  
  
AS  
  
 SET NOCOUNT ON;  
 SET LOCK_TIMEOUT 10000;  
  
 SELECT idx, MedalCode, BasicGrowth1, BasicGrowth2, BasicGrowth3, BasicGrowth4, SkillGrowth1, SkillGrowth2, SkillGrowth3, SkillGrowth4, SetCharaterNum, LimitType, LimitDate  
   FROM dbo.userCustomMedalDB WITH (NOLOCK)  
  WHERE AccountIDX = @ACCOUNT_IDX;
GO


-- ----------------------------
-- procedure structure for web_guild_ranking_top5
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_ranking_top5]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_ranking_top5]
GO

CREATE PROCEDURE [dbo].[web_guild_ranking_top5]

AS

SET NOCOUNT ON

SELECT TOP 5 idx, guildname, guildmark
  FROM dbo.userGuildDB WITH(NOLOCK)
 WHERE ranking > 0
 ORDER BY ranking ASC, point DESC
GO


-- ----------------------------
-- procedure structure for game_title_set_status
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_title_set_status]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_title_set_status]
GO

CREATE PROCEDURE [dbo].[game_title_set_status]

	@ACCOUNT_IDX		INT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	BEGIN TRAN

		UPDATE dbo.userTitleDB WITH (XLOCK, ROWLOCK) SET TitleStatus=1
		WHERE AccountIDX=@ACCOUNT_IDX and TitleStatus=2
		
		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
			RETURN;
		END 

	COMMIT TRAN
	
	RETURN;
GO


-- ----------------------------
-- procedure structure for web_ranking_myinfo_all_medal_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_myinfo_all_medal_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_myinfo_all_medal_data]
GO

CREATE PROCEDURE [dbo].[web_ranking_myinfo_all_medal_data]
(
	@accountIDX int
)
As
	SELECT	medal1_type, medal2_type, medal3_type, medal4_type, medal5_type, 
			medal6_type, medal7_type, medal8_type, medal9_type, medal10_type 
	FROM userMedalDB WHERE accountIDX = @accountIDX ORDER BY idx ASC
GO


-- ----------------------------
-- procedure structure for web_recommend_userip_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_recommend_userip_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_recommend_userip_count]
GO

CREATE PROCEDURE [dbo].[web_recommend_userip_count]
(
	@userIP varchar(15)
)
AS
	SELECT COUNT(*) FROM LosaGame_log.DBO.log_recommend WHERE userIP = @userIP and regDate > (getdate() - 7)
GO


-- ----------------------------
-- procedure structure for manage_get_accountIDX_innick
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_get_accountIDX_innick]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_get_accountIDX_innick]
GO

CREATE PROCEDURE [dbo].[manage_get_accountIDX_innick]
(
	@nickName varchar(20)
)
As
	SELECT accountIDX FROM userMemberDB WITH(NOLOCK) WHERE nickName = @nickName
GO


-- ----------------------------
-- procedure structure for manage_event_teencash_set_reserve
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_teencash_set_reserve]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_teencash_set_reserve]
GO

CREATE PROCEDURE [dbo].[manage_event_teencash_set_reserve]
(
	@idx int
)
AS
	UPDATE event_teencash SET flag=100 WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_matchmode_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_matchmode_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_matchmode_get_data]
GO

CREATE PROCEDURE [dbo].[game_matchmode_get_data]                  
                  
 @ACCOUNT_IDX  INT                  
                  
AS                  
                  
 SET NOCOUNT ON;                  
 SET LOCK_TIMEOUT 10000;                  
                    
IF EXISTS (            
            
 SELECT AccountIDX            
   FROM dbo.userMatchModeDB WITH (NOLOCK)                  
  WHERE AccountIDX = @ACCOUNT_IDX            
   )            
 BEGIN              
               
  SELECT 1, A.PlayCount, A.MatchPoint, A.WinCount, A.MaxWinCount, A.LoseCount, A.RankMMR  
    FROM dbo.userMatchModeDB A WITH (NOLOCK)                  
   WHERE A.AccountIDX = @ACCOUNT_IDX;             
 END            
 ELSE            
 BEGIN            
  SELECT 0, 0, 0, 0, 0, 0, 0;            
 END
GO


-- ----------------------------
-- procedure structure for web_ranking_classgroup_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_classgroup_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_classgroup_count]
GO

CREATE PROCEDURE [dbo].[web_ranking_classgroup_count]

AS
--	SELECT count(*) FROM userRankingDB_classgroup with(nolock)
	SELECT rowcnt FROM sysindexes WHERE id=373576369 and indid < 2
GO


-- ----------------------------
-- procedure structure for z_nouse_manage_mannerpoint_log_room_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_manage_mannerpoint_log_room_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_manage_mannerpoint_log_room_info]
GO

CREATE PROCEDURE [dbo].[z_nouse_manage_mannerpoint_log_room_info]
(
	@idx int
)
AS
	SELECT playType, modeType, sub1Type, sub2Type, roomInfo, chatInfo, note, flag FROM LosaGame_log.DBO.log_mannerpoint WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_costume_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_costume_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_costume_save]
GO

CREATE PROCEDURE [dbo].[game_costume_save]
(
	@idx INT,
	@itemCode INT,
	@periodType TINYINT,
	@periodDate DATETIME,
	@classType INT
)
AS

SET NOCOUNT ON
SET LOCK_TIMEOUT 10000

UPDATE dbo.userCostumeDB
   SET itemCode = @itemCode,
	   periodType = @periodType,
	   periodDate = @periodDate,
	   classType = @classType
 WHERE idx = @idx
GO


-- ----------------------------
-- procedure structure for web_guild_ranking_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_ranking_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_ranking_list]
GO

CREATE PROCEDURE [dbo].[web_guild_ranking_list]
(
	@pagesize int
,	@notpage int
)
AS

SET NOCOUNT ON

DECLARE @sql nvarchar(1000)
DECLARE @ParmDefinition nvarchar(500)

SELECT TOP (@pagesize) idx, guildname, guildmark, ranking, point, maxcount, membercount
  FROM dbo.userGuildDB WITH(NOLOCK)
 WHERE ranking > 0
   AND idx NOT IN (
	SELECT TOP (@notpage) idx FROM dbo.userGuildDB WITH(NOLOCK)
	 WHERE ranking > 0
	 ORDER BY ranking ASC, point DESC
	)
 ORDER BY ranking ASC, point DESC
GO


-- ----------------------------
-- procedure structure for game_title_set_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_title_set_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_title_set_add]
GO

CREATE PROCEDURE [dbo].[game_title_set_add]

	@ACCOUNT_IDX		INT,
	@TITLE_CODE			INT,
	@TITLE_VALUE		BIGINT,
	@TITLE_LEVEL		INT,
	@TITLE_PREMIUM		TINYINT,
	@TITLE_EQUIP		TINYINT,
	@TITLE_STATUS		TINYINT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	DECLARE @GET_DATE		DATETIME
	SET @GET_DATE=GETDATE();

	BEGIN TRAN

		-- Insert or Update		
		;MERGE dbo.userTitleDB as TARGET
		USING (SELECT @ACCOUNT_IDX, @TITLE_CODE) AS SOURCE (AccountIDX, TitleCode)
		ON (TARGET.AccountIDX=SOURCE.AccountIDX and TARGET.TitleCode=SOURCE.TitleCode)
		WHEN MATCHED THEN
			UPDATE SET TARGET.TitleValue=@TITLE_VALUE, TARGET.TitleLevel=@TITLE_LEVEL, TARGET.TitlePremium=@TITLE_PREMIUM, TARGET.TitleEquip=@TITLE_EQUIP, TARGET.TitleStatus=@TITLE_STATUS, TARGET.UpdDate=@GET_DATE
		WHEN NOT MATCHED THEN
			INSERT (AccountIDX, TitleCode, TitleValue, TitleLevel, TitlePremium, TitleEquip, TitleStatus) VALUES (SOURCE.AccountIDX, SOURCE.TitleCode, @TITLE_VALUE, @TITLE_LEVEL, @TITLE_PREMIUM, @TITLE_EQUIP, @TITLE_STATUS);

		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
			RETURN;
		END 

	COMMIT TRAN		

	RETURN;
GO


-- ----------------------------
-- procedure structure for web_ranking_myinfo_all_game_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_myinfo_all_game_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_myinfo_all_game_data]
GO

CREATE PROCEDURE [dbo].[web_ranking_myinfo_all_game_data]
(
	@accountIDX int
)
As
	SELECT	a.userLevel
,			b.type1_win AS 'battle_win'
,			b.type1_lose AS 'battle_lose'
,			b.type1_kill AS 'battle_kill'
,			b.type1_death AS 'battle_death' 
	FROM userGameDB a INNER JOIN userRecordBattleDB b ON a.accountIDX = b.accountIDX 
	WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_recommend_point_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_recommend_point_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_recommend_point_save]
GO

CREATE PROCEDURE [dbo].[web_recommend_point_save]
(
	@idx int
,	@point smallint
)
As
	UPDATE LosaGame_log.DBO.log_recommend SET point = @point WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for manage_get_accountIDX_from_nickname
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_get_accountIDX_from_nickname]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_get_accountIDX_from_nickname]
GO

CREATE PROCEDURE [dbo].[manage_get_accountIDX_from_nickname]
(
	@nickname varchar(20)
)
AS
	SELECT accountIDX FROM userMemberDB WITH(NOLOCK) WHERE nickname=@nickname
GO


-- ----------------------------
-- procedure structure for manage_event_teencash_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_teencash_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_teencash_save]
GO

CREATE PROCEDURE [dbo].[manage_event_teencash_save]
(
	@idx int
,	@flag int
)
AS
	UPDATE event_teencash SET flag=@flag WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_matchmode_dailyranking_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_matchmode_dailyranking_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_matchmode_dailyranking_get_list]
GO

CREATE PROCEDURE [dbo].[game_matchmode_dailyranking_get_list]

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	SELECT TOP 100 B.nickName, A.AccountIDX, A.Ranking, A.MatchPoint, C.userLevel, D.WinCount, D.LoseCount
	  FROM dbo.userMatchModeDailyRankingDB A WITH (NOLOCK)
	  JOIN dbo.userMemberDB B WITH (NOLOCK)
	    ON A.AccountIDX = B.accountIDX
	  JOIN dbo.userGameDB C WITH (NOLOCK)
	    ON A.AccountIDX = C.accountIDX
	  JOIN dbo.userMatchModeDB D WITH (NOLOCK)
	    ON A.AccountIDX = D.accountIDX
	 ORDER BY A.Ranking ASC;
GO


-- ----------------------------
-- procedure structure for web_ranking_medal_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_medal_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_medal_list]
GO

CREATE PROCEDURE [dbo].[web_ranking_medal_list]
(
	@pagesize varchar(8)
,	@notpage varchar(8)
)
AS

	DECLARE @sql varchar(1000)
	SET @sql = 'SELECT TOP ' + @pagesize + ' b.accountIDX, b.nickName, a.medalLevel, a.expert, a.ranking_prev, a.ranking_now, isnull(d.idx,'''') as ''idx'', isnull(d.guildName,'''') as ''guildName'', isnull(d.guildmark, '''') as ''guildmark'', e.userLevel FROM userRankingDB_medal a JOIN userMemberDB b ON a.accountIDX = b.accountIDX LEFT JOIN (SELECT accountIDX, max(guildIDX) AS ''guildIDX'' FROM userGuildInfoDB WHERE guildJoinType=1  GROUP BY accountIDX) c ON a.accountIDX = c.accountIDX LEFT JOIN userGuildDB d ON c.guildIDX = d.idx JOIN userGameDB e ON a.accountIDX = e.accountIDX '
	SET @sql = @sql + 'WHERE a.ranking_now > 0 and a.accountIDX not in (SELECT TOP ' + @notpage + ' accountIDX FROM userRankingDB_medal WHERE ranking_now > 0 ORDER BY ranking_now ASC) ORDER BY ranking_now ASC'

	EXECUTE(@sql)
GO


-- ----------------------------
-- procedure structure for game_present_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_present_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_present_save]
GO

CREATE PROCEDURE [dbo].[game_present_save]
(
	@tblIDX int
,	@flag smallint
)
AS
	UPDATE userPresentDB SET flag=@flag WHERE idx=@tblIDX
GO


-- ----------------------------
-- procedure structure for game_costume_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_costume_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_costume_get_list]
GO

CREATE PROCEDURE [dbo].[game_costume_get_list]
(
	@idx INT,
	@accountIDX INT,
	@topNum INT
)
AS

SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

SELECT TOP (@topNum) idx, itemCode, periodType, periodDate, classType
  FROM dbo.userCostumeDB WITH (INDEX (PK_userCostumeDB))
 WHERE accountIDX = @accountIDX
   AND idx > @idx
 ORDER BY idx ASC
GO


-- ----------------------------
-- procedure structure for web_guild_ranking_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_ranking_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_ranking_count]
GO

CREATE PROCEDURE [dbo].[web_guild_ranking_count]

AS

SET NOCOUNT ON

SELECT COUNT(*)
  FROM dbo.userGuildDB WITH(NOLOCK)
 WHERE ranking > 0
GO


-- ----------------------------
-- procedure structure for game_title_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_title_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_title_get_data]
GO

CREATE PROCEDURE [dbo].[game_title_get_data]

	@ACCOUNT_IDX		INT	

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	BEGIN

		SELECT TitleCode, TitleValue, TitleLevel, TitlePremium, TitleEquip, TitleStatus FROM dbo.userTitleDB WITH (READUNCOMMITTED)
		WHERE AccountIDX=@ACCOUNT_IDX
		
		IF (@@ERROR<>0)
		BEGIN			
			RETURN;
		END 

	END
	
	RETURN;
GO


-- ----------------------------
-- procedure structure for web_ranking_myinfo_all_classgroup_expert
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_myinfo_all_classgroup_expert]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_myinfo_all_classgroup_expert]
GO

CREATE PROCEDURE [dbo].[web_ranking_myinfo_all_classgroup_expert]
(
	@accountIDX int
)
As
	SELECT userEXP FROM userGameDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_recommend_get_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_recommend_get_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_recommend_get_index]
GO

CREATE PROCEDURE [dbo].[web_recommend_get_index]
(
	@accountIDX int
,	@userIP varchar(15)
)
As
	Select Top 1 idx,point From LosaGame_log.DBO.log_recommend where userIP = @userIP and accountIDX = @accountIDX and regDate > (getdate() - 30) order by idx desc
GO


-- ----------------------------
-- procedure structure for manage_get_accountIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_get_accountIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_get_accountIDX]
GO

CREATE PROCEDURE [dbo].[manage_get_accountIDX]
(
	@nickname varchar(20)
)
As
	SELECT accountIDX FROM userMemberDB WITH(NOLOCK) WHERE nickname = @nickname
GO


-- ----------------------------
-- procedure structure for manage_event_teencash_get_flag
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_teencash_get_flag]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_teencash_get_flag]
GO

CREATE PROCEDURE [dbo].[manage_event_teencash_get_flag]
(
	@idx int
)
AS
	SELECT flag, accountIDX FROM event_teencash WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_managetool_user_block
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_managetool_user_block]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_managetool_user_block]
GO

CREATE PROCEDURE [dbo].[game_managetool_user_block]
(
	@nickName NVARCHAR(20)
,	@limitType TINYINT
,	@limitDate DATETIME
,	@reportNick NVARCHAR(20)
,	@reportIP NVARCHAR(15)
,	@reason NVARCHAR(1000)
,	@note NVARCHAR(1000)
)
AS

SET NOCOUNT ON;

DECLARE @accountIDX INT
DECLARE @ddiff INT

SET @ddiff = DATEDIFF(hh, GETDATE(), @limitDate)

SET @accountIDX = (
	SELECT accountIDX
	  FROM dbo.userMemberDB WITH(NOLOCK)
	 WHERE nickName=@nickName
)

IF (@accountIDX IS NULL)
BEGIN
	SELECT 'FALSE'
	RETURN;
END


IF (@ddiff > 0)
BEGIN
	UPDATE dbo.userMemberDB
	   SET limitType=@limitType,
		   limitDate=@limitDate
	 WHERE accountIDX=@accountIDX
END
ELSE
BEGIN
	UPDATE dbo.userMemberDB
	   SET limitDate=GETDATE()-1
	 WHERE accountIDX=@accountIDX  
END


IF (@@ROWCOUNT = 0)
BEGIN
	SELECT 'FALSE'
	RETURN;
END
ELSE
BEGIN
	SELECT 'TRUE'
END


IF (@ddiff <= 0)
BEGIN
	INSERT INTO LosaGame_log.dbo.log_mannerpoint (
		playType, modeType, sub1Type, sub2Type,
		reportIDX, reportNick, reportpubIP, reportpriIP,
		receiveIDX, receiveNick, receivepubIP, roomInfo, chatinfo, note, reason, flag, resultType, regDate
	)
	VALUES (
		0, 0, 0, 0,
		0, @reportNick, @reportIP, @reportIP,
		@accountIDX, @nickName, '', '', '', @note, @reason, 0, 1, GETDATE()
	)
END
GO


-- ----------------------------
-- procedure structure for web_character_movie_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_character_movie_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_character_movie_list]
GO

CREATE PROCEDURE [dbo].[web_character_movie_list]
(
	@pagesize int
,	@notpage int
)
AS
	DECLARE @sql nvarchar(500)
	DECLARE @ParmDefinition nvarchar(500)

	SET @sql = N'SELECT TOP (@pagesize_in) idx, classHanName FROM define_class WITH(NOLOCK) '
	SET @sql = @sql + 'WHERE idx not in (SELECT TOP (@notpage_in) idx FROM define_class WITH(NOLOCK) ORDER BY movieorderby DESC'
	SET @sql = @sql + ') ORDER BY idx DESC'

	SET @ParmDefinition = N'@pagesize_in int, @notpage_in int'

	EXECUTE sp_executesql @sql, @ParmDefinition, @pagesize_in=@pagesize, @notpage_in=@notpage
GO


-- ----------------------------
-- procedure structure for USP_LTS_ADMIN_WEEKTIME_PARENT_CHILD_LIST
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_ADMIN_WEEKTIME_PARENT_CHILD_LIST]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_ADMIN_WEEKTIME_PARENT_CHILD_LIST]
GO

CREATE PROCEDURE [dbo].[USP_LTS_ADMIN_WEEKTIME_PARENT_CHILD_LIST]
	@tnSrchType		tinyint,		-- 검색타입[1:아이디, 2:주민등록번호]
	@strSrchString		varchar(64)		-- 검색어
AS
/*
	Grant Execute on dbo.USP_LTS_WEEKTIME_PARENT_CHILD_LIST to Mirusr_1
*/
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- 아이디 검색
	IF @tnSrchType = 1
		BEGIN 
			Select 
				C.*, M.*, N.userName, N.userBirthday, N.userNumber
			From (
				Select 
					PARENT_ID, CHILD_ID, Agree_Type, CONVERT(VARCHAR(10), AgreeDate, 121) AS AgreeDate, RegIP, CONVERT(VARCHAR(10), RegDate, 121) AS cRegDate
				From TB_LTS_WEEKTIME_PARENT_CHILD_INFO with (noLock)
				Where PARENT_ID = @strSrchString
			) As C
			INNER JOIN dbo.userMemberDB M WITH(NOLOCK) 
			ON C.CHILD_ID = M.userID
			INNER JOIN dbo.userNameDB N WITH (NOLOCK)
			ON M.accountIDX = N.accountIDX 
		END		
	ELSE 
		BEGIN
			Select 
				C.*, M.*, N.userName, N.userBirthday, N.userNumber
			From (
				Select *
				From dbo.userNameDB with (noLock)
				WHERE userEnCode = @strSrchString
			) As N
			INNER JOIN dbo.userMemberDB M WITH(NOLOCK) 
			ON N.accountIDX = M.accountIDX 
			INNER JOIN TB_LTS_WEEKTIME_PARENT_CHILD_INFO C WITH (NOLOCK)
			ON M.userID = C.PARENT_ID 
			

		END 

	SET NOCOUNT OFF;
END
GO


-- ----------------------------
-- procedure structure for game_costume_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_costume_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_costume_delete]
GO

CREATE PROCEDURE [dbo].[game_costume_delete]
(
	@idx INT,
	@accountIDX INT
)
AS

SET NOCOUNT ON
SET LOCK_TIMEOUT 10000

DELETE FROM dbo.userCostumeDB
 WHERE accountIDX = @accountIDX
   AND idx = @idx
GO


-- ----------------------------
-- procedure structure for web_guild_member_list_is
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_member_list_is]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_member_list_is]
GO

CREATE PROCEDURE [dbo].[web_guild_member_list_is]
(
	@guildIDX int
,	@accountIDX int
)
AS
	SELECT count(*) FROM userGuildInfoDB WITH(NOLOCK) WHERE guildIDX = @guildIDX and accountIDX = @accountIDX and guildJoinType=1
GO


-- ----------------------------
-- procedure structure for game_timegate_set_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_timegate_set_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_timegate_set_data]
GO

CREATE PROCEDURE [dbo].[game_timegate_set_data]

	@ACCOUNT_IDX		INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	DECLARE @GET_TIME DATETIME = GETDATE()

	IF EXISTS (SELECT * FROM dbo.userTimeGateDB WITH (NOLOCK) WHERE AccountIDX = @ACCOUNT_IDX)
	BEGIN
		UPDATE dbo.userTimeGateDB
		   SET GetTime = @GET_TIME
		 WHERE AccountIDX = @ACCOUNT_IDX;
	END
	ELSE
	BEGIN
		INSERT INTO dbo.userTimeGateDB WITH (XLOCK, ROWLOCK) (AccountIDX, GetTime)
		VALUES (@ACCOUNT_IDX, @GET_TIME);
	END

	SELECT @GET_TIME;
	RETURN;
GO


-- ----------------------------
-- procedure structure for web_ranking_myinfo_all_award_expert
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_myinfo_all_award_expert]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_myinfo_all_award_expert]
GO

CREATE PROCEDURE [dbo].[web_ranking_myinfo_all_award_expert]
(
	@accountIDX int
)
As

	SELECT	awardLevel, expert FROM userRankingDB_award WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_relmember_get_bonus_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_relmember_get_bonus_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_relmember_get_bonus_count]
GO

CREATE PROCEDURE [dbo].[web_relmember_get_bonus_count]
(
	@accountIDX int
,	@userEncode varchar(64)
)
AS
	SELECT count(*) FROM LosaGame_log.DBO.log_realmember WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for manage_event_teencash_get_userinfo
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_teencash_get_userinfo]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_teencash_get_userinfo]
GO

CREATE PROCEDURE [dbo].[manage_event_teencash_get_userinfo]
(
	@accountIDX int
)
AS
	SELECT a.userID, b.userName, b.userJumin1, b.userJumin2, a.email, c.zipcode 
	FROM userMemberDB a JOIN userNameDB b ON a.accountIDX=b.accountIDX JOIN userInfoBDB c ON a.accountIDX=c.accountIDX 
	WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for manage_event_recommend_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_recommend_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_recommend_list]
GO

CREATE PROCEDURE [dbo].[manage_event_recommend_list]
AS
--	SELECT TOP 500 b.nickName, a.accountIDX, a.nowpoint, a.todaypoint, a.accpoint FROM event_recommend a JOIN userMemberDB b ON a.accountIDX=b.accountIDX ORDER BY a.accpoint DESC
	SELECT TOP 100 accountIDX, nowpoint, todaypoint, accpoint FROM event_recommend WITH(NOLOCK) ORDER BY todaypoint DESC
GO


-- ----------------------------
-- procedure structure for game_login_serverid_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_login_serverid_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_login_serverid_save]
GO

CREATE PROCEDURE [dbo].[game_login_serverid_save]
(
	@accountIDX int
,	@gameServerID bigint
)
As

	UPDATE userLoginDB SET gameServerID = @gameServerID WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_coupon_get_user_count_temp
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_coupon_get_user_count_temp]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_coupon_get_user_count_temp]
GO

CREATE PROCEDURE [dbo].[web_coupon_get_user_count_temp]
(
	@accountIDX varchar(10)
,	@flag varchar(20)
)
AS
	DECLARE @sql varchar(500)
	SET @sql = 'SELECT count(*) FROM define_serial WHERE accountIDX=' + @accountIDX + ' and couponType in (' + @flag + ')'
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for USP_LTS_ADMIN_WEEKTIME_PARENT_CHILD_DEL
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_ADMIN_WEEKTIME_PARENT_CHILD_DEL]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_ADMIN_WEEKTIME_PARENT_CHILD_DEL]
GO

CREATE PROCEDURE [dbo].[USP_LTS_ADMIN_WEEKTIME_PARENT_CHILD_DEL] 
	-- Add the parameters for the stored procedure here
	@strPUserID		varchar(25),		-- 부모_계정 고유 일련번호
	@strCUserID		varchar(25)		-- 자녀_계정 고유 일련번호	
AS
/*
	Grant Execute on dbo.USP_LTS_WEEKTIME_PARENT_CHILD_DEL to Mirusr_1
*/
BEGIN
	-- 자녀 정보가 있는 경우
	IF EXISTS ( SELECT * 
		      FROM dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO WITH (NOLOCK)
		     WHERE PARENT_ID = @strPUserID
		       AND CHILD_ID = @strCUserID
	)
	BEGIN
		-- 트랜잭션 시작
		BEGIN TRAN

			-- 자녀 등록 정보 삭제
			DELETE 
			  FROM dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO
			 WHERE PARENT_ID = @strPUserID
			   AND CHILD_ID = @strCUserID

			IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
			BEGIN
				ROLLBACK TRAN
				RETURN (-1)
			END
		
			-- 자녀의 게임별 설정 시간 제거
			DELETE 
			  FROM dbo.TB_LTS_WEEKTIME
			 WHERE UserId = @strCUserID

			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRAN
				RETURN (-2)
			END
		COMMIT TRAN
		RETURN (1)
	END 
	ELSE
	BEGIN
		RETURN (-3)
	END
END
GO


-- ----------------------------
-- procedure structure for game_costume_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_costume_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_costume_add]
GO

CREATE PROCEDURE [dbo].[game_costume_add]
(
	@accountIDX INT,
	@itemCode INT,
	@periodType TINYINT,
	@periodDate DATETIME,
	@classType INT
)
AS

SET NOCOUNT ON
SET LOCK_TIMEOUT 10000

DECLARE @itemCodeIDX INT
SET @itemCodeIDX = 0

BEGIN TRAN

	INSERT INTO dbo.userCostumeDB (
		accountIDX, itemCode, mcustom, fcustom, periodType, periodDate, classType, regDate
	)
	VALUES (
		@accountIDX, @itemCode, 0, 0, @periodType, @periodDate, @classType, GETDATE()
	)

	IF (@@ROWCOUNT = 0) OR (@@ERROR <> 0)
	BEGIN
		ROLLBACK TRAN
	END

	SET @itemCodeIDX = @@IDENTITY
	
COMMIT TRAN
	
SELECT @itemCodeIDX AS idx;
GO


-- ----------------------------
-- procedure structure for web_guild_mark_log_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_mark_log_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_mark_log_get_data]
GO

CREATE PROCEDURE [dbo].[web_guild_mark_log_get_data]
(
	@idx int
)
AS
	SELECT guildIDX, accountIDX, havepeso, markprice, nowmark, changemark, regDate FROM Losagame_log.DBO.log_guild_mark
	WHERE idx=@idx and flag=0
GO


-- ----------------------------
-- procedure structure for game_timegate_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_timegate_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_timegate_get_data]
GO

CREATE PROCEDURE [dbo].[game_timegate_get_data]

	@ACCOUNT_IDX		INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	SELECT GetTime
	  FROM dbo.userTimeGateDB WITH (NOLOCK)
	 WHERE AccountIDX = @ACCOUNT_IDX;
GO


-- ----------------------------
-- procedure structure for web_ranking_medal_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_medal_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_medal_count]
GO

CREATE PROCEDURE [dbo].[web_ranking_medal_count]

AS
	SELECT count(*) FROM userRankingDB_medal
GO


-- ----------------------------
-- procedure structure for web_realmember_log
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_log]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_log]
GO

CREATE PROCEDURE [dbo].[web_realmember_log]
(
	@accountIDX int
,	@userID varchar(12)
,	@userName varchar(10)
,	@userEncode varchar(64)
,	@adultType tinyint
)
AS
	INSERT INTO LosaGame_log.DBO.log_realmember (accountIDX, userID, userName, userEncode, adultType, regDate)
	VALUES (@accountIDX, @userID, @userName, @userEncode, @adultType, getdate())
GO


-- ----------------------------
-- procedure structure for manage_event_teencash_get_top5
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_teencash_get_top5]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_teencash_get_top5]
GO

CREATE PROCEDURE [dbo].[manage_event_teencash_get_top5]
(
	@numberth tinyint
)
AS
	SELECT a.accountIDX, a.cnt, isNull(b.nickname, '회원탈퇴') as 'nickname', isNull(b.email, '회원탈퇴') as 'email', isNull(c.tel, '정보없음') as 'tel', isNull(c.mobile, '정보없음') as 'mobile' FROM (
		SELECT TOP 6 accountIDX, count(*) AS 'cnt' FROM event_teencash
		WHERE flag in (1) and numberth=@numberth GROUP BY accountIDX ORDER BY count(*) DESC
	) a LEFT JOIN userMemberDB b ON a.accountIDX=b.accountIDX LEFT JOIN userInfoBDB c ON a.accountIDX=c.accountIDX 
	ORDER BY a.cnt DESC
GO


-- ----------------------------
-- procedure structure for web_event_flushot_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_flushot_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_flushot_count]
GO

CREATE PROCEDURE [dbo].[web_event_flushot_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM event_mask WHERE accountidx=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_login_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_login_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_login_save]
GO

CREATE PROCEDURE [dbo].[game_login_save]
(
	@userID varchar(12)
,	@gameServerID bigint
)
As
	Begin Tran
	SELECT b.userID, a.gameServerID FROM userLoginDB a INNER JOIN userMemberDB b ON a.accountIDX = b.accountIDX WHERE b.userID = @userID
	UPDATE userLoginDB SET gameServerID = @gameServerID, connDate = getdate() WHERE accountIDX = (SELECT accountIDX FROM userMemberDB WHERE userID=@userID)
	Commit Tran
GO


-- ----------------------------
-- procedure structure for web_coupon_get_sn_info_temp
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_coupon_get_sn_info_temp]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_coupon_get_sn_info_temp]
GO

CREATE PROCEDURE [dbo].[web_coupon_get_sn_info_temp]
(
	@sn varchar(12)
,	@flag varchar(20)
)
AS
	DECLARE @sql varchar(500)
	SET @sql = 'SELECT accountIDX, userIP, couponType FROM define_serial WHERE sn=''' + @sn + ''' and couponType in (' + @flag + ')'
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for USP_ADM_BESTFRIEND_SET_DELETE
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_ADM_BESTFRIEND_SET_DELETE]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_ADM_BESTFRIEND_SET_DELETE]
GO

CREATE PROCEDURE [dbo].[USP_ADM_BESTFRIEND_SET_DELETE]

	@TABLE_IDX		INT,
	@ACCOUNT_IDX	INT

AS

SET NOCOUNT ON;
SET LOCK_TIMEOUT 10000;

DECLARE @nReturn INT
SET @nReturn = 0

BEGIN TRAN

	DELETE FROM dbo.userFriendBestDB
	 WHERE accountIDX = @ACCOUNT_IDX
	   AND idx = @TABLE_IDX

	IF (@@ROWCOUNT=0 OR @@ERROR <> 0)
	BEGIN
		ROLLBACK TRAN
		RETURN 1001;
	END

COMMIT TRAN

RETURN @nReturn;
GO


-- ----------------------------
-- procedure structure for game_config_keyboard_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_config_keyboard_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_config_keyboard_save]
GO

CREATE PROCEDURE [dbo].[game_config_keyboard_save]
(
	@accountIDX int
,	@keyvalue varchar(255)
)
AS
	If (Exists(SELECT * FROM userConfigDB WITH(NOLOCK) WHERE accountIDX=@accountIDX))
	BEGIN
		UPDATE userConfigDB SET keyvalue=@keyvalue WHERE accountIDX=@accountIDX
	END
	ELSE
	BEGIN
		INSERT INTO userConfigDB (accountIDX, keyvalue, regDate) VALUES (@accountIDX, @keyvalue, getdate())
	END
GO


-- ----------------------------
-- procedure structure for web_guild_mark_log_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_mark_log_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_mark_log_delete]
GO

CREATE PROCEDURE [dbo].[web_guild_mark_log_delete]
(
	@idx int
,	@userIP varchar(15)
)
AS
	UPDATE Losagame_log.DBO.log_guild_mark SET flag=2, userIP=@userIP WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_ranking_classgroup_list10000
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_classgroup_list10000]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_classgroup_list10000]
GO

CREATE PROCEDURE [dbo].[web_ranking_classgroup_list10000]  
(  
	@pagesize int  
	, @nowpage int  
)  
AS  
	SELECT accountIDX, nickName, userLevel, expert, rank_now, rank_prev, guildIDX, guildName, guildMark  
	FROM userRankingDB_classgroup_top10000 WITH(NOLOCK)  
	WHERE AccountIDX not in (2384074, 438421)
	And idx between ((@nowpage - 1) * @pagesize) + 1 and (@nowpage * @pagesize)
GO


-- ----------------------------
-- procedure structure for web_play_error_log_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_play_error_log_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_play_error_log_add]
GO

CREATE PROCEDURE [dbo].[web_play_error_log_add]
(
	@accountIDX int
,	@userIP varchar(15)
,	@logType tinyint
,	@note varchar(200)
)
As

	INSERT INTO LosaGame_log.DBO.log_play_exec (accountIDX, userIP, logType, note, regDate)
	VALUES (@accountIDX, @userIP, @logType, @note, getdate())
GO


-- ----------------------------
-- procedure structure for manage_event_prize_winner_search_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_prize_winner_search_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_prize_winner_search_list]
GO

CREATE PROCEDURE [dbo].[manage_event_prize_winner_search_list]
(
	@searchType int
,	@sDate datetime
,	@eDate datetime
)
As
	IF (@searchType = 0)
	BEGIN
		SELECT a.accountIDX, a.giftType, a.userIP, a.regDate, isNull(b.nickName, 0) as 'nickName', isNull(b.userID, 0) as 'userID', isNull(b.email, 0) as 'email' From LosaGame_log.DBO.log_event_openbeta a Left join userMemberDB b on a.accountIDX = b.accountIDX 
		Where a.resultType=1 and (a.regDate >= @sDate and a.regDate < @eDate) order by a.idx desc
	END
	ELSE
	BEGIN
		SELECT a.accountIDX, a.giftType, a.userIP, a.regDate, isNull(b.nickName, 0) as 'nickName', isNull(b.userID, 0) as 'userID', isNull(b.email, 0) as 'email' From LosaGame_log.DBO.log_event_openbeta a Left join userMemberDB b on a.accountIDX = b.accountIDX 
		Where a.resultType=1 and a.giftType=@searchType and (a.regDate >= @sDate and a.regDate <= @eDate) order by a.idx desc
	END
GO


-- ----------------------------
-- procedure structure for z_nouse_110415_web_ranking_classgroup_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_110415_web_ranking_classgroup_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_110415_web_ranking_classgroup_list]
GO

CREATE PROCEDURE [dbo].[z_nouse_110415_web_ranking_classgroup_list]
(
	@pagesize varchar(8)
,	@notpage varchar(8)
)
AS

	DECLARE @sql varchar(1000)
	SET @sql = 'SELECT TOP ' + @pagesize + ' b.accountIDX, b.nickName, a.userLevel, a.ranking_2day, a.ranking_1day, a.expert, isnull(d.idx,'''') as ''idx'', isnull(d.guildName,'''') as ''guildName'', isnull(d.guildmark, '''') as ''guildmark'' FROM userRankingDB_classgroup a JOIN userMemberDB b ON a.accountIDX = b.accountIDX LEFT JOIN (SELECT accountIDX, max(guildIDX) AS ''guildIDX'' FROM userGuildInfoDB WHERE guildJoinType=1 GROUP BY accountIDX) c ON a.accountIDX = c.accountIDX LEFT JOIN userGuildDB d ON c.guildIDX = d.idx '
	SET @sql = @sql + 'WHERE a.ranking_1day > 0 and a.accountIDX not in (SELECT TOP ' + @notpage + ' accountIDX FROM userRankingDB_classgroup WHERE ranking_1day > 0 ORDER BY ranking_1day ASC) ORDER BY ranking_1day ASC'

	EXECUTE(@sql)
GO


-- ----------------------------
-- procedure structure for game_login_init_user
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_login_init_user]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_login_init_user]
GO

CREATE PROCEDURE [dbo].[game_login_init_user]
(
	@userID varchar(12)
,	@encodeKey varchar(15)
)
AS
	UPDATE userLoginDB SET gameServerID=0 WHERE accountIDX = (SELECT accountIDX FROM userMemberDB WHERE userID=@userID)
GO


-- ----------------------------
-- procedure structure for web_coupon_get_sn_count_temp
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_coupon_get_sn_count_temp]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_coupon_get_sn_count_temp]
GO

CREATE PROCEDURE [dbo].[web_coupon_get_sn_count_temp]
(
	@sn varchar(12)
,	@flag varchar(20)
)
AS
	DECLARE @sql varchar(500)
	SET @sql = 'SELECT count(*) FROM define_serial WHERE sn=''' + @sn + ''' and couponType in (' + @flag + ')'
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for z_nouse_manage_userinfo_mannerpoint_get_regDate_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_manage_userinfo_mannerpoint_get_regDate_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_manage_userinfo_mannerpoint_get_regDate_list]
GO

CREATE PROCEDURE [dbo].[z_nouse_manage_userinfo_mannerpoint_get_regDate_list]
(
	@accountIDX int
)
AS
	SELECT TOP 25 regDate FROM userMannerpointDB WHERE accountIDX=@accountIDX and resultType=1 ORDER BY regDate DESC
GO


-- ----------------------------
-- procedure structure for game_config_keyboard_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_config_keyboard_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_config_keyboard_get_data]
GO

CREATE PROCEDURE [dbo].[game_config_keyboard_get_data]
(
	@accountIDX int
)
AS
	SELECT keyvalue FROM userConfigDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_guild_hp_visit_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_hp_visit_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_hp_visit_add]
GO

CREATE PROCEDURE [dbo].[web_guild_hp_visit_add]
(
	@guildIDX int
)
AS
	UPDATE userGuildDB SET
		today_vc = today_vc + 1
,		total_vc = total_vc + 1
	WHERE idx = @guildIDX
GO


-- ----------------------------
-- procedure structure for game_league_get_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_get_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_get_info]
GO

CREATE PROCEDURE [dbo].[game_league_get_info]
(
	@leagueIDX int
)
AS

SET NOCOUNT ON

SELECT idx, leagueName, maxRound, bannerA, bannerB, modeType, maxcount, autoType, announce, recruitDate, waitDate
  FROM dbo.userLeagueInfoDB WITH(NOLOCK)
 WHERE leagueIDX=@leagueIDX
GO


-- ----------------------------
-- procedure structure for web_ilikeclick_get_userinfo
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ilikeclick_get_userinfo]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ilikeclick_get_userinfo]
GO

CREATE PROCEDURE [dbo].[web_ilikeclick_get_userinfo]
(
	@accountIDX int
)
AS
	SELECT a.userID, b.userName, b.userBirthday, b.userJumin1, b.userJumin2, b.userNumber, a.email, c.zipcode 
	FROM userMemberDB a LEFT JOIN userNameDB b ON a.accountIDX=b.accountIDX LEFT JOIN userInfoBDB c ON a.accountIDX=c.accountIDX 
	WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_realmember_namecheck_add_log
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_namecheck_add_log]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_namecheck_add_log]
GO

CREATE PROCEDURE [dbo].[web_realmember_namecheck_add_log]
(
	@accountIDX int
,	@userName varchar(10)
,	@userBirthday char(6)
,	@userJumin1 char(12)
,	@userJumin2 char(14)
,	@userEnCode varchar(64)
,	@userGender tinyint
,	@userNumber tinyint
,	@userIP varchar(15)
,	@returnValue tinyint
,	@flag tinyint
)
As

	INSERT INTO LosaGame_log.DBO.log_namecheck (accountIDX, userName, userBirthday, userJumin1, userJumin2, userEnCode, userGender, userNumber, userIP, returnValue, flag, regDate)
	VALUES (@accountIDX, @userName, @userBirthday, @userJumin1, @userJumin2, @userEnCode, @userGender, @userNumber, @userIP, @returnValue, @flag, getdate())
GO


-- ----------------------------
-- procedure structure for game_region_season_end_data_init
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_region_season_end_data_init]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_region_season_end_data_init]
GO

CREATE PROCEDURE [dbo].[game_region_season_end_data_init]

AS

UPDATE userGameDB SET renspoint=0 WHERE renspoint > 0
UPDATE userGameDB SET regionType=0 WHERE regionType > 0

UPDATE userRecordBattleDB SET type4_win=0 WHERE type4_win > 0
UPDATE userRecordBattleDB SET type4_lose=0 WHERE type4_lose > 0
UPDATE userRecordBattleDB SET type4_kill=0 WHERE type4_kill > 0
UPDATE userRecordBattleDB SET type4_death=0 WHERE type4_death > 0

UPDATE userGameDB
SET userHerocEXP = CONVERT(int, userHerocEXP * 0.9) + userHerosEXP
,   userHerosEXP=-1
WHERE userHerosEXP > 0
GO


-- ----------------------------
-- procedure structure for z_nouse_110415_web_guild_hp_member_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_110415_web_guild_hp_member_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_110415_web_guild_hp_member_list]
GO

CREATE PROCEDURE [dbo].[z_nouse_110415_web_guild_hp_member_list]
(
	@guildIDX varchar(10)
,	@pagesize varchar(8)
,	@notpage varchar(8)
)
AS
	DECLARE @sql varchar(1000)

	SET @sql = 'SELECT TOP ' + @pagesize + ' b.userLevel, d.accountIDX, d.nickName, b.connDate, c.gameServerID, ISNULL(e.class, 0) as ''userRanking'' '
	SET @sql = @sql + 'FROM userGuildInfoDB a INNER JOIN userGameDB b ON a.accountIDX = b.accountIDX INNER JOIN userLoginDB c ON a.accountIDX = c.accountIDX INNER JOIN userMemberDB d ON a.accountIDX = d.accountIDX LEFT JOIN userRankingDB e ON a.accountIDX = e.accountIDX '
	SET @sql = @sql + 'WHERE a.guildIDX=' + @guildIDX + ' and a.guildJoinType=1 and a.idx not in (SELECT TOP ' + @notpage + ' a.idx FROM userGuildInfoDB a INNER JOIN userGameDB b ON a.accountIDX = b.accountIDX INNER JOIN userLoginDB c ON a.accountIDX = c.accountIDX INNER JOIN userMemberDB d ON a.accountIDX = d.accountIDX LEFT JOIN userRankingDB e ON a.accountIDX = e.accountIDX WHERE a.guildIDX=' + @guildIDX + ' and a.guildJoinType=1 ORDER BY b.userLevel DESC) '
	SET @sql = @sql + 'ORDER BY b.userLevel DESC'

	EXECUTE(@sql)
GO


-- ----------------------------
-- procedure structure for game_login_init_server
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_login_init_server]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_login_init_server]
GO

CREATE PROCEDURE [dbo].[game_login_init_server]
(
	@gameServerID bigint
)
As
	UPDATE userLoginDB SET gameServerID = 0 WHERE gameServerID = @gameServerID
GO


-- ----------------------------
-- procedure structure for usp_RegDate_get_init
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_RegDate_get_init]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[usp_RegDate_get_init]
GO

CREATE PROCEDURE [dbo].[usp_RegDate_get_init]

	@REG_DATE		DATETIME,		-- GETDATE()
	@SET_HOUR		TINYINT,		-- 초기화할 시간 i.e.) 2015-01-20 05:00:00
	@INIT_DATE		DATETIME		OUTPUT
	
AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	10000

	DECLARE @nReturn			INT	

	DECLARE @CURRENT_DATE		DATETIME
	DECLARE @PRE_DATETIME		DATETIME
	DECLARE @POST_DATETIME		DATETIME


	SET @CURRENT_DATE = CAST(CONVERT(CHAR(10),@REG_DATE, 121) as DATETIME);
	SET @PRE_DATETIME = DATEADD(hh, @SET_HOUR, @CURRENT_DATE);
	SET @POST_DATETIME = DATEADD(hh, @SET_HOUR+24, @PRE_DATETIME);

	
	IF @REG_DATE>=@PRE_DATETIME and @REG_DATE<@POST_DATETIME
	BEGIN 
		SET @INIT_DATE = @CURRENT_DATE;
	END 
	ELSE
	BEGIN
		SET @INIT_DATE = DATEADD(dd, 1, @CURRENT_DATE);
	END

	RETURN 0;
GO


-- ----------------------------
-- function structure for z_nouse_game_mannerpoint_qualification_check
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_game_mannerpoint_qualification_check]') AND type IN ('FN', 'FS', 'FT', 'IF', 'TF'))
	DROP FUNCTION[dbo].[z_nouse_game_mannerpoint_qualification_check]
GO

CREATE FUNCTION [dbo].[z_nouse_game_mannerpoint_qualification_check]
(
	@reportIDX varchar(12)
,	@receiveIDX varchar(12)
,	@reportIP varchar(15)
,	@nowDate datetime
)

RETURNS int

As

	BEGIN

	DECLARE @errcount int, @errval int, @userLevel int, @userSP float, @userMP float, @n float, @m float, @k float
	DECLARE @limitMP int, @limitLevel int, @limitLM int

	SET @errcount = 0
	SET @errval = 0

	SET @limitMP = DBO.DEFINE_MP_LIMIT_GIVE_MP_PERCENT()
	SET @limitLevel = DBO.DEFINE_MP_LIMIT_GIVE_LEVEL()
	SET @limitLM = DBO.DEFINE_MP_LIMIT_GIVE_LEVEL_MAX()

	SET @errcount = (SELECT count(*) FROM LosaGame_log.DBO.log_mannerpoint WHERE reportIDX=@reportIDX and receiveIDX=@receiveIDX and regDate > DATEADD(ss, -30, @nowDate))
	IF (@errcount > 0)
	BEGIN
		SET @errval = 2
	END

	SET @errcount = (SELECT count(*) FROM LosaGame_log.DBO.log_mannerpoint WHERE receiveIDX=@receiveIDX and reportpubIP=@reportIP and regDate > DATEADD(ss, -30, @nowDate))
	IF (@errcount > 0)
	BEGIN
		SET @errval = 3
	END

	SET @errcount = (SELECT count(*) FROM LosaGame_log.DBO.log_mannerpoint WHERE reportIDX=@reportIDX and regDate > DATEADD(ss, -30, @nowDate))
	IF (@errcount > 0)
	BEGIN
		SET @errval = 4
	END

	SET @userSP = ISNULL((SELECT ISNULL(SUM(CASE WHEN point < 0 THEN -point ELSE 0 END), 0) FROM (SELECT TOP 25 point FROM userMannerpointDB WHERE accountIDX=@reportIDX ORDER BY regDate DESC) a), 0)
	SET @userLevel = ISNULL((SELECT userLevel FROM userGameDB WHERE accountIDX = @reportIDX), 0)

	IF (@userLevel < @limitLevel)
	begin
		SET @errcount = @errcount + 1
	end

	IF (@userLevel > @limitLM)
	begin
		SET @userLevel = @limitLM
	end

	-- 명성 계산
	SET @k = (@userLevel * 1) + 20

	IF (@k > 50)
	BEGIN
		SET @k = 50
	END

	SET @n = @k - @userSP
	SET @m = @k


	IF (@n < 0)
	BEGIN
		SET @n = 0
	END

	IF (@m = 0)
	BEGIN
		SET @userMP = 0
	END
	ELSE
	BEGIN
		SET @userMP = Round((@n / @m) * 100, 0)
	END

	IF (@userMP < @limitMP)
	BEGIN
		SET @errval = 5
	END

	RETURN @errval

	END
GO


-- ----------------------------
-- procedure structure for game_coin_set_updatedate
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_coin_set_updatedate]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_coin_set_updatedate]
GO

CREATE PROCEDURE [dbo].[game_coin_set_updatedate]

	@ACCOUNT_IDX		INT,		-- 유저인덱스
	@COIN_TYPE			TINYINT		-- 1: 래이드 코인

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;
	
	DECLARE @NOW_DATE DATETIME
	SET @NOW_DATE = GETDATE()

	BEGIN TRAN		
		
		UPDATE dbo.userCoinDB WITH (XLOCK, ROWLOCK)
		   SET UpdateDate = @NOW_DATE
		 WHERE AccountIDX = @ACCOUNT_IDX
		   AND CoinType = @COIN_TYPE;

		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
			RETURN;
		END

	COMMIT TRAN
	
	SELECT @NOW_DATE;

	RETURN;
GO


-- ----------------------------
-- procedure structure for web_friend_join_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_join_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_join_list]
GO

CREATE PROCEDURE [dbo].[web_friend_join_list]
(
	@accountIDX int
)
AS
	SELECT TOP 10 a.idx, b.userLevel, d.accountIDX, d.nickName, b.connDate, c.gameServerID, ISNULL(e.class, 0) as 'userRanking' 
	FROM userFriendDB a WITH(NOLOCK) INNER JOIN userGameDB b WITH(NOLOCK) ON a.friendAccIDX = b.accountIDX INNER JOIN userLoginDB c WITH(NOLOCK) ON a.friendAccIDX = c.accountIDX INNER JOIN userMemberDB d WITH(NOLOCK) ON a.friendAccIDX = d.accountIDX LEFT JOIN userRankingDB e WITH(NOLOCK) ON a.friendAccIDX = e.accountIDX 
	WHERE a.userAccIDX=@accountIDX and a.flag=0 and friendAccIDX not in (SELECT accountIDX FROM userMemberDB WHERE userType < 10) ORDER BY a.idx ASC
GO


-- ----------------------------
-- procedure structure for game_league_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_delete]
GO

CREATE PROCEDURE [dbo].[game_league_delete]
(
	@leagueIDX int
)
AS

SET NOCOUNT ON

DECLARE @infoIDX int
SET @infoIDX = ISNULL((SELECT idx FROM dbo.userLeagueInfoDB WITH(NOLOCK) WHERE leagueIDX=@leagueIDX), 0)

DELETE FROM dbo.userLeagueTeamMemberDB WHERE leagueIDX=@leagueIDX
DELETE FROM dbo.userLeagueTeamDB WHERE leagueIDX=@leagueIDX
DELETE FROM dbo.userLeagueInfoDB WHERE leagueIDX=@leagueIDX
DELETE FROM dbo.userLeagueAuthDB WHERE leagueIDX=@leagueIDX
DELETE FROM dbo.userLeagueRoundDB WHERE infoIDX=@infoIDX
DELETE FROM dbo.userLeagueListDB WHERE idx=@leagueIDX
GO


-- ----------------------------
-- procedure structure for web_play_enkey_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_play_enkey_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_play_enkey_save]
GO

CREATE PROCEDURE [dbo].[web_play_enkey_save]
(
	@accountIDX int
,	@encodeKey char(15)
,	@userIP varchar(15)
)
As
	UPDATE userLoginDB SET
		encodeKey = @encodeKey
,		userIP = @userIP
,		connDate = getdate()
	WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_mgame_event_get_logdb_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_mgame_event_get_logdb_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_mgame_event_get_logdb_count]
GO

CREATE PROCEDURE [dbo].[web_mgame_event_get_logdb_count]
(
	@accountIDX int
,	@eventType int
)
AS
	SELECT count(*) FROM LosaGame_log.DBO.log_mgame_cash_event WHERE accountIDX=@accountIDX and eventType=@eventType and flag = '0'
GO


-- ----------------------------
-- procedure structure for game_quest_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_quest_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_quest_add]
GO

CREATE PROCEDURE [dbo].[game_quest_add]
(
	@accountIDX int
,	@quest1_type int
,	@quest1_value1 int
,	@quest1_value2 int
,	@quest1_time int
,	@quest2_type int
,	@quest2_value1 int
,	@quest2_value2 int
,	@quest2_time int
,	@quest3_type int
,	@quest3_value1 int
,	@quest3_value2 int
,	@quest3_time int
,	@quest4_type int
,	@quest4_value1 int
,	@quest4_value2 int
,	@quest4_time int
,	@quest5_type int
,	@quest5_value1 int
,	@quest5_value2 int
,	@quest5_time int
,	@quest6_type int
,	@quest6_value1 int
,	@quest6_value2 int
,	@quest6_time int
,	@quest7_type int
,	@quest7_value1 int
,	@quest7_value2 int
,	@quest7_time int
,	@quest8_type int
,	@quest8_value1 int
,	@quest8_value2 int
,	@quest8_time int
,	@quest9_type int
,	@quest9_value1 int
,	@quest9_value2 int
,	@quest9_time int
,	@quest10_type int
,	@quest10_value1 int
,	@quest10_value2 int
,	@quest10_time int
,	@quest11_type int
,	@quest11_value1 int
,	@quest11_value2 int
,	@quest11_time int
,	@quest12_type int
,	@quest12_value1 int
,	@quest12_value2 int
,	@quest12_time int
,	@quest13_type int
,	@quest13_value1 int
,	@quest13_value2 int
,	@quest13_time int
,	@quest14_type int
,	@quest14_value1 int
,	@quest14_value2 int
,	@quest14_time int
,	@quest15_type int
,	@quest15_value1 int
,	@quest15_value2 int
,	@quest15_time int
,	@quest16_type int
,	@quest16_value1 int
,	@quest16_value2 int
,	@quest16_time int
,	@quest17_type int
,	@quest17_value1 int
,	@quest17_value2 int
,	@quest17_time int
,	@quest18_type int
,	@quest18_value1 int
,	@quest18_value2 int
,	@quest18_time int
,	@quest19_type int
,	@quest19_value1 int
,	@quest19_value2 int
,	@quest19_time int
,	@quest20_type int
,	@quest20_value1 int
,	@quest20_value2 int
,	@quest20_time int
)
AS
	INSERT INTO userQuestDB 
	(accountIDX, 
	quest1_type, quest1_value1, quest1_value2, quest1_time, quest2_type, quest2_value1, quest2_value2, quest2_time, quest3_type, quest3_value1, quest3_value2, quest3_time, 
	quest4_type, quest4_value1, quest4_value2, quest4_time, quest5_type, quest5_value1, quest5_value2, quest5_time, quest6_type, quest6_value1, quest6_value2, quest6_time, 
	quest7_type, quest7_value1, quest7_value2, quest7_time, quest8_type, quest8_value1, quest8_value2, quest8_time, quest9_type, quest9_value1, quest9_value2, quest9_time, 
	quest10_type, quest10_value1, quest10_value2, quest10_time, quest11_type, quest11_value1, quest11_value2, quest11_time, quest12_type, quest12_value1, quest12_value2, quest12_time, 
	quest13_type, quest13_value1, quest13_value2, quest13_time, quest14_type, quest14_value1, quest14_value2, quest14_time, quest15_type, quest15_value1, quest15_value2, quest15_time, 
	quest16_type, quest16_value1, quest16_value2, quest16_time, quest17_type, quest17_value1, quest17_value2, quest17_time, quest18_type, quest18_value1, quest18_value2, quest18_time,
	quest19_type, quest19_value1, quest19_value2, quest19_time, quest20_type, quest20_value1, quest20_value2, quest20_time) 
	VALUES
	(@accountIDX, 
	 @quest1_type, @quest1_value1, @quest1_value2, @quest1_time, @quest2_type, @quest2_value1, @quest2_value2, @quest2_time, @quest3_type, @quest3_value1, @quest3_value2, @quest3_time, 
	 @quest4_type, @quest4_value1, @quest4_value2, @quest4_time, @quest5_type, @quest5_value1, @quest5_value2, @quest5_time, @quest6_type, @quest6_value1, @quest6_value2, @quest6_time, 
	 @quest7_type, @quest7_value1, @quest7_value2, @quest7_time, @quest8_type, @quest8_value1, @quest8_value2, @quest8_time, @quest9_type, @quest9_value1, @quest9_value2, @quest9_time, 
	 @quest10_type, @quest10_value1, @quest10_value2, @quest10_time, @quest11_type, @quest11_value1, @quest11_value2, @quest11_time, @quest12_type, @quest12_value1, @quest12_value2, @quest12_time, 
	 @quest13_type, @quest13_value1, @quest13_value2, @quest13_time, @quest14_type, @quest14_value1, @quest14_value2, @quest14_time, @quest15_type, @quest15_value1, @quest15_value2, @quest15_time, 
	 @quest16_type, @quest16_value1, @quest16_value2, @quest16_time, @quest17_type, @quest17_value1, @quest17_value2, @quest17_time, @quest18_type, @quest18_value1, @quest18_value2, @quest18_time,
	 @quest19_type, @quest19_value1, @quest19_value2, @quest19_time, @quest20_type, @quest20_value1, @quest20_value2, @quest20_time)
GO


-- ----------------------------
-- procedure structure for z_nouse_110414_game_trade_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_110414_game_trade_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_110414_game_trade_get_list]
GO

CREATE PROCEDURE [dbo].[z_nouse_110414_game_trade_get_list]
(
	@topn varchar(8)
,	@idx varchar(12)
)
AS
	DECLARE @sql varchar(1000)
	SET @sql = ''
	SET @sql = @sql + ' SELECT TOP ' + @topn + ' a.idx, a.accountIDX, b.nickName, a.itemType, a.value1, a.value2, a.price, a.mcustom, a.fcustom, a.periodDate, a.regDate '
	SET @sql = @sql + ' FROM userTradeDB a JOIN userMemberDB b on a.accountIDX=b.accountIDX WHERE a.idx < ' + @idx + ' ORDER BY a.idx DESC'

	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for game_login_get_data_by_dual_login
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_login_get_data_by_dual_login]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_login_get_data_by_dual_login]
GO

CREATE PROCEDURE [dbo].[game_login_get_data_by_dual_login]
(    
 @userID varchar(12)    
)    
As   
 SELECT b.userID, a.encodeKey, a.gameServerID, connDate -- , a.UserIP 
 FROM userLoginDB a WITH(NOLOCK) INNER JOIN userMemberDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX 
 WHERE b.userID=@userID
GO


-- ----------------------------
-- procedure structure for manage_event_teencash_delete_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_teencash_delete_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_teencash_delete_count]
GO

CREATE PROCEDURE [dbo].[manage_event_teencash_delete_count]
(
	@selectIDX varchar(140)
)
AS
	DECLARE @sql varchar(500)
	SET @sql = 'SELECT count(*) FROM event_teencash WHERE idx in (' + @selectIDX + ') and flag <> 0'
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for web_event_chuchun_update
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_chuchun_update]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_chuchun_update]
GO

CREATE PROCEDURE [dbo].[web_event_chuchun_update] 
	-- Add the parameters for the stored procedure here
	@intAccountIDX		int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    -- Insert statements for procedure here
	IF Exists(Select * From dbo.event_chuchun with(noLock)
				Where friendIDX = @intAccountIDX
				And itemFlag = 1
	)
		Begin
			return 30		-- 이미 지급
		End
	Else
		Begin
--		Begin Tran
			-- 아이템 지급 확인 업데이트
			update event_chuchun set itemFlag = 1 Where friendIDX = @intAccountIDX And flag = 1

			IF @@Rowcount > 0 
				Begin
					Declare @strLimiteDate varchar(10)
					Set @strLimiteDate = convert(char(10), dateadd(d,7,getdate()),120)
					-- 아이템 지급(구미호 영웅 2시간 이용권 : 1, 88, 7200)
					
					Exec web_event_present_add @intAccountIDX, 1, 88, 7200, 0, 0, 3, @strLimiteDate

					IF @@Error = 0
						Begin
							--Commit Tran
							return 31		-- 지급 완료
						End
					Else
						Begin
							--Rollback Tran
							update event_chuchun set itemFlag = 0 Where friendIDX = @intAccountIDX And flag = 1
							return 39		-- 처리중 에러
						End
				End
			Else
				Begin
					Rollback Tran
					Return 32				-- 아이템 지급 대상자가 아님
				End
		End


END
GO


-- ----------------------------
-- procedure structure for game_coin_set_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_coin_set_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_coin_set_add]
GO

CREATE PROCEDURE [dbo].[game_coin_set_add]

	@ACCOUNT_IDX	INT,		-- 유저인덱스
	@COIN_TYPE		TINYINT		-- 1: 래이드 코인

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	DECLARE @NOW_DATE DATETIME
	SET @NOW_DATE = GETDATE()

	BEGIN TRAN

		INSERT INTO dbo.userCoinDB WITH (XLOCK, ROWLOCK) (AccountIDX, UpdateDate, CoinType, RegDate)
		VALUES (@ACCOUNT_IDX, @NOW_DATE, @COIN_TYPE, @NOW_DATE);

		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
			RETURN;
		END

	COMMIT TRAN
	
	SELECT @NOW_DATE;

	RETURN;
GO


-- ----------------------------
-- procedure structure for web_friend_join_in_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_join_in_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_join_in_count]
GO

CREATE PROCEDURE [dbo].[web_friend_join_in_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM userFriendDB WITH(NOLOCK) WHERE userAccIDX=@accountIDX and flag=0
GO


-- ----------------------------
-- procedure structure for game_league_cheer_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_cheer_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_cheer_list]
GO

CREATE PROCEDURE [dbo].[game_league_cheer_list]
(
	@accountIDX int
,	@topN int
,	@idx int
)
AS

SET NOCOUNT ON

SELECT TOP (@topN) leagueIDX, teamIDX, idx
  FROM dbo.userLeagueCheerDB WITH(NOLOCK)
 WHERE idx < @idx
   AND accountIDX=@accountIDX
 ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_play_enkey_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_play_enkey_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_play_enkey_get_data]
GO

CREATE PROCEDURE [dbo].[web_play_enkey_get_data]
(
	@accountIDX int
)
As
	SELECT encodeKey, gameServerID, userIP, connDate FROM userLoginDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_cash_event_log_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_cash_event_log_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_cash_event_log_add]
GO

CREATE PROCEDURE [dbo].[web_cash_event_log_add]
(
	@accountIDX int
,	@eventType int
,	@cash int
,	@flag varchar(50)
)
AS

	INSERT INTO LosaGame_log.DBO.log_mgame_cash_event (accountIDX, eventType, cash, flag, regDate)
	VALUES (@accountIDX, @eventType, @cash, @flag, getdate())
GO


-- ----------------------------
-- procedure structure for manage_define_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_define_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_define_save]
GO

CREATE PROCEDURE [dbo].[manage_define_save]
(
	@code int
,	@objName varchar(32)
,	@itemName varchar(32)
)
AS
	INSERT INTO define_manage (objName, code, itemName) 
	VALUES (@objName, @code, @itemName)
GO


-- ----------------------------
-- procedure structure for z_nouse_110414_game_ranking_hero_topN
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_110414_game_ranking_hero_topN]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_110414_game_ranking_hero_topN]
GO

CREATE PROCEDURE [dbo].[z_nouse_110414_game_ranking_hero_topN]
(
	@rank1 varchar(4)
,	@rank2 varchar(4)
)
AS
	DECLARE @SQL varchar(1000)
	SET @SQL = 'SELECT a.accountIDX, b.userLevel, c.nickName, a.title, d.type3_win, d.type3_lose, b.regionType, b.userHerocEXP + b.userHerosEXP AS ''userHeroEXP'' '
	SET @SQL = @SQL + 'FROM userRankingDB_hero a WITH(NOLOCK) '
	SET @SQL = @SQL + 'LEFT JOIN userGameDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX '
	SET @SQL = @SQL + 'LEFT JOIN userMemberDB c WITH(NOLOCK) ON a.accountIDX = c.accountIDX '
	SET @SQL = @SQL + 'LEFT JOIN userRecordBattleDB d WITH(NOLOCK) ON a.accountIDX = d.accountIDX '
	SET @SQL = @SQL + 'WHERE a.daily >= ' + @rank1 + ' and a.daily <= ' + @rank2 + ' ORDER BY a.daily ASC'

	EXECUTE (@SQL)
GO


-- ----------------------------
-- procedure structure for game_login_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_login_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_login_get_data]
GO

CREATE PROCEDURE [dbo].[game_login_get_data]    
(    
 @userID varchar(12)    
)    
As   
 SELECT b.userID, a.encodeKey, a.gameServerID, connDate, a.UserIP FROM userLoginDB a WITH(NOLOCK) INNER JOIN userMemberDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX WHERE b.userID=@userID
GO


-- ----------------------------
-- procedure structure for manage_event_teencash_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_teencash_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_teencash_delete]
GO

CREATE PROCEDURE [dbo].[manage_event_teencash_delete]
(
	@selectIDX varchar(140)
)
AS
	DECLARE @sql varchar(500)
	SET @sql = 'UPDATE event_teencash SET flag=-1 WHERE idx in (' + @selectIDX + ')'
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for game_present_set_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_present_set_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_present_set_add]
GO

CREATE PROCEDURE [dbo].[game_present_set_add]

	@FROM_USER			VARCHAR(20),
	@TO_USER			VARCHAR(20),
	@USER_ID_TYPE		TINYINT,  -- 1:PublicID, 2:PrivateID
	@PRESENT_TYPE		SMALLINT,
	@VALUE_1			INT,
	@VALUE_2			INT,
	@VALUE_3			INT,
	@VALUE_4			INT,
	@MSG_TYPE			SMALLINT,
	@LIMIT_DATE			DATETIME,
	@ALAM_FLAG			SMALLINT

AS 

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 15000

	DECLARE @nReturn			INT
	DECLARE @FROM_ACCOUNT_IDX	INT
	DECLARE @TO_ACCOUNT_IDX		INT
	DECLARE @GET_DATE			DATETIME

	SET @GET_DATE = GETDATE()
	SET @FROM_ACCOUNT_IDX=0
	SET @TO_ACCOUNT_IDX=0

	-- 보내는 사람 AccountIDX
	EXEC @nReturn = dbo.usp_Member_get_user_accountIDX @FROM_USER, @USER_ID_TYPE, @FROM_ACCOUNT_IDX OUTPUT
	IF (@nReturn<>0) or (@FROM_ACCOUNT_IDX IS NULL)
	BEGIN
		SELECT -1;
		RETURN;
	END

	-- 받는 사람 AccountIDX
	EXEC @nReturn = dbo.usp_Member_get_user_accountIDX @TO_USER, @USER_ID_TYPE, @TO_ACCOUNT_IDX OUTPUT
	IF (@nReturn<>0) or (@TO_ACCOUNT_IDX IS NULL)
	BEGIN
		SELECT -2;
		RETURN;
	END

	BEGIN TRAN

		INSERT dbo.userPresentDB WITH (XLOCK, ROWLOCK) (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate)
		VALUES (@FROM_ACCOUNT_IDX, @TO_ACCOUNT_IDX, @PRESENT_TYPE, @VALUE_1, @VALUE_2, @VALUE_3, @VALUE_4, @MSG_TYPE, @ALAM_FLAG, @LIMIT_DATE, @GET_DATE)

		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN;
			SELECT -3;
			RETURN;
		END 

	COMMIT TRAN

	SELECT @TO_ACCOUNT_IDX AS recvIndex;
	RETURN;
GO


-- ----------------------------
-- procedure structure for game_coin_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_coin_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_coin_get_data]
GO

CREATE PROCEDURE [dbo].[game_coin_get_data]

	@ACCOUNT_IDX	INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	SELECT UpdateDate, CoinType
	  FROM dbo.userCoinDB WITH (NOLOCK)
	 WHERE AccountIDX = @ACCOUNT_IDX;
GO


-- ----------------------------
-- procedure structure for web_friend_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_delete]
GO

CREATE PROCEDURE [dbo].[web_friend_delete]
(
	@accountIDX int
,	@friendIDX int
)
AS

	SET XACT_ABORT ON

	BEGIN TRAN

	DELETE FROM userFriendDB WHERE userAccIDX=@accountIDX and friendAccIDX=@friendIDX
	DELETE FROM userFriendDB WHERE friendAccIDX=@accountIDX and userAccIDX=@friendIDX

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_league_cheer_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_cheer_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_cheer_add]
GO

CREATE PROCEDURE [dbo].[game_league_cheer_add]
(
	@accountIDX int
,	@leagueIDX int
,	@teamIDX int
)
AS

SET NOCOUNT ON

DECLARE @cnt INT
DECLARE @errcount INT

SET @cnt = 0
SET @errcount = 0

SET @cnt = (
	SELECT COUNT(*)
	FROM dbo.userLeagueCheerDB WITH(NOLOCK)
	WHERE accountIDX=@accountIDX
	  AND leagueIDX=@leagueIDX
)

IF (@cnt > 0)
BEGIN
	SET @errcount = 2
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @cnt = (
	SELECT COUNT(*)
	  FROM dbo.userLeagueTeamDB WITH(NOLOCK)
	 WHERE idx=@teamIDX
	   AND leagueIDX=@leagueIDX
)

IF (@cnt = 0)
BEGIN
	SET @errcount = 3
	SELECT @errcount AS 'returnVal'
	RETURN
END

IF (@errcount = 0)
BEGIN
	INSERT INTO dbo.userLeagueCheerDB (accountIDX, leagueIDX, teamIDX, regDate)
	VALUES (@accountIDX, @leagueIDX, @teamIDX, GETDATE())

	UPDATE dbo.userLeagueTeamDB
	   SET cheerPoint = cheerPoint + 1
	 WHERE idx=@teamIDX

	SET @errcount = 1
	SELECT @errcount AS 'returnVal'
END
GO


-- ----------------------------
-- procedure structure for web_namecheck_jumin_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_namecheck_jumin_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_namecheck_jumin_count]
GO

CREATE PROCEDURE [dbo].[web_namecheck_jumin_count]
(
	@accountIDX varchar(12)
)
As
	SELECT COUNT(*) FROM userNameDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- function structure for DEFINE_REGION_LIMIT_RENSPOINT
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[DEFINE_REGION_LIMIT_RENSPOINT]') AND type IN ('FN', 'FS', 'FT', 'IF', 'TF'))
	DROP FUNCTION[dbo].[DEFINE_REGION_LIMIT_RENSPOINT]
GO

CREATE FUNCTION [dbo].[DEFINE_REGION_LIMIT_RENSPOINT]
(
)
RETURNS int
As
	BEGIN

	DECLARE @returnVal int
	SET @returnVal = 10

	RETURN @returnVal

	END
GO


-- ----------------------------
-- procedure structure for manage_define_quest_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_define_quest_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_define_quest_list]
GO

CREATE PROCEDURE [dbo].[manage_define_quest_list]
AS
	SELECT questIDX, title FROM define_quest
GO


-- ----------------------------
-- function structure for z_nouse_DEFINE_MP_LIMIT_GIVE_MP_PERCENT
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_DEFINE_MP_LIMIT_GIVE_MP_PERCENT]') AND type IN ('FN', 'FS', 'FT', 'IF', 'TF'))
	DROP FUNCTION[dbo].[z_nouse_DEFINE_MP_LIMIT_GIVE_MP_PERCENT]
GO

CREATE FUNCTION [dbo].[z_nouse_DEFINE_MP_LIMIT_GIVE_MP_PERCENT]
(
)
RETURNS int
As
	BEGIN

	DECLARE @returnVal int
	SET @returnVal = 90

	RETURN @returnVal

	END
GO


-- ----------------------------
-- procedure structure for game_league_team_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_list]
GO

CREATE PROCEDURE [dbo].[game_league_team_list]
(
	@topN int
,	@idx int
)
AS

SET NOCOUNT ON

SELECT TOP (@topN) idx, leagueIDX, teamName, leaderIDX, leaguePosition,
	   maxcount, cheerPoint, currentRound, factionPoint, factionType, leagueStartPosition
  FROM dbo.userLeagueTeamDB WITH(NOLOCK)
 WHERE idx < @idx
 ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for manage_user_ranking_award_top3
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_user_ranking_award_top3]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_user_ranking_award_top3]
GO

CREATE PROCEDURE [dbo].[manage_user_ranking_award_top3]
(
	@awardType varchar(8)
)
As
	DECLARE @strSQL varchar(500)
	SET @strSQL = 'SELECT TOP 3 b.accountIDX, b.nickName FROM userRankingDB_award a JOIN userMemberDB b ON a.accountIDX = b.accountIDX WHERE a.' + @awardType + ' > 0 ORDER BY a.' + @awardType + ' ASC'
	EXEC (@strSQL)
GO


-- ----------------------------
-- procedure structure for game_guildHQ_set_status
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guildHQ_set_status]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guildHQ_set_status]
GO

CREATE PROCEDURE [dbo].[game_guildHQ_set_status]
	
	@GUILD_IDX		INT,
	@ACCOUNT_IDX	INT,
	@ITEM_SERIAL	BIGINT,
	@ITEM_CODE		INT,	
	@ITEM_STATUS	TINYINT		-- 0:인벤(해제), 2: 삭제

AS 

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	15000

	DECLARE @nReturn	INT = 0;
	
	BEGIN TRAN		
		
		UPDATE dbo.userGuildHQDB WITH (XLOCK, ROWLOCK) SET ItemXZ=0, ItemY=0, ItemRotate=0, ItemStatus=@ITEM_STATUS 
		WHERE ItemSerial=@ITEM_SERIAL

		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
			RETURN;
		END
		
		--  변경된 데이터에 대한 Version관리
		EXEC @nReturn = dbo.game_guildHQ_ver_set_status @GUILD_IDX
		IF @nReturn<>0
		BEGIN
			ROLLBACK TRAN
			RETURN;
		END 	 

	COMMIT TRAN


	-- 설치로그
	-- EXEC LINKED_CONNECTION_BAK.LosaLogDataC.dbo.log_guildHQ_fit_set_insert @GUILD_IDX, @ACCOUNT_IDX, @ITEM_SERIAL, @ITEM_CODE, 0

	RETURN;
GO


-- ----------------------------
-- procedure structure for game_clover_info_update
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_clover_info_update]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_clover_info_update]
GO

CREATE PROCEDURE [dbo].[game_clover_info_update]
(
	@accountIDX int
,	@CloverCount int
,	@UpdateTime int
,	@RemainTime	smallint
)
AS

SET NOCOUNT ON

UPDATE dbo.userCloverDB
   SET CloverCnt = @CloverCount,
	   LastChargeDate = @UpdateTime,
	   RemainTime = @RemainTime,
	   regDate = GETDATE()
 WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_friend_count_extend
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_count_extend]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_count_extend]
GO

CREATE PROCEDURE [dbo].[web_friend_count_extend]
(
	@accountIDX int
)
AS
	SELECT 
		isNull(sum(case item1_type when 4000002 then item1_value1 else 0 end), 0)
	+	isNull(sum(case item2_type when 4000002 then item2_value1 else 0 end), 0)
	+	isNull(sum(case item3_type when 4000002 then item3_value1 else 0 end), 0)
	+	isNull(sum(case item4_type when 4000002 then item4_value1 else 0 end), 0)
	+	isNull(sum(case item5_type when 4000002 then item5_value1 else 0 end), 0)
	+	isNull(sum(case item6_type when 4000002 then item6_value1 else 0 end), 0)
	+	isNull(sum(case item7_type when 4000002 then item7_value1 else 0 end), 0)
	+	isNull(sum(case item8_type when 4000002 then item8_value1 else 0 end), 0)
	+	isNull(sum(case item9_type when 4000002 then item9_value1 else 0 end), 0)
	+	isNull(sum(case item10_type when 4000002 then item10_value1 else 0 end), 0)
	+	isNull(sum(case item11_type when 4000002 then item11_value1 else 0 end), 0)
	+	isNull(sum(case item12_type when 4000002 then item12_value1 else 0 end), 0)
	+	isNull(sum(case item13_type when 4000002 then item13_value1 else 0 end), 0)
	+	isNull(sum(case item14_type when 4000002 then item14_value1 else 0 end), 0)
	+	isNull(sum(case item15_type when 4000002 then item15_value1 else 0 end), 0)
	+	isNull(sum(case item16_type when 4000002 then item16_value1 else 0 end), 0)
	+	isNull(sum(case item17_type when 4000002 then item17_value1 else 0 end), 0)
	+	isNull(sum(case item18_type when 4000002 then item18_value1 else 0 end), 0)
	+	isNull(sum(case item19_type when 4000002 then item19_value1 else 0 end), 0)
	+	isNull(sum(case item20_type when 4000002 then item20_value1 else 0 end), 0) AS 'extendcnt'
	FROM userItemEtcDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_league_backup_user
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_backup_user]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_backup_user]
GO

CREATE PROCEDURE [dbo].[game_league_backup_user]
(
	@leagueIDX int
)
AS

SET NOCOUNT ON


DECLARE @startDate int
DECLARE @infoIDX int

SET @startDate = ISNULL((
	SELECT startDate 
	  FROM dbo.userLeagueListDB WITH(NOLOCK)
	 WHERE idx=@leagueIDX
	), 0)

SET @infoIDX = ISNULL((
	SELECT idx
	  FROM dbo.userLeagueInfoDB WITH(NOLOCK)
	 WHERE leagueIDX=@leagueIDX
	), 0)

-- 리그 정보 백업
INSERT INTO LosaGame_log.dbo.log_league_list_user (
	leagueIDX, accountIDX, startDate, endDate, leagueType, leagueState, regDate, insertDate
)
SELECT idx, accountIDX, startDate, endDate, leagueType, leagueState, regDate, GETDATE()
  FROM dbo.userLeagueListDB WITH(NOLOCK)
 WHERE idx=@leagueIDX


-- 리그 팀 정보 백업
INSERT INTO LosaGame_log.dbo.log_league_team_user (
	teamIDX, leagueIDX, startDate, teamName, leaderIDX, leagueStartPosition, leaguePosition, maxcount, cheerPoint,
	currentRound, factionPoint, factionType, regDate, insertDate
)
SELECT idx, leagueIDX, @startDate, teamName, leaderIDX, leagueStartPosition, leaguePosition, maxcount, cheerPoint,
	   currentRound, factionPoint, factionType, regDate, GETDATE()
  FROM dbo.userLeagueTeamDB WITH(NOLOCK)
 WHERE leagueIDX=@leagueIDX


-- 리그 팀원 정보 백업
INSERT INTO LosaGame_log.dbo.log_league_team_member_user (
	teamMemberIDX, startDate, accountIDX, leagueIDX, teamIDX, joinType, regDate, insertDate
)
SELECT idx, @startDate, accountIDX, leagueIDX, teamIDX, joinType, regDate, GETDATE()
  FROM dbo.userLeagueTeamMemberDB WITH(NOLOCK)
 WHERE leagueIDX=@leagueIDX


-- 대회 정보 백업
INSERT INTO LosaGame_log.dbo.log_league_info_user (
	infoIDX, leagueIDX, leagueName, maxRound, bannerA, bannerB, modeType, maxcount, autoType, announce, recruitDate, waitDate, regDate, insertDate
)
SELECT idx, leagueIDX, leagueName, maxRound, bannerA, bannerB, modeType, maxcount, autoType, announce, recruitDate, waitDate, regDate, GETDATE()
  FROM dbo.userLeagueInfoDB WITH(NOLOCK)
 WHERE leagueIDX=@leagueIDX


-- 대회 라운드 정보 백업
INSERT INTO LosaGame_log.dbo.log_league_round_user (
	roundIDX, infoIDX,
	roundType1_playDate, roundType1_presentCode1, roundType1_presentCode2, roundType1_presentCode3, roundType1_presentCode4,
	roundType2_playDate, roundType2_presentCode1, roundType2_presentCode2, roundType2_presentCode3, roundType2_presentCode4,
	roundType3_playDate, roundType3_presentCode1, roundType3_presentCode2, roundType3_presentCode3, roundType3_presentCode4,
	roundType4_playDate, roundType4_presentCode1, roundType4_presentCode2, roundType4_presentCode3, roundType4_presentCode4,
	roundType5_playDate, roundType5_presentCode1, roundType5_presentCode2, roundType5_presentCode3, roundType5_presentCode4,
	roundType6_playDate, roundType6_presentCode1, roundType6_presentCode2, roundType6_presentCode3, roundType6_presentCode4,
	roundType7_playDate, roundType7_presentCode1, roundType7_presentCode2, roundType7_presentCode3, roundType7_presentCode4,
	roundType8_playDate, roundType8_presentCode1, roundType8_presentCode2, roundType8_presentCode3, roundType8_presentCode4,
	roundType9_playDate, roundType9_presentCode1, roundType9_presentCode2, roundType9_presentCode3, roundType9_presentCode4,
	roundType10_playDate, roundType10_presentCode1, roundType10_presentCode2, roundType10_presentCode3, roundType10_presentCode4,
	roundType11_playDate, roundType11_presentCode1, roundType11_presentCode2, roundType11_presentCode3, roundType11_presentCode4,
	regDate, insertDate
)
SELECT idx, infoIDX,
	   roundType1_playDate, roundType1_presentCode1, roundType1_presentCode2, roundType1_presentCode3, roundType1_presentCode4,
	   roundType2_playDate, roundType2_presentCode1, roundType2_presentCode2, roundType2_presentCode3, roundType2_presentCode4,
	   roundType3_playDate, roundType3_presentCode1, roundType3_presentCode2, roundType3_presentCode3, roundType3_presentCode4,
	   roundType4_playDate, roundType4_presentCode1, roundType4_presentCode2, roundType4_presentCode3, roundType4_presentCode4,
	   roundType5_playDate, roundType5_presentCode1, roundType5_presentCode2, roundType5_presentCode3, roundType5_presentCode4,
	   roundType6_playDate, roundType6_presentCode1, roundType6_presentCode2, roundType6_presentCode3, roundType6_presentCode4,
	   roundType7_playDate, roundType7_presentCode1, roundType7_presentCode2, roundType7_presentCode3, roundType7_presentCode4,
	   roundType8_playDate, roundType8_presentCode1, roundType8_presentCode2, roundType8_presentCode3, roundType8_presentCode4,
	   roundType9_playDate, roundType9_presentCode1, roundType9_presentCode2, roundType9_presentCode3, roundType9_presentCode4,
	   roundType10_playDate, roundType10_presentCode1, roundType10_presentCode2, roundType10_presentCode3, roundType10_presentCode4,
	   roundType11_playDate, roundType11_presentCode1, roundType11_presentCode2, roundType11_presentCode3, roundType11_presentCode4,
	   regDate, GETDATE()
  FROM dbo.userLeagueRoundDB WITH(NOLOCK)
 WHERE infoIDX=@infoIDX
GO


-- ----------------------------
-- procedure structure for web_namecheck_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_namecheck_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_namecheck_add]
GO

CREATE PROCEDURE [dbo].[web_namecheck_add]
(
	@accountIDX int
,	@userName varchar(10)
,	@userJumin1 char(6)
,	@userEnCode varchar(64)
,	@userNumber tinyint
,	@gender int
,	@ncrtn tinyint
,	@userIP varchar(15)
,	@returnVal int output
)
As
	BEGIN TRAN

	INSERT INTO userNameDB (accountIDX, userName, userBirthday, userEnCode, userNumber, userGender, returnValue, userIP, regDate)
	VALUES (@accountIDX, @userName, @userJumin1, @userEnCode, @userNumber, @gender, @ncrtn, @userIP, getdate())


	SET @returnVal = @@error

	if (@@error = 0)
	    Commit Tran
	else
	    Rollback Tran
GO


-- ----------------------------
-- procedure structure for manage_define_quest_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_define_quest_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_define_quest_count]
GO

CREATE PROCEDURE [dbo].[manage_define_quest_count]

AS
	SELECT MAX(questIDX/10000) FROM define_quest
GO


-- ----------------------------
-- function structure for z_nouse_DEFINE_MP_LIMIT_GIVE_LEVEL_MAX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_DEFINE_MP_LIMIT_GIVE_LEVEL_MAX]') AND type IN ('FN', 'FS', 'FT', 'IF', 'TF'))
	DROP FUNCTION[dbo].[z_nouse_DEFINE_MP_LIMIT_GIVE_LEVEL_MAX]
GO

CREATE FUNCTION [dbo].[z_nouse_DEFINE_MP_LIMIT_GIVE_LEVEL_MAX]
(
)
RETURNS int
As
	BEGIN

	DECLARE @returnVal int
	SET @returnVal = 0

	RETURN @returnVal

	END
GO


-- ----------------------------
-- procedure structure for game_league_team_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_get_data]
GO

CREATE PROCEDURE [dbo].[game_league_team_get_data]
(
	@idx int
)
AS

SET NOCOUNT ON

SELECT leagueIDX, teamName, leaderIDX, leaguePosition,
	   maxcount, cheerPoint, currentRound, factionPoint, factionType
FROM dbo.userLeagueTeamDB WITH(NOLOCK)
WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for manage_event_teencash_complete_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_teencash_complete_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_teencash_complete_list]
GO

CREATE PROCEDURE [dbo].[manage_event_teencash_complete_list]
(
	@pageSize varchar(8)
,	@notInPage varchar(8)
,	@numberth varchar(4)
)
AS
	DECLARE @strSQL varchar(1000)

	SET @strSQL = ''
	SET @strSQL = @strSQL + 'SELECT TOP ' + @pageSize + ' a.idx, a.accountIDX, b.nickName, b.EMail, b.regDate as ''joindate'', c.tel, c.mobile, a.sn, a.numberth, a.flag, a.regDate, isNull(d.startPlayTime, 0) AS ''startPlayTime'', isNull(d.endPlayTime, 0) AS ''endPlayTime'' From event_teencash a '
	SET @strSQL = @strSQL + 'JOIN userMemberDB b ON a.accountIDX=b.accountIDX LEFT JOIN userInfoBDB c ON a.accountIDX=c.accountIDX LEFT JOIN event_teencash_playtime d ON a.accountIDX=d.accountIDX and a.numberth=d.numberth '
	SET @strSQL = @strSQL + 'WHERE a.numberth=' + @numberth + ' and a.flag > 0 and a.idx not in (SELECT TOP ' + @notInPage + ' idx FROM event_teencash WHERE numberth=' + @numberth + ' and flag > 0 ORDER BY idx DESC) '
	SET @strSQL = @strSQL + 'ORDER BY idx DESC'

	EXEC(@strSQL)
GO


-- ----------------------------
-- procedure structure for game_guildHQ_set_fit
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guildHQ_set_fit]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guildHQ_set_fit]
GO

CREATE PROCEDURE [dbo].[game_guildHQ_set_fit]
	
	@GUILD_IDX		INT,
	@ACCOUNT_IDX	INT,
	@ITEM_SERIAL	BIGINT,	
	@ITEM_CODE		INT,
	@ITEM_XZ		INT,
	@ITEM_Y			INT,
	@ITEM_ROTATE	TINYINT,
	@ITEM_STATUS	TINYINT		-- 1:설치, 2: 변경

AS 

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	15000

	DECLARE @nReturn	INT = 0;
	
	
	-- 최초 설치시 즉, 인벤(ItemStus=0)에서 userGuildHQDB로 넘어와서 설치 될때 서버가 ItemSerial 정보를 모르기 때문에 제일 먼저 인벤에
	-- 들어온 아이템 부터 설치 하도록 ItemSerial을 서버에 전달
	IF (@ITEM_SERIAL=0 and @ITEM_STATUS=1)
	BEGIN 
		SET @ITEM_SERIAL= (SELECT MIN(ItemSerial) FROM dbo.userGuildHQDB WHERE GuildIDX=@GUILD_IDX and ItemCode=@ITEM_CODE and ItemStatus=0)
		SELECT @ITEM_SERIAL
	END
	
	BEGIN TRAN
		
		-- @ITEM_STATUS 는 0: 미설치, 1:설치됨, 2:삭제 만 사용되지만, 현재 설치된 아이템의 위치 변경을 위해 
		-- 현재 프로시저에서 2번 코드를 받지만 실제는 1로 강제 초기화 하여 설치로 상태 정보를 유지한다.
		SET @ITEM_STATUS=1

		UPDATE dbo.userGuildHQDB WITH (XLOCK, ROWLOCK) SET ItemXZ=@ITEM_XZ, ItemY=@ITEM_Y, ItemRotate=@ITEM_ROTATE, ItemStatus=@ITEM_STATUS 
		WHERE ItemSerial=@ITEM_SERIAL

		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			SELECT -1;
			ROLLBACK TRAN
			RETURN;
		END
		
		--  변경된 데이터에 대한 Version관리
		EXEC @nReturn = dbo.game_guildHQ_ver_set_status @GUILD_IDX
		IF @nReturn<>0
		BEGIN
			SELECT @nReturn
			ROLLBACK TRAN
			RETURN;
		END 	 

	COMMIT TRAN

	-- 설치로그
	-- EXEC LINKED_CONNECTION_BAK.LosaLogDataC.dbo.log_guildHQ_fit_set_insert @GUILD_IDX, @ACCOUNT_IDX, @ITEM_SERIAL, @ITEM_CODE, 1

	RETURN;
GO


-- ----------------------------
-- procedure structure for game_clover_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_clover_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_clover_info]
GO

CREATE PROCEDURE [dbo].[game_clover_info]
(
	@accountIDX int
)
AS

SET NOCOUNT ON

IF ( EXISTS(SELECT * FROM dbo.userCloverDB WITH( NOLOCK ) WHERE accountIDX = @accountIDX) )
BEGIN
	SELECT CloverCnt, LastChargeDate, RemainTime
	  FROM dbo.userCloverDB WITH( NOLOCK )
	 WHERE accountIDX = @accountIDX
END
ELSE
BEGIN
	-- 클로버 정보가 없을때 insert
	INSERT INTO dbo.userCloverDB( accountIDX, CloverCnt, LastChargeDate, RemainTime, regDate )
	VALUES( @accountIDX, 0, 0, 0, GETDATE() )

	-- return 0, 0, 0
	SELECT 0 AS CloverCnt, 0 AS LastChargeDate, 0 AS RemainTime
END
GO


-- ----------------------------
-- procedure structure for web_friend_count_dev
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_count_dev]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_count_dev]
GO

CREATE PROCEDURE [dbo].[web_friend_count_dev]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM userFriendDB WITH(NOLOCK) WHERE userAccIDX=@accountIDX and flag=1
GO


-- ----------------------------
-- procedure structure for game_league_backup
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_backup]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_backup]
GO

CREATE PROCEDURE [dbo].[game_league_backup]
(
	@leagueIDX int
)
AS

SET NOCOUNT ON

DECLARE @startDate int
SET @startDate = ISNULL((
	SELECT startDate 
	  FROM dbo.userLeagueListDB WITH(NOLOCK)
	 WHERE idx=@leagueIDX
	), 0)


-- 리그 정보 백업
INSERT INTO LosaGame_log.dbo.log_league_list (
	leagueIDX, accountIDX, startDate, endDate, leagueType, leagueState, regDate, insertDate
)
SELECT idx, accountIDX, startDate, endDate, leagueType, leagueState, regDate, GETDATE()
  FROM dbo.userLeagueListDB WITH(NOLOCK)
 WHERE idx=@leagueIDX


-- 리그 팀 정보 백업
INSERT INTO LosaGame_log.dbo.log_league_team (
	teamIDX, leagueIDX, startDate, teamName, leaderIDX, leagueStartPosition, leaguePosition, maxcount, cheerPoint,
	currentRound, factionPoint, factionType, regDate, insertDate
)
SELECT idx, leagueIDX, @startDate, teamName, leaderIDX, leagueStartPosition, leaguePosition, maxcount, cheerPoint,
	   currentRound, factionPoint, factionType, regDate, GETDATE()
  FROM dbo.userLeagueTeamDB WITH(NOLOCK)
 WHERE leagueIDX=@leagueIDX


-- 리그 팀원 정보 백업
INSERT INTO LosaGame_log.dbo.log_league_team_member (
	teamMemberIDX, startDate, accountIDX, leagueIDX, teamIDX, joinType, regDate, insertDate
)
SELECT idx, @startDate, accountIDX, leagueIDX, teamIDX, joinType, regDate, GETDATE()
  FROM dbo.userLeagueTeamMemberDB WITH(NOLOCK)
 WHERE leagueIDX=@leagueIDX


-- 리그 응원 정보 백업
INSERT INTO LosaGame_log.dbo.log_league_cheer (
	cheerIDX, startDate, accountIDX, leagueIDX, teamIDX, regDate, insertDate
)
SELECT idx, @startDate, accountIDX, leagueIDX, teamIDX, regDate, GETDATE()
  FROM dbo.userLeagueCheerDB WITH(NOLOCK)
 WHERE leagueIDX=@leagueIDX
GO


-- ----------------------------
-- procedure structure for web_ranking_class_top3_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_class_top3_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_class_top3_list]
GO

CREATE PROCEDURE [dbo].[web_ranking_class_top3_list]    
    
AS    
 SELECT classType, accountIDX, nickname, userLevel FROM userRankingDB_class_top100 WITH(NOLOCK)    
 WHERE rank_now in (1,2,3) ORDER BY classType DESC, rank_now ASC
GO


-- ----------------------------
-- procedure structure for manage_define_object_list_all
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_define_object_list_all]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_define_object_list_all]
GO

CREATE PROCEDURE [dbo].[manage_define_object_list_all]
(
	@objName varchar(32)
)
AS
	SELECT idx, code, itemName FROM define_manage WHERE objName=@objName ORDER BY code ASC
GO


-- ----------------------------
-- function structure for z_nouse_DEFINE_MP_LIMIT_GIVE_LEVEL
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_DEFINE_MP_LIMIT_GIVE_LEVEL]') AND type IN ('FN', 'FS', 'FT', 'IF', 'TF'))
	DROP FUNCTION[dbo].[z_nouse_DEFINE_MP_LIMIT_GIVE_LEVEL]
GO

CREATE FUNCTION [dbo].[z_nouse_DEFINE_MP_LIMIT_GIVE_LEVEL]
(
)
RETURNS int
As
	BEGIN

	DECLARE @returnVal int
	SET @returnVal = 0

	RETURN @returnVal

	END
GO


-- ----------------------------
-- procedure structure for game_league_team_delete_all
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_delete_all]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_delete_all]
GO

CREATE PROCEDURE [dbo].[game_league_team_delete_all]
(
	@leagueIDX int
)
AS

SET NOCOUNT ON

DELETE FROM dbo.userLeagueTeamMemberDB WHERE leagueIDX=@leagueIDX
DELETE FROM dbo.userLeagueTeamDB WHERE leagueIDX=@leagueIDX
DELETE FROM dbo.userLeagueCheerDB WHERE leagueIDX=@leagueIDX
GO


-- ----------------------------
-- procedure structure for manage_user_ranking_class_top3
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_user_ranking_class_top3]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_user_ranking_class_top3]
GO

CREATE PROCEDURE [dbo].[manage_user_ranking_class_top3]
(
	@classType varchar(8)
)
As
	DECLARE @strSQL varchar(500)
	SET @strSQL = 'SELECT TOP 3 b.accountIDX, b.nickName FROM userRankingDB_classA a JOIN userMemberDB b ON a.accountIDX = b.accountIDX WHERE a.' + @classType + ' > 0 ORDER BY a.' + @classType + ' ASC'
	EXEC (@strSQL)
GO


-- ----------------------------
-- procedure structure for game_guildHQ_set_default_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guildHQ_set_default_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guildHQ_set_default_add]
GO

CREATE PROCEDURE [dbo].[game_guildHQ_set_default_add]
	
	@GUILD_IDX		INT,	
	@ITEM_CODE		INT,
	@ITEM_XZ		INT,
	@ITEM_Y			INT,
	@ITEM_ROTATE	TINYINT	

AS 

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	15000

	DECLARE @nReturn	INT = 0;
	
	BEGIN TRAN
		-- 길드 본부 꾸미기 아이템 추가
		INSERT dbo.userGuildHQDB WITH (XLOCK, ROWLOCK) (GuildIDX, ItemCode, ItemXZ, ItemY, ItemRotate, ItemStatus) VALUES (@GUILD_IDX, @ITEM_CODE, @ITEM_XZ, @ITEM_Y, @ITEM_ROTATE, 1)
		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
			RETURN;
		END
		
		--  변경된 데이터에 대한 Version관리
		EXEC @nReturn = dbo.game_guildHQ_ver_set_status @GUILD_IDX
		IF @nReturn<>0
		BEGIN
			ROLLBACK TRAN
			RETURN;
		END 	

	COMMIT TRAN

	RETURN;
GO


-- ----------------------------
-- procedure structure for game_clover_friend_receive_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_clover_friend_receive_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_clover_friend_receive_save]
GO

CREATE PROCEDURE [dbo].[game_clover_friend_receive_save]
(
	@UserIndex		int
,	@FriendIndex	int
,	@receiveDate	int
,	@receiveCount	int
)
AS

SET NOCOUNT ON

DECLARE	@Index INT

SET @Index = ISNULL((
	SELECT idx
	  FROM dbo.userFriendDB WITH( NOLOCK )
	 WHERE userAccIDX = @FriendIndex
	   AND FriendAccIDX = @UserIndex
), 0 )

IF ( @Index > 0 )
BEGIN

	-- update
	UPDATE dbo.userFriendDB
	   SET receiveBCloverCnt = receiveBCloverCnt + @receiveCount,
		   receiveCloverDate = @receiveDate
	 WHERE idx = @Index

	-- select
	SELECT idx, userAccIDX, receiveCloverDate, receiveBCloverCnt
	  FROM dbo.userFriendDB WITH( nolock )
	 WHERE idx = @Index

END
ELSE
BEGIN
	SELECT 0 as idx, 0 as userAccIDX, 0 as receiveCloverDate, 0 as receiveBCloverCnt
END
GO


-- ----------------------------
-- procedure structure for web_friend_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_count]
GO

CREATE PROCEDURE [dbo].[web_friend_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM userFriendDB WITH(NOLOCK) WHERE userAccIDX=@accountIDX and flag=1 and friendAccIDX not in (209274,322139,209270,209272,209273,1105,1106,209271,380032,1107,209264,209268,1108,209267,209276,281811,209269,2304,485241,380044,591852,711450,505421,380045,382884,380042,380043,361290,1414836,1871572,1871573,1871574,1896968)
GO


-- ----------------------------
-- procedure structure for game_league_auth_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_auth_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_auth_list]
GO

CREATE PROCEDURE [dbo].[game_league_auth_list]
(
	@topN int
,	@idx int
,	@leagueIDX int
)
AS

SET NOCOUNT ON

SELECT TOP (@topN) a.accountIDX, b.nickName, c.userLevel
  FROM dbo.userLeagueAuthDB a WITH(NOLOCK)
  JOIN userMemberDB b WITH(NOLOCK)
    ON a.accountIDX = b.accountIDX
  JOIN userGameDB c WITH(NOLOCK)
    ON a.accountIDX = c.accountIDX
 WHERE idx > @idx
   AND leagueIDX=@leagueIDX
 ORDER BY idx ASC
GO


-- ----------------------------
-- procedure structure for web_ranking_class_top3_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_class_top3_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_class_top3_count]
GO

CREATE PROCEDURE [dbo].[web_ranking_class_top3_count]

AS
	DECLARE @nDate datetime, @dateIDX char(8)
	SET @nDate = Left(getdate(),10)
	SET @dateIDX = convert(char(8),@nDate,112)

	IF (not exists(SELECT TOP 1 * FROM userRankingDB_class_top3 WITH(NOLOCK) WHERE dateIDX=@dateIDX))
	BEGIN
		SET @dateIDX = convert(char(8),Left(getdate()-1,10),112)
	END

	SELECT count(*) FROM userRankingDB_class_top3 WITH(NOLOCK) WHERE dateIDX = @dateIDX
GO


-- ----------------------------
-- procedure structure for manage_define_object_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_define_object_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_define_object_list]
GO

CREATE PROCEDURE [dbo].[manage_define_object_list]
(
	@objName varchar(32)
)
AS
	SELECT code, itemName FROM define_manage WHERE objName=@objName ORDER BY code ASC
GO


-- ----------------------------
-- procedure structure for web_event_recommend_get_point
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_recommend_get_point]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_recommend_get_point]
GO

CREATE PROCEDURE [dbo].[web_event_recommend_get_point]
(
	@accountIDX int
)
AS
	SELECT nowpoint, todaypoint, accpoint FROM event_recommend WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_league_team_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_delete]
GO

CREATE PROCEDURE [dbo].[game_league_team_delete]
(
	@teamIDX int
)
AS

SET NOCOUNT ON

DELETE FROM dbo.userLeagueTeamMemberDB WHERE teamIDX=@teamIDX
DELETE FROM dbo.userLeagueTeamDB WHERE idx=@teamIDX
GO


-- ----------------------------
-- procedure structure for web_friend_and_guildmember_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_and_guildmember_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_and_guildmember_list]
GO

CREATE PROCEDURE [dbo].[web_friend_and_guildmember_list]
(
	@accountIDX varchar(120)
)
AS
	DECLARE @sql varchar(1000)
	SET @sql = 'SELECT a.accountIDX, a.nickName, b.userLevel, b.connDate, c.gameServerID, ISNULL(d.class, 0) as ''userRanking'' '
	SET @sql = @sql + 'FROM userMemberDB a JOIN userGameDB b ON a.accountIDX = b.accountIDX JOIN userLoginDB c ON a.accountIDX=c.accountIDX LEFT JOIN userRankingDB d ON a.accountIDX = d.accountIDX '
	SET @sql = @sql + 'WHERE a.accountIDX in (' + @accountIDX + ') ORDER BY b.userLevel DESC'
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for game_guildHQ_set_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guildHQ_set_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guildHQ_set_add]
GO

CREATE PROCEDURE [dbo].[game_guildHQ_set_add]

	@GUILD_IDX		INT,
	@ITEM_CODE		INT

AS 

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	15000

	DECLARE @nReturn	INT = 0;

	BEGIN TRAN
		-- 길드 본부 꾸미기 아이템 추가
		INSERT dbo.userGuildHQDB WITH (XLOCK, ROWLOCK) (GuildIDX, ItemCode) VALUES (@GUILD_IDX, @ITEM_CODE)
		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
			RETURN;
		END
		
		--  변경된 데이터에 대한 Version관리
		EXEC @nReturn = dbo.game_guildHQ_ver_set_status @GUILD_IDX
		IF @nReturn<>0
		BEGIN
			ROLLBACK TRAN
			RETURN;
		END 	

	COMMIT TRAN

	RETURN;
GO


-- ----------------------------
-- procedure structure for game_class_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_class_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_class_save]
GO

CREATE PROCEDURE [dbo].[game_class_save]
(
	@idx INT
,	@class1_type INT
,	@class1_level INT
,	@class1_expert INT
,	@class1_stat TINYINT
,	@class2_type INT
,	@class2_level INT
,	@class2_expert INT
,	@class2_stat TINYINT
,	@class3_type INT
,	@class3_level INT
,	@class3_expert INT
,	@class3_stat TINYINT
,	@class4_type INT
,	@class4_level INT
,	@class4_expert INT
,	@class4_stat TINYINT
,	@class5_type INT
,	@class5_level INT
,	@class5_expert INT
,	@class5_stat TINYINT
,	@class6_type INT
,	@class6_level INT
,	@class6_expert INT
,	@class6_stat TINYINT
,	@class7_type INT
,	@class7_level INT
,	@class7_expert INT
,	@class7_stat TINYINT
,	@class8_type INT
,	@class8_level INT
,	@class8_expert INT
,	@class8_stat TINYINT
,	@class9_type INT
,	@class9_level INT
,	@class9_expert INT
,	@class9_stat TINYINT
,	@class10_type INT
,	@class10_level INT
,	@class10_expert INT
,	@class10_stat TINYINT
)
AS

SET NOCOUNT ON

UPDATE dbo.userClassDB
   SET class1_type = @class1_type,
       class1_level = @class1_level,
       class1_expert = @class1_expert,
       class1_stat = @class1_stat,
       class2_type = @class2_type,
       class2_level = @class2_level,
       class2_expert = @class2_expert,
       class2_stat = @class2_stat,
       class3_type = @class3_type,
       class3_level = @class3_level,
       class3_expert = @class3_expert,
       class3_stat = @class3_stat,
       class4_type = @class4_type,
       class4_level = @class4_level,
       class4_expert = @class4_expert,
       class4_stat = @class4_stat,
       class5_type = @class5_type,
       class5_level = @class5_level,
       class5_expert = @class5_expert,
       class5_stat = @class5_stat,
       class6_type = @class6_type,
       class6_level = @class6_level,
       class6_expert = @class6_expert,
       class6_stat = @class6_stat,
       class7_type = @class7_type,
       class7_level = @class7_level,
       class7_expert = @class7_expert,
       class7_stat = @class7_stat,
       class8_type = @class8_type,
       class8_level = @class8_level,
       class8_expert = @class8_expert,
       class8_stat = @class8_stat,
       class9_type = @class9_type,
       class9_level = @class9_level,
       class9_expert = @class9_expert,
       class9_stat = @class9_stat,
       class10_type = @class10_type,
       class10_level = @class10_level,
       class10_expert = @class10_expert,
       class10_stat = @class10_stat
 WHERE idx = @idx
GO


-- ----------------------------
-- procedure structure for manage_class_set_price
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_class_set_price]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_class_set_price]
GO

CREATE PROCEDURE [dbo].[manage_class_set_price]
(
	@minPopul float
,	@maxPopul float
,	@minPrice int
,	@maxPrice int
,	@startDate datetime
,	@endDate datetime
)
AS

BEGIN

	SET NOCOUNT ON

	DECLARE @strLLv varchar(1000)
	DECLARE @sql nvarchar(1000)
	DECLARE @llv int
	DECLARE @ovt bigint
	DECLARE @totalplaytime bigint
	DECLARE @totalbuytime float
	DECLARE @maxLoop int
	DECLARE @i int
	DECLARE @classcnt int
	DECLARE @sumprice int
	DECLARE @baseprice int
	DECLARE @tblClassBuyTime table (classType int, buyTime bigint, overPlayTime bigint)
	DECLARE @tblLevelPlayTime table (userLevel int, playTime bigint)
	DECLARE @tblClassLimitLevel table (classType int, limitlevel int, overPlayTime bigint)
	DECLARE @tblClassPrice table (classType int, popul float, price1 float, price2 float, price3 float)

	SET @startDate = DateAdd(d,+1, Left(convert(varchar(20), @startDate, 20), 10))
	SET @endDate = DateAdd(d,+2, Left(convert(varchar(20), @endDate, 20), 10))
	SET @i = 1
	SET @classcnt = 0
	SET @baseprice = 3150
	SET @totalbuytime = 0.0

	-- @i 가 1부터 시작 되기 때문에 제일 마지막에 , 있어야 함
	SET @strLLv = ''
	SET @strLLv = @strLLv + '21,'		-- 1. 아이언나이트
	SET @strLLv = @strLLv + '6,'		-- 2. 캡틴후크
	SET @strLLv = @strLLv + '4,'		-- 3. 웨스턴건맨
	SET @strLLv = @strLLv + '2,'		-- 4. 파이어메이지
	SET @strLLv = @strLLv + '9,'		-- 5. 사이버메딕
	SET @strLLv = @strLLv + '13,'		-- 6. 세비지버서커
	SET @strLLv = @strLLv + '5,'		-- 7. 로빈후드
	SET @strLLv = @strLLv + '11,'		-- 8. 크레이지마이너
	SET @strLLv = @strLLv + '8,'		-- 9. 아이스메이지
	SET @strLLv = @strLLv + '7,'		-- 10. 육군보병
	SET @strLLv = @strLLv + '1,'		-- 11. 스페이스솔져
	SET @strLLv = @strLLv + '0,'		-- 12. 쉐도우어쌔신
	SET @strLLv = @strLLv + '10,'		-- 13. 빅토리디펜더
	SET @strLLv = @strLLv + '3,'		-- 14. 청룡관우
	SET @strLLv = @strLLv + '19,'		-- 15. 와일드복서
	SET @strLLv = @strLLv + '15,'		-- 16. 바이킹스벤
	SET @strLLv = @strLLv + '20,'		-- 17. 카게닌자
	SET @strLLv = @strLLv + '16,'		-- 18. 머스킷티어
	SET @strLLv = @strLLv + '12,'		-- 19. 태권무도가
	SET @strLLv = @strLLv + '14,'		-- 20. 암흑주술사
	SET @strLLv = @strLLv + '25,'		-- 21. 스마일조커
	SET @strLLv = @strLLv + '22,'		-- 22. 트레져헌터
	SET @strLLv = @strLLv + '17,'		-- 23. 사신
	SET @strLLv = @strLLv + '18,'		-- 24. 라이트닝메이지
	SET @strLLv = @strLLv + '23,'		-- 25. 마이티팔라딘
	SET @strLLv = @strLLv + '24,'		-- 26. 마피아
	SET @strLLv = @strLLv + '26,'		-- 27. 타이거
	SET @strLLv = @strLLv + '27,'		-- 28. 살라딘
	SET @strLLv = @strLLv + '28,'		-- 29. 데스나이트
	SET @strLLv = @strLLv + '1000,'		-- 30. 솔배드가이
	SET @strLLv = @strLLv + '29,'		-- 31. 헤비크래셔
	SET @strLLv = @strLLv + '1000,'		-- 32. 스페셜포스
	SET @strLLv = @strLLv + '30,'		-- 33. 사무라이
	SET @strLLv = @strLLv + '31,'		-- 34. 러닝백
	SET @strLLv = @strLLv + '1000,'		-- 35. 다래
	SET @strLLv = @strLLv + '32,'		-- 36. 조로
	SET @strLLv = @strLLv + '1000,'		-- 37. 진키사라기
	SET @strLLv = @strLLv + '33,'		-- 38. 네크로맨서
	SET @strLLv = @strLLv + '1000,'		-- 39. 왕소룡
	SET @strLLv = @strLLv + '34,'		-- 40. 스파르타쿠스
	SET @strLLv = @strLLv + '1000,'		-- 41. 현암
	SET @strLLv = @strLLv + '35,'		-- 42. 프로레슬러
	SET @strLLv = @strLLv + '1000,'		-- 43. 마법창병
	SET @strLLv = @strLLv + '36,'		-- 44. 인형사
	SET @strLLv = @strLLv + '37,'		-- 45. 호크아이
	SET @strLLv = @strLLv + '38,'		-- 46. 데빌레이져
	SET @strLLv = @strLLv + '39,'		-- 47. 랜서
	SET @strLLv = @strLLv + '1000,'		-- 48. 프리스트
	SET @strLLv = @strLLv + '40,'		-- 49. 카포에라
	SET @strLLv = @strLLv + '1000,'		-- 50. 라그나
	SET @strLLv = @strLLv + '41,'		-- 51. 손오공
	SET @strLLv = @strLLv + '1000,'		-- 52. 백동수
	SET @strLLv = @strLLv + '42,'		-- 53. 인디언
	SET @strLLv = @strLLv + '1000,'		-- 54. 하자마
	SET @strLLv = @strLLv + '43,'		-- 55. 락스타
	SET @strLLv = @strLLv + '1000,'		-- 56. 창천협객
	SET @strLLv = @strLLv + '44,'		-- 57. 웨어울프
	SET @strLLv = @strLLv + '1000,'		-- 58. 메이
	SET @strLLv = @strLLv + '20,'		-- 59. 무에타이
	SET @strLLv = @strLLv + '1000,'		-- 60. 카오스레퍼드
	SET @strLLv = @strLLv + '25,'		-- 61. 가토가챠
	SET @strLLv = @strLLv + '1000,'		-- 62. 레이첼
	SET @strLLv = @strLLv + '30,'		-- 63. 일지매
	SET @strLLv = @strLLv + '35,'		-- 64. 홍길동
	SET @strLLv = @strLLv + '40,'		-- 65. 위치
	SET @strLLv = @strLLv + '45,'		-- 66. 메카닉
	SET @strLLv = @strLLv + '15,'		-- 67. 아서왕
	SET @strLLv = @strLLv + '21,'		-- 68. 조자룡
	SET @strLLv = @strLLv + '26,'		-- 69. 마술사
	SET @strLLv = @strLLv + '31,'		-- 70. 바바리안
	SET @strLLv = @strLLv + '1000,'		-- 71. 이오리
	SET @strLLv = @strLLv + '36,'		-- 72. 달타냥


	CREATE TABLE #tblClassPriceLastWeek
	(
		classType int
	,	price int
	)

	-- 1번 ~ 까지 용병별 구매 시간
	INSERT INTO @tblClassBuyTime
	SELECT classType, SUM(buyTime), 0
	FROM LosaGame_log.DBO.log_class_buytime WITH(NOLOCK)
	WHERE regDate >= @startDate
	  AND regDate < @endDate
	GROUP BY classType

	IF (@@ROWCOUNT = 0)
	BEGIN
		RETURN (2)
	END

	-- 0레벨 ~ 까지 레벨별 플레이 타임
	INSERT INTO @tblLevelPlayTime
	SELECT userLevel, SUM(playTime)
	FROM LosaGame_log.DBO.log_level_playtime WITH(NOLOCK)
	WHERE regDate >= @startDate
	  AND regDate < @endDate
	GROUP BY userLevel

	IF (@@ROWCOUNT = 0)
	BEGIN
		RETURN (3)
	END

	WHILE (CHARINDEX(',', @strLLv) <> 0)
	BEGIN
		SET @llv = CAST(SUBSTRING(@strLLv, 1, CHARINDEX(',', @strLLv)-1) AS int)
		SET @ovt = (
			SELECT ISNULL(SUM(playTime), 0)
			FROM @tblLevelPlayTime
			WHERE userLevel >= @llv
		)

		INSERT INTO @tblClassLimitLevel
		SELECT @i, @llv, @ovt

		SET @strLLv = SUBSTRING(@strLLv, CHARINDEX(',', @strLLv)+1, LEN(@strLLv))
		SET @i = @i + 1

		IF (@llv >= 0 and @llv < 1000)
			SET @classcnt = @classcnt + 1
	END

	UPDATE b SET overPlayTime = a.overPlayTime
	FROM (
		SELECT classType, limitLevel, overPlayTime
		FROM @tblClassLimitLevel) a
	JOIN @tblClassBuyTime b
	ON a.classType=b.classType
	WHERE a.limitLevel >= 0

	SET @totalplaytime = ISNULL((SELECT SUM(playTime) FROM @tblLevelPlayTime), 0)
	SET @totalbuytime = ISNULL((SELECT SUM(buyTime) FROM @tblClassBuyTime), 0)
	SET @maxLoop = (SELECT MAX(classType) FROM @tblClassBuyTime)
	SET @i = 1

	WHILE (@i <= @maxLoop)
	BEGIN
		SET @sql = 'INSERT INTO #tblClassPriceLastWeek '
		SET @sql = @sql + 'SELECT TOP 1 ' + CAST(@i AS varchar(4)) + ', class' + CAST(@i AS varchar(4)) + '_price '
		SET @sql = @sql + 'FROM define_class_price WITH(NOLOCK) '
		SET @sql = @sql + 'ORDER BY idx DESC'
		EXECUTE (@sql)
		SET @i = @i + 1
	END

	INSERT INTO @tblClassPrice (classType, popul)
	SELECT b.classType,
		CASE WHEN ISNULL(a.buyTime * (@totalplaytime / CAST(a.overPlayTime AS FLOAT)) / (CAST(@totalbuytime AS FLOAT) / @classcnt), 0) > @maxPopul THEN @maxPopul
			 WHEN ISNULL(a.buyTime * (@totalplaytime / CAST(a.overPlayTime AS FLOAT)) / (CAST(@totalbuytime AS FLOAT) / @classcnt), 0) < @minPopul THEN @minPopul
		ELSE ISNULL(a.buyTime * (@totalplaytime / CAST(a.overPlayTime AS FLOAT)) / (@totalbuytime / @classcnt), 0) END
	FROM @tblClassBuyTime a
	RIGHT JOIN @tblClassLimitLevel b
	  ON a.classType=b.classType
	WHERE b.limitLevel < 1000

	UPDATE b SET price1=(Round(a.price * b.popul, 0))
	FROM (
		SELECT classType, price
	    FROM #tblClassPriceLastWeek
	) a
	INNER JOIN @tblClassPrice b
	  ON a.classType=b.classType

	SET @sumprice = (SELECT ISNULL(SUM(price1), 0) FROM @tblClassPrice)

	UPDATE @tblClassPrice SET price2 = (CASE WHEN price1 * (@baseprice * @classcnt / CAST(@sumprice AS float)) < @minPrice THEN @minPrice
											 WHEN price1 * (@baseprice * @classcnt / CAST(@sumprice AS float)) > @maxPrice THEN @maxPrice
											 ELSE ROUND(price1 * (@baseprice * @classcnt / CAST(@sumprice AS float)), 0) END
	)

	SET @sumprice = (SELECT ISNULL(SUM(price2), 0) FROM @tblClassPrice)

	UPDATE @tblClassPrice
	SET price3 = Round(price2 * (@baseprice * @classcnt / CAST(@sumprice AS float)), 0)


	DROP TABLE #tblClassPriceLastWeek
	SELECT price3 FROM @tblClassPrice

END
GO


-- ----------------------------
-- procedure structure for game_league_auth_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_auth_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_auth_add]
GO

CREATE PROCEDURE [dbo].[game_league_auth_add]
(
	@leagueIDX int
,	@accountIDX int
)
AS

SET NOCOUNT ON

INSERT INTO dbo.userLeagueAuthDB (leagueIDX, accountIDX, regDate)
VALUES (@leagueIDX, @accountIDX, GETDATE())
GO


-- ----------------------------
-- procedure structure for web_ranking_class_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_class_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_class_list]
GO

CREATE PROCEDURE [dbo].[web_ranking_class_list]    
(    
  @pagesize int    
 , @nowpage int    
 , @classType int    
)    
AS    
 SELECT a.accountIDX, a.nickName, a.userLevel, a.rank_prev, a.rank_now, a.classLevel, a.classEXP, b.idx, b.guildName, b.guildmark     
 FROM userRankingDB_class_top100 a WITH(NOLOCK) LEFT JOIN userGuildDB b WITH(NOLOCK) ON a.guildIDX=b.idx    
 WHERE a.AccountIDX not in (2384074, 438421)  
 And a.classType=@classType and a.rank_now between ((@nowpage - 1) * @pagesize) + 1 and (@nowpage * @pagesize)     
 ORDER BY a.rank_now ASC
GO


-- ----------------------------
-- procedure structure for manage_define_get_maxcode_special
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_define_get_maxcode_special]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_define_get_maxcode_special]
GO

CREATE PROCEDURE [dbo].[manage_define_get_maxcode_special]
AS
	SELECT MAX(CONVERT(int, RIGHT(code, 5))) FROM define_manage WHERE objName='special'
GO


-- ----------------------------
-- procedure structure for web_event_prize_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_prize_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_prize_get_data]
GO

CREATE PROCEDURE [dbo].[web_event_prize_get_data]
(
	@idx int
)
AS
	SELECT [name], needcoin, quantity, prizer FROM userEventDB_prize WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_league_team_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_add]
GO

CREATE PROCEDURE [dbo].[game_league_team_add]
(
	@leagueIDX int
,	@teamName nvarchar(20)
,	@leaderIDX int
,	@maxcount tinyint
,	@factionPoint int
,	@factionType tinyint
)
AS

SET NOCOUNT ON

DECLARE @errcount int
DECLARE @teamIDX int
SET @errcount = 0
SET @teamIDX = 0

IF EXISTS(SELECT * FROM dbo.userLeagueTeamDB WITH(NOLOCK) WHERE leagueIDX=@leagueIDX AND teamName=@teamName)
BEGIN
	SET @errcount = 2
	SELECT @errcount AS 'returnVal'
	RETURN
END

IF EXISTS(SELECT * FROM dbo.userLeagueTeamDB WITH(NOLOCK) WHERE leagueIDX=@leagueIDX AND leaderIDX=@leaderIDX)
BEGIN
	SET @errcount = 3
	SELECT @errcount AS 'returnVal'
	RETURN
END

IF EXISTS(SELECT * FROM dbo.userLeagueTeamMemberDB WITH(NOLOCK) WHERE leagueIDX=@leagueIDX AND accountIDX=@leaderIDX AND joinType=1)
BEGIN
	SET @errcount = 4
	SELECT @errcount AS 'returnVal'
	RETURN
END

IF (@errcount = 0)
BEGIN

	SET @errcount = 1
	SELECT @errcount AS 'returnVal'

	INSERT INTO dbo.userLeagueTeamDB (
		leagueIDX, teamName, leaderIDX, leaguePosition, maxcount, cheerPoint, currentRound, factionPoint, factionType, leagueStartPosition, regDate
	)
	VALUES (
		@leagueIDX, @teamName, @leaderIDX, 0, @maxcount, 0, 0, @factionPoint, @factionType, 0, GETDATE()
	)

	SET @teamIDX = SCOPE_IDENTITY()

	INSERT INTO dbo.userLeagueTeamMemberDB (accountIDX, leagueIDX, teamIDX, joinType, regDate)
	VALUES (@leaderIDX, @leagueIDX, @teamIDX, 1, GETDATE())

END
GO


-- ----------------------------
-- procedure structure for web_friend_join_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_join_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_join_delete]
GO

CREATE PROCEDURE [dbo].[web_friend_join_delete]
(
	@idx varchar(150)
)
AS
	DECLARE @sql varchar(500)
	SET @sql = 'DELETE FROM userFriendDB WHERE idx in (' + @idx + ')'
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for game_fame_get_dec_top_n
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_fame_get_dec_top_n]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_fame_get_dec_top_n]
GO

CREATE PROCEDURE [dbo].[game_fame_get_dec_top_n]
(
	@accountIDX int
)

As
	SELECT ISNULL(SUM(CASE WHEN point < 0 THEN -point ELSE 0 END), 0) FROM (SELECT TOP 25 point FROM userMannerpointDB WHERE accountIDX=@accountIDX and resultType=1 ORDER BY regDate DESC) a
GO


-- ----------------------------
-- procedure structure for game_class_get_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_class_get_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_class_get_self_index]
GO

CREATE PROCEDURE [dbo].[game_class_get_self_index]
(
	@accountIDX INT
)
AS

SELECT MAX(idx)
  FROM dbo.userClassDB
 WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for manage_class_price_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_class_price_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_class_price_list]
GO

CREATE PROCEDURE [dbo].[manage_class_price_list]
(
	@sDate varchar(10)
,	@eDate varchar(10)
)
AS

SET NOCOUNT ON

SELECT	idx,
		class1_price, class2_price, class3_price, class4_price, class5_price,
		class6_price, class7_price, class8_price, class9_price, class10_price,
		class11_price, class12_price, class13_price, class14_price, class15_price,
		class16_price, class17_price, class18_price, class19_price, class20_price,
		class21_price, class22_price, class23_price, class24_price, class25_price,
		class26_price, class27_price, class28_price, class29_price, class30_price,
		class31_price, class32_price, class33_price, class34_price, class35_price,
		class36_price, class37_price, class38_price, class39_price, class40_price,
		class41_price, class42_price, class43_price, class44_price, class45_price,
		class46_price, class47_price, class48_price, class49_price, class50_price,
		class51_price, class52_price, class53_price, class54_price, class55_price,
		class56_price, class57_price, class58_price, class59_price, class60_price,
		class61_price, class62_price, class63_price, class64_price, class65_price,
		class66_price, class67_price, class68_price, class69_price, class70_price,
		class71_price, class72_price, class73_price, class74_price, class75_price,
		class76_price, class77_price, class78_price, class79_price, class80_price,
		class81_price, class82_price, class83_price, class84_price, class85_price,
		class86_price, class87_price, class88_price, class89_price, class90_price,
		class91_price, class92_price, class93_price, class94_price, class95_price,
		class96_price, class97_price, class98_price, class99_price, class100_price,
		regDate
FROM dbo.define_class_price WITH(NOLOCK)
WHERE regDate >= @sDate
  AND regDate <= @eDate
ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for game_item_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_save]
GO

CREATE PROCEDURE [dbo].[game_item_save]
(
	@idx int
,	@item1_type int
,	@item1_code int
,	@item2_type int
,	@item2_code int
,	@item3_type int
,	@item3_code int
,	@item4_type int
,	@item4_code int
,	@item5_type int
,	@item5_code int
,	@item6_type int
,	@item6_code int
,	@item7_type int
,	@item7_code int
,	@item8_type int
,	@item8_code int
,	@item9_type int
,	@item9_code int
,	@item10_type int
,	@item10_code int
,	@item11_type int
,	@item11_code int
,	@item12_type int
,	@item12_code int
,	@item13_type int
,	@item13_code int
,	@item14_type int
,	@item14_code int
,	@item15_type int
,	@item15_code int
,	@item16_type int
,	@item16_code int
,	@item17_type int
,	@item17_code int
,	@item18_type int
,	@item18_code int
,	@item19_type int
,	@item19_code int
,	@item20_type int
,	@item20_code int
)
As
	UPDATE userItemDB SET
	item1_type = @item1_type
,	item1_code = @item1_code
,	item2_type = @item2_type
,	item2_code = @item2_code
,	item3_type = @item3_type
,	item3_code = @item3_code
,	item4_type = @item4_type
,	item4_code = @item4_code
,	item5_type = @item5_type
,	item5_code = @item5_code
,	item6_type = @item6_type
,	item6_code = @item6_code
,	item7_type = @item7_type
,	item7_code = @item7_code
,	item8_type = @item8_type
,	item8_code = @item8_code
,	item9_type = @item9_type
,	item9_code = @item9_code
,	item10_type = @item10_type
,	item10_code = @item10_code
,	item11_type = @item11_type
,	item11_code = @item11_code
,	item12_type = @item12_type
,	item12_code = @item12_code
,	item13_type = @item13_type
,	item13_code = @item13_code
,	item14_type = @item14_type
,	item14_code = @item14_code
,	item15_type = @item15_type
,	item15_code = @item15_code
,	item16_type = @item16_type
,	item16_code = @item16_code
,	item17_type = @item17_type
,	item17_code = @item17_code
,	item18_type = @item18_type
,	item18_code = @item18_code
,	item19_type = @item19_type
,	item19_code = @item19_code
,	item20_type = @item20_type
,	item20_code = @item20_code
	WHERE idx = @idx
GO


-- ----------------------------
-- procedure structure for web_ranking_class_detail_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_class_detail_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_class_detail_count]
GO

CREATE PROCEDURE [dbo].[web_ranking_class_detail_count]
(
	@classType int
)
AS
	SELECT count(*) FROM userRankingDB_class_top100 WITH(NOLOCK) WHERE classType=@classType
GO


-- ----------------------------
-- procedure structure for manage_define_get_maxcode_gear
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_define_get_maxcode_gear]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_define_get_maxcode_gear]
GO

CREATE PROCEDURE [dbo].[manage_define_get_maxcode_gear]
AS
	SELECT MAX(CONVERT(int, RIGHT(code, 3))) FROM define_manage WHERE objName='gear'
GO


-- ----------------------------
-- procedure structure for game_league_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_self_index]
GO

CREATE PROCEDURE [dbo].[game_league_self_index]
(
	@accountIDX int
)
AS

SET NOCOUNT ON

SELECT TOP 1 idx
FROM dbo.userLeagueListDB WITH(NOLOCK)
WHERE accountIDX = @accountIDX
ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_guild_hp_member_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_hp_member_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_hp_member_list]
GO

CREATE PROCEDURE [dbo].[web_guild_hp_member_list]
(
	@guildIDX int
,	@pagesize int
,	@notpage int
)
AS
	DECLARE @sql nvarchar(2000)
	DECLARE @ParmDefinition nvarchar(500)

	SET @sql = N'SELECT TOP (@pagesize_in) b.userLevel, d.accountIDX, d.nickName, b.connDate, c.gameServerID, ISNULL(e.class, 0) as ''userRanking'' '
	SET @sql = @sql + 'FROM userGuildInfoDB a WITH(NOLOCK) INNER JOIN userGameDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX INNER JOIN userLoginDB c WITH(NOLOCK) ON a.accountIDX = c.accountIDX INNER JOIN userMemberDB d WITH(NOLOCK) ON a.accountIDX = d.accountIDX LEFT JOIN userRankingDB e WITH(NOLOCK) ON a.accountIDX = e.accountIDX '
	SET @sql = @sql + 'WHERE a.guildIDX=@guildIDX_in and a.guildJoinType=1 and a.idx not in (SELECT TOP (@notpage_in) a.idx FROM userGuildInfoDB a WITH(NOLOCK) INNER JOIN userGameDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX INNER JOIN userLoginDB c WITH(NOLOCK) ON a.accountIDX = c.accountIDX INNER JOIN userMemberDB d WITH(NOLOCK) ON a.accountIDX = d.accountIDX LEFT JOIN userRankingDB e WITH(NOLOCK) ON a.accountIDX = e.accountIDX WHERE a.guildIDX=@guildIDX_in and a.guildJoinType=1 ORDER BY b.userLevel DESC) '
	SET @sql = @sql + 'ORDER BY b.userLevel DESC'

	SET @ParmDefinition = N'@guildIDX_in int, @pagesize_in int, @notpage_in int'

	EXECUTE sp_executesql @sql, @ParmDefinition, @guildIDX_in=@guildIDX, @pagesize_in=@pagesize, @notpage_in=@notpage
GO


-- ----------------------------
-- procedure structure for game_class_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_class_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_class_get_list]
GO

CREATE PROCEDURE [dbo].[game_class_get_list]
(
	@accountIDX INT
)
AS

SET NOCOUNT ON

SELECT idx,
       class1_type, class1_level, class1_expert, class1_stat, class2_type, class2_level, class2_expert, class2_stat,
       class3_type, class3_level, class3_expert, class3_stat, class4_type, class4_level, class4_expert, class4_stat,
       class5_type, class5_level, class5_expert, class5_stat, class6_type, class6_level, class6_expert, class6_stat,
       class7_type, class7_level, class7_expert, class7_stat, class8_type, class8_level, class8_expert, class8_stat,
       class9_type, class9_level, class9_expert, class9_stat, class10_type, class10_level, class10_expert, class10_stat
  FROM dbo.userClassDB WITH(NOLOCK)
 WHERE accountIDX = @accountIDX
 ORDER BY idx ASC
GO


-- ----------------------------
-- procedure structure for manage_class_price
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_class_price]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_class_price]
GO

CREATE PROCEDURE [dbo].[manage_class_price]
(
	@sDate varchar(10)
,	@eDate varchar(10)
)
AS
	SELECT	class1_price, class2_price, class3_price, class4_price, class5_price, class6_price, class7_price, class8_price, class9_price, class10_price,
			class11_price, class12_price, class13_price, class14_price, class15_price, class16_price, class17_price, class18_price, class19_price, class20_price,
			class21_price, class22_price, class23_price, class24_price, class25_price, class26_price, class27_price, class28_price, class29_price, class30_price,
			class31_price, class32_price, class33_price, class34_price, class35_price, class36_price, class37_price, class38_price, class39_price, class40_price,
			class41_price, class42_price, class43_price, class44_price, class45_price, class46_price, class47_price, class48_price, class49_price, class50_price,
			regDate
	FROM define_class_price WHERE regDate >= @sDate and regDate <= @eDate ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for game_item_medal_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_medal_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_medal_save]
GO

CREATE PROCEDURE [dbo].[game_item_medal_save]
(
	@idx int
,	@item1_type int
,	@item1_class int
,	@item1_limitType int
,	@item1_limitDate datetime
,	@item2_type int
,	@item2_class int
,	@item2_limitType int
,	@item2_limitDate datetime
,	@item3_type int
,	@item3_class int
,	@item3_limitType int
,	@item3_limitDate datetime
,	@item4_type int
,	@item4_class int
,	@item4_limitType int
,	@item4_limitDate datetime
,	@item5_type int
,	@item5_class int
,	@item5_limitType int
,	@item5_limitDate datetime
,	@item6_type int
,	@item6_class int
,	@item6_limitType int
,	@item6_limitDate datetime
,	@item7_type int
,	@item7_class int
,	@item7_limitType int
,	@item7_limitDate datetime
,	@item8_type int
,	@item8_class int
,	@item8_limitType int
,	@item8_limitDate datetime
,	@item9_type int
,	@item9_class int
,	@item9_limitType int
,	@item9_limitDate datetime
,	@item10_type int
,	@item10_class int
,	@item10_limitType int
,	@item10_limitDate datetime
)
AS
	UPDATE userItemMedalDB SET
		item1_type = @item1_type
,		item1_class = @item1_class
,		item1_limitType = @item1_limitType
,		item1_limitDate = @item1_limitDate
,		item2_type = @item2_type
,		item2_class = @item2_class
,		item2_limitType = @item2_limitType
,		item2_limitDate = @item2_limitDate
,		item3_type = @item3_type
,		item3_class = @item3_class
,		item3_limitType = @item3_limitType
,		item3_limitDate = @item3_limitDate
,		item4_type = @item4_type
,		item4_class = @item4_class
,		item4_limitType = @item4_limitType
,		item4_limitDate = @item4_limitDate
,		item5_type = @item5_type
,		item5_class = @item5_class
,		item5_limitType = @item5_limitType
,		item5_limitDate = @item5_limitDate
,		item6_type = @item6_type
,		item6_class = @item6_class
,		item6_limitType = @item6_limitType
,		item6_limitDate = @item6_limitDate
,		item7_type = @item7_type
,		item7_class = @item7_class
,		item7_limitType = @item7_limitType
,		item7_limitDate = @item7_limitDate
,		item8_type = @item8_type
,		item8_class = @item8_class
,		item8_limitType = @item8_limitType
,		item8_limitDate = @item8_limitDate
,		item9_type = @item9_type
,		item9_class = @item9_class
,		item9_limitType = @item9_limitType
,		item9_limitDate = @item9_limitDate
,		item10_type = @item10_type
,		item10_class = @item10_class
,		item10_limitType = @item10_limitType
,		item10_limitDate = @item10_limitDate
	WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_ranking_award_top3_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_award_top3_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_award_top3_list]
GO

CREATE PROCEDURE [dbo].[web_ranking_award_top3_list]      
      
AS      
	SELECT awardType, accountIDX, nickname, userLevel FROM userRankingDB_award_top100 WITH(NOLOCK)      
	WHERE rank_now in (1,2,3) ORDER BY awardType ASC, rank_now ASC
GO


-- ----------------------------
-- procedure structure for game_trade_get_list_original
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_trade_get_list_original]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_trade_get_list_original]
GO

CREATE PROCEDURE [dbo].[game_trade_get_list_original]
(
	@topn int
,	@idx int
)
AS
	DECLARE @sql nvarchar(1000)
	DECLARE @ParmDefinition nvarchar(500)

	SET @sql = N'SELECT TOP (@topn_in) a.idx, a.accountIDX, b.nickName, a.itemType, a.value1, a.value2, a.price, a.mcustom, a.fcustom, a.periodDate, a.regDate '
	SET @sql = @sql + ' FROM userTradeDB a WITH(NOLOCK) JOIN userMemberDB b WITH(NOLOCK) on a.accountIDX=b.accountIDX WHERE a.idx < @idx_in ORDER BY a.idx DESC'

	SET @ParmDefinition = N'@topn_in int, @idx_in int'

	EXECUTE sp_executesql @SQL, @ParmDefinition, @topn_in=@topn, @idx_in=@idx
GO


-- ----------------------------
-- procedure structure for manage_define_get_maxcode_decoM
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_define_get_maxcode_decoM]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_define_get_maxcode_decoM]
GO

CREATE PROCEDURE [dbo].[manage_define_get_maxcode_decoM]

AS
	SELECT ISNULL(MAX(code),0) FROM define_manage 
	WHERE objName in ('faceM', 'haircolorM', 'hairM', 'skincolorM', 'underwearM')
GO


-- ----------------------------
-- procedure structure for game_league_round_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_round_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_round_save]
GO

CREATE PROCEDURE [dbo].[game_league_round_save]
(
	@idx int
,	@roundType1_playDate int
,	@roundType1_presentCode1 int
,	@roundType1_presentCode2 int
,	@roundType1_presentCode3 int
,	@roundType1_presentCode4 int
,	@roundType2_playDate int
,	@roundType2_presentCode1 int
,	@roundType2_presentCode2 int
,	@roundType2_presentCode3 int
,	@roundType2_presentCode4 int
,	@roundType3_playDate int
,	@roundType3_presentCode1 int
,	@roundType3_presentCode2 int
,	@roundType3_presentCode3 int
,	@roundType3_presentCode4 int
,	@roundType4_playDate int
,	@roundType4_presentCode1 int
,	@roundType4_presentCode2 int
,	@roundType4_presentCode3 int
,	@roundType4_presentCode4 int
,	@roundType5_playDate int
,	@roundType5_presentCode1 int
,	@roundType5_presentCode2 int
,	@roundType5_presentCode3 int
,	@roundType5_presentCode4 int
,	@roundType6_playDate int
,	@roundType6_presentCode1 int
,	@roundType6_presentCode2 int
,	@roundType6_presentCode3 int
,	@roundType6_presentCode4 int
,	@roundType7_playDate int
,	@roundType7_presentCode1 int
,	@roundType7_presentCode2 int
,	@roundType7_presentCode3 int
,	@roundType7_presentCode4 int
,	@roundType8_playDate int
,	@roundType8_presentCode1 int
,	@roundType8_presentCode2 int
,	@roundType8_presentCode3 int
,	@roundType8_presentCode4 int
,	@roundType9_playDate int
,	@roundType9_presentCode1 int
,	@roundType9_presentCode2 int
,	@roundType9_presentCode3 int
,	@roundType9_presentCode4 int
,	@roundType10_playDate int
,	@roundType10_presentCode1 int
,	@roundType10_presentCode2 int
,	@roundType10_presentCode3 int
,	@roundType10_presentCode4 int
,	@roundType11_playDate int
,	@roundType11_presentCode1 int
,	@roundType11_presentCode2 int
,	@roundType11_presentCode3 int
,	@roundType11_presentCode4 int
)
AS

SET NOCOUNT ON

UPDATE dbo.userLeagueRoundDB
   SET roundType1_playDate = @roundType1_playDate,
	   roundType1_presentCode1 = @roundType1_presentCode1,
	   roundType1_presentCode2 = @roundType1_presentCode2,
	   roundType1_presentCode3 = @roundType1_presentCode3,
	   roundType1_presentCode4 = @roundType1_presentCode4,
	   roundType2_playDate = @roundType2_playDate,
	   roundType2_presentCode1 = @roundType2_presentCode1,
	   roundType2_presentCode2 = @roundType2_presentCode2,
	   roundType2_presentCode3 = @roundType2_presentCode3,
	   roundType2_presentCode4 = @roundType2_presentCode4,
	   roundType3_playDate = @roundType3_playDate,
	   roundType3_presentCode1 = @roundType3_presentCode1,
	   roundType3_presentCode2 = @roundType3_presentCode2,
	   roundType3_presentCode3 = @roundType3_presentCode3,
	   roundType3_presentCode4 = @roundType3_presentCode4,
	   roundType4_playDate = @roundType4_playDate,
	   roundType4_presentCode1 = @roundType4_presentCode1,
	   roundType4_presentCode2 = @roundType4_presentCode2,
	   roundType4_presentCode3 = @roundType4_presentCode3,
	   roundType4_presentCode4 = @roundType4_presentCode4,
	   roundType5_playDate = @roundType5_playDate,
	   roundType5_presentCode1 = @roundType5_presentCode1,
	   roundType5_presentCode2 = @roundType5_presentCode2,
	   roundType5_presentCode3 = @roundType5_presentCode3,
	   roundType5_presentCode4 = @roundType5_presentCode4,
	   roundType6_playDate = @roundType6_playDate,
	   roundType6_presentCode1 = @roundType6_presentCode1,
	   roundType6_presentCode2 = @roundType6_presentCode2,
	   roundType6_presentCode3 = @roundType6_presentCode3,
	   roundType6_presentCode4 = @roundType6_presentCode4,
	   roundType7_playDate = @roundType7_playDate,
	   roundType7_presentCode1 = @roundType7_presentCode1,
	   roundType7_presentCode2 = @roundType7_presentCode2,
	   roundType7_presentCode3 = @roundType7_presentCode3,
	   roundType7_presentCode4 = @roundType7_presentCode4,
	   roundType8_playDate = @roundType8_playDate,
	   roundType8_presentCode1 = @roundType8_presentCode1,
	   roundType8_presentCode2 = @roundType8_presentCode2,
	   roundType8_presentCode3 = @roundType8_presentCode3,
	   roundType8_presentCode4 = @roundType8_presentCode4,
	   roundType9_playDate = @roundType9_playDate,
	   roundType9_presentCode1 = @roundType9_presentCode1,
	   roundType9_presentCode2 = @roundType9_presentCode2,
	   roundType9_presentCode3 = @roundType9_presentCode3,
	   roundType9_presentCode4 = @roundType9_presentCode4,
	   roundType10_playDate = @roundType10_playDate,
	   roundType10_presentCode1 = @roundType10_presentCode1,
	   roundType10_presentCode2 = @roundType10_presentCode2,
	   roundType10_presentCode3 = @roundType10_presentCode3,
	   roundType10_presentCode4 = @roundType10_presentCode4,
	   roundType11_playDate = @roundType11_playDate,
	   roundType11_presentCode1 = @roundType11_presentCode1,
	   roundType11_presentCode2 = @roundType11_presentCode2,
	   roundType11_presentCode3 = @roundType11_presentCode3,
	   roundType11_presentCode4 = @roundType11_presentCode4
 WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for manage_event_prize_winner_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_prize_winner_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_prize_winner_list]
GO

CREATE PROCEDURE [dbo].[manage_event_prize_winner_list]
(
	@pageSize varchar(8)
,	@notInPage varchar(8)
)
As
	Declare @strSQL varchar(500)

	Set @strSQL = ''
	Set @strSQL = @strSQL + 'SELECT TOP '+@pageSize+' a.accountIDX, a.giftType, a.userIP, a.regDate, isNull(b.nickName, 0) as ''nickName'', isNull(b.userID, 0) as ''userID'', isNull(b.email, 0) as ''email'' From LosaGame_log.DBO.log_event_openbeta a Left join userMemberDB b on a.accountIDX = b.accountIDX '
	Set @strSQL = @strSQL + 'Where resultType=1 and a.idx not in (SELECT TOP ' + @notInPage + ' idx From LosaGame_log.DBO.log_event_openbeta WHERE resultType=1 order by idx desc) '
	Set @strSQL = @strSQL + 'order by a.idx desc'

	Exec(@strSQL)
GO


-- ----------------------------
-- procedure structure for game_league_winner_info_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_winner_info_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_winner_info_add]
GO

CREATE PROCEDURE [dbo].[game_league_winner_info_add]
(
	@startDate int
,	@teamIDX int
)
AS

SET NOCOUNT ON

DECLARE @historyIDX int
DECLARE @classType int
DECLARE @CI_gender int
DECLARE @CI_face int
DECLARE @CI_hair int
DECLARE @CI_skinColor int
DECLARE @CI_hairColor int
DECLARE @CI_underwear int
DECLARE @EI1_type int
DECLARE @EI2_type int
DECLARE @EI3_type int
DECLARE @EI4_type int
DECLARE @classGear1 int
DECLARE @classGear2 int
DECLARE @classGear3 int
DECLARE @classGear4 int
DECLARE @classCnt int
DECLARE @winnerAccountIDX table (accountIDX int)

SET @classGear1 = 0
SET @classGear2 = 0
SET @classGear3 = 0
SET @classGear4 = 0

IF (@teamIDX = 0)
BEGIN
	RETURN
END

SET @historyIDX = (
	SELECT TOP 1 idx
	  FROM dbo.userLeagueWinnerHistoryDB WITH(NOLOCK)
	 WHERE startDate=@startDate
	   AND teamIDX=@teamIDX
	 ORDER BY idx DESC
)

IF (@historyIDX IS NULL)
BEGIN
	RETURN
END

INSERT INTO dbo.userLeagueWinnerInfoDB (
	accountIDX, nickName, userLevel, historyIDX, teamIDX, 
	classType, classGender, classFace, classHair, classSkinColor, classHairColor, classUnderwear, 
	classGear1, classGear2, classGear3, classGear4, regDate
)
SELECT a.accountIDX, b.nickName, c.userLevel, @historyIDX, @teamIDX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE()
  FROM dbo.userLeagueTeamMemberDB a WITH(NOLOCK)
  JOIN dbo.userMemberDB b WITH(NOLOCK)
    ON a.accountIDX = b.accountIDX
  JOIN dbo.userGameDB c WITH(NOLOCK)
    ON a.accountIDX = c.accountIDX
 WHERE a.teamIDX=@teamIDX

INSERT INTO @winnerAccountIDX (accountIDX)
SELECT accountIDX
  FROM dbo.userLeagueWinnerInfoDB WITH(NOLOCK)
 WHERE teamIDX=@teamIDX


DECLARE selectCharacter CURSOR
FOR
SELECT accountIDX FROM @winnerAccountIDX
FOR READ ONLY	

OPEN selectCharacter

DECLARE @winnerIDX INT
FETCH NEXT FROM selectCharacter INTO @winnerIDX

WHILE @@FETCH_STATUS = 0
BEGIN
	SET @classCnt = (
		SELECT COUNT(*) FROM dbo.userCharacterDB WITH(NOLOCK) WHERE accountIDX=@winnerIDX
	)

	IF (@classCnt > 0)
	BEGIN
		IF (EXISTS(SELECT * FROM dbo.userCharacterDB WITH(NOLOCK) WHERE accountIDX=@winnerIDX AND leaderType=1))
		BEGIN
			SELECT TOP 1
				@classType = ClassType,
				@CI_gender = CI_gender,
				@CI_face = CI_face,
				@CI_hair = CI_hair,
				@CI_skinColor = CI_skinColor,
				@CI_hairColor = CI_hairColor,
				@CI_underwear = CI_underwear,
				@EI1_type = EI1_type,
				@EI2_type = EI2_type,
				@EI3_type = EI3_type,
				@EI4_type = EI4_type
			  FROM dbo.userCharacterDB WITH(NOLOCK)
			 WHERE accountIDX = @winnerIDX
			   AND leaderType=1
		END
		ELSE
		BEGIN
			SELECT TOP 1
				@classType = ClassType,
				@CI_gender = CI_gender,
				@CI_face = CI_face,
				@CI_hair = CI_hair,
				@CI_skinColor = CI_skinColor,
				@CI_hairColor = CI_hairColor,
				@CI_underwear = CI_underwear,
				@EI1_type = EI1_type,
				@EI2_type = EI2_type,
				@EI3_type = EI3_type,
				@EI4_type = EI4_type
			  FROM dbo.userCharacterDB WITH(NOLOCK)
			 WHERE accountIDX = @winnerIDX
			 ORDER BY CI_position ASC
		END

		IF (@EI1_type > 0)
		BEGIN
			SET @classGear1 = ISNULL(dbo.SELECT_GEAR_CODE(@winnerIDX, @EI1_type), 0)
		END

		IF (@EI2_type > 0)
		BEGIN
			SET @classGear2 = ISNULL(dbo.SELECT_GEAR_CODE(@winnerIDX, @EI2_type), 0)
		END

		IF (@EI3_type > 0)
		BEGIN
			SET @classGear3 = ISNULL(dbo.SELECT_GEAR_CODE(@winnerIDX, @EI3_type), 0)
		END

		IF (@EI4_type > 0)
		BEGIN
			SET @classGear4 = ISNULL(dbo.SELECT_GEAR_CODE(@winnerIDX, @EI4_type), 0)
		END

		UPDATE dbo.userLeagueWinnerInfoDB
		   SET classType = @classType,
			   classGender = @CI_gender,
			   classFace = @CI_face,
			   classHair = @CI_hair,
			   classSkinColor = @CI_skinColor,
			   classHairColor = @CI_hairColor,
			   classUnderwear = @CI_underwear,
			   classGear1 = @classGear1,
			   classGear2 = @classGear2,
			   classGear3 = @classGear3,
			   classGear4 = @classGear4
		 WHERE accountIDX=@winnerIDX
		   AND teamIDX=@teamIDX
	END

	FETCH NEXT FROM selectCharacter INTO @winnerIDX
END

CLOSE selectCharacter
DEALLOCATE selectCharacter
GO


-- ----------------------------
-- procedure structure for game_class_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_class_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_class_add]
GO

CREATE PROCEDURE [dbo].[game_class_add]
(
	@accountIDX INT
,	@class1_type INT
,	@class1_level INT
,	@class1_expert INT
,	@class1_stat TINYINT
,	@class2_type INT
,	@class2_level INT
,	@class2_expert INT
,	@class2_stat TINYINT
,	@class3_type INT
,	@class3_level INT
,	@class3_expert INT
,	@class3_stat TINYINT
,	@class4_type INT
,	@class4_level INT
,	@class4_expert INT
,	@class4_stat TINYINT
,	@class5_type INT
,	@class5_level INT
,	@class5_expert INT
,	@class5_stat TINYINT
,	@class6_type INT
,	@class6_level INT
,	@class6_expert INT
,	@class6_stat TINYINT
,	@class7_type INT
,	@class7_level INT
,	@class7_expert INT
,	@class7_stat TINYINT
,	@class8_type INT
,	@class8_level INT
,	@class8_expert INT
,	@class8_stat TINYINT
,	@class9_type INT
,	@class9_level INT
,	@class9_expert INT
,	@class9_stat TINYINT
,	@class10_type INT
,	@class10_level INT
,	@class10_expert INT
,	@class10_stat TINYINT
)
AS

SET NOCOUNT ON

INSERT INTO dbo.userClassDB (
	accountIDX,
	class1_type, class1_level, class1_expert, class1_stat, class2_type, class2_level, class2_expert, class2_stat,
 	class3_type, class3_level, class3_expert, class3_stat, class4_type, class4_level, class4_expert, class4_stat,
	class5_type, class5_level, class5_expert, class5_stat, class6_type, class6_level, class6_expert, class6_stat,
	class7_type, class7_level, class7_expert, class7_stat, class8_type, class8_level, class8_expert, class8_stat,
	class9_type, class9_level, class9_expert, class9_stat, class10_type, class10_level, class10_expert, class10_stat
)
VALUES (
	@accountIDX,
	@class1_type, @class1_level, @class1_expert, @class1_stat, @class2_type, @class2_level, @class2_expert, @class2_stat,
	@class3_type, @class3_level, @class3_expert, @class3_stat, @class4_type, @class4_level, @class4_expert, @class4_stat,
	@class5_type, @class5_level, @class5_expert, @class5_stat, @class6_type, @class6_level, @class6_expert, @class6_stat,
	@class7_type, @class7_level, @class7_expert, @class7_stat, @class8_type, @class8_level, @class8_expert, @class8_stat,
	@class9_type, @class9_level, @class9_expert, @class9_stat, @class10_type, @class10_level, @class10_expert, @class10_stat
)
GO


-- ----------------------------
-- procedure structure for web_recommend_inc_index_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_recommend_inc_index_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_recommend_inc_index_add]
GO

CREATE PROCEDURE [dbo].[web_recommend_inc_index_add]
(
	@accountIDX int
)
As
	UPDATE userInfoDB SET rec_index = rec_index + 1 where accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_item_medal_get_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_medal_get_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_medal_get_self_index]
GO

CREATE PROCEDURE [dbo].[game_item_medal_get_self_index]
(
	@accountIDX int
)
AS
	SELECT TOP 1 idx FROM userItemMedalDB WHERE accountIDX = @accountIDX ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_ranking_award_top3_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_award_top3_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_award_top3_count]
GO

CREATE PROCEDURE [dbo].[web_ranking_award_top3_count]

AS
	DECLARE @nDate datetime, @dateIDX char(8)
	SET @nDate = Left(getdate(),10)
	SET @dateIDX = convert(char(8),@nDate,112)

	IF (not exists(SELECT TOP 1 * FROM userRankingDB_award_top3 WITH(NOLOCK) WHERE dateIDX=@dateIDX))
	BEGIN
		SET @dateIDX = convert(char(8),Left(getdate()-1,10),112)
	END

	SELECT count(*) FROM userRankingDB_award_top3 WITH(NOLOCK) WHERE dateIDX = @dateIDX
GO


-- ----------------------------
-- procedure structure for manage_define_get_maxcode_decoF
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_define_get_maxcode_decoF]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_define_get_maxcode_decoF]
GO

CREATE PROCEDURE [dbo].[manage_define_get_maxcode_decoF]

AS
	SELECT ISNULL(MAX(code),0) FROM define_manage 
	WHERE objName in ('faceF', 'haircolorF', 'hairF', 'skincolorF', 'underwearF')
GO


-- ----------------------------
-- procedure structure for game_league_round_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_round_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_round_data]
GO

CREATE PROCEDURE [dbo].[game_league_round_data]
(
	@infoIDX int
)
AS

SET NOCOUNT ON

SELECT idx,
	   roundType1_playDate, roundType1_presentCode1, roundType1_presentCode2, roundType1_presentCode3, roundType1_presentCode4,
	   roundType2_playDate, roundType2_presentCode1, roundType2_presentCode2, roundType2_presentCode3, roundType2_presentCode4,
	   roundType3_playDate, roundType3_presentCode1, roundType3_presentCode2, roundType3_presentCode3, roundType3_presentCode4,
	   roundType4_playDate, roundType4_presentCode1, roundType4_presentCode2, roundType4_presentCode3, roundType4_presentCode4,
	   roundType5_playDate, roundType5_presentCode1, roundType5_presentCode2, roundType5_presentCode3, roundType5_presentCode4,
	   roundType6_playDate, roundType6_presentCode1, roundType6_presentCode2, roundType6_presentCode3, roundType6_presentCode4,
	   roundType7_playDate, roundType7_presentCode1, roundType7_presentCode2, roundType7_presentCode3, roundType7_presentCode4,
	   roundType8_playDate, roundType8_presentCode1, roundType8_presentCode2, roundType8_presentCode3, roundType8_presentCode4,
	   roundType9_playDate, roundType9_presentCode1, roundType9_presentCode2, roundType9_presentCode3, roundType9_presentCode4,
	   roundType10_playDate, roundType10_presentCode1, roundType10_presentCode2, roundType10_presentCode3, roundType10_presentCode4,
	   roundType11_playDate, roundType11_presentCode1, roundType11_presentCode2, roundType11_presentCode3, roundType11_presentCode4
  FROM dbo.userLeagueRoundDB WITH(NOLOCK)
 WHERE infoIDX=@infoIDX
GO


-- ----------------------------
-- procedure structure for manage_event_ilikeclick_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_ilikeclick_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_ilikeclick_list]
GO

CREATE PROCEDURE [dbo].[manage_event_ilikeclick_list]
(
	@pageSize varchar(8)
,	@notInPage varchar(8)
)
AS
	DECLARE @strSQL varchar(1000)

	SET @strSQL = ''
	SET @strSQL = @strSQL + 'SELECT TOP ' + @pageSize + ' a.idx, a.accountIDX, a.merchantName, a.gold, a.regDate, isNull(b.nickName, ''회원탈퇴'') as ''nickName'' From Losagame_log.DBO.log_ilikeclick a '
	SET @strSQL = @strSQL + 'LEFT JOIN userMemberDB b ON a.accountIDX=b.accountIDX '
	SET @strSQL = @strSQL + 'WHERE a.idx not in (SELECT TOP ' + @notInPage + ' idx FROM Losagame_log.DBO.log_ilikeclick ORDER BY idx DESC) '
	SET @strSQL = @strSQL + 'ORDER BY idx DESC'

	EXEC(@strSQL)
GO


-- ----------------------------
-- procedure structure for USP_LTS_WEEKTIME_INS
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_WEEKTIME_INS]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_WEEKTIME_INS]
GO

CREATE PROCEDURE [dbo].[USP_LTS_WEEKTIME_INS] 
	-- Add the parameters for the stored procedure here
	@strPUserID		varchar(25),			-- 부모_계정 고유 일련번호(자녀 스스로 설정인 경우 자녀_계정 고유번호 입력)
	@strCUserID		varchar(25),			-- 자녀_계정 고유 일련번호	
	@intCGmtCodeNo		int,			-- 자녀_GmtCodeNo (전체설정 : 201100)
	@sTimeLst		varchar(4000),		-- 시간설정목록 : ','구분자 포함
	@sGameLst		varchar(100),		-- 자녀나이별플레이가능한게임목록 : ','구분자 포함
	@strRegIP		varchar(15)
AS
/*
	Grant Execute on dbo.USP_LTS_WEEKTIME_INS to Mirusr_1
*/
BEGIN
	-- 변수 선언
	DECLARE @nRetVal	smallint
	DECLARE @sWeekTime	varchar(4)
	DECLARE @nGmtCodeNo	int

	DECLARE @nTTotLen	int,
		@nTStartPos	int,
		@nTEndPos	int,
		@nTNowPos	int
	DECLARE @nGTotLen	int,
		@nGStartPos	int,
		@nGEndPos	int,
		@nGNowPos	int

	-- 변수 세팅
	SET @nGmtCodeNo = 0

	SET @sTimeLst	= ISNULL(@sTimeLst, '')
	SET @nTTotLen	= LEN(@sTimeLst)
	SET @nTStartPos	= 0

	SET @sGameLst	= ISNULL(@sGameLst, '')
	SET @nGTotLen	= LEN(@sGameLst)
	SET @nGStartPos	= 0

	-- 자녀 스스로 게임 설정한 경우 
	IF @strPUserID = @strCUserID 
	BEGIN
		EXEC @nRetVal = dbo.USP_LTS_WEEKTIME_PARENT_CHILD_SELF_INS @strPUserID, @strCUserID, 'S', @strRegIP

		IF @nRetVal < 1 
		BEGIN
			RETURN (-1)
		END
	END 

	-- 트랜잭션 시작
	BEGIN TRAN

	-- 전체 설정인 경우
	IF @intCGmtCodeNo = 201100 
	BEGIN
		-- 이미 등록해 놓은 시간 설정값이 있는경우 -> 시간 설정값 제거
		DELETE 
		  FROM dbo.TB_LTS_WEEKTIME
		 WHERE UserId = @strCUserID

		IF @@ERROR <> 0
		BEGIN
			ROLLBACK TRAN
			RETURN (-2)
		END
	END 
	ELSE
	BEGIN
		-- 바로 전 설정이 전체설정인 경우 
		IF EXISTS ( SELECT *
			      FROM dbo.TB_LTS_WEEKTIME WITH (NOLOCK)
			     WHERE UserId = @strCUserID
			       AND GmtCodeNo = 201100 )
		BEGIN
			-- 나머지 게임에 게임 설정 등록
			IF @nGTotLen > 0
			BEGIN
				WHILE @nGStartPos <= @nGTotLen
				BEGIN
					-- 시작위치부터 가장 먼저나오는 구분자의 위치값 찾기
					SET @nGNowPos = charindex(',', @sGameLst, @nGStartPos)

					IF @nGNowPos = 0
					BEGIN
						SET @nGEndPos = @nGTotLen 
					END
					ELSE
					BEGIN
						SET @nGEndPos = @nGNowPos
					END

					-- 게임코드번호 추출
					SET @nGmtCodeNo = CAST(SUBSTRING(@sGameLst, @nGStartPos, @nGEndPos - @nGStartPos) AS INT)

					-- 등록
					INSERT INTO dbo.TB_LTS_WEEKTIME(UserId, GmtCodeNo, Wday, Wtime)
					SELECT @strCUserID, @nGmtCodeNo, Wday, Wtime
					  FROM dbo.TB_LTS_WEEKTIME WITH (NOLOCK)
					 WHERE UserId = @strCUserID
					   AND GmtCodeNo = 201100	
										
					IF @@ERROR <> 0
					BEGIN
						ROLLBACK TRAN
						RETURN (-5)
					END

					-- 시작위치값 변경
					SET @nGStartPos = @nGEndPos + 1
				END
			END
			
			-- 게임별 설정한 경우 전체선택 기록 삭제
			DELETE 
			  FROM dbo.TB_LTS_WEEKTIME
			 WHERE UserId = @strCUserID
			   AND GmtCodeNo = 201100

			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRAN
				RETURN (-4)
			END
		END 

		-- 해당 게임에 이미 등록해 놓은 시간 설정값이 있는경우 -> 시간 설정값 제거
		DELETE 
		  FROM dbo.TB_LTS_WEEKTIME
		 WHERE UserId = @strCUserID
		   AND GmtCodeNo = @intCGmtCodeNo

		IF @@ERROR <> 0
		BEGIN
			ROLLBACK TRAN
			RETURN (-6)
		END
	END

	-- 시간 설정 등록
	IF @nTTotLen > 0
	BEGIN
		WHILE @nTStartPos <= @nTTotLen
		BEGIN
			-- 시작위치부터 가장 먼저나오는 구분자의 위치값 찾기
			SET @nTNowPos = charindex(',', @sTimeLst, @nTStartPos)

			IF @nTNowPos = 0
			BEGIN
				SET @nTEndPos = @nTTotLen 
			END
			ELSE
			BEGIN
				SET @nTEndPos = @nTNowPos
			END

			-- 시간 추출
			SET @sWeekTime = SUBSTRING(@sTimeLst, @nTStartPos, @nTEndPos - @nTStartPos)

			-- 등록
			INSERT INTO dbo.TB_LTS_WEEKTIME(UserId, GmtCodeNo, Wday, Wtime)
			     VALUES (@strCUserID, @intCGmtCodeNo, CAST(SUBSTRING(@sWeekTime, 1, 1) AS INT), CAST(SUBSTRING(@sWeekTime, 3, len(@sWeekTime)) AS INT))
			
			IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
			BEGIN
				ROLLBACK TRAN
				RETURN (-3)
			END

			-- 시작위치값 변경
			SET @nTStartPos = @nTEndPos + 1
		END
	END
	COMMIT TRAN
	RETURN (1)
END
GO


-- ----------------------------
-- procedure structure for game_character_sava
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_character_sava]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_character_sava]
GO

CREATE PROCEDURE [dbo].[game_character_sava]
(
	@idx				int			-- 사용자 고유키
,	@ClassType			int			-- 용병 종류
,	@CI_type			int			-- 종족
,	@CI_gender			int			-- 성별
,	@CI_beard			int			-- 수염
,	@CI_face			int			-- 얼굴
,	@CI_hair			int			-- 머리모양
,	@CI_skinColor		int			-- 피부색
,	@CI_hairColor		int			-- 머리색
,	@CI_trinket			int			-- 
,	@CI_underwear		int			--
,	@EI1_type			int			-- 속옷
,	@EI2_type			int			-- 장착 아이템(무기)
,	@EI3_type			int			-- 장착 아이템(갑옷)
,	@EI4_type			int			-- 장착 아이템(투구)
,	@CI_position		int			-- 장착 아이템(망토)
,	@limitTime			int			-- 사용 제한 시간(초)
,	@limitType			int			-- 0: 기간제, 1: 영구
,	@leaderType			smallint	-- 0: 일반 용병, 1: 대표 용병
,	@rentalType			smallint	-- 0: 대여 불가, 1: 대여 가능
,	@rentalTime			int			-- 대여 용병 남은 시간
,	@awakeType			tinyint
,	@awakeTime			int
)
AS

SET NOCOUNT ON

UPDATE dbo.userCharacterDB
   SET ClassType = @ClassType,
       CI_type = @CI_type,
       CI_gender = @CI_gender,
       CI_beard = @CI_beard,
       CI_face = @CI_face,
       CI_hair = @CI_hair,
       CI_skinColor = @CI_skinColor,
       CI_hairColor = @CI_hairColor,
       CI_trinket = @CI_trinket,
       CI_position = @CI_position,
       CI_underwear = @CI_underwear,
       EI1_type = @EI1_type,
       EI2_type = @EI2_type,
       EI3_type = @EI3_type,
       EI4_type = @EI4_type,
       limitTime = @limitTime,
       limitType = @limitType,
       leaderType = @leaderType,
       rentalType = @rentalType,
       rentalTime = @rentalTime,
       awakeType = @awakeType,
       awakeTime =	@awakeTime
 WHERE idx = @idx
GO


-- ----------------------------
-- procedure structure for web_recommend_get_rec_dec
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_recommend_get_rec_dec]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_recommend_get_rec_dec]
GO

CREATE PROCEDURE [dbo].[web_recommend_get_rec_dec]
(
	@accountIDX int
)
AS
	SELECT rec_inc, rec_dec FROM userInfoDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_item_medal_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_medal_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_medal_get_list]
GO

CREATE PROCEDURE [dbo].[game_item_medal_get_list]
(
	@accountIDX int
)
AS
	SELECT	idx
,			item1_type, item1_class, item1_limitType, item1_limitDate
,			item2_type, item2_class, item2_limitType, item2_limitDate
,			item3_type, item3_class, item3_limitType, item3_limitDate
,			item4_type, item4_class, item4_limitType, item4_limitDate
,			item5_type, item5_class, item5_limitType, item5_limitDate
,			item6_type, item6_class, item6_limitType, item6_limitDate
,			item7_type, item7_class, item7_limitType, item7_limitDate
,			item8_type, item8_class, item8_limitType, item8_limitDate
,			item9_type, item9_class, item9_limitType, item9_limitDate
,			item10_type, item10_class, item10_limitType, item10_limitDate
	FROM userItemMedalDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_ranking_award_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_award_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_award_list]
GO

CREATE PROCEDURE [dbo].[web_ranking_award_list]  
(  
	@pagesize int  
	, @nowpage int  
	, @awardType int  
)  
AS  
	SELECT a.accountIDX, a.nickName, a.userLevel, a.rank_prev, a.rank_now, a.awardEXP, b.idx, b.guildName, b.guildmark   
	FROM userRankingDB_award_top100 a WITH(NOLOCK) LEFT JOIN userGuildDB b WITH(NOLOCK) ON a.guildIDX=b.idx  
	WHERE a.AccountIDX not in (2384074, 438421)
	And a.awardType=@awardType and a.rank_now between ((@nowpage - 1) * @pagesize) + 1 and (@nowpage * @pagesize)   
	ORDER BY a.rank_now ASC
GO


-- ----------------------------
-- function structure for GET_MEDAL_POINT
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[GET_MEDAL_POINT]') AND type IN ('FN', 'FS', 'FT', 'IF', 'TF'))
	DROP FUNCTION[dbo].[GET_MEDAL_POINT]
GO

CREATE FUNCTION [dbo].[GET_MEDAL_POINT]
(
	@type int
)

RETURNS int

AS

	BEGIN

	DECLARE @DP_VIT_1 smallint, @DP_VIT_2 smallint, @DP_VIT_3 smallint, @DP_VIT_4 smallint
	DECLARE @DP_TLV_0 smallint, @DP_TLV_1 smallint, @DP_TLV_2 smallint, @DP_TLV_3 smallint
	DECLARE @DP_REC_0 smallint, @DP_REC_1 smallint, @DP_REC_2 smallint, @DP_REC_3 smallint
	DECLARE @DP_ALT_1 smallint, @DP_CLB_1 smallint, @DP_XMS_1 smallint, @DP_NY1_1 smallint
	DECLARE @DP_XMS_2 smallint, @DP_NY_2 smallint, @point int

	SET @DP_VIT_1 = 100
	SET @DP_VIT_2 = 200
	SET @DP_VIT_3 = 300
	SET @DP_VIT_4 = 400
	SET @DP_TLV_0 = 100
	SET @DP_TLV_1 = 200
	SET @DP_TLV_2 = 300
	SET @DP_TLV_3 = 400
	SET @DP_REC_0 = 100
	SET @DP_REC_1 = 200
	SET @DP_REC_2 = 300
	SET @DP_REC_3 = 500
	SET @DP_ALT_1 = 50
	SET @DP_CLB_1 = 50
	SET @DP_XMS_1 = 50	-- 2007 XMS
	SET @DP_NY1_1 = 50
	SET @DP_XMS_2 = 50	-- 2008 XMS
	SET @DP_NY_2 = 50

	SELECT @point =	CASE @type	WHEN  0 THEN 0
					WHEN  1 THEN @DP_VIT_1
					WHEN  2 THEN @DP_VIT_2
					WHEN  3 THEN @DP_VIT_3
					WHEN  4 THEN @DP_TLV_0
					WHEN  5 THEN @DP_TLV_1
					WHEN  6 THEN @DP_TLV_2
					WHEN  7 THEN @DP_TLV_3
					WHEN  8 THEN @DP_REC_0
					WHEN  9 THEN @DP_REC_1
					WHEN  10 THEN @DP_REC_2
					WHEN  11 THEN @DP_REC_3
					WHEN  12 THEN @DP_ALT_1
					WHEN  13 THEN @DP_CLB_1
					WHEN  14 THEN @DP_XMS_1
					WHEN  15 THEN @DP_NY1_1
					WHEN  16 THEN @DP_VIT_4
					WHEN  17 THEN @DP_XMS_2
					WHEN  18 THEN @DP_NY_2
					ELSE 0
			END

	RETURN @point

	END
GO


-- ----------------------------
-- procedure structure for manage_define_get_maxcode
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_define_get_maxcode]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_define_get_maxcode]
GO

CREATE PROCEDURE [dbo].[manage_define_get_maxcode]
(
	@objName varchar(32)
)
AS
	SELECT ISNULL(MAX(code),0) FROM define_manage WHERE objName=@objName
GO


-- ----------------------------
-- procedure structure for game_league_reward_del
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_reward_del]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_reward_del]
GO

CREATE PROCEDURE [dbo].[game_league_reward_del]
(
	@idx int
)
AS

SET NOCOUNT ON

DELETE FROM dbo.userLeagueRewardDB WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_quest_board_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_quest_board_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_quest_board_add]
GO

CREATE PROCEDURE [dbo].[game_quest_board_add]
(
	@accountIDX int
,	@nickname varchar(20)
,	@gameLevel int
,	@questIDX int
,	@userIP varchar(16)
)
AS
/*
	INSERT INTO LosaWeb.DBO.web_quest_board (questIDX, accountIDX, nickname, gameLevel, comtcount, userIP, regDate)
	VALUES (@questIDX, @accountIDX, @nickname, @gameLevel, 0, @userIP, getdate())
*/
GO


-- ----------------------------
-- procedure structure for game_timeCash_set_status
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_timeCash_set_status]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_timeCash_set_status]
GO

CREATE PROCEDURE [dbo].[game_timeCash_set_status]

	@ACCOUNT_IDX		INT,
	@ITEM_CODE			INT
			
AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	DECLARE @nReturn		INT = 0;
	DECLARE @ITEM_STATUS	TINYINT = 0;
	DECLARE @GET_DATE		DATETIME = GETDATE();
	DECLARE @UPD_DATE		DATETIME = 0;

	-- 아이템 기간 만료 및 보유 여부 확인 userTimeCashDB	
	EXEC @nReturn=dbo.usp_timeCash_set_expire @ACCOUNT_IDX, @ITEM_CODE, @GET_DATE, @ITEM_STATUS OUTPUT, @UPD_DATE OUTPUT

	-- -1: 아이템 만료 처리 실패, -2: 없는 아이템
	IF @nReturn IN (-1, -2)
	BEGIN
		SELECT 3;				
		RETURN;
	END

	IF (@nReturn=0) and (@ITEM_STATUS=0)
	BEGIN
		SELECT 0;
		RETURN;
	END
GO


-- ----------------------------
-- procedure structure for game_character_rentaltime_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_character_rentaltime_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_character_rentaltime_save]
GO

CREATE PROCEDURE [dbo].[game_character_rentaltime_save]
(
	@idx int
,	@rentalTime int
)
AS
	UPDATE userCharacterDB SET rentalTime=@rentalTime WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_realmember_namecheck_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_namecheck_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_namecheck_add]
GO

CREATE PROCEDURE [dbo].[web_realmember_namecheck_add]  
(  
	@accountIDX int  
	, @userName varchar(10)  
	, @userBirthday char(6)  
	, @userJumin1 char(12)  
	, @userJumin2 char(14)  
	, @userEnCode varchar(64)  
	, @userGender tinyint  
	, @userNumber tinyint  
	, @userIP varchar(15)  
	, @returnValue tinyint  
	, @realType tinyint  
)  
AS  
  
	-- 인증회원 제거로 실명인증 후 회원등급을 올려주는 부분 주석 처리 120718 by smalldevil
	-- UPDATE userMemberDB SET joinType=5 WHERE accountIDX=@accountIDX  

	INSERT INTO userNameDB (accountIDX, userName, userBirthday, userJumin1, userJumin2, userEnCode, userNumber, userGender, returnValue, userIP, realType, regDate)  
	VALUES (@accountIDX, @userName, @userBirthday, @userJumin1, @userJumin2, @userEnCode, @userNumber, @userGender, @returnValue, @userIP, @realType, getdate())
GO


-- ----------------------------
-- procedure structure for game_item_medal_extend_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_medal_extend_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_medal_extend_save]
GO

CREATE PROCEDURE [dbo].[game_item_medal_extend_save]
(
	@idx int
,	@medal1_class int
,	@medal1_slot tinyint
,	@medal1_period int
,	@medal2_class int
,	@medal2_slot tinyint
,	@medal2_period int
,	@medal3_class int
,	@medal3_slot tinyint
,	@medal3_period int
,	@medal4_class int
,	@medal4_slot tinyint
,	@medal4_period int
,	@medal5_class int
,	@medal5_slot tinyint
,	@medal5_period int
,	@medal6_class int
,	@medal6_slot tinyint
,	@medal6_period int
,	@medal7_class int
,	@medal7_slot tinyint
,	@medal7_period int
,	@medal8_class int
,	@medal8_slot tinyint
,	@medal8_period int
,	@medal9_class int
,	@medal9_slot tinyint
,	@medal9_period int
,	@medal10_class int
,	@medal10_slot tinyint
,	@medal10_period int
)
AS

UPDATE dbo.userItemMedalExtendDB
SET medal1_class = @medal1_class
,	medal1_slot = @medal1_slot
,	medal1_period = @medal1_period
,	medal2_class = @medal2_class
,	medal2_slot = @medal2_slot
,	medal2_period = @medal2_period
,	medal3_class = @medal3_class
,	medal3_slot = @medal3_slot
,	medal3_period = @medal3_period
,	medal4_class = @medal4_class
,	medal4_slot = @medal4_slot
,	medal4_period = @medal4_period
,	medal5_class = @medal5_class
,	medal5_slot = @medal5_slot
,	medal5_period = @medal5_period
,	medal6_class = @medal6_class
,	medal6_slot = @medal6_slot
,	medal6_period = @medal6_period
,	medal7_class = @medal7_class
,	medal7_slot = @medal7_slot
,	medal7_period = @medal7_period
,	medal8_class = @medal8_class
,	medal8_slot = @medal8_slot
,	medal8_period = @medal8_period
,	medal9_class = @medal9_class
,	medal9_slot = @medal9_slot
,	medal9_period = @medal9_period
,	medal10_class = @medal10_class
,	medal10_slot = @medal10_slot
,	medal10_period = @medal10_period
WHERE idx = @idx
GO


-- ----------------------------
-- procedure structure for web_ranking_award_detail_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_award_detail_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_award_detail_count]
GO

CREATE PROCEDURE [dbo].[web_ranking_award_detail_count]
(
	@awardType int
)
AS
	SELECT count(*) FROM userRankingDB_award_top100 WITH(NOLOCK) WHERE awardType=@awardType
GO


-- ----------------------------
-- procedure structure for manage_singo_log_count_search
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_singo_log_count_search]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_singo_log_count_search]
GO

CREATE PROCEDURE [dbo].[manage_singo_log_count_search]
(
	@querystring varchar(200)
)
AS
	DECLARE @sql varchar(500)
	SET @sql = ''
	SET @sql = 'SELECT count(*) FROM LosaGame_log.DBO.log_mannerpoint WHERE ' + @querystring
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for manage_define_get_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_define_get_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_define_get_count]
GO

CREATE PROCEDURE [dbo].[manage_define_get_count]
(
	@objName varchar(32)
)
AS
	SELECT COUNT(*) FROM define_manage WHERE objName=@objName
GO


-- ----------------------------
-- procedure structure for game_league_reward_cheer_del
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_reward_cheer_del]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_reward_cheer_del]
GO

CREATE PROCEDURE [dbo].[game_league_reward_cheer_del]
(
	@idx int
)
AS

SET NOCOUNT ON

DELETE FROM dbo.userLeagueRewardCheerDB
 WHERE idx = @idx
GO


-- ----------------------------
-- procedure structure for game_region_season_end_server_close
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_region_season_end_server_close]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_region_season_end_server_close]
GO

CREATE PROCEDURE [dbo].[game_region_season_end_server_close]

AS
/*
	BEGIN TRAN

	DECLARE @limitRenpoint int, @limitPrepoint int, @season int, @totalpoint int
	DECLARE @rt1point int, @rt1point_bonus int, @rt1count int, @rt2point int, @rt2point_bonus int, @rt2count int

	SET @limitRenpoint = DBO.DEFINE_REGION_LIMIT_RENSPOINT()
	SET @limitPrepoint = DBO.DEFINE_REGION_LIMIT_SE_RENSPOINT()
	SET @season = isNull((SELECT max(season) FROM userRegionDB_history), 0) + 1
	SET @totalpoint = (SELECT rt1point + rt2point AS 'rp' FROM userRegionDB)
	SET @rt1point = (SELECT rt1point FROM userRegionDB)
	SET @rt2point = (SELECT rt2point FROM userRegionDB)
	SET @rt1point_bonus = (SELECT rt1point_bonus FROM userRegionDB)
	SET @rt2point_bonus = (SELECT rt2point_bonus FROM userRegionDB)
	SET @rt1count = (SELECT count(*) FROM userGameDB WHERE regionType=1 and renspoint > @limitRenpoint)
	SET @rt2count = (SELECT count(*) FROM userGameDB WHERE regionType=2 and renspoint > @limitRenpoint)

	If (@totalpoint > 0)
	BEGIN
		INSERT INTO userRegionDB_compen (accountIDX, rt1point, rt1point_bonus, rt1count, rt2point, rt2point_bonus, rt2count, regionType, renspoint, regionRanking, regDate)
		SELECT a.accountIDX, @rt1point,  @rt1point_bonus, @rt1count, @rt2point, @rt2point_bonus, @rt2count, a.regionType, a.renspoint, isNull(b.region, 0), getdate() FROM userGameDB a LEFT JOIN userRankingDB b ON a.accountIDX=b.accountIDX WHERE a.regionType > 0 and renspoint > @limitPrepoint
	END

	DELETE FROM userRegionDB_compen WHERE regDate < Left(getdate(), 10)

	INSERT INTO userRegionDB_history (point, point_bonus, membercount, regionType, season, regDate) VALUES (@rt1point, @rt1point_bonus, @rt1count, 1, @season, getdate())
	INSERT INTO userRegionDB_history (point, point_bonus, membercount, regionType, season, regDate) VALUES (@rt2point, @rt2point_bonus, @rt2count, 2, @season, getdate())

	EXEC game_region_init_renspoint

	COMMIT TRAN
*/
GO


-- ----------------------------
-- procedure structure for game_timeCash_set_cash
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_timeCash_set_cash]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_timeCash_set_cash]
GO

CREATE PROCEDURE [dbo].[game_timeCash_set_cash]

	@ACCOUNT_IDX		INT,
	@ITEM_CODE			INT
			
AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000
	
	DECLARE @nReturn		INT = 0;
	DECLARE @ITEM_STATUS	TINYINT = 0;

	DECLARE @GET_DATE	DATETIME = GETDATE();	
	DECLARE @UPD_DATE	DATETIME = 0;
	DECLARE @ABLE_START DATETIME = DATEADD(hh, 5, CAST(CAST(@GET_DATE as DATE) as DATETIME));
	DECLARE @ABLE_END	DATETIME = DATEADD(hh, 5, CAST(CAST(@GET_DATE+1 as DATE) as DATETIME));
	
	
	-- 아이템 기간 만료 및 보유 여부 확인	
	EXEC @nReturn=dbo.usp_timeCash_set_expire @ACCOUNT_IDX, @ITEM_CODE, @GET_DATE, @ITEM_STATUS OUTPUT, @UPD_DATE OUTPUT
	
	-- -1: 아이템 만료 처리 실패, -2: 없는 아이템
	IF @nReturn IN (-1, -2)
	BEGIn
		SELECT @nReturn, @GET_DATE
		RETURN;
	END

	-- 정상 확인 했고, 아이템이 만료 되지 않았으면,
	IF (@nReturn=0) and (@ITEM_STATUS=1)
	BEGIN
		-- 이미 받은 사용자면 False Return
		IF (@UPD_DATE>=@ABLE_START) and (@UPD_DATE<=@ABLE_END)
		BEGIN
			SELECT 2, @GET_DATE
			RETURN;
		END
		ELSE
		BEGIN
			BEGIN TRAN
				-- 정상 처리로 변경된 시간을 업데이트 하고, 횟수를 업데이트 한다.
				UPDATE dbo.userTimeCashDB WITH (XLOCK, ROWLOCK) SET UpdDate=@GET_DATE, ItemCount+=1
				WHERE AccountIDX=@ACCOUNT_IDX and ItemCode=@ITEM_CODE
				IF (@@ROWCOUNT=0) or (@@ERROR<>0)
				BEGIN
					ROLLBACK TRAN
					SELECT 0, @GET_DATE
					RETURN;
				END
			COMMIT TRAN

			SELECT 0, @GET_DATE
			RETURN;
		END		
	END
	
	-- 	기간 만료된 아이템
	SELECT 1, @GET_DATE
	RETURN;
GO


-- ----------------------------
-- procedure structure for game_character_rental_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_character_rental_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_character_rental_list]
GO

CREATE PROCEDURE [dbo].[game_character_rental_list]
(
	@accountIDX int
,	@selectDate datetime
)
AS
	SELECT friendIDX, regDate FROM LosaGame_log.DBO.log_class_rental_history WITH(NOLOCK) WHERE accountIDX=@accountIDX and regDate >= @selectDate
GO


-- ----------------------------
-- procedure structure for web_realmember_agree_init
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_agree_init]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_agree_init]
GO

CREATE PROCEDURE [dbo].[web_realmember_agree_init]
(
	@idx int
,	@accountIDX int
,	@permitIP varchar(15)
)
AS

	BEGIN TRAN

	DELETE FROM userParentDB WHERE accountIDX=@accountIDX
	DELETE FROM userInfoBDB WHERE accountIDX=@accountIDX

	UPDATE Losagame_log.DBO.log_agree SET
		permitIP = @permitIP
,		permitType = 2
	WHERE idx=@idx

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_item_medal_extend_get_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_medal_extend_get_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_medal_extend_get_self_index]
GO

CREATE PROCEDURE [dbo].[game_item_medal_extend_get_self_index]
(
	@accountIDX int
)
AS

SELECT TOP 1 idx
FROM dbo.userItemMedalExtendDB
WHERE accountIDX = @accountIDX
ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_quest_get_nicklevel
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_quest_get_nicklevel]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_quest_get_nicklevel]
GO

CREATE PROCEDURE [dbo].[web_quest_get_nicklevel]
(
	@accountIDX int
)
AS
	SELECT a.nickname, b.userLevel FROM userMemberDB a JOIN userGameDB b ON a.accountIDX=b.accountIDX WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for manage_present_get_userID
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_present_get_userID]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_present_get_userID]
GO

CREATE PROCEDURE [dbo].[manage_present_get_userID]
(
	@userNick varchar(2500)
)
AS
	DECLARE @SQL varchar(3000)
	SET @SQL = 'SELECT userID, nickName FROM userMemberDB WHERE nickName in (' + @userNick + ')'
	EXECUTE (@SQL)
GO


-- ----------------------------
-- procedure structure for manage_define_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_define_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_define_delete]
GO

CREATE PROCEDURE [dbo].[manage_define_delete]
(
	@idx int
)
AS
	DELETE FROM define_manage WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for manage_present_item_give_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_present_item_give_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_present_item_give_add]
GO

CREATE PROCEDURE [dbo].[manage_present_item_give_add]
(
	@accountIDX varchar(100)
,	@presentType varchar(4)
,	@packet varchar(12)
)
AS

	DECLARE @sql varchar(500)

	SET @sql = 'INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate) '
	SET @sql = @sql + 'SELECT 350095, accountIDX, ' + @presentType + ', ' + @packet + ', 0, 3, 1, getdate() + 28, getdate() FROM userMemberDB WHERE accountIDX in (' + @accountIDX + ')'
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for game_league_reward_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_reward_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_reward_add]
GO

CREATE PROCEDURE [dbo].[game_league_reward_add]  
(  
 @startDate int  
, @leagueIDX int  
, @leagueSize smallint  
, @teamConst smallint  
, @userConst smallint  
)  
AS  
  
SET NOCOUNT ON  
  
DECLARE @winnerFactionType INT  
DECLARE @factionType TINYINT  
DECLARE @winnerTeamIDX INT  
DECLARE @winnerTeamCheerCount INT  
DECLARE @cheerTotalCount decimal( 10, 2 )  
DECLARE @rewardTeamCheer INT  
DECLARE @rewardUserCheer float  
DECLARE @DeveloperKIDX INT  
  
SET @winnerFactionType = 0  
SET @factionType = 0  
SET @winnerTeamIDX = 0  
  
-- 우승팀 진영 타입  
IF (EXISTS(SELECT * FROM dbo.userLeagueWinnerHistoryDB WITH(NOLOCK) WHERE startDate=@startDate))  
BEGIN  
 SELECT TOP 1 @winnerFactionType = factionType,  
     @winnerTeamIDX = teamIDX  
   FROM dbo.userLeagueWinnerHistoryDB WITH(NOLOCK)  
  WHERE startDate=@startDate  
  ORDER BY idx DESC  
END  
  
  
-- 기존 보상 데이터 삭제  
DELETE FROM dbo.userLeagueRewardDB  
WHERE regDate < LEFT(CONVERT(varchar(20), GETDATE(), 120), 10)  
  
DELETE FROM dbo.userLeagueRewardCheerDB  
WHERE regDate < LEFT(CONVERT(varchar(20), GETDATE(), 120), 10)  
  
  
  
-- 대회 참여 유저 보상  
INSERT INTO dbo.userLeagueRewardDB (  
 accountIDX, startDate, currentRound, userFactionType, winnerFactionType, rewardPeso, factionRank, factionPoint, regDate  
)  
SELECT a.accountIDX, @startDate, c.currentRound, b.regionType, @winnerFactionType,   
 CASE WHEN @winnerFactionType = b.regionType THEN CAST(b.renspoint * 50 AS INT)  
   WHEN @winnerFactionType <> b.regionType THEN CAST(b.renspoint AS INT)  
 ELSE CAST(b.renspoint AS INT) END AS rewardPeso,  
    0, b.renspoint, GETDATE()  
  FROM dbo.userLeagueTeamMemberDB a WITH(NOLOCK)  
  JOIN dbo.userGameDB b WITH(NOLOCK)  
    ON a.accountIDX = b.accountIDX  
  JOIN dbo.userLeagueTeamDB c WITH(NOLOCK)  
 ON a.teamIDX=c.idx  
 WHERE a.leagueIDX=@leagueIDX  
   AND a.joinType=1  
  
  
-- 대회 참여 하지 않은 전체 유저 보상  
INSERT INTO dbo.userLeagueRewardDB (  
 accountIDX, startDate, currentRound, userFactionType, winnerFactionType, rewardPeso, factionRank, factionPoint, regDate  
)  
SELECT accountIDX, @startDate, 0, regionType, @winnerFactionType,   
 CASE WHEN @winnerFactionType = regionType THEN CAST(renspoint * 50 AS INT)  
   WHEN @winnerFactionType <> regionType THEN CAST(renspoint AS INT)  
 ELSE CAST(renspoint AS INT) END AS rewardPeso,  
    0, renspoint, GETDATE()  
  FROM dbo.userGameDB WITH(NOLOCK)  
 WHERE renspoint > 0  
   AND accountIDX NOT IN (  
    SELECT accountIDX  
   FROM dbo.userLeagueRewardDB WITH(NOLOCK)  
    )  
  
  
-- 대회 참여자만 업데이트  
-- 위 쿼리에서 currentRound 값도 함께 업데이트 하지만 혹시 몰라 기존 쿼리 그냥 놔둠)  
UPDATE B  
   SET currentRound = A.currentRound  
  FROM (  
 SELECT a.accountIDX, b.currentRound, @startDate AS startDate  
   FROM dbo.userLeagueTeamMemberDB a WITH(NOLOCK)  
   JOIN dbo.userLeagueTeamDB b WITH(NOLOCK)  
  ON a.teamIDX=b.idx  
  WHERE a.leagueIDX=@leagueIDX  
    AND b.leagueIDX=@leagueIDX  
) A  
  JOIN dbo.userLeagueRewardDB B WITH(NOLOCK)  
    ON A.accountIDX = B.accountIDX  
  
  
-- 진영 랭킹 업데이트  
UPDATE B  
   SET factionRank = A.region  
  FROM (  
 SELECT accountIDX, region  
   FROM dbo.userRankingDB WITH(NOLOCK)  
) A  
  JOIN dbo.userLeagueRewardDB B WITH(NOLOCK)  
    ON A.accountIDX = B.accountIDX  
  
  
-- 진영 랭킹 0인 유저 업데이트  
UPDATE dbo.userLeagueRewardDB  
   SET factionRank = 100000000  
 WHERE factionRank = 0  
  
  
-- 응원 보상  
IF (@winnerTeamIDX > 0)  
BEGIN  
  
  
 -- 우승팀원 응원 보상  
 SET @winnerTeamCheerCount = (  
  SELECT cheerPoint  
    FROM dbo.userLeagueTeamDB WITH(NOLOCK)  
   WHERE leagueIDX=@leagueIDX  
     AND idx=@winnerTeamIDX  
 )  
  
 -- 우승팀 응원 보상  
 SET @cheerTotalCount = convert( numeric( 19,1 ), (  
  SELECT COUNT(*)  
    FROM dbo.userLeagueCheerDB WITH(NOLOCK)  
   WHERE leagueIDX=@leagueIDX  
 ) )  
  
 SET @rewardUserCheer = ((@cheerTotalCount / @leagueSize) / @winnerTeamCheerCount * @userConst)  
  
 -- 1000 보다 작으면 1000 으로 고정. 수민씨 !  
 IF (@rewardUserCheer < 1000)  
 BEGIN  
  SET @rewardUserCheer = 1000  
 END  
  
 -- 100000만보다 크면 10만 고정. 수민씨 !  
 IF (@rewardUserCheer > 100000)  
 BEGIN  
  SET @rewardUserCheer = 100000  
 END  
  
 INSERT INTO dbo.userLeagueRewardCheerDB (  
  accountIDX, rewardPeso, startDate, flag, regDate  
 )  
 SELECT accountIDX, @rewardUserCheer, @startDate, 1, GETDATE()  
   FROM dbo.userLeagueCheerDB WITH(NOLOCK)  
  WHERE leagueIDX=@leagueIDX  
    AND teamIDX=@winnerTeamIDX  
  
END
GO


-- ----------------------------
-- procedure structure for manage_event_teencash_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_teencash_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_teencash_list]
GO

CREATE PROCEDURE [dbo].[manage_event_teencash_list]
(
	@pageSize varchar(8)
,	@notInPage varchar(8)
)
AS
	DECLARE @strSQL varchar(1000)

	SET @strSQL = ''
	SET @strSQL = @strSQL + 'SELECT TOP ' + @pageSize + ' a.idx, a.accountIDX, b.nickName, b.EMail, c.tel, c.mobile, a.sn, a.numberth, a.regDate From event_teencash a '
	SET @strSQL = @strSQL + 'JOIN userMemberDB b ON a.accountIDX=b.accountIDX JOIN userInfoBDB c ON a.accountIDX=c.accountIDX '
	SET @strSQL = @strSQL + 'WHERE a.flag=0 and a.idx not in (SELECT TOP ' + @notInPage + ' idx FROM event_teencash WHERE flag=0 ORDER BY idx DESC) '
	SET @strSQL = @strSQL + 'ORDER BY idx DESC'

	EXEC(@strSQL)
GO


-- ----------------------------
-- procedure structure for game_league_winner_history
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_winner_history]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_winner_history]
GO

CREATE PROCEDURE [dbo].[game_league_winner_history]
(
	@leagueTitle nvarchar(20)
,	@startDate int
,	@endDate int
,	@teamIDX int
,	@teamName nvarchar(20)
,	@factionName nvarchar(20)
,	@factionType int
)
AS

SET NOCOUNT ON

IF (NOT EXISTS(SELECT * FROM dbo.userLeagueWinnerHistoryDB WHERE startDate=@startDate AND teamIDX > 0))
BEGIN
	INSERT INTO dbo.userLeagueWinnerHistoryDB (
		leagueTitle, startDate, endDate, teamIDX, teamName, factionName, factionType, regDate
	)
	VALUES (
		@leagueTitle, @startDate, @endDate, @teamIDX, @teamName, @factionName, @factionType, GETDATE()
	)

	IF (@teamIDX > 0)
	BEGIN
		EXEC game_league_winner_info_add @startDate, @teamIDX
	END
END
GO


-- ----------------------------
-- procedure structure for game_character_rental_history
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_character_rental_history]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_character_rental_history]
GO

CREATE PROCEDURE [dbo].[game_character_rental_history]
(
	@accountIDX int
,	@friendIDX int
,	@classType int
)
AS
	INSERT INTO LosaGame_log.DBO.log_class_rental_history (accountIDX, friendIDX, classType, regDate)
	VALUES (@accountIDX, @friendIDX, @classType, getdate())
GO


-- ----------------------------
-- procedure structure for web_realmember_agree_get_zip_email
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_agree_get_zip_email]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_agree_get_zip_email]
GO

CREATE PROCEDURE [dbo].[web_realmember_agree_get_zip_email]
(
	@accountIDX int
)
AS
	SELECT a.email, b.zipcode FROM userMemberDB a LEFT JOIN userInfoBDB b ON a.accountIDX=b.accountIDX WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_item_medal_extend_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_medal_extend_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_medal_extend_get_list]
GO

CREATE PROCEDURE [dbo].[game_item_medal_extend_get_list]
(
	@accountIDX int
)
AS

SELECT idx,
	   medal1_class, medal1_slot, medal1_period, medal2_class, medal2_slot, medal2_period,
	   medal3_class, medal3_slot, medal3_period, medal4_class, medal4_slot, medal4_period,
	   medal5_class, medal5_slot, medal5_period, medal6_class, medal6_slot, medal6_period,
	   medal7_class, medal7_slot, medal7_period, medal8_class, medal8_slot, medal8_period,
	   medal9_class, medal9_slot, medal9_period, medal10_class, medal10_slot, medal10_period
FROM dbo.userItemMedalExtendDB WITH(NOLOCK)
WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_quest_get_define_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_quest_get_define_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_quest_get_define_data]
GO

CREATE PROCEDURE [dbo].[web_quest_get_define_data]
(
	@questIDX int
)
AS
	SELECT title, progress, content1, content2, content3, content4 FROM define_quest WHERE questIDX=@questIDX
GO


-- ----------------------------
-- procedure structure for manage_present_get_accountIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_present_get_accountIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_present_get_accountIDX]
GO

CREATE PROCEDURE [dbo].[manage_present_get_accountIDX]
(
	@userID varchar(2500)
)
AS
	DECLARE @SQL varchar(3000)
	SET @SQL = 'SELECT accountIDX FROM userMemberDB WHERE userID in (' + @userID + ')'
	EXECUTE (@SQL)
GO


-- ----------------------------
-- procedure structure for web_guild_hp_member_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_hp_member_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_hp_member_count]
GO

CREATE PROCEDURE [dbo].[web_guild_hp_member_count]
(
	@guildIDX int
)
AS
	SELECT count(*) FROM userGuildInfoDB WITH(NOLOCK) WHERE guildIDX=@guildIDX and guildJoinType=1
GO


-- ----------------------------
-- procedure structure for web_event_join_ipcount
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_join_ipcount]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_join_ipcount]
GO

CREATE PROCEDURE [dbo].[web_event_join_ipcount]
(
	@userIP varchar(16)
)
AS
	SELECT count(*) FROM LosaGame_log.DBO.log_event_join WHERE userIP=@userIP
GO


-- ----------------------------
-- procedure structure for game_league_my_team_member_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_my_team_member_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_my_team_member_list]
GO

CREATE PROCEDURE [dbo].[game_league_my_team_member_list]
(
	@accountIDX int
,	@topN int
,	@idx int
)
AS

SET NOCOUNT ON

SELECT TOP (@topN) [idx], accountIDX, teamIDX
FROM dbo.userLeagueTeamMemberDB WITH(NOLOCK)
WHERE idx < @idx
  AND teamIDX in (
	SELECT teamIDX
	FROM dbo.userLeagueTeamMemberDB WITH(NOLOCK)
	WHERE accountIDX=@accountIDX
      AND joinType=1
  )
  AND joinType=1
ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for manage_singo_log_list_search
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_singo_log_list_search]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_singo_log_list_search]
GO

CREATE PROCEDURE [dbo].[manage_singo_log_list_search]
(
	@pageSize int
,	@notInPage int
,	@searchType varchar(20)
,	@searchIDX int
)
AS

	DECLARE @sql nvarchar(1000)
	DECLARE @ParmDefinition nvarchar(500)

	IF (@searchType = 'A')
	BEGIN
		SET @sql = N'SELECT TOP (@pageSize_in) idx, reportNick, reportIDX, receiveNick, receiveIDX, resultType, regDate FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK) '
		SET @sql = @sql + 'WHERE resultType = 0 and idx not in (SELECT TOP (@notInPage_in) idx FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK) WHERE resultType = 0 ORDER BY idx ASC'
		SET @sql = @sql + ') ORDER BY idx ASC'
	END
	ELSE IF (@searchType = 'C')
	BEGIN
		SET @sql = N'SELECT TOP (@pageSize_in) idx, reportNick, reportIDX, receiveNick, receiveIDX, resultType, regDate FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK) '
		SET @sql = @sql + 'WHERE resultType = 1 and idx not in (SELECT TOP (@notInPage_in) idx FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK) WHERE resultType = 1 ORDER BY idx DESC'
		SET @sql = @sql + ') ORDER BY idx DESC'
	END
	ELSE IF (@searchType = 'reportIDX')
	BEGIN
		SET @sql = N'SELECT TOP (@pageSize_in) idx, reportNick, reportIDX, receiveNick, receiveIDX, resultType, regDate FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK) '
		SET @sql = @sql + 'WHERE reportIDX = @searchIDX_in and idx not in (SELECT TOP (@notInPage_in) idx FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK) WHERE reportIDX = @searchIDX_in ORDER BY idx DESC'
		SET @sql = @sql + ') ORDER BY idx DESC'
	END
	ELSE IF (@searchType = 'receiveIDX')
	BEGIN
		SET @sql = N'SELECT TOP (@pageSize_in) idx, reportNick, reportIDX, receiveNick, receiveIDX, resultType, regDate FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK) '
		SET @sql = @sql + 'WHERE receiveIDX = @searchIDX_in and idx not in (SELECT TOP (@notInPage_in) idx FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK) WHERE receiveIDX = @searchIDX_in ORDER BY idx DESC'
		SET @sql = @sql + ') ORDER BY idx DESC'
	END

	SET @ParmDefinition = N'@pageSize_in int, @notInPage_in int, @searchIDX_in int'

	EXECUTE sp_executesql @sql, @ParmDefinition, @pageSize_in=@pageSize, @notInPage_in=@notInPage, @searchIDX_in=@searchIDX
GO


-- ----------------------------
-- procedure structure for game_character_regdate_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_character_regdate_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_character_regdate_save]
GO

CREATE PROCEDURE [dbo].[game_character_regdate_save]
(
	@idx int
)
AS
	UPDATE userCharacterDB SET regDate=getdate() WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_ranking_myinfo_medal_uplevel_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_myinfo_medal_uplevel_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_myinfo_medal_uplevel_count]
GO

CREATE PROCEDURE [dbo].[web_ranking_myinfo_medal_uplevel_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM userRankingDB_medal WHERE ranking_now > 0 and ranking_now < (SELECT ranking_now FROM userRankingDB_medal WHERE accountidx=@accountIDX)
GO


-- ----------------------------
-- procedure structure for game_item_medal_extend_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_medal_extend_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_medal_extend_add]
GO

CREATE PROCEDURE [dbo].[game_item_medal_extend_add]
(
	@accountIDX int
,	@medal1_class int
,	@medal1_slot tinyint
,	@medal1_period int
,	@medal2_class int
,	@medal2_slot tinyint
,	@medal2_period int
,	@medal3_class int
,	@medal3_slot tinyint
,	@medal3_period int
,	@medal4_class int
,	@medal4_slot tinyint
,	@medal4_period int
,	@medal5_class int
,	@medal5_slot tinyint
,	@medal5_period int
,	@medal6_class int
,	@medal6_slot tinyint
,	@medal6_period int
,	@medal7_class int
,	@medal7_slot tinyint
,	@medal7_period int
,	@medal8_class int
,	@medal8_slot tinyint
,	@medal8_period int
,	@medal9_class int
,	@medal9_slot tinyint
,	@medal9_period int
,	@medal10_class int
,	@medal10_slot tinyint
,	@medal10_period int
)
AS

INSERT INTO dbo.userItemMedalExtendDB (
	accountIDX,
	medal1_class, medal1_slot, medal1_period, medal2_class, medal2_slot, medal2_period,
	medal3_class, medal3_slot, medal3_period, medal4_class, medal4_slot, medal4_period,
	medal5_class, medal5_slot, medal5_period, medal6_class, medal6_slot, medal6_period,
	medal7_class, medal7_slot, medal7_period, medal8_class, medal8_slot, medal8_period,
	medal9_class, medal9_slot, medal9_period, medal10_class, medal10_slot, medal10_period, regDate
)
VALUES (
	@accountIDX,
	@medal1_class, @medal1_slot, @medal1_period, @medal2_class, @medal2_slot, @medal2_period,
	@medal3_class, @medal3_slot, @medal3_period, @medal4_class, @medal4_slot, @medal4_period,
	@medal5_class, @medal5_slot, @medal5_period, @medal6_class, @medal6_slot, @medal6_period,
	@medal7_class, @medal7_slot, @medal7_period, @medal8_class, @medal8_slot, @medal8_period,
	@medal9_class, @medal9_slot, @medal9_period, @medal10_class, @medal10_slot, @medal10_period,
	GETDATE()
)
GO


-- ----------------------------
-- procedure structure for web_quest_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_quest_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_quest_get_data]
GO

CREATE PROCEDURE [dbo].[web_quest_get_data]
(
	@accountIDX int	
)
AS
	SELECT	quest1_type, quest1_time, quest2_type, quest2_time, quest3_type, quest3_time, quest4_type, quest4_time, quest5_type, quest5_time, 
			quest6_type, quest6_time, quest7_type, quest7_time, quest8_type, quest8_time, quest9_type, quest9_time, quest10_type, quest10_time, 
			quest11_type, quest11_time, quest12_type, quest12_time, quest13_type, quest13_time, quest14_type, quest14_time, quest15_type, quest15_time, 
			quest16_type, quest16_time, quest17_type, quest17_time, quest18_type, quest18_time, quest19_type, quest19_time, quest20_type, quest20_time 
	FROM userQuestCompleteDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for manage_present_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_present_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_present_add]
GO

CREATE PROCEDURE [dbo].[manage_present_add]
(
	@accountIDX varchar(2500)
,	@presentType varchar(4)
,	@value1 varchar(32)
,	@value2 varchar(32)
,	@msgType varchar(8)
)
AS
	DECLARE @sql varchar(3000)

	SET @sql = 'INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate) '
	SET @sql = @sql + 'SELECT 1105, accountIDX, ' + @presentType + ', ' + @value1 + ', ' + @value2 + ', ' + @msgType + ', 1, getdate() + 28, getdate() FROM userMemberDB WHERE accountIDX in (' + @accountIDX + ')'
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for web_guild_hp_get_submaster_nkckname
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_hp_get_submaster_nkckname]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_hp_get_submaster_nkckname]
GO

CREATE PROCEDURE [dbo].[web_guild_hp_get_submaster_nkckname]
(
	@guildIDX int
)
AS

	SELECT accountIDX, nickname FROM userMemberDB WITH(NOLOCK) WHERE accountIDX=(SELECT accountIDX FROM userGuildInfoDB WITH(NOLOCK) WHERE guildIDX=@guildIDX and guildjoinType=1 and guildPosition='부길드장')
GO


-- ----------------------------
-- procedure structure for manage_block_id_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_block_id_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_block_id_count]
GO

CREATE PROCEDURE [dbo].[manage_block_id_count]
AS
	SELECT count(*) FROM LosaGame_log.DBO.log_block WHERE limitType=1000
GO


-- ----------------------------
-- procedure structure for game_league_my_team_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_my_team_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_my_team_list]
GO

CREATE PROCEDURE [dbo].[game_league_my_team_list]
(
	@topN int
,	@idx int
,	@accountIDX int
)
AS

SET NOCOUNT ON

SELECT TOP (@topN) idx, leagueIDX, teamName, leaderIDX, leaguePosition,
	   cheerPoint, currentRound, factionPoint, factionType
FROM dbo.userLeagueTeamDB WITH(NOLOCK)
WHERE idx < @idx
  AND idx IN (
	SELECT teamIDX
	FROM userLeagueTeamMemberDB WITH(NOLOCK)
	WHERE accountIDX=@accountIDX
	  AND joinType=1
  )
ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for manage_singo_log_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_singo_log_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_singo_log_list]
GO

CREATE PROCEDURE [dbo].[manage_singo_log_list]
(
	@pageSize int
,	@notInPage int
)
AS
	DECLARE @sql nvarchar(1000)
	DECLARE @ParmDefinition nvarchar(500)

	SET @sql = N'SELECT TOP (@pageSize_in) idx, reportNick, reportIDX, receiveNick, receiveIDX, resultType, regDate FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK)'
	SET @sql = @sql + 'WHERE idx not in (SELECT TOP (@notInPage_in) idx FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK) ORDER BY idx DESC'
	SET @sql = @sql + ') ORDER BY idx DESC'

	SET @ParmDefinition = N'@pageSize_in int, @notInPage_in int'

	EXECUTE sp_executesql @sql, @ParmDefinition, @pageSize_in=@pageSize, @notInPage_in=@notInPage
GO


-- ----------------------------
-- procedure structure for AGENT_RANKING_CLASS_GROUP
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_RANKING_CLASS_GROUP]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_RANKING_CLASS_GROUP]
GO

CREATE PROCEDURE [dbo].[AGENT_RANKING_CLASS_GROUP]

AS

	IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_temp')
	DROP TABLE userRankingDB_temp

	SELECT a.accountIDX, RANK() OVER(ORDER BY a.userLevel DESC, a.userEXP DESC) AS 'rank' 
	INTO userRankingDB_temp 
	FROM (
		SELECT accountIDX, userLevel, userEXP 
		FROM userGameDB WITH(NOLOCK) 
		WHERE userLevel > 0
	) a, (
		SELECT accountIDX FROM userMemberDB WITH(NOLOCK) 
		WHERE userType > 20 
	) b
	WHERE a.accountIDX = b.accountIDX

	INSERT INTO userRankingDB_classgroup (accountIDX)
	SELECT accountIDX FROM userRankingDB_temp WITH(NOLOCK) WHERE accountIDX not in (SELECT accountIDX FROM userRankingDB_classgroup WITH(NOLOCK))

	UPDATE userRankingDB_classgroup SET
		ranking_8day = ranking_7day
	,	ranking_7day = ranking_6day
	,	ranking_6day = ranking_5day
	,	ranking_5day = ranking_4day
	,	ranking_4day = ranking_3day
	,	ranking_3day = ranking_2day
	,	ranking_2day = ranking_1day

	UPDATE a SET expert = b.userEXP, userLevel = b.userLevel 
	FROM (SELECT accountIDX, userEXP, userLevel FROM userGameDB WITH(NOLOCK)) b INNER JOIN userRankingDB_classgroup a ON a.accountIDX = b.accountIDX

	UPDATE a SET ranking_1day = b.rank
	FROM (SELECT accountIDX, rank FROM userRankingDB_temp WITH(NOLOCK)) b INNER JOIN userRankingDB_classgroup a ON a.accountIDX = b.accountIDX

	DROP TABLE userRankingDB_temp
GO


-- ----------------------------
-- procedure structure for web_ranking_myinfo_get_medal_ranking
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_myinfo_get_medal_ranking]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_myinfo_get_medal_ranking]
GO

CREATE PROCEDURE [dbo].[web_ranking_myinfo_get_medal_ranking]
(
	@accountIDX int
)
AS

	SELECT ranking_now, medalLevel, expert FROM userRankingDB_medal WHERE accountidx=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_item_medal_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_medal_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_medal_add]
GO

CREATE PROCEDURE [dbo].[game_item_medal_add]
(
	@accountIDX int
,	@item1_type int
,	@item1_class int
,	@item1_limitType int
,	@item1_limitDate datetime
,	@item2_type int
,	@item2_class int
,	@item2_limitType int
,	@item2_limitDate datetime
,	@item3_type int
,	@item3_class int
,	@item3_limitType int
,	@item3_limitDate datetime
,	@item4_type int
,	@item4_class int
,	@item4_limitType int
,	@item4_limitDate datetime
,	@item5_type int
,	@item5_class int
,	@item5_limitType int
,	@item5_limitDate datetime
,	@item6_type int
,	@item6_class int
,	@item6_limitType int
,	@item6_limitDate datetime
,	@item7_type int
,	@item7_class int
,	@item7_limitType int
,	@item7_limitDate datetime
,	@item8_type int
,	@item8_class int
,	@item8_limitType int
,	@item8_limitDate datetime
,	@item9_type int
,	@item9_class int
,	@item9_limitType int
,	@item9_limitDate datetime
,	@item10_type int
,	@item10_class int
,	@item10_limitType int
,	@item10_limitDate datetime
)
AS
	INSERT INTO userItemMedalDB (accountIDX, item1_type, item1_class, item1_limitType, item1_limitDate, item2_type, item2_class, item2_limitType, item2_limitDate, item3_type, item3_class, item3_limitType, item3_limitDate, item4_type, item4_class, item4_limitType, item4_limitDate, item5_type, item5_class, item5_limitType, item5_limitDate, item6_type, item6_class, item6_limitType, item6_limitDate, item7_type, item7_class, item7_limitType, item7_limitDate, item8_type, item8_class, item8_limitType, item8_limitDate, item9_type, item9_class, item9_limitType, item9_limitDate, item10_type, item10_class, item10_limitType, item10_limitDate, regDate)
	VALUES (@accountIDX, @item1_type, @item1_class, @item1_limitType, @item1_limitDate, @item2_type, @item2_class, @item2_limitType, @item2_limitDate, @item3_type, @item3_class, @item3_limitType, @item3_limitDate, @item4_type, @item4_class, @item4_limitType, @item4_limitDate, @item5_type, @item5_class, @item5_limitType, @item5_limitDate, @item6_type, @item6_class, @item6_limitType, @item6_limitDate, @item7_type, @item7_class, @item7_limitType, @item7_limitDate, @item8_type, @item8_class, @item8_limitType, @item8_limitDate, @item9_type, @item9_class, @item9_limitType, @item9_limitDate, @item10_type, @item10_class, @item10_limitType, @item10_limitDate, getdate())
GO


-- ----------------------------
-- procedure structure for web_quest_define_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_quest_define_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_quest_define_list]
GO

CREATE PROCEDURE [dbo].[web_quest_define_list]
AS
	SELECT questIDX, title, progress, content1, content2, content3, content4 
FROM define_quest with(nolock)
GO


-- ----------------------------
-- procedure structure for manage_admintool_team_adminType
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_admintool_team_adminType]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_admintool_team_adminType]
GO

CREATE PROCEDURE [dbo].[manage_admintool_team_adminType]
(
	@teamType int
)
AS

SET NOCOUNT ON

SELECT DISTINCT adminType
  FROM dbo.manage_memberDB WITH(NOLOCK)
 WHERE teamType=@teamType
   AND adminType > 0
 ORDER BY adminType DESC
GO


-- ----------------------------
-- procedure structure for web_guild_hp_get_master_nkckname
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_hp_get_master_nkckname]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_hp_get_master_nkckname]
GO

CREATE PROCEDURE [dbo].[web_guild_hp_get_master_nkckname]  
(  
 @guildIDX int  
)  
AS  
  
 SELECT accountIDX, nickname FROM userMemberDB WITH(NOLOCK) WHERE accountIDX=(SELECT Top 1 accountIDX FROM userGuildInfoDB WHERE guildIDX=@guildIDX and guildjoinType=1 and guildPosition='길드장')
GO


-- ----------------------------
-- procedure structure for game_league_list_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_list_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_list_save]
GO

CREATE PROCEDURE [dbo].[game_league_list_save]
(
	@idx int
,	@startDate int
,	@endDate int
,	@leagueType tinyint
,	@leagueState tinyint
)
AS

SET NOCOUNT ON

UPDATE dbo.userLeagueListDB
SET startDate = @startDate
,	endDate = @endDate
,	leagueType = @leagueType
,	leagueState = @leagueState
WHERE idx = @idx
GO


-- ----------------------------
-- procedure structure for manage_mannerpoint_log_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_mannerpoint_log_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_mannerpoint_log_delete]
GO

CREATE PROCEDURE [dbo].[manage_mannerpoint_log_delete]
(
	@idx varchar(100)
,	@userID varchar(12)
)
AS
	DECLARE @strSQL varchar(800)

	SET @strSQL = 'UPDATE LosaGame_log.DBO.log_mannerpoint SET receivepoint=0, resultType=1, note=note + ''' + '<br><br>' + @userID + ' 삭제'' WHERE idx in (' + @idx + ')'
	EXECUTE (@strSQL)
GO


-- ----------------------------
-- procedure structure for AGENT_RANKING_BATTLE_WEEK
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_RANKING_BATTLE_WEEK]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_RANKING_BATTLE_WEEK]
GO

CREATE PROCEDURE [dbo].[AGENT_RANKING_BATTLE_WEEK]

AS

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	INSERT INTO userRankingDB_battle (accountIDX)
	SELECT accountIDX FROM userRecordBattleDB WHERE (type1_win + type1_lose) > 0 and accountIDX not in (SELECT accountIDX FROM userRankingDB_battle)

	UPDATE d SET win_prev = c.win_prev, lose_prev = c.lose_prev 
	FROM (
		SELECT a.accountIDX, isnull(b.type1_win,0) - isnull(a.win_fix,0) AS 'win_prev', isnull(b.type1_lose,0) - isnull(a.lose_fix, 0) AS 'lose_prev'
		FROM userRankingDB_battle a INNER JOIN userRecordBattleDB b ON a.accountIDX = b.accountIDX WHERE (b.type1_win + b.type1_lose) > 0
	) c INNER JOIN userRankingDB_battle d ON c.accountIDX = d.accountIDX

	IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_temp')
	DROP TABLE userRankingDB_temp

	SELECT accountIDX, RANK() OVER(ORDER BY (win_prev + lose_prev) DESC, lose_prev ASC) AS 'rank' 
	INTO userRankingDB_temp 
	FROM userRankingDB_battle WHERE (win_prev + lose_prev) > 0

	UPDATE userRankingDB_battle SET rank_prev = 0 WHERE rank_prev > 0

	UPDATE a SET rank_prev = b.rank
	FROM (SELECT accountIDX, rank FROM userRankingDB_temp) b INNER JOIN userRankingDB_battle a ON b.accountIDX = a.accountIDX

	UPDATE userRankingDB_battle SET win_fix = b.win, lose_fix = b.lose
	FROM (SELECT accountIDX, type1_win AS 'win', type1_lose AS 'lose' FROM userRecordBattleDB) b INNER JOIN userRankingDB_battle a ON b.accountIDX = a.accountIDX
GO


-- ----------------------------
-- procedure structure for web_ranking_myinfo_classgroup_uplevel_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_myinfo_classgroup_uplevel_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_myinfo_classgroup_uplevel_count]
GO

CREATE PROCEDURE [dbo].[web_ranking_myinfo_classgroup_uplevel_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM userRankingDB_classgroup WHERE ranking_1day < (SELECT ranking_1day FROM userRankingDB_classgroup WHERE accountidx=@accountIDX)
GO


-- ----------------------------
-- procedure structure for game_item_get_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_get_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_get_self_index]
GO

CREATE PROCEDURE [dbo].[game_item_get_self_index]
(
	@accountIDX int
)
As
	SELECT TOP 1 idx FROM userItemDB WHERE accountIDX = @accountIDX ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_quest_define_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_quest_define_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_quest_define_count]
GO

CREATE PROCEDURE [dbo].[web_quest_define_count]

AS
	SELECT max(questIDX/10000) FROM define_quest
GO


-- ----------------------------
-- procedure structure for manage_access_admin_member_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_access_admin_member_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_access_admin_member_list]
GO

CREATE PROCEDURE [dbo].[manage_access_admin_member_list]

AS

SET NOCOUNT ON

SELECT accountIDX, userID, userPWD, userName, adminType
  FROM dbo.manage_memberDB WITH(NOLOCK)
 ORDER BY teamType, userID ASC
GO


-- ----------------------------
-- procedure structure for web_guild_hp_get_master_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_hp_get_master_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_hp_get_master_info]
GO

CREATE PROCEDURE [dbo].[web_guild_hp_get_master_info]  
(  
 @guildIDX int  
)  
AS  
 DECLARE @accidx int  
 SET @accidx = (SELECT top 1 accountIDX FROM userGuildInfoDB WITH(NOLOCK) WHERE guildIDX=@guildIDX and guildJoinType=1 and guildPosition='길드장')  
  
  
 SELECT a.nickname, b.userLevel FROM userMemberDB a WITH(NOLOCK) JOIN userGameDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX WHERE a.accountIDX=@accidx
GO


-- ----------------------------
-- procedure structure for game_league_list_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_list_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_list_add]
GO

CREATE PROCEDURE [dbo].[game_league_list_add]
(
	@accountIDX int
,	@startDate int
,	@endDate int
,	@leagueType tinyint
,	@leagueState tinyint
)
AS

SET NOCOUNT ON

INSERT INTO dbo.userLeagueListDB (
	accountIDX, startDate, endDate, leagueType, leagueState, regDate
)
VALUES (
	@accountIDX, @startDate, @endDate, @leagueType, @leagueState, GETDATE()
)
GO


-- ----------------------------
-- procedure structure for manage_mannerpoint_log_dec
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_mannerpoint_log_dec]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_mannerpoint_log_dec]
GO

CREATE PROCEDURE [dbo].[manage_mannerpoint_log_dec]
(
	@idx varchar(100)
,	@userID varchar(12)
)
AS
	DECLARE @strSQL varchar(800)

	SET @strSQL = 'UPDATE LosaGame_log.DBO.log_mannerpoint SET receivepoint=-1, resultType=1, note=note + ''' + '<br><br>' + @userID + ' - 복원'' WHERE idx in (' + @idx + ')'
	EXECUTE (@strSQL)
GO


-- ----------------------------
-- procedure structure for AGENT_RANKING_BATTLE_DAILY
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_RANKING_BATTLE_DAILY]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_RANKING_BATTLE_DAILY]
GO

CREATE PROCEDURE [dbo].[AGENT_RANKING_BATTLE_DAILY]

AS

SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	INSERT INTO userRankingDB_battle (accountIDX)
	SELECT accountIDX FROM userRecordBattleDB WITH(NOLOCK) WHERE (type1_win + type1_lose) > 1000 and accountIDX not in (SELECT accountIDX FROM userRankingDB_battle WITH(NOLOCK))

	IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_temp')
	DROP TABLE userRankingDB_temp

	-- rank_total
	SELECT a.accountIDX, RANK() OVER(ORDER BY (a.type1_win + a.type1_lose) DESC, a.type1_lose ASC) AS 'rank' 
	INTO userRankingDB_temp 
	FROM (
		SELECT accountIDX, type1_win, type1_lose FROM userRecordBattleDB WITH(NOLOCK) WHERE (type1_win + type1_lose) > 1000
	) a, (
		SELECT accountIDX FROM userMemberDB WITH(NOLOCK) 
		WHERE userType > 20 
	) b 
	WHERE a.accountIDX = b.accountIDX

	UPDATE userRankingDB_battle SET rank_total = 0 WHERE rank_total > 0

	UPDATE userRankingDB_battle SET rank_total = b.rank 
	FROM (SELECT accountIDX, rank FROM userRankingDB_temp WITH(NOLOCK)) b INNER JOIN userRankingDB_battle a WITH(NOLOCK) ON b.accountIDX = a.accountIDX

	-- rank_now
	IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_temp')
	DROP TABLE userRankingDB_temp

	SELECT a.accountIDX, RANK() OVER(ORDER BY (isnull(a.type1_win,0) - isnull(b.win_fix,0)) + (isnull(a.type1_lose,0) - isnull(b.lose_fix,0)) DESC, (isnull(a.type1_lose,0) - isnull(b.lose_fix,0)) ASC, a.accountIDX ASC) AS 'rank' 
	INTO userRankingDB_temp 
	FROM userRecordBattleDB a WITH(NOLOCK) INNER JOIN userRankingDB_battle b WITH(NOLOCK) ON a.accountIDX = b.accountIDX 
	WHERE (isnull(a.type1_win,0) - isnull(b.win_fix,0)) + (isnull(a.type1_lose,0) - isnull(b.lose_fix,0)) > 0 

	UPDATE userRankingDB_battle SET rank_now = 0 WHERE rank_now > 0

	UPDATE userRankingDB_battle SET rank_now = b.rank 
	FROM (SELECT accountIDX, rank FROM userRankingDB_temp WITH(NOLOCK)) b INNER JOIN userRankingDB_battle a WITH(NOLOCK) ON b.accountIDX = a.accountIDX

	-- rank_battle
	IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_temp')
	DROP TABLE userRankingDB_temp

	SELECT a.accountIDX, RANK() OVER(ORDER BY ((convert(bigint, a.type1_win) + a.type1_lose) * (a.type1_kill))/(a.type1_kill + a.type1_death) DESC, a.type1_kill ASC) AS 'rank' 
	INTO userRankingDB_temp 
	FROM (
		SELECT accountIDX, type1_win, type1_lose, type1_kill, type1_death FROM userRecordBattleDB WHERE (type1_win + type1_lose) > 1000 and (type1_kill + type1_death) > 1000
	) a, (
		SELECT accountIDX FROM userMemberDB WITH(NOLOCK) 
		WHERE userType > 20 
	) b 
	WHERE a.accountIDX = b.accountIDX

	UPDATE userRankingDB_battle SET rank_battle = 0 WHERE rank_battle > 0

	UPDATE userRankingDB_battle SET rank_battle = b.rank
	FROM (SELECT accountIDX, rank FROM userRankingDB_temp WITH(NOLOCK)) b INNER JOIN userRankingDB_battle a WITH(NOLOCK) ON b.accountIDX = a.accountIDX
GO


-- ----------------------------
-- procedure structure for web_ranking_myinfo_classgroup_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_myinfo_classgroup_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_myinfo_classgroup_data]
GO

CREATE PROCEDURE [dbo].[web_ranking_myinfo_classgroup_data]
(
	@accountIDX int
)
AS
	SELECT ranking_8day, ranking_7day, ranking_6day, ranking_5day, ranking_4day, ranking_3day, ranking_2day, ranking_1day 
	FROM userRankingDB_classgroup WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_item_get_data_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_get_data_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_get_data_list]
GO

CREATE PROCEDURE [dbo].[game_item_get_data_list]
(
	@idx			INT,
	@accountIDX		INT,
	@getCount		INT
)
AS

SET NOCOUNT ON;

SELECT TOP (@getCount) idx,
       item1_type, item1_code, item2_type, item2_code, item3_type, item3_code, item4_type, item4_code, item5_type, item5_code,
       item6_type, item6_code, item7_type, item7_code, item8_type, item8_code, item9_type, item9_code, item10_type, item10_code,
       item11_type, item11_code, item12_type, item12_code, item13_type, item13_code, item14_type, item14_code, item15_type, item15_code, 
       item16_type, item16_code, item17_type, item17_code, item18_type, item18_code, item19_type, item19_code, item20_type, item20_code 
  FROM dbo.userItemDB WITH (NOLOCK)
 WHERE accountIDX = @accountIDX
   AND idx > @idx
 ORDER BY idx ASC
GO


-- ----------------------------
-- procedure structure for web_present_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_present_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_present_add]
GO

CREATE PROCEDURE [dbo].[web_present_add]
(
	@sendIDX int
,	@receiveIDX int
,	@persentType smallint
,	@value1 int
,	@value2 int
,	@msgType smallint
,	@limitDate datetime
,	@flag smallint
)
AS
	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (@sendIDX, @receiveIDX, @persentType, @value1, @value2, @msgType, @flag, @limitDate, getdate())
GO


-- ----------------------------
-- procedure structure for manage_access_admin_member_info_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_access_admin_member_info_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_access_admin_member_info_save]
GO

CREATE PROCEDURE [dbo].[manage_access_admin_member_info_save]
(
	@userID nvarchar(20)
,	@userPWD nvarchar(32)
,	@userName nvarchar(8)
,	@adminType int
)
AS

SET NOCOUNT ON

UPDATE dbo.manage_memberDB
   SET userPWD=@userPWD,
	   userName=@userName,
	   adminType=@adminType
 WHERE userID=@userID
GO


-- ----------------------------
-- procedure structure for web_guild_hp_get_guildIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_hp_get_guildIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_hp_get_guildIDX]
GO

CREATE PROCEDURE [dbo].[web_guild_hp_get_guildIDX]
(
	@accountIDX int
)
AS
	SELECT guildIDX FROM userGuildInfoDB WITH(NOLOCK) WHERE accountIDX=@accountIDX and guildJoinType=1
GO


-- ----------------------------
-- procedure structure for game_league_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_list]
GO

CREATE PROCEDURE [dbo].[game_league_list]
(
	@topN int
,	@idx int
)
AS

SET NOCOUNT ON

SELECT TOP (@topN) idx, accountIDX, startDate, endDate, leagueType, leagueState
FROM dbo.userLeagueListDB WITH(NOLOCK)
WHERE idx < @idx
ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for manage_mannerpoint_log_complete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_mannerpoint_log_complete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_mannerpoint_log_complete]
GO

CREATE PROCEDURE [dbo].[manage_mannerpoint_log_complete]
(
	@idx varchar(200)
,	@handleType varchar(2)
)
AS
	DECLARE @strSQL varchar(1000)

	IF (@handleType = '1')
	BEGIN
		SET @strSQL = 'UPDATE LosaGame_log.DBO.log_mannerpoint SET resultType=1 WHERE idx in (' + @idx + ')'
	END
	ELSE
	BEGIN
		SET @strSQL = 'UPDATE LosaGame_log.DBO.log_mannerpoint SET receivepoint=-1, resultType=1 WHERE idx in (' + @idx + ')'
	END

	EXECUTE (@strSQL)
GO


-- ----------------------------
-- procedure structure for game_guild_reward_set_guildRank
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_reward_set_guildRank]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_reward_set_guildRank]
GO

CREATE PROCEDURE [dbo].[game_guild_reward_set_guildRank]

	@ACCOUNT_IDX		INT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	10000

	DECLARE @nReturn			INT

	BEGIN TRAN
			
		UPDATE dbo.userGuildInfoDB WITH (XLOCK, ROWLOCK) SET GuildRankDate=GETDATE()
		WHERE AccountIDX=@ACCOUNT_IDX

		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
			RETURN
		END

	COMMIT TRAN

	RETURN;
GO


-- ----------------------------
-- procedure structure for web_recommend_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_recommend_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_recommend_get_data]
GO

CREATE PROCEDURE [dbo].[web_recommend_get_data]
(
	@accountIDX int
)
As
	SELECT rec_inc, rec_dec FROM userInfoDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_item_extra_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_extra_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_extra_save]
GO

CREATE PROCEDURE [dbo].[game_item_extra_save]
(
	@idx int
,	@item1_type int
,	@item1_reinforce int
,	@item1_slotindex int
,	@item1_tradeType int
,	@item1_limitType int
,	@item1_mcustom int
,	@item1_fcustom int
,	@item1_failexp smallint
,	@item1_limitDate datetime
,	@item2_type int
,	@item2_reinforce int
,	@item2_slotindex int
,	@item2_tradeType int
,	@item2_limitType int
,	@item2_mcustom int
,	@item2_fcustom int
,	@item2_failexp smallint
,	@item2_limitDate datetime
,	@item3_type int
,	@item3_reinforce int
,	@item3_slotindex int
,	@item3_tradeType int
,	@item3_limitType int
,	@item3_mcustom int
,	@item3_fcustom int
,	@item3_failexp smallint
,	@item3_limitDate datetime
,	@item4_type int
,	@item4_reinforce int
,	@item4_slotindex int
,	@item4_tradeType int
,	@item4_limitType int
,	@item4_mcustom int
,	@item4_fcustom int
,	@item4_failexp smallint
,	@item4_limitDate datetime
,	@item5_type int
,	@item5_reinforce int
,	@item5_slotindex int
,	@item5_tradeType int
,	@item5_limitType int
,	@item5_mcustom int
,	@item5_fcustom int
,	@item5_failexp smallint
,	@item5_limitDate datetime
,	@item6_type int
,	@item6_reinforce int
,	@item6_slotindex int
,	@item6_tradeType int
,	@item6_limitType int
,	@item6_mcustom int
,	@item6_fcustom int
,	@item6_failexp smallint
,	@item6_limitDate datetime
,	@item7_type int
,	@item7_reinforce int
,	@item7_slotindex int
,	@item7_tradeType int
,	@item7_limitType int
,	@item7_mcustom int
,	@item7_fcustom int
,	@item7_failexp smallint
,	@item7_limitDate datetime
,	@item8_type int
,	@item8_reinforce int
,	@item8_slotindex int
,	@item8_tradeType int
,	@item8_limitType int
,	@item8_mcustom int
,	@item8_fcustom int
,	@item8_failexp smallint
,	@item8_limitDate datetime
,	@item9_type int
,	@item9_reinforce int
,	@item9_slotindex int
,	@item9_tradeType int
,	@item9_limitType int
,	@item9_mcustom int
,	@item9_fcustom int
,	@item9_failexp smallint
,	@item9_limitDate datetime
,	@item10_type int
,	@item10_reinforce int
,	@item10_slotindex int
,	@item10_tradeType int
,	@item10_limitType int
,	@item10_mcustom int
,	@item10_fcustom int
,	@item10_failexp smallint
,	@item10_limitDate datetime
)
AS

SET NOCOUNT ON

UPDATE dbo.userItemExtraDB
   SET item1_type = @item1_type,
	   item1_reinforce = @item1_reinforce,
	   item1_slotindex = @item1_slotindex,
	   item1_tradetype = @item1_tradeType,
	   item1_mcustom = @item1_mcustom,
	   item1_fcustom = @item1_fcustom,
	   item1_failexp = @item1_failexp,
	   item1_limitType = @item1_limitType,
	   item1_limitDate = @item1_limitDate,
	   item2_type = @item2_type,
	   item2_reinforce = @item2_reinforce,
	   item2_slotindex = @item2_slotindex,
	   item2_tradetype = @item2_tradeType,
	   item2_mcustom = @item2_mcustom,
	   item2_fcustom = @item2_fcustom,
	   item2_failexp = @item2_failexp,
	   item2_limitType = @item2_limitType,
	   item2_limitDate = @item2_limitDate,
	   item3_type = @item3_type,
	   item3_reinforce = @item3_reinforce,
	   item3_slotindex = @item3_slotindex,
	   item3_tradetype = @item3_tradeType,
	   item3_mcustom = @item3_mcustom,
	   item3_fcustom = @item3_fcustom,
	   item3_failexp = @item3_failexp,
	   item3_limitType = @item3_limitType,
	   item3_limitDate = @item3_limitDate,
	   item4_type = @item4_type,
	   item4_reinforce = @item4_reinforce,
	   item4_slotindex = @item4_slotindex,
	   item4_tradetype = @item4_tradeType,
	   item4_mcustom = @item4_mcustom,
	   item4_fcustom = @item4_fcustom,
	   item4_failexp = @item4_failexp,
	   item4_limitType = @item4_limitType,
	   item4_limitDate = @item4_limitDate,
	   item5_type = @item5_type,
	   item5_reinforce = @item5_reinforce,
	   item5_slotindex = @item5_slotindex,
	   item5_tradetype = @item5_tradeType,
	   item5_mcustom = @item5_mcustom,
	   item5_fcustom = @item5_fcustom,
	   item5_failexp = @item5_failexp,
	   item5_limitType = @item5_limitType,
	   item5_limitDate = @item5_limitDate,
	   item6_type = @item6_type,
	   item6_reinforce = @item6_reinforce,
	   item6_slotindex = @item6_slotindex,
	   item6_tradetype = @item6_tradeType,
	   item6_mcustom = @item6_mcustom,
	   item6_fcustom = @item6_fcustom,
	   item6_failexp = @item6_failexp,
	   item6_limitType = @item6_limitType,
	   item6_limitDate = @item6_limitDate,
	   item7_type = @item7_type,
	   item7_reinforce = @item7_reinforce,
	   item7_slotindex = @item7_slotindex,
	   item7_tradetype = @item7_tradeType,
	   item7_mcustom = @item7_mcustom,
	   item7_fcustom = @item7_fcustom,
	   item7_failexp = @item7_failexp,
	   item7_limitType = @item7_limitType,
	   item7_limitDate = @item7_limitDate,
	   item8_type = @item8_type,
	   item8_reinforce = @item8_reinforce,
	   item8_slotindex = @item8_slotindex,
	   item8_tradetype = @item8_tradeType,
	   item8_mcustom = @item8_mcustom,
	   item8_fcustom = @item8_fcustom,
	   item8_failexp = @item8_failexp,
	   item8_limitType = @item8_limitType,
	   item8_limitDate = @item8_limitDate,
	   item9_type = @item9_type,
	   item9_reinforce = @item9_reinforce,
	   item9_slotindex = @item9_slotindex,
	   item9_tradetype = @item9_tradeType,
	   item9_mcustom = @item9_mcustom,
	   item9_fcustom = @item9_fcustom,
	   item9_failexp = @item9_failexp,
	   item9_limitType = @item9_limitType,
	   item9_limitDate = @item9_limitDate,
	   item10_type = @item10_type,
	   item10_reinforce = @item10_reinforce,
	   item10_slotindex = @item10_slotindex,
	   item10_tradetype = @item10_tradeType,
	   item10_mcustom = @item10_mcustom,
	   item10_fcustom = @item10_fcustom,
	   item10_failexp = @item10_failexp,
	   item10_limitType = @item10_limitType,
	   item10_limitDate = @item10_limitDate
 WHERE idx = @idx
GO


-- ----------------------------
-- procedure structure for web_play_tester_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_play_tester_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_play_tester_get_data]
GO

CREATE PROCEDURE [dbo].[web_play_tester_get_data]
(
	@accountIDX int
)
As
	SELECT a.visit_count, a.rec_index, b.userLevel 
	FROM userInfoDB a join userGameDB b on a.accountIDX = b.accountIDX WHERE a.accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for manage_access_admin_member_info_del
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_access_admin_member_info_del]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_access_admin_member_info_del]
GO

CREATE PROCEDURE [dbo].[manage_access_admin_member_info_del]
(
	@userID nvarchar(20)
,	@adminType int
)
AS

SET NOCOUNT ON

DELETE FROM dbo.manage_memberDB
 WHERE userID=@userID
   AND adminType=@adminType
GO


-- ----------------------------
-- procedure structure for web_guild_hp_get_guild_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_hp_get_guild_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_hp_get_guild_info]
GO

CREATE PROCEDURE [dbo].[web_guild_hp_get_guild_info]
(
	@guildIDX int
)
AS

SET NOCOUNT ON

SELECT guildName, aboutguild, guildmark, ranking, point, todaypoint, guildLevel, membercount, today_vc, total_vc, regDate
  FROM dbo.userGuildDB WITH(NOLOCK)
 WHERE idx=@guildIDX
GO


-- ----------------------------
-- procedure structure for game_league_info_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_info_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_info_save]
GO

CREATE PROCEDURE [dbo].[game_league_info_save]
(
	@idx int
,	@announce nvarchar(512)
,	@recruitDate int
,	@waitDate int
)
AS

SET NOCOUNT ON

UPDATE dbo.userLeagueInfoDB
   SET announce = @announce
,	   recruitDate = @recruitDate
,	   waitDate = @waitDate
 WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_guild_reward_set_attend
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_reward_set_attend]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_reward_set_attend]
GO

CREATE PROCEDURE [dbo].[game_guild_reward_set_attend]

	@ACCOUNT_IDX		INT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	10000

	DECLARE @nReturn			INT

	BEGIN TRAN
			
		UPDATE dbo.userGuildInfoDB WITH (XLOCK, ROWLOCK) SET AttendDate=GETDATE()
		WHERE AccountIDX=@ACCOUNT_IDX

		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
			RETURN
		END

	COMMIT TRAN

	RETURN;
GO


-- ----------------------------
-- procedure structure for web_recommend_bonus_point
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_recommend_bonus_point]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_recommend_bonus_point]
GO

CREATE PROCEDURE [dbo].[web_recommend_bonus_point]
(
	@accountIDX int
,	@bonusCash int
,	@userIP varchar(16)
)
As
	Begin Tran

	UPDATE userCashDB SET
		amtCash = amtCash + @bonusCash
,		amtBonus = amtBonus + @bonusCash
,		chgDate = getdate()
	WHERE accountIDX = @accountIDX

	INSERT INTO LosaGame_log.DBO.log_cash (accountIDX, userIP, DBID, applyType, amount, note, regDate)
	VALUES (@accountIDX, @userIP, 'RECOMMEND', 'B0', @bonusCash, '게임추천 보너스', getdate())

	Commit Tran
GO


-- ----------------------------
-- procedure structure for game_item_extra_get_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_extra_get_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_extra_get_self_index]
GO

CREATE PROCEDURE [dbo].[game_item_extra_get_self_index]
(
	@accountIDX int
)
AS
	SELECT TOP 1 idx FROM userItemExtraDB WHERE accountIDX = @accountIDX ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_play_mgameIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_play_mgameIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_play_mgameIDX]
GO

CREATE PROCEDURE [dbo].[web_play_mgameIDX]
(
	@accountIDX int
)
AS
	SELECT cpID, cpIDX FROM userCooperationDB WHERE accountIDX=@accountIDX and cpType=300
GO


-- ----------------------------
-- procedure structure for manage_access_admin_member_info_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_access_admin_member_info_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_access_admin_member_info_add]
GO

CREATE PROCEDURE [dbo].[manage_access_admin_member_info_add]
(
	@userID nvarchar(20)
,	@userPWD nvarchar(32)
,	@userName nvarchar(8)
,	@adminType int
,	@teamType int
)
AS

SET NOCOUNT ON

INSERT INTO dbo.manage_memberDB (
	accountIDX, userID, userPWD, userName, adminType, teamType, regDate
)
VALUES (
	0, @userID, @userPWD, @userName, @adminType, @teamType, GETDATE()
)
GO


-- ----------------------------
-- procedure structure for web_guild_get_todaypoint_top3
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_get_todaypoint_top3]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_get_todaypoint_top3]
GO

CREATE PROCEDURE [dbo].[web_guild_get_todaypoint_top3]

AS

SET NOCOUNT ON

SELECT TOP 3 idx, guildName, guildmark
  FROM dbo.userGuildDB WITH(NOLOCK)
 WHERE ranking > 0
 ORDER BY ranking ASC
GO


-- ----------------------------
-- procedure structure for game_league_history_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_history_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_history_list]
GO

CREATE PROCEDURE [dbo].[game_league_history_list]
(
	@topN int
,	@idx int
)
AS

SET NOCOUNT ON

SELECT TOP (@topN) idx, leagueTitle, startDate, teamName, factionType, factionName
  FROM dbo.userLeagueWinnerHistoryDB WITH(NOLOCK)
 WHERE idx > @idx
 ORDER BY idx ASC
GO


-- ----------------------------
-- procedure structure for manage_userinfo_total_member_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_total_member_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_total_member_count]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_total_member_count]
AS
	SELECT object_name(id) as tableName, rowcnt FROM sysindexes WHERE id=701961577 and indid < 2
GO


-- ----------------------------
-- procedure structure for game_guild_ranking_point_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_ranking_point_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_ranking_point_save]
GO

CREATE PROCEDURE [dbo].[game_guild_ranking_point_save]
(
	@guildIDX int
,	@ranking int
,	@point int
,	@todaypoint int
,	@guildLevel int
,	@maxcount int
)
AS
	UPDATE userGuildDB SET 
		ranking=@ranking
,		point=@point
,		todaypoint=@todaypoint
,		guildLevel=@guildLevel
,		maxcount=@maxcount 
	WHERE idx=@guildIDX
GO


-- ----------------------------
-- procedure structure for web_realmember_search_address
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_search_address]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_search_address]
GO

CREATE PROCEDURE [dbo].[web_realmember_search_address]
(
	@searchtype varchar(4)
,	@searchstring varchar(20)
)
AS
	DECLARE @keyword nvarchar(24)
	SET @keyword = '%' + @searchstring + '%'

	SELECT zipcode, sido, gugun, dong, ri, bldg, bunji FROM define_zipcode WITH(NOLOCK)
	WHERE (CASE @searchtype WHEN 'ri' THEN ri ELSE dong END) LIKE @keyword
GO


-- ----------------------------
-- procedure structure for game_item_extra_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_extra_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_extra_get_list]
GO

CREATE PROCEDURE [dbo].[game_item_extra_get_list]
(
	@idx INT
,	@accountIDX INT
,	@getCount int
)
AS

SET NOCOUNT ON

SELECT TOP (@getCount) idx,
	   item1_type, item1_reinforce, item1_slotindex, item1_tradetype, item1_limitType, item1_mcustom, item1_fcustom, item1_failexp, item1_limitDate,
	   item2_type, item2_reinforce, item2_slotindex, item2_tradetype, item2_limitType, item2_mcustom, item2_fcustom, item2_failexp, item2_limitDate,
	   item3_type, item3_reinforce, item3_slotindex, item3_tradetype, item3_limitType, item3_mcustom, item3_fcustom, item3_failexp, item3_limitDate,
	   item4_type, item4_reinforce, item4_slotindex, item4_tradetype, item4_limitType, item4_mcustom, item4_fcustom, item4_failexp, item4_limitDate,
	   item5_type, item5_reinforce, item5_slotindex, item5_tradetype, item5_limitType, item5_mcustom, item5_fcustom, item5_failexp, item5_limitDate,
	   item6_type, item6_reinforce, item6_slotindex, item6_tradetype, item6_limitType, item6_mcustom, item6_fcustom, item6_failexp, item6_limitDate,
	   item7_type, item7_reinforce, item7_slotindex, item7_tradetype, item7_limitType, item7_mcustom, item7_fcustom, item7_failexp, item7_limitDate,
	   item8_type, item8_reinforce, item8_slotindex, item8_tradetype, item8_limitType, item8_mcustom, item8_fcustom, item8_failexp, item8_limitDate,
	   item9_type, item9_reinforce, item9_slotindex, item9_tradetype, item9_limitType, item9_mcustom, item9_fcustom, item9_failexp, item9_limitDate,
	   item10_type, item10_reinforce, item10_slotindex, item10_tradetype, item10_limitType, item10_mcustom, item10_fcustom, item10_failexp, item10_limitDate
  FROM dbo.userItemExtraDB WITH (NOLOCK)
 WHERE accountIDX = @accountIDX
   AND idx > @idx
 ORDER BY idx ASC
GO


-- ----------------------------
-- procedure structure for web_play_login_data_get_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_play_login_data_get_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_play_login_data_get_count]
GO

CREATE PROCEDURE [dbo].[web_play_login_data_get_count]
(
	@accountIDX int
)
As
	SELECT count(*) FROM userLoginDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for manage_access_admin_member_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_access_admin_member_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_access_admin_member_info]
GO

CREATE PROCEDURE [dbo].[manage_access_admin_member_info]
(
	@userID nvarchar(20)
)
AS

SET NOCOUNT ON

SELECT userID, userPWD, userName, adminType
  FROM dbo.manage_memberDB WITH(NOLOCK)
 WHERE userID=@userID
GO


-- ----------------------------
-- procedure structure for web_guild_get_region_point
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_get_region_point]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_get_region_point]
GO

CREATE PROCEDURE [dbo].[web_guild_get_region_point]

AS
	SELECT rt1point, rt2point FROM userRegionDB WITH(NOLOCK)
GO


-- ----------------------------
-- procedure structure for game_league_history_get_winner_team_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_history_get_winner_team_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_history_get_winner_team_info]
GO

CREATE PROCEDURE [dbo].[game_league_history_get_winner_team_info]

AS

SET NOCOUNT ON

SELECT TOP 1 teamName, factionType
  FROM dbo.userLeagueWinnerHistoryDB WITH(NOLOCK)
 ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for game_guild_position_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_position_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_position_save]
GO

CREATE PROCEDURE [dbo].[game_guild_position_save]
(
	@accountIDX int
,	@guildIDX int
,	@position varchar(20)
)
AS
	DECLARE @msg tinyint
	if (@position = '부길드장')
		SET @msg = 3

	if (@position = '길드원')
		SET @msg = 5

	if (@position = 'Admin')
		SET @msg = 5

	UPDATE userGuildInfoDB SET guildPosition=@position, msg=@msg WHERE guildIDX=@guildIDX and accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_realmember_parent_get_encode
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_parent_get_encode]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_parent_get_encode]
GO

CREATE PROCEDURE [dbo].[web_realmember_parent_get_encode]
(
	@accountIDX int
)
AS
	SELECT parentName, parentBirth, parentEncode FROM userParentDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_item_extra_get_customidx
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_extra_get_customidx]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_extra_get_customidx]
GO

CREATE PROCEDURE [dbo].[game_item_extra_get_customidx]
(
	@accountIDX int
)
AS
	BEGIN TRAN

	SELECT MAX(idx) FROM define_gear_customidx
	INSERT INTO define_gear_customidx (accountIDX) values (@accountIDX)

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for web_play_game_server_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_play_game_server_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_play_game_server_get_data]
GO

CREATE PROCEDURE [dbo].[web_play_game_server_get_data]

As
	DECLARE @maxcount int
	SET @maxcount = DBO.DEFINE_SERVER_CONNECTION_MAX_COUNT()

	SELECT TOP 1 serverID FROM define_game_server
	WHERE connNumber < @maxcount and [status]=1 ORDER BY NEWID()
GO


-- ----------------------------
-- procedure structure for web_member_io_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_io_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_io_count]
GO

CREATE PROCEDURE [dbo].[web_member_io_count]
(
	@userID varchar(12)
)
As
	Select count(*) From manage_memberDB where userID = @userID
GO


-- ----------------------------
-- procedure structure for web_guild_get_position
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_get_position]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_get_position]
GO

CREATE PROCEDURE [dbo].[web_guild_get_position]
(
	@accountIDX int
,	@guildIDX int
)
AS
	SELECT guildPosition FROM userGuildInfoDB WITH(NOLOCK) WHERE guildIDX = @guildIDX and accountIDX = @accountIDX and guildJoinType=1
GO


-- ----------------------------
-- function structure for DEFINE_SERVER_CONNECTION_MAX_COUNT
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[DEFINE_SERVER_CONNECTION_MAX_COUNT]') AND type IN ('FN', 'FS', 'FT', 'IF', 'TF'))
	DROP FUNCTION[dbo].[DEFINE_SERVER_CONNECTION_MAX_COUNT]
GO

CREATE FUNCTION [dbo].[DEFINE_SERVER_CONNECTION_MAX_COUNT]
(
)
RETURNS int
AS
	BEGIN

	DECLARE @maxcount int
	SET @maxcount = 2000

	RETURN @maxcount

	END
GO


-- ----------------------------
-- procedure structure for game_league_get_reward_cheer
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_get_reward_cheer]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_get_reward_cheer]
GO

CREATE PROCEDURE [dbo].[game_league_get_reward_cheer]
(
	@accountIDX INT
,	@flag TINYINT
)
AS

SET NOCOUNT ON


SELECT idx, rewardPeso
  FROM dbo.userLeagueRewardCheerDB WITH(NOLOCK)
 WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for USP_LTS_AuthCheck_UPD
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_AuthCheck_UPD]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_AuthCheck_UPD]
GO

CREATE PROCEDURE [dbo].[USP_LTS_AuthCheck_UPD] 
	-- Add the parameters for the stored procedure here
	@strLoginID			varchar(25),
	@strUserName		varchar(10),
	@strRequestNo		varchar(30),
	@strConnInfo		varchar(88),
	@intStatus			smallint,
	@intAclSeq			int			Output
AS
/*
	@intStatus : 0,1 : 성공(본인/아이핀), -1 : 암호화 시스템 에러, -4 : 입력 데이터 오류, -6 : 복호화 오류, -8 : SEQ 값 틀림, -9 : 입력 데이터 오류, -12 : 사이트 패스워드 오류

	Grant Execute on dbo.USP_LTS_AuthCheck_UPD to usr_websvc
*/
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    -- Insert statements for procedure here

	-- Acl_SEQ 값 가져오기
	Select Top 1 @intAclSeq = Acl_Seq From dbo.TB_LTS_AuthCheck_Log with (noLock)
	Where Acl_RequestNo = @strRequestNo
	Set @intAclSeq = isNull(@intAclSeq,0)

	IF Exists (Select 1 From dbo.TB_LTS_AuthCheck_Log with (noLock)
				Where Acl_RequestNo = @strRequestNo
	)
		Begin
			Begin Tran
			Update dbo.TB_LTS_AuthCheck_Log Set 
				Acl_UserName = @strUserName
				, Acl_ConnInfo = @strConnInfo
				, Acl_Status = @intStatus
			Where Acl_RequestNo = @strRequestNo

			IF @@ERROR = 0
				Begin
					Commit Tran
					Return 1			-- 성공
				End
			Else
				Begin
					Rollback Tran
					Return -9			-- 실패
				End

		End
	Else
		Begin
			Return -8					-- 데이터가 존재하지 않음
		End


END
GO


-- ----------------------------
-- procedure structure for game_guild_position_msg_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_position_msg_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_position_msg_save]
GO

CREATE PROCEDURE [dbo].[game_guild_position_msg_save]
(
	@accountIDX int
,	@guildIDX int
,	@msg int
)
AS
	UPDATE userGuildInfoDB SET msg=@msg WHERE guildIDX=@guildIDX and accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_realmember_parent_email_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_parent_email_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_parent_email_save]
GO

CREATE PROCEDURE [dbo].[web_realmember_parent_email_save]
(
	@accountIDX int
,	@email varchar(50)
)
AS
	UPDATE userparentDB SET email=@email WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_timeCash_set_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_timeCash_set_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_timeCash_set_add]
GO

CREATE PROCEDURE [dbo].[game_timeCash_set_add]    
    
 @ACCOUNT_IDX  INT,    
 @ITEM_CODE   INT,     
 @OVER_DATE   DATETIME    
      
AS    
    
 SET NOCOUNT ON    
 SET LOCK_TIMEOUT 10000    
    
 DECLARE @GET_DATE DATETIME    
 SET @GET_DATE = GETDATE();    
 
 DECLARE @START_DATE DATETIME
 SET @START_DATE = GETDATE();    
 
 BEGIN TRAN    
    
  -- 신규로 구입할 경우, Insert하고 재구매시 기간을 연장하는 방식.     
  -- 캐쉬를 받은 횟수를 저장하는 ItemCount는 초기화 하지 않고 계속 누적시킨다.    
  ;MERGE dbo.userTimeCashDB as TARGET    
  USING (SELECT @ACCOUNT_IDX, @ITEM_CODE) AS SOURCE (AccountIDX, ItemCode)    
  ON (TARGET.AccountIDX=SOURCE.AccountIDX and TARGET.ItemCode=SOURCE.ItemCode)    
  WHEN MATCHED THEN    
   UPDATE SET TARGET.ItemStatus=1, StartDate=@GET_DATE, OverDate=@OVER_DATE, UpdDate=@GET_DATE    
  WHEN NOT MATCHED THEN    
   INSERT (AccountIDX, ItemCode, RegDate, StartDate, OverDate, UpdDate) VALUES (SOURCE.AccountIDX, SOURCE.ItemCode, @GET_DATE, @GET_DATE, @OVER_DATE, @GET_DATE);      
          
  IF (@@ROWCOUNT=0) or (@@ERROR<>0)    
  BEGIN    
   ROLLBACK TRAN    
   RETURN;    
  END    
      
 
 SET @START_DATE = ( SELECT StartDate FROM dbo.userTimeCashDB WITH (READCOMMITTED)  
 WHERE AccountIDX=@ACCOUNT_IDX and ItemStatus=1 and itemCode = @ITEM_CODE )
 
     
  SELECT @GET_DATE, @OVER_DATE, @START_DATE
    
 COMMIT TRAN    
    
 RETURN;
GO


-- ----------------------------
-- procedure structure for web_play_game_server_get_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_play_game_server_get_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_play_game_server_get_count]
GO

CREATE PROCEDURE [dbo].[web_play_game_server_get_count]

As
	SELECT COUNT(*) FROM define_game_server with(nolock) WHERE [status]=1
GO


-- ----------------------------
-- procedure structure for manage_login_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_login_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_login_get_data]
GO

CREATE PROCEDURE [dbo].[manage_login_get_data]
(
	@ioID varchar(12)
)
AS
	SELECT accountIDX, userID, userPWD, userName, adminType FROM manage_memberDB WHERE userID = @ioID
GO


-- ----------------------------
-- procedure structure for web_guild_get_play_type
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_get_play_type]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_get_play_type]
GO

CREATE PROCEDURE [dbo].[web_guild_get_play_type]
(
	@accountIDX int
)
AS
	SELECT gameServerID FROM userLoginDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_coupon_teencash_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_coupon_teencash_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_coupon_teencash_save]
GO

CREATE PROCEDURE [dbo].[web_event_coupon_teencash_save]
(
	@sn varchar(12)
,	@accountIDX int
,	@userIP varchar(15)
,	@regType tinyint
)
AS
	If (@regType = 1)
	BEGIN
		UPDATE define_serial_teencash SET 
			newIDX = @accountIDX
		,	newIP = @userIP
		,	newRegdate = getdate()
		WHERE sn = @sn
	END
	ELSE
	BEGIN
		UPDATE define_serial_teencash SET 
			oldIDX = @accountIDX
		,	oldIP = @userIP
		,	oldRegdate = getdate()
		WHERE sn = @sn
	END
GO


-- ----------------------------
-- procedure structure for game_league_get_reward
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_get_reward]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_get_reward]
GO

CREATE PROCEDURE [dbo].[game_league_get_reward]
(
	@accountIDX int
)
AS

SET NOCOUNT ON

SELECT idx, startDate, currentRound, userFactionType, winnerFactionType, rewardPeso, factionRank, factionPoint
  FROM dbo.userLeagueRewardDB WITH(NOLOCK)
 WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for USP_LTS_AuthCheck_INS
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_AuthCheck_INS]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_AuthCheck_INS]
GO

CREATE PROCEDURE [dbo].[USP_LTS_AuthCheck_INS] 
	-- Add the parameters for the stored procedure here
	@intAccountIdx		int,
	@strLoginID			varchar(25),
	@strMethod			char(1),
	@strLocation		varchar(20),
	@strRequestNo		varchar(30),
	@strPlainData		varchar(400),
	@strRegIP			varchar(15)
AS
/*
	@strMethod : M : 핸드폰인증, X : 공인인증서, C : 신용카드, B : 은행, I : 아이핀

	Grant Execute on dbo.USP_LTS_AuthCheck_INS to usr_websvc
*/
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    -- Insert statements for procedure here

	IF Len(@strRequestNo) > 5
		Begin
			IF Not Exists (Select 1 From dbo.TB_LTS_AuthCheck_Log with (noLock)
							Where Acl_RequestNo = @strRequestNo
			)
				Begin

					Begin Tran
					INSERT INTO [dbo].[TB_LTS_AuthCheck_Log] (
						[Acl_AccountIdx]
						, [Acl_LoginID]
						, [Acl_Method]
						, [Acl_Location]
						, [Acl_RequestNo]
						, [Acl_PlainData]
						, [Acl_RegIP]
						, [Acl_RegDate]
					) VALUES (
						@intAccountIdx
						, @strLoginID
						, @strMethod
						, @strLocation
						, @strRequestNo
						, @strPlainData
						, @strRegIP
						, getdate()
					)

					IF @@ERROR = 0
						Begin
							Commit Tran
							Return 1			-- 정상 처리
						End
					Else
						Begin
							RollBack Tran
							Return -9			-- 처리 중 오류
						End
				End
			Else
				Begin
					Return -7					-- 이미 등록됨
				End

		End
	Else
		Begin
			Return -8			-- 잘 못된 요청(파라미터 오류)
		End


END
GO


-- ----------------------------
-- procedure structure for game_guild_msg_init
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_msg_init]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_msg_init]
GO

CREATE PROCEDURE [dbo].[game_guild_msg_init]
(
	@accountIDX int
,	@guildIDX int
)
AS
	UPDATE userGuildInfoDB SET msg=0 WHERE guildIDX=@guildIDX and accountIDX=@accountIDX and guildJoinType=1
GO


-- ----------------------------
-- procedure structure for web_realmember_namecheck_saveB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_namecheck_saveB]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_namecheck_saveB]
GO

CREATE PROCEDURE [dbo].[web_realmember_namecheck_saveB]
(
	@accountIDX int
,	@userName varchar(10)
,	@userBirthday char(6)
,	@userJumin1 char(12)
,	@userJumin2 char(14)
,	@userEnCode varchar(64)
,	@userGender tinyint
,	@userNumber tinyint
,	@userIP varchar(15)
,	@returnValue tinyint
,	@realType tinyint
)
AS

	BEGIN TRAN

	INSERT INTO LosaGame_log.DBO.log_userNameDB_backup (accountIDX, userName, userBirthday, userEnCode, userNumber, userGender, returnValue, userIP, regDate)
	SELECT accountIDX, userName, userBirthday, userEnCode, userNumber, userGender, returnValue, userIP, regDate FROM userNameDB WHERE accountIDX=@accountIDX

	UPDATE userNameDB SET
		userName = @userName
,		userBirthday = @userBirthday
,		userJumin1 = @userJumin1
,		userJumin2 = @userJumin2
,		userEnCode = @userEnCode
,		userGender = @userGender
,		userNumber = @userNumber
,		returnValue = @returnValue
,		userIP = @userIP
,		realType = @realType
,		regDate = getdate() 
	WHERE accountIDX = @accountIDX

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_timeCash_insert
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_timeCash_insert]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_timeCash_insert]
GO

CREATE PROCEDURE [dbo].[game_timeCash_insert]
  
    
AS  
  
 SET NOCOUNT ON  
 SET LOCK_TIMEOUT 10000  
  
 DECLARE @LIMIT_DATE DATETIME  
 SET @LIMIT_DATE = DATEADD(DD, 20, GETDATE());  
 
 DECLARE @GET_DATE DATETIME  
 SET @GET_DATE = GETDATE();  
   
 
 --최초 구입한 유저 5,000 골드 유저
  --INSERT INTO dbo.userGoldDB WITH (XLOCK, ROWLOCK) (AccountIDX, OriginalAmount, Amount, GoldType, GoldStatus, ExpirationDate, RegDate)  
 SELECT accountIDX, 5000, 5000, 1, 1, @LIMIT_DATE, GETDATE()
   FROM dbo.userTimeCashDB WITH(NOLOCK)
  WHERE ItemCount = 0
    AND StartDate >= @GET_DATE
    AND StartDate < DATEADD(DD, 1, @GET_DATE)
  
 --최초구입 제외 19일간 지급 받을 유저
 --INSERT INTO dbo.userGoldDB WITH (XLOCK, ROWLOCK) (AccountIDX, OriginalAmount, Amount, GoldType, GoldStatus, ExpirationDate, RegDate)  
 SELECT accountIDX, 500, 500, 1, 1, @LIMIT_DATE, GETDATE()
   FROM dbo.userTimeCashDB WITH(NOLOCK)
  WHERE ItemCount > 0
    AND StartDate > GETDATE()-19
    AND OverDate < DATEADD(DD, 1, @GET_DATE)
 
          
 RETURN;
GO


-- ----------------------------
-- procedure structure for web_play_fixkey_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_play_fixkey_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_play_fixkey_get_data]
GO

CREATE PROCEDURE [dbo].[web_play_fixkey_get_data]

As
	SELECT encodeKey FROM define_encode_key WHERE idx = (SELECT MAX(idx) FROM define_encode_key)
GO


-- ----------------------------
-- procedure structure for web_guild_get_numberth
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_get_numberth]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_get_numberth]
GO

CREATE PROCEDURE [dbo].[web_guild_get_numberth]

AS
	SELECT MAX(season) + 1 AS 'numth' FROM userRegionDB_history
GO


-- ----------------------------
-- procedure structure for web_event_coupon_teencash_newIDX_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_coupon_teencash_newIDX_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_coupon_teencash_newIDX_count]
GO

CREATE PROCEDURE [dbo].[web_event_coupon_teencash_newIDX_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM define_serial_teencash WHERE newIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_item_extra_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_extra_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_extra_add]
GO

CREATE PROCEDURE [dbo].[game_item_extra_add]
(
	@accountIDX int
,	@item1_type int
,	@item1_reinforce int
,	@item1_slotindex int
,	@item1_tradeType int
,	@item1_limitType int
,	@item1_mcustom int
,	@item1_fcustom int
,	@item1_failexp smallint
,	@item1_limitDate datetime
,	@item2_type int
,	@item2_reinforce int
,	@item2_slotindex int
,	@item2_tradeType int
,	@item2_limitType int
,	@item2_mcustom int
,	@item2_fcustom int
,	@item2_failexp smallint
,	@item2_limitDate datetime
,	@item3_type int
,	@item3_reinforce int
,	@item3_slotindex int
,	@item3_tradeType int
,	@item3_limitType int
,	@item3_mcustom int
,	@item3_fcustom int
,	@item3_failexp smallint
,	@item3_limitDate datetime
,	@item4_type int
,	@item4_reinforce int
,	@item4_slotindex int
,	@item4_tradeType int
,	@item4_limitType int
,	@item4_mcustom int
,	@item4_fcustom int
,	@item4_failexp smallint
,	@item4_limitDate datetime
,	@item5_type int
,	@item5_reinforce int
,	@item5_slotindex int
,	@item5_tradeType int
,	@item5_limitType int
,	@item5_mcustom int
,	@item5_fcustom int
,	@item5_failexp smallint
,	@item5_limitDate datetime
,	@item6_type int
,	@item6_reinforce int
,	@item6_slotindex int
,	@item6_tradeType int
,	@item6_limitType int
,	@item6_mcustom int
,	@item6_fcustom int
,	@item6_failexp smallint
,	@item6_limitDate datetime
,	@item7_type int
,	@item7_reinforce int
,	@item7_slotindex int
,	@item7_tradeType int
,	@item7_limitType int
,	@item7_mcustom int
,	@item7_fcustom int
,	@item7_failexp smallint
,	@item7_limitDate datetime
,	@item8_type int
,	@item8_reinforce int
,	@item8_slotindex int
,	@item8_tradeType int
,	@item8_limitType int
,	@item8_mcustom int
,	@item8_fcustom int
,	@item8_failexp smallint
,	@item8_limitDate datetime
,	@item9_type int
,	@item9_reinforce int
,	@item9_slotindex int
,	@item9_tradeType int
,	@item9_limitType int
,	@item9_mcustom int
,	@item9_fcustom int
,	@item9_failexp smallint
,	@item9_limitDate datetime
,	@item10_type int
,	@item10_reinforce int
,	@item10_slotindex int
,	@item10_tradeType int
,	@item10_limitType int
,	@item10_mcustom int
,	@item10_fcustom int
,	@item10_failexp smallint
,	@item10_limitDate datetime
)
AS

SET NOCOUNT ON

INSERT INTO dbo.userItemExtraDB (
	accountIDX,
	item1_type, item1_reinforce, item1_slotindex, item1_tradetype, item1_mcustom, item1_fcustom, item1_limitType, item1_failexp, item1_limitDate, 
	item2_type, item2_reinforce, item2_slotindex, item2_tradetype, item2_mcustom, item2_fcustom, item2_limitType, item2_failexp, item2_limitDate, 
	item3_type, item3_reinforce, item3_slotindex, item3_tradetype, item3_mcustom, item3_fcustom, item3_limitType, item3_failexp, item3_limitDate, 
	item4_type, item4_reinforce, item4_slotindex, item4_tradetype, item4_mcustom, item4_fcustom, item4_limitType, item4_failexp, item4_limitDate, 
	item5_type, item5_reinforce, item5_slotindex, item5_tradetype, item5_mcustom, item5_fcustom, item5_limitType, item5_failexp, item5_limitDate, 
	item6_type, item6_reinforce, item6_slotindex, item6_tradetype, item6_mcustom, item6_fcustom, item6_limitType, item6_failexp, item6_limitDate, 
	item7_type, item7_reinforce, item7_slotindex, item7_tradetype, item7_mcustom, item7_fcustom, item7_limitType, item7_failexp, item7_limitDate, 
	item8_type, item8_reinforce, item8_slotindex, item8_tradetype, item8_mcustom, item8_fcustom, item8_limitType, item8_failexp, item8_limitDate, 
	item9_type, item9_reinforce, item9_slotindex, item9_tradetype, item9_mcustom, item9_fcustom, item9_limitType, item9_failexp, item9_limitDate, 
	item10_type, item10_reinforce, item10_slotindex, item10_tradetype, item10_mcustom, item10_fcustom, item10_limitType, item10_failexp, item10_limitDate,
	regDate
)
VALUES (
	@accountIDX,
	@item1_type, @item1_reinforce, @item1_slotindex, @item1_tradetype, @item1_mcustom, @item1_fcustom, @item1_limitType, @item1_failexp, @item1_limitDate, 
	@item2_type, @item2_reinforce, @item2_slotindex, @item2_tradetype, @item2_mcustom, @item2_fcustom, @item2_limitType, @item2_failexp, @item2_limitDate, 
	@item3_type, @item3_reinforce, @item3_slotindex, @item3_tradetype, @item3_mcustom, @item3_fcustom, @item3_limitType, @item3_failexp, @item3_limitDate, 
	@item4_type, @item4_reinforce, @item4_slotindex, @item4_tradetype, @item4_mcustom, @item4_fcustom, @item4_limitType, @item4_failexp, @item4_limitDate, 
	@item5_type, @item5_reinforce, @item5_slotindex, @item5_tradetype, @item5_mcustom, @item5_fcustom, @item5_limitType, @item5_failexp, @item5_limitDate, 
	@item6_type, @item6_reinforce, @item6_slotindex, @item6_tradetype, @item6_mcustom, @item6_fcustom, @item6_limitType, @item6_failexp, @item6_limitDate, 
	@item7_type, @item7_reinforce, @item7_slotindex, @item7_tradetype, @item7_mcustom, @item7_fcustom, @item7_limitType, @item7_failexp, @item7_limitDate, 
	@item8_type, @item8_reinforce, @item8_slotindex, @item8_tradetype, @item8_mcustom, @item8_fcustom, @item8_limitType, @item8_failexp, @item8_limitDate, 
	@item9_type, @item9_reinforce, @item9_slotindex, @item9_tradetype, @item9_mcustom, @item9_fcustom, @item9_limitType, @item9_failexp, @item9_limitDate, 
	@item10_type, @item10_reinforce, @item10_slotindex, @item10_tradetype, @item10_mcustom, @item10_fcustom, @item10_limitType, @item10_failexp, @item10_limitDate,
	GETDATE()
)
GO


-- ----------------------------
-- procedure structure for usp_TB_EventCoupon_use_chk2
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_TB_EventCoupon_use_chk2]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[usp_TB_EventCoupon_use_chk2]
GO

CREATE PROCEDURE [dbo].[usp_TB_EventCoupon_use_chk2]
	@sSerialNum		varchar(20),	-- 쿠폰번호
	@sCouponType		tinyint, 	-- 쿠폰타입
	@nAccountIDX		int,		-- 사용자인덱스번호
	@sUserIp		varchar(15),	-- 사용자아이피
	@nMaxNum		tinyint		-- 계정당 받아야할 개수 
AS
BEGIN
	-- 사용가능한 쿠폰인지 조회 	
	IF NOT EXISTS ( SELECT accountIDX, userIP
			  FROM TB_EventCoupon WITH (NOLOCK)		
			 WHERE sn = @sSerialNum
			   AND couponType = @sCouponType
	)
	BEGIN 
		PRINT (-1)
	END

	-- 이미 사용된 쿠폰인지 조회 
	SELECT accountIDX, userIP
	  FROM TB_EventCoupon WITH (NOLOCK)		
	 WHERE sn = @sSerialNum
	   AND couponType = @sCouponType
	   AND (accountIDX <> 0 OR regDate IS NOT NULL)

	IF @@ROWCOUNT > 0
	BEGIN
		PRINT (-2)
	END

	-- 계정당 몇번 받을수 있는지 체크 
	SELECT accountIDX, userIP
	  FROM TB_EventCoupon WITH (NOLOCK)		
	 WHERE accountIDX = @nAccountIDX
	   AND couponType = @sCouponType

	IF @@ROWCOUNT >= @nMaxNum
	BEGIN
		PRINT (-3)
	END

	SET NOCOUNT OFF

	-- 사용쿠폰등록 
	UPDATE TB_EventCoupon
	   SET sn = @sSerialNum, 
	       accountIDX = @nAccountIDX, 
	       userIP = @sUserIp,
	       regDate = GETDATE()
	 WHERE sn = @sSerialNum
	   AND couponType = @sCouponType

	IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
	BEGIN
		PRINT (-4)
	END
	RETURN (1)
END
GO


-- ----------------------------
-- procedure structure for game_guild_member_self_out
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_member_self_out]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_member_self_out]
GO

CREATE PROCEDURE [dbo].[game_guild_member_self_out]
(
	@accountIDX int
,	@guildIDX int
)
AS

	SET XACT_ABORT ON

	BEGIN TRAN

	DELETE FROM userGuildInfoDB WHERE guildIDX=@guildIDX and accountIDX=@accountIDX
	UPDATE userGuildDB SET membercount = membercount-1 WHERE idx=@guildIDX

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for web_realmember_namecheck_saveA
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_namecheck_saveA]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_namecheck_saveA]
GO

CREATE PROCEDURE [dbo].[web_realmember_namecheck_saveA]
(
	@accountIDX int
,	@userJumin1 char(12)
,	@userJumin2 char(14)
,	@userGender tinyint
,	@userNumber tinyint
,	@userIP varchar(15)
,	@returnValue tinyint
,	@realType tinyint
)
AS

	UPDATE userNameDB SET
		userJumin1 = @userJumin1
,		userJumin2 = @userJumin2
,		userNumber = @userNumber
,		userGender = @userGender
,		returnValue = @returnValue
,		userIP = @userIP
,		realType = @realType
,		regDate = getdate() 
	WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_timeCash_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_timeCash_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_timeCash_get_list]
GO

CREATE PROCEDURE [dbo].[game_timeCash_get_list]  
  
 @ACCOUNT_IDX  INT   
     
AS  
  
 SET NOCOUNT ON  
 SET LOCK_TIMEOUT 10000  
  
 SELECT ItemCode, startDate, OverDate, UpdDate FROM dbo.userTimeCashDB WITH (READCOMMITTED)  
 WHERE AccountIDX=@ACCOUNT_IDX and ItemStatus=1  
  
 IF (@@ERROR<>0)  
 BEGIN  
  RETURN -1;  
 END  
  
 RETURN;
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_training_game_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_training_game_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_training_game_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_training_game_data]
(
	@accountIDX int
)
As
	SELECT	type1_win AS 'win'
,			type1_lose AS 'lose'
,			type1_kill AS 'kill'
,			type1_death AS 'death'
	FROM userRecordBattleDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_guild_get_guildinfo
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_get_guildinfo]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_get_guildinfo]
GO

CREATE PROCEDURE [dbo].[web_guild_get_guildinfo]
(
	@accountIDX int
)
AS

SET NOCOUNT ON

SELECT idx, guildName, guildmark, ranking, point
  FROM dbo.userGuildDB WITH(NOLOCK)
 WHERE idx=(
	SELECT guildIDX
	FROM dbo.userGuildInfoDB WITH(NOLOCK)
	WHERE accountIDX=@accountIDX
 )
GO


-- ----------------------------
-- procedure structure for web_event_coupon_teencash_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_coupon_teencash_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_coupon_teencash_get_data]
GO

CREATE PROCEDURE [dbo].[web_event_coupon_teencash_get_data]
(
	@sn char(12)
)
AS
	SELECT newIDX, oldIDX FROM define_serial_teencash WHERE sn=@sn
GO


-- ----------------------------
-- procedure structure for game_item_etc_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_etc_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_etc_save]
GO

CREATE PROCEDURE [dbo].[game_item_etc_save]
(
	@idx int
,	@item1_type int
,	@item1_value1 int
,	@item1_value2 int
,	@item2_type int
,	@item2_value1 int
,	@item2_value2 int
,	@item3_type int
,	@item3_value1 int
,	@item3_value2 int
,	@item4_type int
,	@item4_value1 int
,	@item4_value2 int
,	@item5_type int
,	@item5_value1 int
,	@item5_value2 int
,	@item6_type int
,	@item6_value1 int
,	@item6_value2 int
,	@item7_type int
,	@item7_value1 int
,	@item7_value2 int
,	@item8_type int
,	@item8_value1 int
,	@item8_value2 int
,	@item9_type int
,	@item9_value1 int
,	@item9_value2 int
,	@item10_type int
,	@item10_value1 int
,	@item10_value2 int
,	@item11_type int
,	@item11_value1 int
,	@item11_value2 int
,	@item12_type int
,	@item12_value1 int
,	@item12_value2 int
,	@item13_type int
,	@item13_value1 int
,	@item13_value2 int
,	@item14_type int
,	@item14_value1 int
,	@item14_value2 int
,	@item15_type int
,	@item15_value1 int
,	@item15_value2 int
,	@item16_type int
,	@item16_value1 int
,	@item16_value2 int
,	@item17_type int
,	@item17_value1 int
,	@item17_value2 int
,	@item18_type int
,	@item18_value1 int
,	@item18_value2 int
,	@item19_type int
,	@item19_value1 int
,	@item19_value2 int
,	@item20_type int
,	@item20_value1 int
,	@item20_value2 int
)
As
	UPDATE userItemEtcDB SET
	item1_type = @item1_type
,	item1_value1 = @item1_value1
,	item1_value2 = @item1_value2
,	item2_type = @item2_type
,	item2_value1 = @item2_value1
,	item2_value2 = @item2_value2
,	item3_type = @item3_type
,	item3_value1 = @item3_value1
,	item3_value2 = @item3_value2
,	item4_type = @item4_type
,	item4_value1 = @item4_value1
,	item4_value2 = @item4_value2
,	item5_type = @item5_type
,	item5_value1 = @item5_value1
,	item5_value2 = @item5_value2
,	item6_type = @item6_type
,	item6_value1 = @item6_value1
,	item6_value2 = @item6_value2
,	item7_type = @item7_type
,	item7_value1 = @item7_value1
,	item7_value2 = @item7_value2
,	item8_type = @item8_type
,	item8_value1 = @item8_value1
,	item8_value2 = @item8_value2
,	item9_type = @item9_type
,	item9_value1 = @item9_value1
,	item9_value2 = @item9_value2
,	item10_type = @item10_type
,	item10_value1 = @item10_value1
,	item10_value2 = @item10_value2
,	item11_type = @item11_type
,	item11_value1 = @item11_value1
,	item11_value2 = @item11_value2
,	item12_type = @item12_type
,	item12_value1 = @item12_value1
,	item12_value2 = @item12_value2
,	item13_type = @item13_type
,	item13_value1 = @item13_value1
,	item13_value2 = @item13_value2
,	item14_type = @item14_type
,	item14_value1 = @item14_value1
,	item14_value2 = @item14_value2
,	item15_type = @item15_type
,	item15_value1 = @item15_value1
,	item15_value2 = @item15_value2
,	item16_type = @item16_type
,	item16_value1 = @item16_value1
,	item16_value2 = @item16_value2
,	item17_type = @item17_type
,	item17_value1 = @item17_value1
,	item17_value2 = @item17_value2
,	item18_type = @item18_type
,	item18_value1 = @item18_value1
,	item18_value2 = @item18_value2
,	item19_type = @item19_type
,	item19_value1 = @item19_value1
,	item19_value2 = @item19_value2
,	item20_type = @item20_type
,	item20_value1 = @item20_value1
,	item20_value2 = @item20_value2 
	WHERE idx = @idx
GO


-- ----------------------------
-- procedure structure for usp_TB_EventCoupon_use_chk
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_TB_EventCoupon_use_chk]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[usp_TB_EventCoupon_use_chk]
GO

CREATE PROCEDURE [dbo].[usp_TB_EventCoupon_use_chk]
	@sSerialNum		varchar(20),	-- 쿠폰번호
	@sCouponType		tinyint, 	-- 쿠폰타입
	@nAccountIDX		int,		-- 사용자인덱스번호
	@sUserIp		varchar(15),	-- 사용자아이피
	@nMaxNum		tinyint		-- 계정당 받아야할 개수 
AS
BEGIN
	SET NOCOUNT ON

	-- 사용가능한 쿠폰인지 조회 	
	IF NOT EXISTS ( SELECT accountIDX, userIP
			  FROM TB_EventCoupon WITH (NOLOCK)		
			 WHERE sn = @sSerialNum
			   AND couponType = @sCouponType
	)
	BEGIN 
		RETURN (-1)
	END

	-- 이미 사용된 쿠폰인지 조회 
	SELECT accountIDX, userIP
	  FROM TB_EventCoupon WITH (NOLOCK)		
	 WHERE sn = @sSerialNum
	   AND couponType = @sCouponType
	   AND (accountIDX <> 0 OR regDate IS NOT NULL)

	IF @@ROWCOUNT > 0
	BEGIN
		RETURN (-2)
	END

	-- 계정당 몇번 받을수 있는지 체크 
	SELECT accountIDX, userIP
	  FROM TB_EventCoupon WITH (NOLOCK)		
	 WHERE accountIDX = @nAccountIDX
	   AND couponType = @sCouponType

	IF @@ROWCOUNT >= @nMaxNum
	BEGIN
		RETURN (-3)
	END

	SET NOCOUNT OFF

	-- 사용쿠폰등록 
	UPDATE TB_EventCoupon
	   SET sn = @sSerialNum, 
	       accountIDX = @nAccountIDX, 
	       userIP = @sUserIp,
	       regDate = GETDATE()
	 WHERE sn = @sSerialNum
	   AND couponType = @sCouponType

	IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
	BEGIN
		RETURN (-4)
	END
	RETURN (1)
END
GO


-- ----------------------------
-- procedure structure for game_guild_member_out_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_member_out_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_member_out_delete]
GO

CREATE PROCEDURE [dbo].[game_guild_member_out_delete]
(
	@accountIDX int
,	@guildIDX int
)
AS
	DELETE FROM userGuildInfoDB WHERE guildIDX=@guildIDX and accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_realmember_namecheck_parent_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_namecheck_parent_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_namecheck_parent_add]
GO

CREATE PROCEDURE [dbo].[web_realmember_namecheck_parent_add]
	@accountIDX		int,
	@parentName		varchar(10),
	@parentBirthday		char(6) = null,
	@parentJumin1		char(12) = null,
	@parentJumin2		char(14) = null,
	@parentEnCode		varchar(64) = null,
	@parentNumber		tinyint,
	@sCertifyType		char(1)  = 'R',		-- 인증타입(R:주민번호로 인증, I:아이핀으로 인증)
	@sPEmail		varchar(50) = null,	-- 이메일
	@sPIpinCI		varchar(100) = null,	-- IPIN_CI (주민번호 인증인 경우 IPIN으로 치환)
	@sPIpinDI		varchar(100) = null	-- IPIN_DI (주민번호 인증인 경우 IPIN으로 치환)
AS
BEGIN

	INSERT INTO userParentDB (accountIDX, parentName, parentBirth, parentJumin1, parentJumin2, 
	                          parentEncode, parentNumber, regDate, Certify_Type, email, 
				  PIpinCI, PIpinDI)
	VALUES (@accountIDX, @parentName, @parentBirthday, @parentJumin1, @parentJumin2, 
	        @parentEnCode, @parentNumber, getdate(), @sCertifyType, @sPEmail, 
		@sPIpinCI, @sPIpinDI)

	IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
	BEGIN
		RETURN (-1)
	END
	RETURN (1)
END
GO


-- ----------------------------
-- procedure structure for game_spirit_set_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_spirit_set_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_spirit_set_data]
GO

CREATE PROCEDURE [dbo].[game_spirit_set_data]

	@ACCOUNT_IDX		INT,
	@SPIRIT_TYPE		INT,
	@SPIRIT_COUNT		INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	DECLARE @nReturn	INT
	SET @nReturn = 0		-- True

	BEGIN TRAN
	
		IF EXISTS (SELECT AccountIDX FROM dbo.userSpiritDB WITH (NOLOCK) WHERE AccountIDX = @ACCOUNT_IDX AND SpiritType = @SPIRIT_TYPE)        
		BEGIN          
			UPDATE dbo.userSpiritDB 
			   SET SpiritCount = @SPIRIT_COUNT
			 WHERE AccountIDX = @ACCOUNT_IDX
			   AND SpiritType = @SPIRIT_TYPE;
		END
		ELSE
		BEGIN          
			INSERT INTO dbo.userSpiritDB WITH (XLOCK, ROWLOCK) (AccountIDX, SpiritType, SpiritCount, RegDate)
			VALUES (@ACCOUNT_IDX, @SPIRIT_TYPE, @SPIRIT_COUNT, GETDATE());
		END	

	COMMIT TRAN

	SELECT @nReturn
	RETURN;
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_site
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_site]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_site]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_site]
(
	@accountIDX int
)
AS
	SELECT a.nickName, a.regDate, b.visit_count, b.rec_index, b.rec_inc, b.rec_dec, b.cnnDate, ISNULL(c.amtcash, 0) AS 'cash', ISNULL(d.userLevel,0) AS 'userLevel' 
	FROM userMemberDB a LEFT JOIN userInfoDB b ON a.accountIDX = b.accountIDX LEFT JOIN userCashDB c ON a.accountIDX = c.accountIDX LEFT JOIN userGameDB d ON a.accountIDX = d.accountIDX
	WHERE a.accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_guild_get_guild_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_guild_get_guild_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_guild_get_guild_count]
GO

CREATE PROCEDURE [dbo].[web_guild_get_guild_count]
(
	@guildIDX int
)
AS
	SELECT count(*) FROM userGuildDB WITH(NOLOCK) WHERE idx=@guildIDX
GO


-- ----------------------------
-- procedure structure for manage_event_teencash_old
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_teencash_old]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_teencash_old]
GO

CREATE PROCEDURE [dbo].[manage_event_teencash_old]
AS
	SELECT count(*) FROM define_serial_teencash WHERE oldIDX is not null
GO


-- ----------------------------
-- procedure structure for game_item_etc_get_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_etc_get_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_etc_get_self_index]
GO

CREATE PROCEDURE [dbo].[game_item_etc_get_self_index]
(
	@accountIDX int
)
AS
	SELECT TOP 1 idx FROM userItemEtcDB WHERE accountIDX = @accountIDX ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for usp_TB_EventCoupon_use
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_TB_EventCoupon_use]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[usp_TB_EventCoupon_use]
GO

CREATE PROCEDURE [dbo].[usp_TB_EventCoupon_use]
	@sSerialNum		varchar(20),	-- 쿠폰번호
	@sCouponType		tinyint 	-- 쿠폰타입
AS
BEGIN
	SET NOCOUNT ON

	-- 사용가능한 쿠폰인지 조회 	
	SELECT accountIDX, userIP
	  FROM TB_EventCoupon WITH (NOLOCK)		
	 WHERE sn = @sSerialNum
	   AND couponType = @sCouponType

	SET NOCOUNT OFF
END
GO


-- ----------------------------
-- procedure structure for game_guild_member_out
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_member_out]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_member_out]
GO

CREATE PROCEDURE [dbo].[game_guild_member_out]
(
	@idx int
,	@guildIDX int
)
AS
	SET XACT_ABORT ON

	BEGIN TRAN

	UPDATE userGuildInfoDB SET guildJoinType=-1, msg=2 WHERE idx=@idx
	UPDATE userGuildDB SET membercount = membercount-1 WHERE idx=@guildIDX

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for web_realmember_info_insert
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_info_insert]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_info_insert]
GO

CREATE PROCEDURE [dbo].[web_realmember_info_insert]
(
	@accountIDX int
,	@email varchar(50)
,	@mailling tinyint
,	@tel varchar(16)
,	@mobile varchar(16)
,	@zipcode varchar(8)
,	@address1 varchar(150)
,	@address2 varchar(50)
,	@joinType tinyint
)
AS

	UPDATE userMemberDB SET
		email = @email
,		mailling = @mailling
,		joinType = @joinType
	WHERE accountIDX=@accountIDX

	INSERT INTO userInfoBDB (accountIDX, tel, mobile, zipcode, address1, address2, regDate)
	VALUES (@accountIDX, @tel, @mobile, @zipcode, @address1, @address2, getdate())
GO


-- ----------------------------
-- procedure structure for game_spirit_set_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_spirit_set_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_spirit_set_add]
GO

CREATE PROCEDURE [dbo].[game_spirit_set_add]

	@ACCOUNT_IDX		INT,
	@SPIRIT_TYPE		INT,
	@SPIRIT_COUNT		INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	DECLARE @nReturn	INT
	SET @nReturn = 0		-- True
	
	BEGIN TRAN

		INSERT INTO dbo.userSpiritDB WITH (XLOCK, ROWLOCK) (AccountIDX, SpiritType, SpiritCount, RegDate)
		VALUES (@ACCOUNT_IDX, @SPIRIT_TYPE, @SPIRIT_COUNT, GETDATE());

		IF (@@ROWCOUNT = 0 OR @@ERROR <> 0)
		BEGIN
			ROLLBACK TRAN
			SELECT -1
			RETURN;
		END

	COMMIT TRAN

	SELECT @nReturn
	RETURN;
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_rentaly_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_rentaly_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_rentaly_count]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_rentaly_count]
(
	@accountIDX int
)
AS
	SELECT COUNT(*) FROM LosaGame_log.DBO.log_class_rental_history WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_userType
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_userType]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_userType]
GO

CREATE PROCEDURE [dbo].[web_get_userType]
(
	@accountIDX int
)
As
	SELECT userType FROM userMemberDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for manage_event_teencash_new
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_teencash_new]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_teencash_new]
GO

CREATE PROCEDURE [dbo].[manage_event_teencash_new]
AS
	SELECT count(*) FROM define_serial_teencash WHERE newIDX is not null
GO


-- ----------------------------
-- procedure structure for game_item_etc_get_data_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_etc_get_data_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_etc_get_data_list]
GO

CREATE PROCEDURE [dbo].[game_item_etc_get_data_list]
(
	@accountIDX int
)
As
	SELECT	idx, 
	 item1_type, item1_value1, item1_value2, item2_type, item2_value1, item2_value2, item3_type, item3_value1, item3_value2, 
	 item4_type, item4_value1, item4_value2, item5_type, item5_value1, item5_value2, item6_type, item6_value1, item6_value2, 
	 item7_type, item7_value1, item7_value2, item8_type, item8_value1, item8_value2, item9_type, item9_value1, item9_value2, 
	 item10_type, item10_value1, item10_value2, item11_type, item11_value1, item11_value2, item12_type, item12_value1, item12_value2, 
	 item13_type, item13_value1, item13_value2, item14_type, item14_value1, item14_value2, item15_type, item15_value1, item15_value2, 
	 item16_type, item16_value1, item16_value2, item17_type, item17_value1, item17_value2, item18_type, item18_value1, item18_value2,
	 item19_type, item19_value1, item19_value2, item20_type, item20_value1, item20_value2 
	FROM userItemEtcDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for USP_TB_EventCoupon_INS
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_TB_EventCoupon_INS]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_TB_EventCoupon_INS]
GO

CREATE PROCEDURE [dbo].[USP_TB_EventCoupon_INS]
	@createCnt	int,			-- 생성할개수 
	@nCouponType	tinyint			-- 쿠폰타입
as
set nocount on

declare @i int
,	@row int
,	@sn varchar(36)

set @i = 1
set @row = 0


while @i <= @createCnt
begin

    if object_id('tempdb..#tmp') is not null
    begin
		drop table #tmp      
    end

    create table #tmp (sn varchar(20) not null)
    create clustered index IX_t_tmp on #tmp(sn)

    --1.생성수 만큼 랜덤 할당
    while @i <= @createCnt
    begin
		set @sn = newid()

		--2.생성한 문자를 체크하여 임시 보관
		insert #tmp (sn)
			select left(replace(  replace(  replace(  replace(  replace(@sn,'-','')  ,'I','')  ,'1','')  ,'O','')  ,'0','') ,20)

		set @i = @i + 1
    end

    --3.등록 (중복 체크 고려)
    insert TB_EventCoupon (sn, couponType)
		select t.sn, @nCouponType
			from (select sn from #tmp where len(sn)=20 group by sn)t
				left join TB_EventCoupon a with(nolock) on a.sn = t.sn
			where a.sn is null
		select @row = @@rowcount

    drop table #tmp

    -- 생성한 수와 등록한 수가 일치하면, 종료 
    if @row = @createCnt
    begin
		break
    end
    -- 생성하려는 수가 작으면, 그 만큼 생성
    else
    begin
		set @createCnt = @createCnt - @row
		set @i = 1
    end
end
GO


-- ----------------------------
-- procedure structure for game_guild_member_get_masters
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_member_get_masters]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_member_get_masters]
GO

CREATE PROCEDURE [dbo].[game_guild_member_get_masters]
(
	@guildIDX int
)
AS
	SELECT accountIDX FROM userGuildInfoDB WHERE guildIDX=@guildIDX and guildPosition in ('길드장', '부길드장')
GO


-- ----------------------------
-- procedure structure for web_realmember_give_web_point
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_give_web_point]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_give_web_point]
GO

CREATE PROCEDURE [dbo].[web_realmember_give_web_point]
(
	@accountIDX int
,	@userIP varchar(15)
)
AS
	UPDATE userCashDB SET amtCash = amtCash + 10000, amtBonus = amtBonus + 10000 WHERE accountIDX=@accountIDX

	INSERT INTO LosaGame_log.DBO.log_cash (accountIDX, userIP, DBID, applyType, amount, note, regDate)
	VALUES (@accountIDX, @userIP, 'REALMEMBER', 'B0', 10000, '정회원 전환 보너스', getdate())
GO


-- ----------------------------
-- procedure structure for game_spirit_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_spirit_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_spirit_get_data]
GO

CREATE PROCEDURE [dbo].[game_spirit_get_data]

	@TABLE_IDX			INT,
	@ACCOUNT_IDX		INT,
	@TOP_NO				INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	SELECT TOP (@TOP_NO) idx, SpiritType, SpiritCount
	  FROM dbo.userSpiritDB WITH (NOLOCK)
	 WHERE AccountIDX = @ACCOUNT_IDX
	   AND idx > @TABLE_IDX
	 ORDER BY idx ASC;
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_rentalm_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_rentalm_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_rentalm_count]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_rentalm_count]
(
	@accountIDX int
)
AS
	SELECT COUNT(*) FROM LosaGame_log.DBO.log_class_rental_history WITH(NOLOCK) WHERE friendIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_userState
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_userState]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_userState]
GO

CREATE PROCEDURE [dbo].[web_get_userState]
(
	@accountIDX int
)
AS
	SELECT userState FROM userGameDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_coupon_use_coupon
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_coupon_use_coupon]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_coupon_use_coupon]
GO

CREATE PROCEDURE [dbo].[web_coupon_use_coupon]
(
	@accountIDX int
,	@serial varchar(12)
,	@userIP varchar(15)
,	@flag tinyint
)
AS

	BEGIN TRAN

	UPDATE define_serial SET 
		accountIDX = @accountIDX
,		userIP = @userIP
,		regDate = getdate()
	WHERE sn=@serial and couponType=@flag

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_item_etc_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_etc_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_etc_add]
GO

CREATE PROCEDURE [dbo].[game_item_etc_add]
(
	@accountIDX int
,	@item1_type int
,	@item1_value1 int
,	@item1_value2 int
,	@item2_type int
,	@item2_value1 int
,	@item2_value2 int
,	@item3_type int
,	@item3_value1 int
,	@item3_value2 int
,	@item4_type int
,	@item4_value1 int
,	@item4_value2 int
,	@item5_type int
,	@item5_value1 int
,	@item5_value2 int
,	@item6_type int
,	@item6_value1 int
,	@item6_value2 int
,	@item7_type int
,	@item7_value1 int
,	@item7_value2 int
,	@item8_type int
,	@item8_value1 int
,	@item8_value2 int
,	@item9_type int
,	@item9_value1 int
,	@item9_value2 int
,	@item10_type int
,	@item10_value1 int
,	@item10_value2 int
,	@item11_type int
,	@item11_value1 int
,	@item11_value2 int
,	@item12_type int
,	@item12_value1 int
,	@item12_value2 int
,	@item13_type int
,	@item13_value1 int
,	@item13_value2 int
,	@item14_type int
,	@item14_value1 int
,	@item14_value2 int
,	@item15_type int
,	@item15_value1 int
,	@item15_value2 int
,	@item16_type int
,	@item16_value1 int
,	@item16_value2 int
,	@item17_type int
,	@item17_value1 int
,	@item17_value2 int
,	@item18_type int
,	@item18_value1 int
,	@item18_value2 int
,	@item19_type int
,	@item19_value1 int
,	@item19_value2 int
,	@item20_type int
,	@item20_value1 int
,	@item20_value2 int
)
As
	Insert into userItemEtcDB 
	(accountIDX, 
	 item1_type, item1_value1, item1_value2, item2_type, item2_value1, item2_value2, item3_type, item3_value1, item3_value2, 
	 item4_type, item4_value1, item4_value2, item5_type, item5_value1, item5_value2, item6_type, item6_value1, item6_value2, 
	 item7_type, item7_value1, item7_value2, item8_type, item8_value1, item8_value2, item9_type, item9_value1, item9_value2, 
	 item10_type, item10_value1, item10_value2, item11_type, item11_value1, item11_value2, item12_type, item12_value1, item12_value2, 
	 item13_type, item13_value1, item13_value2, item14_type, item14_value1, item14_value2, item15_type, item15_value1, item15_value2, 
	 item16_type, item16_value1, item16_value2, item17_type, item17_value1, item17_value2, item18_type, item18_value1, item18_value2,
	 item19_type, item19_value1, item19_value2, item20_type, item20_value1, item20_value2)
	values
	(@accountIDX, 
	 @item1_type, @item1_value1, @item1_value2, @item2_type, @item2_value1, @item2_value2, @item3_type, @item3_value1, @item3_value2, 
	 @item4_type, @item4_value1, @item4_value2, @item5_type, @item5_value1, @item5_value2, @item6_type, @item6_value1, @item6_value2, 
	 @item7_type, @item7_value1, @item7_value2, @item8_type, @item8_value1, @item8_value2, @item9_type, @item9_value1, @item9_value2, 
	 @item10_type, @item10_value1, @item10_value2, @item11_type, @item11_value1, @item11_value2, @item12_type, @item12_value1, @item12_value2, 
	 @item13_type, @item13_value1, @item13_value2, @item14_type, @item14_value1, @item14_value2, @item15_type, @item15_value1, @item15_value2, 
	 @item16_type, @item16_value1, @item16_value2, @item17_type, @item17_value1, @item17_value2, @item18_type, @item18_value1, @item18_value2,
	 @item19_type, @item19_value1, @item19_value2, @item20_type, @item20_value1, @item20_value2)
GO


-- ----------------------------
-- procedure structure for usp_TB_EventCoupon_flag_srch
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_TB_EventCoupon_flag_srch]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[usp_TB_EventCoupon_flag_srch]
GO

CREATE PROCEDURE [dbo].[usp_TB_EventCoupon_flag_srch]
	@sSerialNum		varchar(20)	-- 쿠폰번호
AS
BEGIN
	SET NOCOUNT ON

	SELECT couponType
	  FROM TB_EventCoupon WITH (NOLOCK)		
	 WHERE sn = @sSerialNum

	SET NOCOUNT OFF
END
GO


-- ----------------------------
-- procedure structure for game_guild_member_get_list3
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_member_get_list3]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_member_get_list3]
GO

CREATE PROCEDURE [dbo].[game_guild_member_get_list3]
(
	@guildIDX int
)
AS
	SELECT accountIDX FROM userGuildInfoDB  WITH(NOLOCK)
	WHERE guildIDX = @guildIDX and guildJoinType=1 ORDER BY idx ASC
GO


-- ----------------------------
-- procedure structure for web_realmember_get_username_birth
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_get_username_birth]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_get_username_birth]
GO

CREATE PROCEDURE [dbo].[web_realmember_get_username_birth]
(
	@accountIDX int
)
AS
	SELECT a.userID, b.userName, b.userBirthday, b.userNumber FROM userMemberDB a JOIN userNameDB b ON a.accountIDX=b.accountIDX WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_spentGold_set_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_spentGold_set_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_spentGold_set_add]
GO

CREATE PROCEDURE [dbo].[game_spentGold_set_add]  
  
 @ACCOUNT_IDX  INT,  
 @SPENT_GOLD   INT  
  
AS  
  
 SET NOCOUNT ON  
 SET LOCK_TIMEOUT 10000  
  
 DECLARE @GET_DATE  DATETIME  
 SET @GET_DATE=GETDATE();  
  
 BEGIN TRAN  
  
  -- 골드 소비 내역 테이블에 Insert  
  INSERT dbo.userSpentGoldLogDB WITH (XLOCK, ROWLOCK) (RegDate, AccountIDX, UserSpentGold)   
  VALUES (@GET_DATE, @ACCOUNT_IDX, @SPENT_GOLD)  
  
  IF (@@ROWCOUNT=0) or (@@ERROR<>0)  
  BEGIN  
   ROLLBACK TRAN  
   RETURN;  
  END   
  
  -- 누적 테이블에 Insert or Update    
  ;MERGE dbo.userSpentGoldDB as TARGET  
  USING (SELECT @ACCOUNT_IDX, @SPENT_GOLD) AS SOURCE (AccountIDX, UserSpentGold)  
  ON (TARGET.AccountIDX=SOURCE.AccountIDX)  
  WHEN MATCHED THEN  
   UPDATE SET TARGET.UserSpentGold=TARGET.UserSpentGold+SOURCE.UserSpentGold  
  WHEN NOT MATCHED THEN  
   INSERT (AccountIDX, UserSpentGold) VALUES (SOURCE.AccountIDX, SOURCE.UserSpentGold);  
  
  IF (@@ROWCOUNT=0) or (@@ERROR<>0)  
  BEGIN  
   ROLLBACK TRAN  
   RETURN;  
  END   
  
 COMMIT TRAN    
  
 RETURN;
GO


-- ----------------------------
-- procedure structure for web_minihome_friend_is
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_friend_is]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_friend_is]
GO

CREATE PROCEDURE [dbo].[web_minihome_friend_is]
(
	@userAccIDX int
,	@friendAccIDX int
)
As
	SELECT count(*) FROM userFriendDB WHERE userAccIDX = @userAccIDX and friendAccIDX = @friendAccIDX
GO


-- ----------------------------
-- procedure structure for web_get_userName
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_userName]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_userName]
GO

CREATE PROCEDURE [dbo].[web_get_userName]
(
	@accountIDX int
)
As
	SELECT userName FROM userNameDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_coupon_get_user_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_coupon_get_user_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_coupon_get_user_count]
GO

CREATE PROCEDURE [dbo].[web_coupon_get_user_count]
(
	@accountIDX int
,	@flag int
)
AS
	SELECT count(*) FROM define_serial WHERE accountIDX=@accountIDX and couponType=@flag
GO


-- ----------------------------
-- procedure structure for game_item_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_item_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_item_add]
GO

CREATE PROCEDURE [dbo].[game_item_add]
(
	@accountIDX int
,	@item1_type int
,	@item1_code int
,	@item2_type int
,	@item2_code int
,	@item3_type int
,	@item3_code int
,	@item4_type int
,	@item4_code int
,	@item5_type int
,	@item5_code int
,	@item6_type int
,	@item6_code int
,	@item7_type int
,	@item7_code int
,	@item8_type int
,	@item8_code int
,	@item9_type int
,	@item9_code int
,	@item10_type int
,	@item10_code int
,	@item11_type int
,	@item11_code int
,	@item12_type int
,	@item12_code int
,	@item13_type int
,	@item13_code int
,	@item14_type int
,	@item14_code int
,	@item15_type int
,	@item15_code int
,	@item16_type int
,	@item16_code int
,	@item17_type int
,	@item17_code int
,	@item18_type int
,	@item18_code int
,	@item19_type int
,	@item19_code int
,	@item20_type int
,	@item20_code int
)
As
	Insert into userItemDB 
	(accountIDX, item1_type, item1_code, item2_type, item2_code, item3_type, item3_code, 
	 item4_type, item4_code, item5_type, item5_code, item6_type, item6_code, 
	 item7_type, item7_code, item8_type, item8_code, item9_type, item9_code, 
	 item10_type, item10_code, item11_type, item11_code, item12_type, item12_code, 
	 item13_type, item13_code, item14_type, item14_code, item15_type, item15_code, 
	 item16_type, item16_code, item17_type, item17_code, item18_type, item18_code,
	 item19_type, item19_code, item20_type, item20_code)
	values
	(@accountIDX, @item1_type, @item1_code, @item2_type, @item2_code, @item3_type, @item3_code, @item4_type, @item4_code, 
	 @item5_type, @item5_code, @item6_type, @item6_code, @item7_type, @item7_code, @item8_type, @item8_code,
	 @item9_type, @item9_code, @item10_type, @item10_code, @item11_type, @item11_code, @item12_type, @item12_code,
	 @item13_type, @item13_code, @item14_type, @item14_code, @item15_type, @item15_code, @item16_type, @item16_code,
	 @item17_type, @item17_code, @item18_type, @item18_code, @item19_type, @item19_code, @item20_type, @item20_code)
GO


-- ----------------------------
-- procedure structure for game_guild_member_get_list2
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_member_get_list2]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_member_get_list2]
GO

CREATE PROCEDURE [dbo].[game_guild_member_get_list2]
(
	@guildIDX int
)
AS
	SELECT a.idx, a.accountIDX, b.userLevel, c.nickName, a.guildPosition, b.renspoint 
	FROM userGuildInfoDB a WITH(NOLOCK) INNER JOIN userGameDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX INNER JOIN userMemberDB c WITH(NOLOCK) ON a.accountIDX = c.accountIDX 
	WHERE guildIDX = @guildIDX and guildJoinType=1 ORDER BY a.idx ASC
GO


-- ----------------------------
-- procedure structure for web_realmember_get_userinfo
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_get_userinfo]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_get_userinfo]
GO

CREATE PROCEDURE [dbo].[web_realmember_get_userinfo]
(
	@accountIDX int
)
AS
	SELECT userID, nickName, email, mailling FROM userMemberDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_spentGold_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_spentGold_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_spentGold_get_data]
GO

CREATE PROCEDURE [dbo].[game_spentGold_get_data]  
  
 @ACCOUNT_IDX  INT  
  
AS  
  
 SET NOCOUNT ON  
 SET LOCK_TIMEOUT 10000  
  
 DECLARE @nReturn   INT  
 DECLARE @SPENT_GOLD_SUM  INT  
 DECLARE @SPENT_GOLD   INT  
 DECLARE @PLAY_TIME   INT  
   
 DECLARE @START_DATE  DATETIME  
 DECLARE @OVER_DATE  DATETIME  
   
 SET @OVER_DATE = CAST(CONVERT(CHAR(10), GETDATE(), 121) as DATETIME);  
 SET @START_DATE = DATEADD(dd, -90, @OVER_DATE)  
  
 SET @nReturn=0;  
 SET @SPENT_GOLD_SUM=0;  
 SET @SPENT_GOLD=0;  
 SET @PLAY_TIME=0;  
  
 IF EXISTS (SELECT * FROM dbo.userMemberDB WHERE AccountIDX=@ACCOUNT_IDX)  
 BEGIN  
  
  -- 누적 소비 골드  
  SET @SPENT_GOLD_SUM = (SELECT UserSpentGold FROM dbo.userSpentGoldDB WITH (READCOMMITTED)  
  WHERE AccountIDX=@ACCOUNT_IDX);  
   
  -- 해당 기간의 소비 골드 합  
  SET @SPENT_GOLD=(SELECT SpentGold FROM (  
    SELECT AccountIDX, SUM(UserSpentGold) as SpentGold FROM dbo.userSpentGoldLogDB WITH (READCOMMITTED)  
    WHERE RegDate>=@START_DATE and RegDate<@OVER_DATE+1 and AccountIDX=@ACCOUNT_IDX  
    GROUP BY AccountIDX  
   ) as userSpentGoldLogDB  
  )  
  
  -- 사용자 플레이 타임  
  SET @PLAY_TIME = (SELECT PlayTime FROM dbo.userGameDB WITH (READUNCOMMITTED) WHERE AccountIDX=@ACCOUNT_IDX);  
  
  
  SELECT @nReturn as nReturn, ISNULL(@SPENT_GOLD_SUM,0) as SPENT_GOLD_SUM, ISNULL(@SPENT_GOLD,0) as SPENT_GOLD, @PLAY_TIME as PlayTime  
 END  
 ELSE  
 BEGIN  
  SELECT -1, 0 as SPENT_GOLD_SUM, 0 as SPENT_GOLD, 0 as PlayTime  
 END  
   
 RETURN;
GO


-- ----------------------------
-- procedure structure for web_minihome_friend_del
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_friend_del]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_friend_del]
GO

CREATE PROCEDURE [dbo].[web_minihome_friend_del]
(
	@userAccIDX int
,	@friendAccIDX int
)
AS
	DELETE userFriendDB WHERE userAccIDX = @userAccIDX and friendAccIDX = @friendAccIDX
GO


-- ----------------------------
-- procedure structure for web_get_userLevel
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_userLevel]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_userLevel]
GO

CREATE PROCEDURE [dbo].[web_get_userLevel]
(
	@accountIDX int
)
As
	SELECT userLevel FROM userGameDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_coupon_get_sn_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_coupon_get_sn_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_coupon_get_sn_info]
GO

CREATE PROCEDURE [dbo].[web_coupon_get_sn_info]
(
	@sn varchar(12)
,	@flag tinyint
)
AS
	SELECT accountIDX, userIP FROM define_serial WHERE sn=@sn and couponType=@flag
GO


-- ----------------------------
-- procedure structure for game_hq_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_hq_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_hq_save]
GO

CREATE PROCEDURE [dbo].[game_hq_save]
(
	@accountIDX int
,	@class1_type int
,	@class1_posx int
,	@class1_posy int
,	@class2_type int
,	@class2_posx int
,	@class2_posy int
,	@class3_type int
,	@class3_posx int
,	@class3_posy int
,	@class4_type int
,	@class4_posx int
,	@class4_posy int
,	@class5_type int
,	@class5_posx int
,	@class5_posy int
,	@class6_type int
,	@class6_posx int
,	@class6_posy int
,	@class7_type int
,	@class7_posx int
,	@class7_posy int
,	@class8_type int
,	@class8_posx int
,	@class8_posy int
,	@class9_type int
,	@class9_posx int
,	@class9_posy int
,	@class10_type int
,	@class10_posx int
,	@class10_posy int
,	@lockType smallint
)
AS
	UPDATE userHqDB SET
		class1_type = @class1_type
,		class1_posx = @class1_posx
,		class1_posy = @class1_posy
,		class2_type = @class2_type
,		class2_posx = @class2_posx
,		class2_posy = @class2_posy
,		class3_type = @class3_type
,		class3_posx = @class3_posx
,		class3_posy = @class3_posy
,		class4_type = @class4_type
,		class4_posx = @class4_posx
,		class4_posy = @class4_posy
,		class5_type = @class5_type
,		class5_posx = @class5_posx
,		class5_posy = @class5_posy
,		class6_type = @class6_type
,		class6_posx = @class6_posx
,		class6_posy = @class6_posy
,		class7_type = @class7_type
,		class7_posx = @class7_posx
,		class7_posy = @class7_posy
,		class8_type = @class8_type
,		class8_posx = @class8_posx
,		class8_posy = @class8_posy
,		class9_type = @class9_type
,		class9_posx = @class9_posx
,		class9_posy = @class9_posy
,		class10_type = @class10_type
,		class10_posx = @class10_posx
,		class10_posy = @class10_posy
,		lockType = @lockType
	WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_guild_member_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_member_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_member_get_list]
GO

CREATE PROCEDURE [dbo].[game_guild_member_get_list]
(
	@guildIDX int
)
AS
	SELECT a.idx, a.accountIDX, b.userLevel, c.nickName, a.guildPosition, b.renspoint 
	FROM userGuildInfoDB a WITH(NOLOCK) INNER JOIN userGameDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX INNER JOIN userMemberDB c WITH(NOLOCK) ON a.accountIDX = c.accountIDX 
	WHERE guildIDX = @guildIDX and guildJoinType=1 ORDER BY a.idx ASC
GO


-- ----------------------------
-- procedure structure for web_realmember_get_userIDP
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_get_userIDP]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_get_userIDP]
GO

CREATE PROCEDURE [dbo].[web_realmember_get_userIDP]
(
	@accountIDX int
)
As
	SELECT userID, userPWD, joinType FROM userMemberDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_server_get_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_server_get_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_server_get_self_index]
GO

CREATE PROCEDURE [dbo].[game_server_get_self_index]
(
	@serverID bigint
)
As

	SELECT idx FROM define_game_server WHERE serverID=@serverID
GO


-- ----------------------------
-- procedure structure for web_minihome_friend_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_friend_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_friend_count]
GO

CREATE PROCEDURE [dbo].[web_minihome_friend_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM userFriendDB WHERE userAccIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_userID
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_userID]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_userID]
GO

CREATE PROCEDURE [dbo].[web_get_userID]
(
	@accountIDX int
)
As
	SELECT userID FROM userMemberDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_coupon_get_sn_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_coupon_get_sn_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_coupon_get_sn_count]
GO

CREATE PROCEDURE [dbo].[web_coupon_get_sn_count]
(
	@sn varchar(12)
,	@flag tinyint
)
AS
	SELECT count(*) FROM define_serial WHERE sn=@sn and couponType=@flag
GO


-- ----------------------------
-- procedure structure for game_hq_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_hq_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_hq_get_data]
GO

CREATE PROCEDURE [dbo].[game_hq_get_data]
(
	@accountIDX int
)
AS
	SELECT	class1_type, class1_posx, class1_posy, class2_type, class2_posx, class2_posy, 
			class3_type, class3_posx, class3_posy, class4_type, class4_posx, class4_posy, 
			class5_type, class5_posx, class5_posy, class6_type, class6_posx, class6_posy,
			class7_type, class7_posx, class7_posy, class8_type, class8_posx, class8_posy, 
			class9_type, class9_posx, class9_posy, class10_type, class10_posx, class10_posy, 
			lockType
	FROM userHqDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for z_nouse_web_minihome_userinfo_class_group_rank_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_web_minihome_userinfo_class_group_rank_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_web_minihome_userinfo_class_group_rank_data]
GO

CREATE PROCEDURE [dbo].[z_nouse_web_minihome_userinfo_class_group_rank_data]
(
	@accountIDX int
)
AS
	If (Exists(SELECT * FROM userRankingDB_classA WHERE accountIDX=@accountIDX))
	BEGIN
		SELECT	class1_now, class2_now, class3_now, class4_now, class5_now, class6_now, class7_now, class8_now, class9_now, class10_now,
				class11_now, class12_now, class13_now, class14_now, class15_now , class16_now , class17_now , class18_now, class19_now, class20_now,
				isNull(class21_now, 0) as 'class21_now', isNull(class22_now, 0) as 'class22_now', isNull(class23_now, 0) as 'class23_now',
				isNull(class24_now, 0) as 'class24_now', isNull(class25_now, 0) as 'class25_now', isNull(class26_now, 0) as 'class26_now',
				isNull(class27_now, 0) as 'class27_now', isNull(class28_now, 0) as 'class28_now', isNull(class29_now, 0) as 'class29_now',
				isNull(class30_now, 0) as 'class30_now', isNull(class31_now, 0) as 'class31_now', isNull(class32_now, 0) as 'class32_now',
				isNull(class33_now, 0) as 'class33_now', isNull(class34_now, 0) as 'class34_now', isNull(class35_now, 0) as 'class35_now',
				isNull(class36_now, 0) as 'class36_now', isNull(class37_now, 0) as 'class37_now', isNull(class38_now, 0) as 'class38_now',
				isNull(class39_now, 0) as 'class39_now', isNull(class40_now, 0) as 'class40_now' 
		FROM userRankingDB_classA a LEFT JOIN userRankingDB_classB b ON a.accountIDX=b.accountIDX WHERE a.accountIDX=@accountIDX
	END
	ELSE
	BEGIN
		SELECT	isNull(class1_now, 0) as 'class1_now', isNull(class2_now, 0) as 'class2_now', isNull(class3_now, 0) as 'class3_now', isNull(class4_now, 0) as 'class4_now', isNull(class5_now, 0) as 'class5_now',
				isNull(class6_now, 0) as 'class6_now', isNull(class7_now, 0) as 'class7_now', isNull(class8_now, 0) as 'class8_now', isNull(class9_now, 0) as 'class9_now', isNull(class10_now, 0) as 'class10_now',
				isNull(class11_now, 0) as 'class11_now', isNull(class12_now, 0) as 'class12_now', isNull(class13_now, 0) as 'class13_now', isNull(class14_now, 0) as 'class14_now', isNull(class15_now, 0) as 'class15_now',
				isNull(class16_now, 0) as 'class16_now', isNull(class17_now, 0) as 'class17_now', isNull(class18_now, 0) as 'class18_now', isNull(class19_now, 0) as 'class19_now', isNull(class20_now, 0) as 'class20_now',
				isNull(class21_now, 0) as 'class21_now', isNull(class22_now, 0) as 'class22_now', isNull(class23_now, 0) as 'class23_now', isNull(class24_now, 0) as 'class24_now', isNull(class25_now, 0) as 'class25_now',
				isNull(class26_now, 0) as 'class26_now', isNull(class27_now, 0) as 'class27_now', isNull(class28_now, 0) as 'class28_now', isNull(class29_now, 0) as 'class29_now', isNull(class30_now, 0) as 'class30_now',
				isNull(class31_now, 0) as 'class31_now', isNull(class32_now, 0) as 'class32_now', isNull(class33_now, 0) as 'class33_now', isNull(class34_now, 0) as 'class34_now', isNull(class35_now, 0) as 'class35_now',
				isNull(class36_now, 0) as 'class36_now', isNull(class37_now, 0) as 'class37_now', isNull(class38_now, 0) as 'class38_now', isNull(class39_now, 0) as 'class39_now', isNull(class40_now, 0) as 'class40_now' 
		FROM userRankingDB_classA a RIGHT JOIN userRankingDB_classB b ON a.accountIDX=b.accountIDX WHERE b.accountIDX=@accountIDX
	END
GO


-- ----------------------------
-- procedure structure for game_guild_mark_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_mark_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_mark_save]
GO

CREATE PROCEDURE [dbo].[game_guild_mark_save]
(
	@guildIDX int
,	@mark int
)
AS
	UPDATE userGuildDB SET guildmark=@mark WHERE idx=@guildIDX
GO


-- ----------------------------
-- procedure structure for web_realmember_get_userid_nickname
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_get_userid_nickname]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_get_userid_nickname]
GO

CREATE PROCEDURE [dbo].[web_realmember_get_userid_nickname]
(
	@accountIDX int
)
AS
	SELECT userID, nickname FROM userMemberDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_server_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_server_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_server_get_list]
GO

CREATE PROCEDURE [dbo].[game_server_get_list]

As

	SELECT idx, serverIP, serverPort FROM define_game_server WITH(NOLOCK) ORDER BY regDate ASC
GO


-- ----------------------------
-- procedure structure for web_minihome_friend_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_friend_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_friend_add]
GO

CREATE PROCEDURE [dbo].[web_minihome_friend_add]
(
	@userAccIDX int
,	@friendAccIDX int
)
As
	INSERT INTO userFriendDB (userAccIDX, friendAccIDX, regDate) VALUES (@userAccIDX, @friendAccIDX, getdate())
GO


-- ----------------------------
-- procedure structure for web_get_userEmail
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_userEmail]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_userEmail]
GO

CREATE PROCEDURE [dbo].[web_get_userEmail]
(
	@accountIDX int
)
As
	SELECT EMail FROM userMemberDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_coupon_get_coupontype
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_coupon_get_coupontype]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_coupon_get_coupontype]
GO

CREATE PROCEDURE [dbo].[web_coupon_get_coupontype]
(
	@sn char(12)
)
AS
	SELECT couponType FROM define_serial WHERE sn=@sn
GO


-- ----------------------------
-- procedure structure for game_hq_get_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_hq_get_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_hq_get_count]
GO

CREATE PROCEDURE [dbo].[game_hq_get_count]
(
	@accountIDX int
)
AS
	SELECT COUNT(*) FROM userHqDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_ranking_myinfo_class_ranking_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ranking_myinfo_class_ranking_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ranking_myinfo_class_ranking_data]
GO

CREATE PROCEDURE [dbo].[web_ranking_myinfo_class_ranking_data]
(
	@accountIDX int
)
AS
	SELECT	class1_now, class2_now, class3_now, class4_now, class5_now, class6_now, class7_now, class8_now, class9_now, class10_now,
			class11_now, class12_now, class13_now, class14_now, class15_now , class16_now , class17_now , class18_now, class19_now,
			class20_now, isNull(class21_now, 0) as 'class21_now', isNull(class22_now, 0) as 'class22_now', isNull(class23_now, 0) as 'class23_now',
			isNull(class24_now, 0) as 'class24_now', isNull(class25_now, 0) as 'class25_now', isNull(class26_now, 0) as 'class26_now',
			isNull(class27_now, 0) as 'class27_now', isNull(class28_now, 0) as 'class28_now', isNull(class29_now, 0) as 'class29_now',
			isNull(class30_now, 0) as 'class30_now', isNull(class31_now, 0) as 'class31_now', isNull(class32_now, 0) as 'class32_now',
			isNull(class33_now, 0) as 'class33_now', isNull(class34_now, 0) as 'class34_now', isNull(class35_now, 0) as 'class35_now',
			isNull(class36_now, 0) as 'class36_now', isNull(class37_now, 0) as 'class37_now', isNull(class38_now, 0) as 'class38_now',
			isNull(class39_now, 0) as 'class39_now', isNull(class40_now, 0) as 'class40_now' 
	FROM userRankingDB_classA a LEFT JOIN userRankingDB_classB b ON a.accountIDX=b.accountIDX WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_guild_mark_log_get_self_idx
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_mark_log_get_self_idx]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_mark_log_get_self_idx]
GO

CREATE PROCEDURE [dbo].[game_guild_mark_log_get_self_idx]
(
	@accountIDX int
)
AS
	SELECT MAX(idx) FROM LosaGame_log.DBO.log_guild_mark WHERE accountIDX=@accountIDX and flag=0
GO


-- ----------------------------
-- procedure structure for web_realmember_get_userID_from_jumin
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_get_userID_from_jumin]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_get_userID_from_jumin]
GO

CREATE PROCEDURE [dbo].[web_realmember_get_userID_from_jumin]
(
	@userJumin varchar(64)
)
AS
	SELECT userID FROM userMemberDB WHERE accountIDX=(SELECT TOP 1 accountIDX FROM userNameDB WHERE userEnCode = @userJumin)
GO


-- ----------------------------
-- procedure structure for game_server_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_server_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_server_delete]
GO

CREATE PROCEDURE [dbo].[game_server_delete]
(
	@serverID bigint
)
As
	DELETE FROM define_game_server WHERE serverID = @serverID
GO


-- ----------------------------
-- procedure structure for web_minihome_enkey_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_enkey_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_enkey_get_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_enkey_get_data]
(
	@accountIDX int
)
As
	SELECT encodeKey FROM userLoginDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_regionType
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_regionType]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_regionType]
GO

CREATE PROCEDURE [dbo].[web_get_regionType]
(
	@accountIDX int
)
AS
	SELECT regionType FROM userGameDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for manage_coupon_user_use_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_coupon_user_use_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_coupon_user_use_count]
GO

CREATE PROCEDURE [dbo].[manage_coupon_user_use_count]
(
	@couponType tinyint
)
AS
	SELECT count(*) FROM define_serial WHERE couponType=@couponType and accountIDX is not NULL
GO


-- ----------------------------
-- procedure structure for game_hq_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_hq_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_hq_add]
GO

CREATE PROCEDURE [dbo].[game_hq_add]
(
	@accountIDX int
)
AS
	INSERT INTO userHqDB (accountIDX, 
			class1_type, class1_posx, class1_posy, class2_type, class2_posx, class2_posy, 
			class3_type, class3_posx, class3_posy, class4_type, class4_posx, class4_posy, 
			class5_type, class5_posx, class5_posy, class6_type, class6_posx, class6_posy,
			class7_type, class7_posx, class7_posy, class8_type, class8_posx, class8_posy, 
			class9_type, class9_posx, class9_posy, class10_type, class10_posx, class10_posy, 
			lockType, regDate
	)
	VALUES (@accountIDX,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, getdate()
	)
GO


-- ----------------------------
-- procedure structure for game_guild_mark_log_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_mark_log_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_mark_log_delete]
GO

CREATE PROCEDURE [dbo].[game_guild_mark_log_delete]
(
	@idx int
)
AS
	UPDATE LosaGame_log.DBO.log_guild_mark SET flag=2 WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_realmember_get_type
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_get_type]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_get_type]
GO

CREATE PROCEDURE [dbo].[web_realmember_get_type]
(
	@accountIDX int
)
AS
	SELECT joinType, cpType FROM userMemberDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for USP_LTS_WEEKTIME_CHILD_LIST
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_WEEKTIME_CHILD_LIST]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_WEEKTIME_CHILD_LIST]
GO

CREATE PROCEDURE [dbo].[USP_LTS_WEEKTIME_CHILD_LIST]
	@strCUserID			varchar(25),	-- 자녀_계정 고유 일련번호
	@intCGmtCodeNo		int	-- 자녀_GmtCodeNo (전체설정 : 201100)
AS
/*
	Grant Execute on dbo.USP_LTS_WEEKTIME_CHILD_LIST to Mirusr_1
*/
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	IF EXISTS ( SELECT Wday, Wtime
		      FROM dbo.TB_LTS_WEEKTIME WITH (NOLOCK)
		     WHERE UserId = @strCUserID
		       AND GmtCodeNo = @intCGmtCodeNo
	)
		BEGIN
			SELECT Wday, Wtime
			  FROM dbo.TB_LTS_WEEKTIME WITH (NOLOCK)
			 WHERE UserId = @strCUserID
			   AND GmtCodeNo = @intCGmtCodeNo	
		END 
	ELSE
		BEGIN
			SELECT Wday, Wtime
			  FROM dbo.TB_LTS_WEEKTIME WITH (NOLOCK)
			 WHERE UserId = @strCUserID
			   AND GmtCodeNo = 201100
		END

	SET NOCOUNT OFF;
END
GO


-- ----------------------------
-- procedure structure for web_minihome_connection_game
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_connection_game]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_connection_game]
GO

CREATE PROCEDURE [dbo].[web_minihome_connection_game]
(
	@accountIDX int
)
As
	SELECT gameServerID FROM userLoginDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_regdate
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_regdate]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_regdate]
GO

CREATE PROCEDURE [dbo].[web_get_regdate]
(
	@accountIDX int
)
AS
	SELECT regDate FROM userMemberDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for manage_coupon_user_search
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_coupon_user_search]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_coupon_user_search]
GO

CREATE PROCEDURE [dbo].[manage_coupon_user_search]
(
	@accountIDX int
)
AS
	SELECT sn, userIP, couponType, regDate FROM define_serial WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_hero_price_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_hero_price_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_hero_price_get_data]
GO

CREATE PROCEDURE [dbo].[game_hero_price_get_data]

AS

SET NOCOUNT ON;
SET LOCK_TIMEOUT 10000;

SELECT HeroCode, HeroPrice
  FROM dbo.define_hero_price WITH (NOLOCK)
 ORDER BY HeroCode
GO


-- ----------------------------
-- procedure structure for game_guild_mark_log_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_mark_log_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_mark_log_add]
GO

CREATE PROCEDURE [dbo].[game_guild_mark_log_add]
(
	@guildIDX int
,	@accountIDX int
,	@havepeso bigint
,	@markprice int
,	@nowmark int
,	@changemark int
)
AS

	DECLARE @cnt tinyint
	SET @cnt = (SELECT count(*) FROM LosaGame_log.DBO.log_guild_mark WITH(NOLOCK) WHERE guildIDX=@guildIDX and flag=0)

	IF (@cnt = 0)
	BEGIN
		INSERT INTO LosaGame_log.DBO.log_guild_mark (guildIDX, accountIDX, havepeso, markprice, nowmark, changemark, flag, regDate)
		VALUES (@guildIDX, @accountIDX, @havepeso, @markprice, @nowmark, @changemark, 0, getdate())
	END
GO


-- ----------------------------
-- procedure structure for web_realmember_get_returnValue
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_get_returnValue]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_get_returnValue]
GO

CREATE PROCEDURE [dbo].[web_realmember_get_returnValue]
(
	@accountIDX int
)
AS
	SELECT returnValue, realType FROM userNameDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for USP_LTS_MEMBER_SHUTDOWNTIME
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_MEMBER_SHUTDOWNTIME]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_MEMBER_SHUTDOWNTIME]
GO

CREATE PROCEDURE [dbo].[USP_LTS_MEMBER_SHUTDOWNTIME]      
	@userID				varchar(20)				-- userMemberDB.userID  
	, @GmtCodeNo		int = 201125			-- Game Service Code (201125 : 로스트사가)
	, @dtLoginTime		datetime				-- CONNECT TIME  
as       
begin       
    SET NOCOUNT ON       
    --SET DATEFIRST 1  

    DECLARE @WDAY INT       
    DECLARE @WTIME INT       
    DECLARE @COMP_WDAY INT       
    DECLARE @COMP_WTIME INT       
    DECLARE @CONN_ALLOW TINYINT  -- 0:DON'T ALLOW 1: ALLOW      

	-- ASP와 DB와의 WEEKDAY 계산이 틀려 입력 파라미터 값에 -1Day를 해 준다.(리턴시에는 +1Day을 해 준다.)
	Set @dtLoginTime = DATEADD(Day, -1, @dtLoginTime)


    SET @WDAY = DATEPART(WEEKDAY, @dtLoginTime)      
    SET @WTIME = DATEPART(HOUR, @dtLoginTime)      
    SET @CONN_ALLOW = 0      
  
    if (@WTIME = 0)  
		begin  
			-- 0시인 경우 전일 24시로 처리
			set @COMP_WDAY = datepart(dw, dateadd(day, -1, @dtLoginTime))
			set @COMP_WTIME = 24  
			set @dtLoginTime = dateadd(day, -1, @dtLoginTime)          
		end  
    else 
		begin
			set @COMP_WDAY = @WDAY
			set @COMP_WTIME = @WTIME  
		end  
  
	-- check about all service  
	-- 선택적 셧다운 대상자 확인
	IF Exists (Select Top 1 CHILD_ID From TB_LTS_WEEKTIME_PARENT_CHILD_INFO with (noLock)
				Where CHILD_ID = @userID And (Agree_Type = 'Y' OR Agree_Type = 'S')
	)
		Begin
			SET @CONN_ALLOW = 1  

			if (exists (      
				SELECT       
				wday      
				, wtime       
				FROM TB_LTS_WEEKTIME       
				WHERE UserId = @Userid      
				and gmtcodeno =  201100  
				and wday = @COMP_WDAY  
				and wtime = @COMP_WTIME )      
			)      
			set @GmtCodeNo = 201100  
		  
			if (exists (      
				SELECT       
				wday      
				, wtime       
				FROM TB_LTS_WEEKTIME       
				WHERE UserId = @Userid      
				and GmtCodeNo = @GmtCodeNo   
				and wday = @COMP_WDAY  
				and wtime = @COMP_WTIME )      
			)      
				begin      

					DECLARE @ROWCNT TINYINT     
			  
					select @ROWCNT = count(*)      
					FROM TB_LTS_WEEKTIME       
					WHERE UserId = @Userid      
					and GmtCodeNo = @GmtCodeNo     
			  
					IF (@ROWCNT < 168)   -- allow a certain time 
						BEGIN 
							select top 1 CONN_ALLOW = @CONN_ALLOW
							, shutdowntime = dateadd(day, 1, dateadd(
												 hour
												,t1.wtime 
												,dateadd(day, t1.kick_day-@COMP_WDAY, convert(char(10), @dtlogintime,120))
											 ))            
							from (      
								select *      
								, sflag=case when wday = @COMP_WDAY and wtime = @COMP_WTIME  then 1 else 0 end      
								, kick_day = case       
											  when wday = @COMP_WDAY and wtime >= @COMP_WTIME then wday		-- 로그인 보다 같은 날짜이나 뒤시간이면 해당일
											  when wday > @COMP_WDAY then wday							-- 로그인 보다 날짜가 크면 해당일
											  else cast(wday as int)+7								-- 로그인 보다 요일이 앞서거나 같은 요일이나 시간이 적으면 뒤로 보냄
											  end 
								, com_nwday = case       
								when wday = @COMP_WDAY and wtime >= @COMP_WTIME then wday       
								when wday > @COMP_WDAY then wday       
								else wday+7 
								end 
								* 100+wtime      
								from TB_WEEKTIME      
							) t1       
							where com_nwday > (@WDAY*100+@WTIME)       
							and  not exists (      
								select *       
								from TB_LTS_WEEKTIME t2      
								WHERE t2.UserId = @UserId      
								and t2.GmtCodeNo = @GmtCodeNo      
								and t1.wday = t2.wday      
								and t1.wtime = t2.wtime      
							)      
							order by com_nwday      
						END    
					ELSE
						Begin
							-- 셧다운 대상자이고 모든 시간이 체크된 경우
							Select CONN_ALLOW = @CONN_ALLOW, shutdowntime = cast('2030-01-01' as datetime)
						End
				End      
			Else        
				Begin
					-- 셧다운 대상자 이나 접속 가능 시간이 아닌 경우
					Select CONN_ALLOW = @CONN_ALLOW, shutdowntime = cast('1979-01-01' as datetime)
				End
		End
	Else
		Begin
			-- 선택적 셧다운 대장자가 아닌 경우
			Select CONN_ALLOW = 0, shutdowntime = NULL
		End
End
GO


-- ----------------------------
-- procedure structure for web_mgame_event_get_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_mgame_event_get_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_mgame_event_get_info]
GO

CREATE PROCEDURE [dbo].[web_mgame_event_get_info]
(
	@mgameID varchar(20)
)
AS
	SELECT a.accountIDX, a.cpIDX, b.userName FROM userCooperationDB a INNER JOIN userNameDB b ON a.accountIDX=b.accountIDX WHERE a.cpID=@mgameID and a.cpType=300
GO


-- ----------------------------
-- procedure structure for web_get_ranking_diff
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_ranking_diff]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_ranking_diff]
GO

CREATE PROCEDURE [dbo].[web_get_ranking_diff]
(
	@accountIDX int
)
AS
	SELECT ranking_2day - ranking_1day AS 'diff' FROM userRankingDB_classgroup WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for manage_coupon_use_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_coupon_use_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_coupon_use_list]
GO

CREATE PROCEDURE [dbo].[manage_coupon_use_list]
AS
	SELECT couponType, count(*) AS 'cnt' FROM define_serial WHERE accountIDX is not null GROUP BY couponType
GO


-- ----------------------------
-- procedure structure for game_guildHQ_ver_set_status
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guildHQ_ver_set_status]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guildHQ_ver_set_status]
GO

CREATE PROCEDURE [dbo].[game_guildHQ_ver_set_status]

	@GUILD_IDX		INT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	DECLARE @UPDATE_DATE	DATETIME = GETDATE()

	BEGIN TRAN

		-- 누적 테이블에 Insert or Update		
		;MERGE dbo.userGuildHQVerDB as TARGET
		USING (SELECT @GUILD_IDX) AS SOURCE (GuildIDX)
		ON (TARGET.GuildIDX=SOURCE.GuildIDX)
		WHEN MATCHED THEN
			UPDATE SET TARGET.VerStatus+=1, TARGET.UptDate=@UPDATE_DATE
		WHEN NOT MATCHED THEN
			INSERT (GuildIDX, VerStatus) VALUES (SOURCE.GuildIDX, 1);

		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
			RETURN;
		END 

	COMMIT TRAN		

	RETURN;
GO


-- ----------------------------
-- procedure structure for game_guild_login_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_login_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_login_get_data]
GO

CREATE PROCEDURE [dbo].[game_guild_login_get_data]
(
	@ACCOUNT_IDX int
)
AS

	SET NOCOUNT ON

	DECLARE @GUILD_IDX	INT = 0;
	DECLARE @GUILD_HQ	TINYINT = 0;

	-- 길드 본부 활성화 여부 확인
	SET @GUILD_IDX = (SELECT guildIDX FROM dbo.userGuildInfoDB WHERE AccountIDX=@ACCOUNT_IDX)
	IF (@GUILD_IDX<>0) or (@GUILD_IDX IS NOT NULL)
	BEGIN
		IF EXISTS (SELECT * FROM dbo.userGuildHQDB WHERE GuildIDX=@GUILD_IDX)
		BEGIN
			SET @GUILD_HQ=1
		END
	END

	-- 사용자 길드 관련 데이터 세팅
	SELECT B.idx, B.guildName, B.guildmark, A.guildPosition, A.msg, A.AttendDate, A.GuildRankDate, A.regDate, @GUILD_HQ
	FROM dbo.userGuildInfoDB as A WITH(READUNCOMMITTED) INNER JOIN dbo.userGuildDB AS B WITH(READUNCOMMITTED)
	ON A.guildIDX = B.idx 
	WHERE A.accountIDX = @ACCOUNT_IDX
	AND A.guildJoinType in (-1, 1)
GO


-- ----------------------------
-- procedure structure for web_realmember_get_realType
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_get_realType]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_get_realType]
GO

CREATE PROCEDURE [dbo].[web_realmember_get_realType]
(
	@accountIDX int
)
As
	SELECT realType FROM userNameDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for USP_LTS_Channel_LegalAgent_CHILD_LIST
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_Channel_LegalAgent_CHILD_LIST]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_Channel_LegalAgent_CHILD_LIST]
GO

CREATE PROCEDURE [dbo].[USP_LTS_Channel_LegalAgent_CHILD_LIST]
	@sCUserID		varchar(25),	-- 사용자 아이디 
	@nCpType		smallint	-- CpType (통합 : 0, mgame : 300, daum : 400 , playnetwork : 600, tooniland : 700)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	SELECT CLA_Email, age, UserID, userName
	  FROM (
		SELECT G.CLA_Email, YEAR(GETDATE() - (Case When userNumber = 1 OR userNumber = 2 Then	
										Convert(datetime, Convert(varchar(8), '19' + userBirthday)) 
								       Else 
										Case When userNumber = 3 OR userNumber = 4 Then 
											Convert(datetime, Convert(varchar(8), '20' + userBirthday)) 
										End 
								       End) - 1) - YEAR(0) AS 'age',
		       M.UserID, N.userName
	          FROM dbo.userMemberDB M WITH (NOLOCK) 
			INNER JOIN dbo.userNameDB N WITH (NOLOCK)
				ON M.accountIDX = N.accountIDX 	
			INNER JOIN dbo.TB_LTS_Channel_LegalAgent G WITH (NOLOCK)
				ON M.UserID = G.CLA_ChildID
		 WHERE G.CLA_Email = ( SELECT CLA_Email
				         FROM dbo.TB_LTS_Channel_LegalAgent WITH (NOLOCK)
				        WHERE CLA_ChildID = @sCUserID )
		   -- 간편회원 이상
	           AND M.joinType > 1
		   AND M.cpType = @nCpType
	) AS F
	WHERE F.age < 18

	SET NOCOUNT OFF;
END
GO


-- ----------------------------
-- procedure structure for web_memberout_guild_join_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_memberout_guild_join_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_memberout_guild_join_count]
GO

CREATE PROCEDURE [dbo].[web_memberout_guild_join_count]
(
	@guildIDX int
)
AS
	SELECT count(*) FROM userGuildInfoDB WHERE guildIDX=@guildIDX and guildJoinType=1
GO


-- ----------------------------
-- procedure structure for web_get_playTime
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_playTime]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_playTime]
GO

CREATE PROCEDURE [dbo].[web_get_playTime]
(
	@accountIDX int
)
As
	SELECT playTime FROM userGameDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- function structure for DEFINE_REGION_LIMIT_SE_RENSPOINT
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[DEFINE_REGION_LIMIT_SE_RENSPOINT]') AND type IN ('FN', 'FS', 'FT', 'IF', 'TF'))
	DROP FUNCTION[dbo].[DEFINE_REGION_LIMIT_SE_RENSPOINT]
GO

CREATE FUNCTION [dbo].[DEFINE_REGION_LIMIT_SE_RENSPOINT]
(
)
RETURNS int
As
	BEGIN

	DECLARE @returnVal int
	SET @returnVal = 10

	RETURN @returnVal

	END
GO


-- ----------------------------
-- procedure structure for game_guildHQ_ver_get_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guildHQ_ver_get_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guildHQ_ver_get_info]
GO

CREATE PROCEDURE [dbo].[game_guildHQ_ver_get_info]

	@GUILD_IDX		INT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000
	
	SELECT VerStatus FROM dbo.userGuildHQVerDB WITH (READCOMMITTED) WHERE GuildIDX=@GUILD_IDX

	RETURN;
GO


-- ----------------------------
-- procedure structure for game_price_class_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_price_class_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_price_class_save]
GO

CREATE PROCEDURE [dbo].[game_price_class_save]
(
	@class_number varchar(4)
,	@cnt varchar(4)
)
As
	Declare @strSQL varchar(500)
	SET @strSQL = 'UPDATE define_class_price SET '
	SET @strSQL = @strSQL + 'class' + @class_number + '_buy_cnt = class' + @class_number + '_buy_cnt + ' + @cnt + ' '
	SET @strSQL = @strSQL + 'WHERE idx = (SELECT Max(idx) FROM define_class_price)'
	EXEC (@strSQL)
GO


-- ----------------------------
-- procedure structure for game_guild_join_self_init
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_join_self_init]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_join_self_init]
GO

CREATE PROCEDURE [dbo].[game_guild_join_self_init]
(
	@accountIDX int
)
AS
	DELETE FROM userGuildInfoDB WHERE accountIDX=@accountIDX and guildJoinType=0
GO


-- ----------------------------
-- procedure structure for web_realmember_get_realnamejumin
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_get_realnamejumin]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_get_realnamejumin]
GO

CREATE PROCEDURE [dbo].[web_realmember_get_realnamejumin]
(
	@accountIDX int
)
AS
	SELECT userName, userJumin1, userJumin2, userEnCode FROM userNameDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for USP_LTS_Channel_Member_Info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_Channel_Member_Info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_Channel_Member_Info]
GO

CREATE PROCEDURE [dbo].[USP_LTS_Channel_Member_Info] 
	-- Add the parameters for the stored procedure here
	@strCpID			varchar(25),
	@intCpType			int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    -- Insert statements for procedure here

	Select Top 1 * From dbo.userCooperationDB with (noLock)
	Where cpID = @strCpID
	And cpType = @intCpType

END
GO


-- ----------------------------
-- procedure structure for web_memberout_get_user_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_memberout_get_user_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_memberout_get_user_info]
GO

CREATE PROCEDURE [dbo].[web_memberout_get_user_info]
(
	@accountIDX int
)
AS
	SELECT userID, nickName, userPWD, EMail, joinType, regDate, cpType FROM userMemberDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_nickname_to_userID
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_nickname_to_userID]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_nickname_to_userID]
GO

CREATE PROCEDURE [dbo].[web_get_nickname_to_userID]
(
	@userID varchar(12)
)
As
	SELECT nickName FROM userMemberDB WITH(NOLOCK) WHERE userID = @userID
GO


-- ----------------------------
-- procedure structure for game_server_connection_on
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_server_connection_on]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_server_connection_on]
GO

CREATE PROCEDURE [dbo].[game_server_connection_on]
(
	@serverID bigint
)
AS

UPDATE dbo.define_game_server
SET [status] = 1
WHERE serverID = @serverID
GO


-- ----------------------------
-- procedure structure for game_present_get_list_v2
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_present_get_list_v2]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_present_get_list_v2]
GO

CREATE PROCEDURE [dbo].[game_present_get_list_v2]
(
	@idx int
,	@receiveIDX int
,	@topN int
)
with recompile
AS 
	DECLARE @sql nvarchar(1000)
	DECLARE @ParmDefinition nvarchar(500)

	SET @sql = N'SELECT top (@topN_in) a.idx, a.sendIDX, isNull(b.nickName, ''탈퇴 회원''), a.presentType, a.value1, a.value2, a.value3, a.value4, a.msgType, a.flag, a.limitDate FROM userPresentDB a WITH(NOLOCK) Left join userMemberDB b WITH(NOLOCK) on a.sendIDX = b.accountIDX '
	SET @sql = @sql + 'WHERE a.receiveIDX = @receiveIDX_in and a.idx > @idx_in order by a.idx asc'

	SET @ParmDefinition = N'@topN_in int, @receiveIDX_in int, @idx_in int'

	EXECUTE sp_executesql @sql, @ParmDefinition, @idx_in=@idx, @receiveIDX_in=@receiveIDX, @topN_in=@topN

select @sql
GO


-- ----------------------------
-- procedure structure for game_guild_join_self_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_join_self_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_join_self_delete]
GO

CREATE PROCEDURE [dbo].[game_guild_join_self_delete]
(
	@accountIDX int
,	@guildIDX int
)
AS
	DELETE FROM userGuildInfoDB WHERE guildIDX=@guildIDX and accountIDX=@accountIDX and guildJoinType=0
GO


-- ----------------------------
-- procedure structure for web_realmember_get_parent_jumin_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_get_parent_jumin_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_get_parent_jumin_count]
GO

CREATE PROCEDURE [dbo].[web_realmember_get_parent_jumin_count]
(
	@encode varchar(64)
)
As
	SELECT count(*) FROM userParentDB WHERE parentEncode=@encode
GO


-- ----------------------------
-- procedure structure for USP_LTS_Channel_LegalAgent_LAUNCHER_CHK
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_Channel_LegalAgent_LAUNCHER_CHK]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_Channel_LegalAgent_LAUNCHER_CHK]
GO

CREATE PROCEDURE [dbo].[USP_LTS_Channel_LegalAgent_LAUNCHER_CHK]
	@accountIDX		int		-- 사용자 IDX 
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- 게임 이용내용 고지 동의 정보 있는경우  
	IF EXISTS ( SELECT * 
	              FROM dbo.TB_LTS_Channel_LegalAgent WITH (NOLOCK)
	             WHERE CLA_ChildIdx = @accountIDX
	)
	BEGIN
		RETURN (1)
	END
	ELSE 
	BEGIN
		-- 회원가입시 보호자 동의한 경우
		IF EXISTS ( SELECT *
			      FROM dbo.userMemberDB M WITH (NOLOCK) 
				INNER JOIN dbo.userNameDB N WITH (NOLOCK)
					ON M.accountIDX = N.accountIDX 	
				INNER JOIN dbo.userParentDB P WITH (NOLOCK)
					ON N.accountIDX = P.accountIDX 	
			     WHERE M.accountIDX = @accountIDX
		)
		BEGIN	
			-- 법정대리인 정보 있는 회원인 경우
			RETURN (2)
		END 
		ELSE
		BEGIN
			-- 법정대리인 정보 없는 회원인 경우
			RETURN (3)
		END
	END 

	SET NOCOUNT OFF;
END
GO


-- ----------------------------
-- procedure structure for web_memberout_get_user_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_memberout_get_user_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_memberout_get_user_data]
GO

CREATE PROCEDURE [dbo].[web_memberout_get_user_data]
(
	@accountIDX int
)
As
	SELECT a.visit_count, b.userName, b.userJumin1, b.userJumin2, b.userEnCode, c.gameMoney, c.playTime, c.conn_count, c.userLevel, isNull(d.amtCash, 0) as 'amtCash', isNull(d.amtBonus, 0) as 'amtBonus', a.userIP FROM userInfoDB a LEFT JOIN userNameDB b ON a.accountIDX = b.accountIDX LEFT JOIN userGameDB c ON a.accountIDX = c.accountIDX LEFT JOIN userCashDB d ON a.accountIDX = d.accountIDX
	WHERE a.accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_nickname
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_nickname]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_nickname]
GO

CREATE PROCEDURE [dbo].[web_get_nickname]
(
	@accountIDX int
)
As
	SELECT nickName FROM userMemberDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_server_connection_count_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_server_connection_count_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_server_connection_count_save]
GO

CREATE PROCEDURE [dbo].[game_server_connection_count_save]
(
	@serverID bigint
,	@count int
)
AS

UPDATE dbo.define_game_server
SET connNumber = @count
WHERE serverID = @serverID
GO


-- ----------------------------
-- procedure structure for game_present_get_list_original
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_present_get_list_original]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_present_get_list_original]
GO

CREATE PROCEDURE [dbo].[game_present_get_list_original]
(
	@idx int
,	@receiveIDX int
,	@topN int
)
AS
	DECLARE @sql nvarchar(1000)
	DECLARE @ParmDefinition nvarchar(500)

	SET @sql = N'SELECT top (@topN_in) a.idx, a.sendIDX, isNull(b.nickName, ''탈퇴 회원''), a.presentType, a.value1, a.value2, a.value3, a.value4, a.msgType, a.flag, a.limitDate FROM userPresentDB a WITH(NOLOCK) Left join userMemberDB b WITH(NOLOCK) on a.sendIDX = b.accountIDX '
	SET @sql = @sql + 'WHERE a.receiveIDX = @receiveIDX_in and a.idx > @idx_in order by a.idx asc'

	SET @ParmDefinition = N'@topN_in int, @receiveIDX_in int, @idx_in int'

	EXECUTE sp_executesql @sql, @ParmDefinition, @idx_in=@idx, @receiveIDX_in=@receiveIDX, @topN_in=@topN
GO


-- ----------------------------
-- procedure structure for game_guild_join_my_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_join_my_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_join_my_list]
GO

CREATE PROCEDURE [dbo].[game_guild_join_my_list]
(
	@accountIDX int
)
AS
	SELECT TOP 100 b.idx FROM userGuildInfoDB a INNER JOIN userGuildDB b ON a.guildIDX = b.idx WHERE accountIDX=@accountIDX ORDER BY a.idx ASC
GO


-- ----------------------------
-- procedure structure for web_realmember_get_parent_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_get_parent_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_get_parent_count]
GO

CREATE PROCEDURE [dbo].[web_realmember_get_parent_count]
(
	@accountIDX int
)
As
	SELECT count(*) FROM userParentDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for agent_temp_event_class
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[agent_temp_event_class]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[agent_temp_event_class]
GO

CREATE PROCEDURE [dbo].[agent_temp_event_class]
AS

insert into temp_event_data_select (accountIDX)
select accountIDX from usergamedb with(nolock) where conndate >= '2011-06-29'

-- A. 계정별 일반 영구 용병 개수 (프리미엄 제외)
select accountIDX, count(*) AS 'cnt' into [Backup].dbo.LosaGame_110929_event_selectA from usercharacterdb with(nolock) 
where accountidx in (select accountidx from temp_event_data_select with(nolock)) 
and classtype not in (30,32,35,37,39,41,43,48,50,52,54) and limitType=1
group by accountIDX

-- B. 각 계정 별 소유한 프리미엄 용병의 개수
-- 프리미엄 전체 용병 보유 수
select accountIDX, count(*) AS 'cnt' into [Backup].dbo.LosaGame_110929_event_selectB from usercharacterdb with(nolock) 
where accountidx in (select accountidx from temp_event_data_select with(nolock)) 
and classtype in (30,32,35,37,39,41,43,48,50,52,54)
group by accountIDX


-- 프리미엄 전체 영구 용병 보유 수
select accountIDX, count(*) AS 'cnt' into [Backup].dbo.LosaGame_110929_event_selectC from usercharacterdb with(nolock) 
where accountidx in (select accountidx from temp_event_data_select with(nolock)) 
and classtype in (30,32,35,37,39,41,43,48,50,52,54) and limitType=1
group by accountIDX


-- C. Active user 수와 Active user의 총 보유 영구 용병(프리미엄+일반영구)의 수
-- 계정별 전체 영구 용병 개수
select accountIDX, count(*) AS 'cnt' into [Backup].dbo.LosaGame_110929_event_selectD from usercharacterdb with(nolock) 
where accountidx in (select accountidx from temp_event_data_select with(nolock)) 
and limitType=1
group by accountIDX

-- 전체 영구 용병 개수
select count(*) AS 'cnt' into [Backup].dbo.LosaGame_110929_event_selectE from usercharacterdb with(nolock) 
where accountidx in (select accountidx from temp_event_data_select with(nolock)) 
and limitType=1
GO


-- ----------------------------
-- procedure structure for web_memberout_get_parent_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_memberout_get_parent_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_memberout_get_parent_data]
GO

CREATE PROCEDURE [dbo].[web_memberout_get_parent_data]
(
	@accountIDX int
)
As
	SELECT parentName, parentJumin1, parentJumin2, parentEncode, email, agreeSDate, agreeEDate, agreeType, logIDX FROM userParentDB 
	WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for Test_SET_rewardDB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[Test_SET_rewardDB]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[Test_SET_rewardDB]
GO

CREATE PROCEDURE [dbo].[Test_SET_rewardDB]
(

	@accountIDX			INT
,	@startDate			INT
,	@currentRound		TINYINT
,	@userFactionType	INT	--승리진영
,	@winnerFactionType	INT	--내가 속한 진영
,	@rewardPeso			INT	--내가 속한 진영
,	@factionRank		INT	--내가 속한 진영
,	@factionPoint		INT	--내가 속한 진영



)
AS
BEGIN
	SET NOCOUNT ON;

	-- 대회 참여 유저 보상
	INSERT INTO [LosaGameQA].[dbo].[userLeagueRewardDB]
           ([accountIDX]
           ,[startDate]
           ,[currentRound]
           ,[userFactionType]
           ,[winnerFactionType]
           ,[rewardPeso]
           ,[factionRank]
           ,[factionPoint]
           ,[regDate])
     VALUES
           (@accountIDX
           ,@startDate
           ,@currentRound
           ,@userFactionType
           ,@winnerFactionType
           ,@rewardPeso
           ,@factionRank
           ,@factionPoint
           ,GETDATE())
END
GO


-- ----------------------------
-- procedure structure for web_get_jumin
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_jumin]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_jumin]
GO

CREATE PROCEDURE [dbo].[web_get_jumin]
(
	@accountIDX int
)
AS
	SELECT userEnCode FROM userNameDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_server_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_server_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_server_add]
GO

CREATE PROCEDURE [dbo].[game_server_add]
(
	@serverID bigint
,	@serverIP varchar(15)
,	@serverPort int
,	@serverName varchar(50)
,	@clientPort int
)
AS

IF (NOT EXISTS(SELECT * FROM dbo.define_game_server WITH(NOLOCK) WHERE serverIP=@serverIP AND serverPort=@serverPort))
BEGIN
	INSERT INTO dbo.define_game_server (serverID, serverIP, serverPort, serverName, clientPort, connNumber, [status], regDate)
	VALUES (@serverID, @serverIP, @serverPort, @serverName, @clientPort, 0, 0, GETDATE())
END
GO


-- ----------------------------
-- procedure structure for _nouse_game_friend_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[_nouse_game_friend_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[_nouse_game_friend_list]
GO

CREATE PROCEDURE [dbo].[_nouse_game_friend_list]
(
	@idx varchar(10)
,	@accountIDX varchar(12)
,	@topNo varchar(10)
)
AS

	DECLARE @strSQL varchar(500)
	SET @strSQL = 'Select Top ' + @topNo + ' a.idx, c.nickName, isNull(e.class, 0) as ''class'', isNull(d.userLevel, 0) as ''userLevel'' from userFriendDB a join userMemberDB c on a.friendAccIDX = c.accountIDX LEFT JOIN userGameDB d ON a.friendAccIDX = d.accountIDX LEFT JOIN userRankingDB e ON a.friendAccIDX = e.accountIDX '
	SET @strSQL = @strSQL + ' where a.userAccIDX = ''' + @accountIDX + ''' and a.idx < ' + @idx + ' and flag=1 order by a.idx desc'
	EXEC (@strSQL)
GO


-- ----------------------------
-- procedure structure for game_guild_join_init
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_join_init]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_join_init]
GO

CREATE PROCEDURE [dbo].[game_guild_join_init]
(
	@guildIDX int
)
AS
	DELETE FROM userGuildInfoDB WHERE guildIDX=@guildIDX and guildJoinType=0
GO


-- ----------------------------
-- procedure structure for web_realmember_get_name_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_get_name_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_get_name_data]
GO

CREATE PROCEDURE [dbo].[web_realmember_get_name_data]
(
	@accountIDX int
)
AS
	SELECT accountIDX, userName, userEnCode, realType FROM userNameDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for AGENT_SET_CLASSPRICE
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_SET_CLASSPRICE]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_SET_CLASSPRICE]
GO

CREATE PROCEDURE [dbo].[AGENT_SET_CLASSPRICE]
AS
	INSERT INTO define_class_price (
		class1_price, class2_price, class3_price, class4_price, class5_price, class6_price, class7_price, class8_price, class9_price, class10_price, 
		class11_price, class12_price, class13_price, class14_price, class15_price, class16_price, class17_price, class18_price, class19_price, class20_price, 
		class21_price, class22_price, class23_price, class24_price, class25_price, class26_price, class27_price, class28_price, class29_price, class30_price, 
		class31_price, class32_price, class33_price, class34_price, class35_price, class36_price, class37_price, class38_price, class39_price, class40_price, 
		class41_price, class42_price, class43_price, class44_price, class45_price, class46_price, class47_price, class48_price, class49_price, class50_price,
		class51_price, class52_price, class53_price, class54_price, class55_price, class56_price, class57_price, class58_price, class59_price, class60_price,
		class61_price, class62_price, class63_price, class64_price, class65_price, class66_price, class67_price, class68_price, class69_price, class70_price,
		class71_price, class72_price, class73_price, class74_price, class75_price, class76_price, class77_price, class78_price, class79_price, class80_price,
		class81_price, class82_price, class83_price, class84_price, class85_price, class86_price, class87_price, class88_price, class89_price, class90_price,
		class91_price, class92_price, class93_price, class94_price, class95_price, class96_price, class97_price, class98_price, class99_price, class100_price
	)
	SELECT 
		class1_price, class2_price, class3_price, class4_price, class5_price, class6_price, class7_price, class8_price, class9_price, class10_price,
		class11_price, class12_price, class13_price, class14_price, class15_price, class16_price, class17_price, class18_price, class19_price, class20_price,
		class21_price, class22_price, class23_price, class24_price, class25_price, class26_price, class27_price, class28_price, class29_price, class30_price,
		class31_price, class32_price, class33_price, class34_price, class35_price, class36_price, class37_price, class38_price, class39_price, class40_price,
		class41_price, class42_price, class43_price, class44_price, class45_price, class46_price, class47_price, class48_price, class49_price, class50_price,
		class51_price, class52_price, class53_price, class54_price, class55_price, class56_price, class57_price, class58_price, class59_price, class60_price,
		class61_price, class62_price, class63_price, class64_price, class65_price, class66_price, class67_price, class68_price, class69_price, class70_price,
		class71_price, class72_price, class73_price, class74_price, class75_price, class76_price, class77_price, class78_price, class79_price, class80_price,
		class81_price, class82_price, class83_price, class84_price, class85_price, class86_price, class87_price, class88_price, class89_price, class90_price,
		class91_price, class92_price, class93_price, class94_price, class95_price, class96_price, class97_price, class98_price, class99_price, class100_price
	FROM define_class_price WHERE idx = (SELECT MAX(idx) FROM define_class_price)
GO


-- ----------------------------
-- procedure structure for web_memberout_get_guild_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_memberout_get_guild_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_memberout_get_guild_info]
GO

CREATE PROCEDURE [dbo].[web_memberout_get_guild_info]
(
	@accountIDX int
)
AS
	SELECT guildIDX, guildPosition FROM userGuildInfoDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_joinType
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_joinType]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_joinType]
GO

CREATE PROCEDURE [dbo].[web_get_joinType]
(
	@accountIDX int
)
AS
	SELECT joinType FROM userMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_sbox_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_sbox_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_sbox_save]
GO

CREATE PROCEDURE [dbo].[game_sbox_save]

	@idx			INT,
	@presentType	SMALLINT,
	@value1			INT,
	@value2			INT,
	@amount			INT,
	@bonusAmount	INT,
	@flag			SMALLINT,
	@billingID		VARCHAR(64),
	@limitDate		DATETIME

AS

	SET NOCOUNT ON;

	UPDATE dbo.userSBoxDB
	   SET presentType = @presentType,
		   value1 = @value1,
		   value2 = @value2,
		   amount = @amount,
		   bonusAmount = @bonusAmount,
		   flag = @flag,
		   billingID = @billingID,
		   limitDate = @limitDate
	 WHERE idx = @idx;
GO


-- ----------------------------
-- procedure structure for _nouse_game_friend_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[_nouse_game_friend_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[_nouse_game_friend_get_list]
GO

CREATE PROCEDURE [dbo].[_nouse_game_friend_get_list]
(
	@idx varchar(10)
,	@accountIDX varchar(12)
,	@topNo varchar(10)
)
As
	DECLARE @strSQL varchar(500)
	SET @strSQL = 'Select Top ' + @topNo + ' a.idx, c.nickName, isNull(e.class, 0) as ''class'', isNull(d.userLevel, 0) as ''userLevel'' from userFriendDB a join userMemberDB c on a.friendAccIDX = c.accountIDX LEFT JOIN userGameDB d ON a.friendAccIDX = d.accountIDX LEFT JOIN userRankingDB e ON a.friendAccIDX = e.accountIDX '
	SET @strSQL = @strSQL + ' where a.userAccIDX = ''' + @accountIDX + ''' and a.idx < ' + @idx + ' order by a.idx desc'
	EXEC (@strSQL)
GO


-- ----------------------------
-- procedure structure for game_guild_join_in
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_join_in]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_join_in]
GO

CREATE PROCEDURE [dbo].[game_guild_join_in]
(
	@accountIDX int
,	@guildIDX int
)
AS

	DECLARE @cnt int, @errcount int, @maxcount int

	SET @cnt = 0
	SET @errcount = 0

	SET @cnt = (SELECT count(*) FROM userGuildInfoDB WITH(NOLOCK) WHERE accountIDX=@accountIDX and guildJoinType > 0)
	if (@cnt > 0)
	BEGIN
		SET @errcount = 2
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @cnt = (SELECT count(*) FROM userGuildInfoDB WITH(NOLOCK) WHERE (guildIDX=@guildIDX and accountIDX=@accountIDX and guildJoinType = 0))
	if (@cnt > 0)
	BEGIN
		SET @errcount = 2
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @cnt = (SELECT count(*) FROM userGuildInfoDB WITH(NOLOCK) WHERE guildIDX=@guildIDX and guildJoinType = 0)

	if (@cnt >= 16)
	BEGIN
		SET @errcount = 3
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @maxcount = isNull((SELECT maxcount FROM userGuildDB WITH(NOLOCK) WHERE idx=@guildIDX), 0)
	SET @cnt = (SELECT count(*) FROM userGuildInfoDB WITH(NOLOCK) WHERE guildIDX=@guildIDX and guildJoinType = 1)

	if (@maxcount <= @cnt)
	BEGIN
		SET @errcount = 4
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	if (@errcount = 0)
	BEGIN
		SELECT 1 AS 'returnVal'
		INSERT INTO userGuildInfoDB (accountIDX, guildIDX, guildPosition, guildJoinType, regDate)
		VALUES (@accountIDX, @guildIDX, '길드원', 0, getdate())
	END
GO


-- ----------------------------
-- procedure structure for web_realmember_get_info_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_get_info_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_get_info_count]
GO

CREATE PROCEDURE [dbo].[web_realmember_get_info_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM userInfoBDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for AGENT_RANKING_MEDAL
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_RANKING_MEDAL]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_RANKING_MEDAL]
GO

CREATE PROCEDURE [dbo].[AGENT_RANKING_MEDAL]

AS
	INSERT INTO userRankingDB_medal (accountIDX)
	SELECT DISTINCT(accountIDX) FROM userMedalDB WITH(NOLOCK) 
	WHERE accountIDX not in (SELECT accountIDX FROM userRankingDB_medal WITH(NOLOCK)) and accountIDX not in (SELECT accountIDX FROM userMemberDB WITH(NOLOCK) WHERE limitType=100 and limitDate > getdate())

	IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_temp')
	DROP TABLE userRankingDB_temp

	SELECT a.accountIDX, RANK() OVER(ORDER BY a.medalLevel DESC, a.expert DESC) AS 'rank' 
	INTO userRankingDB_temp 
	FROM (
		SELECT accountIDX, medalLevel, expert FROM userRankingDB_medal WITH(NOLOCK) WHERE medalLevel > 0
	) a, (
		SELECT accountIDX FROM userMemberDB WITH(NOLOCK) 
		WHERE userType > 20 and (limitType < 100 and limitDate < getdate())
	) b
	WHERE a.accountIDX = b.accountIDX

	UPDATE userRankingDB_medal SET ranking_prev = ranking_now

	UPDATE a SET ranking_now = b.rank 
	FROM (SELECT accountIDX, rank FROM userRankingDB_temp) b INNER JOIN userRankingDB_medal a ON a.accountIDX = b.accountIDX
GO


-- ----------------------------
-- procedure structure for web_memberout_delete_guild
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_memberout_delete_guild]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_memberout_delete_guild]
GO

CREATE PROCEDURE [dbo].[web_memberout_delete_guild]
(
	@guildIDX int
)
AS
	DELETE FROM userGuildDB WHERE idx=@guildIDX
GO


-- ----------------------------
-- procedure structure for temp_game_present_get_list_test
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[temp_game_present_get_list_test]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[temp_game_present_get_list_test]
GO

CREATE PROCEDURE [dbo].[temp_game_present_get_list_test]
(
	@idx int
,	@receiveIDX int
,	@topN int
)
AS
	DECLARE @sql nvarchar(1000)
	DECLARE @ParmDefinition nvarchar(500)

	SET @sql = N'SELECT top (@topN_in) a.idx, a.sendIDX, isNull(b.nickName, ''탈퇴 회원''), a.presentType, a.value1, a.value2, a.value3, a.value4, a.msgType, a.flag, a.limitDate FROM temp_userPresentDB a WITH(NOLOCK) Left join userMemberDB b WITH(NOLOCK) on a.sendIDX = b.accountIDX '
	SET @sql = @sql + 'WHERE a.receiveIDX = @receiveIDX_in and a.idx > @idx_in order by a.idx asc'

	SET @ParmDefinition = N'@topN_in int, @receiveIDX_in int, @idx_in int'

	EXECUTE sp_executesql @sql, @ParmDefinition, @idx_in=@idx, @receiveIDX_in=@receiveIDX, @topN_in=@topN
GO


-- ----------------------------
-- procedure structure for web_get_is_play
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_is_play]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_is_play]
GO

CREATE PROCEDURE [dbo].[web_get_is_play]
(
	@accountIDX int
)
AS
	SELECT gameServerID FROM userLoginDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_sbox_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_sbox_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_sbox_get_list]
GO

CREATE PROCEDURE [dbo].[game_sbox_get_list]

	@idx			INT,
	@accountIDX		INT,
	@topN			INT

AS

	SET NOCOUNT ON

	SELECT TOP (@topN) idx, presentType, value1, value2, amount, bonusAmount, flag, billingID, limitDate
	  FROM dbo.userSBoxDB WITH(NOLOCK)
	 WHERE accountIDX=@accountIDX
	   AND idx > @idx
GO


-- ----------------------------
-- procedure structure for game_friend_list_asc_original
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_list_asc_original]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_list_asc_original]
GO

CREATE PROCEDURE [dbo].[game_friend_list_asc_original]
(
	@idx int
,	@accountIDX int
,	@topNo int
)
AS

	DECLARE @strSQL nvarchar(1000)
	DECLARE @ParmDefinition nvarchar(500)

	SET @strSQL = N'SELECT Top (@topNo_in) a.idx, a.friendAccIDX, b.nickName, a.regDate from userFriendDB a WITH(NOLOCK) join userMemberDB b WITH(NOLOCK) on a.friendAccIDX = b.accountIDX '
	SET @strSQL = @strSQL + ' WHERE a.userAccIDX = @accountIDX_in  and a.idx > @idx_in and a.flag=1 order by a.idx asc'

	SET @ParmDefinition = N'@topNo_in int, @accountIDX_in int, @idx_in int'

	EXECUTE sp_executesql @strSQL, @ParmDefinition, @idx_in=@idx, @accountIDX_in=@accountIDX, @topNo_in=@topNo
GO


-- ----------------------------
-- procedure structure for game_guild_join_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_join_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_join_get_list]
GO

CREATE PROCEDURE [dbo].[game_guild_join_get_list]
(
	@guildIDX int
)
AS
	SELECT a.idx, a.accountIDX, b.userLevel, c.nickName 
	FROM userGuildInfoDB a WITH(NOLOCK) INNER JOIN userGameDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX INNER JOIN userMemberDB c WITH(NOLOCK) ON a.accountIDX = c.accountIDX 
	WHERE guildIDX = @guildIDX and guildJoinType=0 ORDER BY a.idx ASC
GO


-- ----------------------------
-- procedure structure for web_realmember_get_accountIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_get_accountIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_get_accountIDX]
GO

CREATE PROCEDURE [dbo].[web_realmember_get_accountIDX]
(
	@userJumin varchar(64)
)
As
	SELECT accountIDX FROM userNameDB WHERE userEnCode = @userJumin
GO


-- ----------------------------
-- procedure structure for AGENT_RANKING_LADDER_TITLE
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_RANKING_LADDER_TITLE]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_RANKING_LADDER_TITLE]
GO

CREATE PROCEDURE [dbo].[AGENT_RANKING_LADDER_TITLE]
AS
	DECLARE @cnt int, @4nd int, @5nd int, @6nd int, @7nd int, @8nd int

	SET @cnt = (SELECT COUNT(*) FROM userRankingDB_hero WITH(NOLOCK))

	SET @5nd = @cnt * (10/convert(float,100))
	SET @6nd = @cnt * (25/convert(float,100))
	SET @7nd = @cnt * (50/convert(float,100))
	SET @8nd = @cnt * (100/convert(float,100))

	UPDATE userRankingDB_hero SET title = 8 WHERE daily <= @8nd and daily > 0
	UPDATE userRankingDB_hero SET title = 7 WHERE daily <= @7nd and daily > 0
	UPDATE userRankingDB_hero SET title = 6 WHERE daily <= @6nd and daily > 0
	UPDATE userRankingDB_hero SET title = 5 WHERE daily <= @5nd and daily > 0

	UPDATE userRankingDB_hero SET title = 4 WHERE daily >= 21 and daily <= 100
	UPDATE userRankingDB_hero SET title = 3 WHERE daily >= 6 and daily <= 20
	UPDATE userRankingDB_hero SET title = 2 WHERE daily >= 2 and daily <= 5
	UPDATE userRankingDB_hero SET title = 1 WHERE daily = 1
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_ladder_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_ladder_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_ladder_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_ladder_data]
(
	@accountIDX int
)
AS
	SELECT a.type3_win, a.type3_lose, a.type3_kill, a.type3_death, a.type4_win, a.type4_lose, a.type4_kill, a.type4_death, b.daily, b.dailyB, b.title 
	FROM userRecordBattleDB a LEFT JOIN userRankingDB_hero b ON a.accountIDX=b.accountIDX WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_guildname_to_guildIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_guildname_to_guildIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_guildname_to_guildIDX]
GO

CREATE PROCEDURE [dbo].[web_get_guildname_to_guildIDX]
(
	@guildIDX int
)
As
	SELECT guildName FROM userGuildDB WITH(NOLOCK) WHERE idx=@guildIDX
GO


-- ----------------------------
-- procedure structure for game_sbox_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_sbox_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_sbox_delete]
GO

CREATE PROCEDURE [dbo].[game_sbox_delete]
(
	@idx INT
)
AS

SET NOCOUNT ON

DELETE FROM dbo.userSBoxDB
 WHERe idx = @idx
GO


-- ----------------------------
-- procedure structure for game_ranking_hero_topN_original
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_ranking_hero_topN_original]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_ranking_hero_topN_original]
GO

CREATE PROCEDURE [dbo].[game_ranking_hero_topN_original]
(
	@rank1 int
,	@rank2 int
)
AS
	DECLARE @SQL nvarchar(2000)
	DECLARE @ParmDefinition nvarchar(500)

	SET @SQL = N'SELECT a.accountIDX, b.userLevel, c.nickName, a.title, d.type3_win, d.type3_lose, b.regionType, b.userHerocEXP + b.userHerosEXP AS ''userHeroEXP'' '
	SET @SQL = @SQL + 'FROM userRankingDB_hero a WITH(NOLOCK) '
	SET @SQL = @SQL + 'LEFT JOIN userGameDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX '
	SET @SQL = @SQL + 'LEFT JOIN userMemberDB c WITH(NOLOCK) ON a.accountIDX = c.accountIDX '
	SET @SQL = @SQL + 'LEFT JOIN userRecordBattleDB d WITH(NOLOCK) ON a.accountIDX = d.accountIDX '
	SET @SQL = @SQL + 'WHERE a.daily >= @rank1_in and a.daily <= @rank2_in ORDER BY a.daily ASC'

	SET @ParmDefinition = N'@rank1_in int, @rank2_in int'

	EXECUTE sp_executesql @SQL, @ParmDefinition, @rank1_in=@rank1, @rank2_in=@rank2
GO


-- ----------------------------
-- procedure structure for game_guild_join_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_join_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_join_delete]
GO

CREATE PROCEDURE [dbo].[game_guild_join_delete]
(
	@idx int
)
AS
	DELETE FROM userGuildInfoDB WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_realmember_agree_user_parent_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_agree_user_parent_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_agree_user_parent_info]
GO

CREATE PROCEDURE [dbo].[web_realmember_agree_user_parent_info]
(
	@accountIDX int
)
AS
	SELECT a.userID, b.userName, b.userBirthday, b.userNumber, c.parentName, c.parentBirth   
	FROM userMemberDB a INNER JOIN userNameDB b ON a.accountIDX = b.accountIDX INNER JOIN userParentDB c ON a.accountIDX = c.accountIDX 
	WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for AGENT_RANKING_LADDER_SEASON
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_RANKING_LADDER_SEASON]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_RANKING_LADDER_SEASON]
GO

CREATE PROCEDURE [dbo].[AGENT_RANKING_LADDER_SEASON]

AS

	UPDATE userRankingDB_hero SET 
		season6 = season5
,		season5 = season4
,		season4 = season3
,		season3 = season2
,		season2 = season1
,		season1 = daily
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_faction_rank_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_faction_rank_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_faction_rank_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_faction_rank_data]
(
	@accountIDX int
)
As
	SELECT win_fix, tie_fix, lose_fix, win_prev, tie_prev, lose_prev, rank_prev, rank_now, rank_total, rank_faction 
	FROM userRankingDB_faction WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_guildIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_guildIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_guildIDX]
GO

CREATE PROCEDURE [dbo].[web_get_guildIDX]
(
	@accountIDX int
)
AS
	SELECT guildIDX FROM userGuildInfoDB WITH(NOLOCK) WHERE accountIDX=@accountIDX and guildJoinType=1
GO


-- ----------------------------
-- procedure structure for game_sbox_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_sbox_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_sbox_add]
GO

CREATE PROCEDURE [dbo].[game_sbox_add]

	@accountIDX		INT,
	@presentType	SMALLINT,
	@value1			INT,
	@value2			INT,
	@amount			INT,
	@bonusAmount	INT,
	@flag			SMALLINT,
	@billingID		VARCHAR(64),
	@limitDate		DATETIME

AS

	SET NOCOUNT ON;

	INSERT INTO dbo.userSBoxDB (
		accountIDX, presentType, value1, value2, amount, bonusAmount, flag, billingID, limitDate, regDate
	)
	VALUES (
		@accountIDX, @presentType, @value1, @value2, @amount, @bonusAmount, @flag, @billingID, @limitDate, GETDATE()
	)
GO


-- ----------------------------
-- procedure structure for game_region_season_end
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_region_season_end]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_region_season_end]
GO

CREATE PROCEDURE [dbo].[game_region_season_end]

AS
/*
	BEGIN TRAN

	DECLARE @limitRenpoint int, @limitPrepoint int, @season int, @totalpoint int
	DECLARE @rt1point int, @rt1point_bonus int, @rt1count int, @rt2point int, @rt2point_bonus int, @rt2count int

	SET @limitRenpoint = DBO.DEFINE_REGION_LIMIT_RENSPOINT()
	SET @limitPrepoint = DBO.DEFINE_REGION_LIMIT_SE_RENSPOINT()
	SET @season = isNull((SELECT max(season) FROM userRegionDB_history), 0) + 1
	SET @totalpoint = (SELECT rt1point + rt2point AS 'rp' FROM userRegionDB)
	SET @rt1point = (SELECT rt1point FROM userRegionDB)
	SET @rt2point = (SELECT rt2point FROM userRegionDB)
	SET @rt1point_bonus = (SELECT rt1point_bonus FROM userRegionDB)
	SET @rt2point_bonus = (SELECT rt2point_bonus FROM userRegionDB)
	SET @rt1count = (SELECT count(*) FROM userGameDB WHERE regionType=1 and renspoint > @limitRenpoint)
	SET @rt2count = (SELECT count(*) FROM userGameDB WHERE regionType=2 and renspoint > @limitRenpoint)

	If (@totalpoint > 0)
	BEGIN
		INSERT INTO userRegionDB_compen (accountIDX, rt1point, rt1point_bonus, rt1count, rt2point, rt2point_bonus, rt2count, regionType, renspoint, regionRanking, regDate)
		SELECT a.accountIDX, @rt1point,  @rt1point_bonus, @rt1count, @rt2point, @rt2point_bonus, @rt2count, a.regionType, a.renspoint, isNull(b.region, 0), getdate() FROM userGameDB a LEFT JOIN userRankingDB b ON a.accountIDX=b.accountIDX WHERE a.regionType > 0 and renspoint > @limitPrepoint
	END

	DELETE FROM userRegionDB_compen WHERE regDate < Left(getdate(), 10)

	INSERT INTO userRegionDB_history (point, point_bonus, membercount, regionType, season, regDate) VALUES (@rt1point, @rt1point_bonus, @rt1count, 1, @season, getdate())
	INSERT INTO userRegionDB_history (point, point_bonus, membercount, regionType, season, regDate) VALUES (@rt2point, @rt2point_bonus, @rt2count, 2, @season, getdate())

	COMMIT TRAN
*/
GO


-- ----------------------------
-- procedure structure for game_guild_join_app
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_join_app]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_join_app]
GO

CREATE PROCEDURE [dbo].[game_guild_join_app]
(
	@accountIDX int
,	@guildIDX int
)
AS
	SET XACT_ABORT ON

	DECLARE @cnt int, @errcount int, @maxcount int

	SET @cnt = 0
	SET @errcount = 0

	SET @cnt = (SELECT count(*) FROM userGuildInfoDB WITH(NOLOCK) WHERE guildIDX=@guildIDX and accountIDX=@accountIDX and guildJoinType=0)
	if (@cnt = 0)
	BEGIN
		SET @errcount = 2
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @maxcount = isNull((SELECT maxcount FROM userGuildDB WITH(NOLOCK) WHERE idx=@guildIDX), 0)
	SET @cnt = (SELECT count(*) FROM userGuildInfoDB WITH(NOLOCK) WHERE guildIDX=@guildIDX and guildJoinType = 1)

	if (@maxcount <= @cnt)
	BEGIN
		SET @errcount = 3
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	if (@errcount = 0)
	BEGIN
		SELECT 1 AS 'returnVal'
		UPDATE userGuildInfoDB SET guildJoinType=1, msg=1  WHERE guildIDX=@guildIDX and accountIDX=@accountIDX
		UPDATE userGuildDB SET membercount = membercount + 1 WHERE idx=@guildIDX
		DELETE FROM userGuildInfoDB WHERE guildIDX <> @guildIDX and accountIDX=@accountIDX and guildJoinType = 0
	END
GO


-- ----------------------------
-- procedure structure for web_realmember_agree_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_agree_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_agree_save]
GO

CREATE PROCEDURE [dbo].[web_realmember_agree_save]
(
	@idx int
,	@accountIDX int
,	@agreeSDate datetime
,	@agreeEDate datetime
,	@permitIP varchar(15)
)
AS

	BEGIN TRAN

	UPDATE userParentDB SET
		agreeSDate = @agreeSDate
,		agreeEDate = @agreeEDate
,		agreeType = 1
,		logIDX = @idx
	WHERE accountIDX=@accountIDX

	UPDATE userMemberDB SET joinType=10 WHERE accountIDX=@accountIDX

	UPDATE Losagame_log.DBO.log_agree SET
		permitDate = getdate()
,		permitIP = @permitIP
,		permitType = 1
	WHERE idx=@idx

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for AGENT_RANKING_LADDER_DAILYB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_RANKING_LADDER_DAILYB]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_RANKING_LADDER_DAILYB]
GO

CREATE PROCEDURE [dbo].[AGENT_RANKING_LADDER_DAILYB]

AS

	UPDATE userRankingDB_hero SET dailyB = 0 WHERE dailyB > 0

	IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_temp')
	DROP TABLE userRankingDB_temp

	SELECT a.accountIDX, ROW_NUMBER() OVER(ORDER BY a.ladderEXP DESC, a.accountIDX ASC) AS 'rank' 
	INTO userRankingDB_temp 
	FROM (
		SELECT c.accountIDX, (c.userHerosEXP) * ((d.type4_win/30) + 1) / ((d.type4_lose/10) + 1) AS 'ladderEXP' 
		FROM userGameDB c WITH(NOLOCK) INNER JOIN userRecordBattleDB d WITH(NOLOCK) ON c.accountIDX=d.accountIDX
		WHERE c.userHerosEXP > 0
	) a, (
		SELECT accountIDX FROM userMemberDB WITH(NOLOCK) 
		WHERE userType > 20 
	) b
	WHERE a.accountIDX = b.accountIDX

	INSERT INTO userRankingDB_hero (accountIDX, title, daily, dailyB, season1, season2, season3, season4, season5, season6, regDate)
	SELECT accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, 0, getdate() FROM userRankingDB_temp WITH(NOLOCK) WHERE accountIDX not in (SELECT accountIDX FROM userRankingDB_hero WITH(NOLOCK))

	UPDATE a SET dailyB = b.rank
	FROM (SELECT accountIDX, rank FROM userRankingDB_temp WITH(NOLOCK)) b INNER JOIN userRankingDB_hero a ON a.accountIDX = b.accountIDX
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_faction_game_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_faction_game_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_faction_game_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_faction_game_data]
(
	@accountIDX int
)
AS
	SELECT	type2_win AS 'win'
,			type2_lose AS 'lose'
,			type2_kill AS 'kill'
,			type2_death AS 'death'
	FROM userRecordBattleDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_guidlIDX_to_guildname
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_guidlIDX_to_guildname]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_guidlIDX_to_guildname]
GO

CREATE PROCEDURE [dbo].[web_get_guidlIDX_to_guildname]
(
	@guildName varchar(20)
)
As
	SELECT idx FROM userGuildDB WITH(NOLOCK) WHERE guildName = @guildName
GO


-- ----------------------------
-- procedure structure for game_relative_reward_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_relative_reward_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_relative_reward_save]
GO

CREATE PROCEDURE [dbo].[game_relative_reward_save]
(
	@accountIDX int
,	@reward tinyint
)
AS

SET NOCOUNT ON

IF( EXISTS( SELECT * FROM dbo.userRelativeLevelDB WITH( NOLOCK ) WHERE accountIDX = @accountIDX ) )
BEGIN
	UPDATE dbo.userRelativeLevelDB
	   SET reward_State = @reward
	 WHERE accountIDX = @accountIDX
END
ELSE
BEGIN
	RETURN
END
GO


-- ----------------------------
-- procedure structure for manage_coupon_user_use_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_coupon_user_use_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_coupon_user_use_list]
GO

CREATE PROCEDURE [dbo].[manage_coupon_user_use_list]
(
	@couponType varchar(4)
,	@pagesize varchar(8)
,	@notpage varchar(8)
)
AS
	DECLARE @sql varchar(1000)

	SET @sql = 'SELECT TOP ' + @pagesize + ' a.accountIDX, b.nickName, a.sn, a.userIP, a.regDate FROM define_serial a INNER JOIN userMemberDB b ON a.accountIDX = b.accountIDX '
	SET @sql = @sql + 'WHERE a.couponType=' + @couponType + ' and a.accountIDX is not NULL and a.idx not in (SELECT TOP ' + @notpage + ' a.idx FROM define_serial a INNER JOIN userMemberDB b ON a.accountIDX = b.accountIDX WHERE a.couponType=' + @couponType + ' and a.accountIDX is not NULL ORDER BY a.idx DESC) '
	SET @sql = @sql + 'ORDER BY a.idx DESC'

	EXECUTE(@sql)
GO


-- ----------------------------
-- procedure structure for game_guild_intro_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_intro_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_intro_save]
GO

CREATE PROCEDURE [dbo].[game_guild_intro_save]
(
	@guildIDX int
,	@content varchar(110)
)
AS
	UPDATE userGuildDB SET aboutguild=@content WHERE idx=@guildIDX
GO


-- ----------------------------
-- procedure structure for z_nouse_090903_game_region_get_point
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_090903_game_region_get_point]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_090903_game_region_get_point]
GO

CREATE PROCEDURE [dbo].[z_nouse_090903_game_region_get_point]
(
	@regionType int
)
AS

	SELECT SUM(renspoint) FROM userGameDB WHERE regionType=@regionType
GO


-- ----------------------------
-- procedure structure for AGENT_RANKING_LADDER_DAILY
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_RANKING_LADDER_DAILY]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_RANKING_LADDER_DAILY]
GO

CREATE PROCEDURE [dbo].[AGENT_RANKING_LADDER_DAILY]

AS

	UPDATE userRankingDB_hero SET title=0, daily=0 WHERE daily > 0

	IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_temp')
	DROP TABLE userRankingDB_temp

	SELECT a.accountIDX, ROW_NUMBER() OVER(ORDER BY a.ladderEXP DESC, a.accountIDX ASC) AS 'rank' 
	INTO userRankingDB_temp 
	FROM (
		SELECT c.accountIDX, (c.userHerocEXP + c.userHerosEXP) * ((d.type3_win/30) + 1) / ((d.type3_lose/10) + 1) AS 'ladderEXP' 
		FROM userGameDB c WITH(NOLOCK) INNER JOIN userRecordBattleDB d WITH(NOLOCK) ON c.accountIDX=d.accountIDX
		WHERE c.userHerocEXP + c.userHerosEXP > 30
	) a, (
		SELECT accountIDX FROM userMemberDB WITH(NOLOCK) 
		WHERE userType > 20 
	) b
	WHERE a.accountIDX = b.accountIDX

	INSERT INTO userRankingDB_hero (accountIDX, title, daily, dailyB, season1, season2, season3, season4, season5, season6, regDate)
	SELECT accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, 0, getdate() FROM userRankingDB_temp WITH(NOLOCK) WHERE accountIDX not in (SELECT accountIDX FROM userRankingDB_hero WITH(NOLOCK))

	UPDATE a SET daily = b.rank
	FROM (SELECT accountIDX, rank FROM userRankingDB_temp WITH(NOLOCK)) b INNER JOIN userRankingDB_hero a ON a.accountIDX = b.accountIDX

	DELETE FROM userRankingDB_hero WHERE daily=0 and dailyB=0 and season1=0 and season2=0 and season3=0 and season4=0 and season5=0 and season6=0
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_default_url
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_default_url]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_default_url]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_default_url]
(
	@accountIDX int
)
As
	SELECT gameServerID FROM userLoginDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_game_connectionDate
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_game_connectionDate]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_game_connectionDate]
GO

CREATE PROCEDURE [dbo].[web_get_game_connectionDate]
(
	@accountIDX int
)
As
	SELECT connDate FROM userGameDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_relative_reward_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_relative_reward_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_relative_reward_get_data]
GO

CREATE PROCEDURE [dbo].[game_relative_reward_get_data]
(
	@accountIDX int
)
AS

SET NOCOUNT ON

IF ( EXISTS( SELECT * FROM dbo.userRelativeLevelDB WITH( NOLOCK ) WHERE accountIDX = @accountIDX ) )
BEGIN
	SELECT weekend_BackupExp, init_time, reward_State
      FROM dbo.userRelativeLevelDB WITH( NOLOCK )
	 WHERE accountIDX = @accountIDX
END
ELSE
BEGIN
	-- return 0, 0, 0, ... 0
	SELECT 0 AS weekend_BackupExp, 0 AS init_time, 0 AS reward_State
END
GO


-- ----------------------------
-- procedure structure for web_event_1st_anniversary_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_1st_anniversary_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_1st_anniversary_count]
GO

CREATE PROCEDURE [dbo].[web_event_1st_anniversary_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM LosaGame_log.DBO.log_event_1st_anniversary WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_guild_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_get_list]
GO

CREATE PROCEDURE [dbo].[game_guild_get_list]
(
	@topn int
,	@idx int
)
AS

SET NOCOUNT ON

SELECT TOP (@topn) a.idx, a.guildName, a.aboutguild, a.guildmark, a.point, a.maxcount, a.regDate,
       a.membercount, a.todaypoint, a.guildLevel,
	   b.type1_win, b.type1_lose, b.type1_kill, b.type1_death
  FROM dbo.userGuildDB a WITH(NOLOCK)
 INNER JOIN dbo.userRecordGuildDB b WITH(NOLOCK)
    ON a.idx = b.guildIDX
 WHERE a.idx < @idx
 ORDER BY a.idx DESC
GO


-- ----------------------------
-- procedure structure for z_nouse_090903_game_region_get_compen
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_090903_game_region_get_compen]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_090903_game_region_get_compen]
GO

CREATE PROCEDURE [dbo].[z_nouse_090903_game_region_get_compen]
(
	@accountIDX int
)
AS
	SELECT TOP 1 idx, rt1point, rt1count, rt2point, rt2count, regionType, renspoint, regionRanking FROM userRegionDB_compen WHERE accountIDX=@accountIDX ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for AGENT_RANKING_FACTION_WEEK
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_RANKING_FACTION_WEEK]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_RANKING_FACTION_WEEK]
GO

CREATE PROCEDURE [dbo].[AGENT_RANKING_FACTION_WEEK]

AS

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	INSERT INTO userRankingDB_faction (accountIDX)
	SELECT accountIDX FROM userRecordBattleDB WHERE (type2_win + type2_lose) > 0 and accountIDX not in (SELECT accountIDX FROM userRankingDB_faction)

	UPDATE d SET win_prev = c.win_prev, lose_prev = c.lose_prev 
	FROM (
		SELECT a.accountIDX, isnull(b.type2_win,0) - isnull(a.win_fix,0) AS 'win_prev', isnull(b.type2_lose,0) - isnull(a.lose_fix, 0) AS 'lose_prev'
		FROM userRankingDB_faction a INNER JOIN userRecordBattleDB b ON a.accountIDX = b.accountIDX WHERE (b.type2_win + b.type2_lose) > 0
	) c INNER JOIN userRankingDB_faction d ON c.accountIDX = d.accountIDX

	IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_temp')
	DROP TABLE userRankingDB_temp

	SELECT accountIDX, RANK() OVER(ORDER BY (win_prev + tie_prev + lose_prev) DESC, lose_prev ASC) AS 'rank' 
	INTO userRankingDB_temp 
	FROM userRankingDB_faction WHERE (win_prev + tie_prev + lose_prev) > 0

	UPDATE userRankingDB_faction SET rank_prev = 0 WHERE rank_prev > 0

	UPDATE a SET rank_prev = b.rank
	FROM (SELECT accountIDX, rank FROM userRankingDB_temp) b INNER JOIN userRankingDB_faction a ON b.accountIDX = a.accountIDX

	UPDATE userRankingDB_faction SET win_fix = b.win, lose_fix = b.lose
	FROM (SELECT accountIDX, type2_win AS 'win', type2_lose AS 'lose' FROM userRecordBattleDB) b INNER JOIN userRankingDB_faction a ON b.accountIDX = a.accountIDX
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_class_group_rank_data_temp
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_class_group_rank_data_temp]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_class_group_rank_data_temp]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_class_group_rank_data_temp]
(
	@accountIDX int
)
AS
	SELECT classType, nowRanking FROM userRankingDB_class WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_cpType
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_cpType]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_cpType]
GO

CREATE PROCEDURE [dbo].[web_get_cpType]
(
	@accountIDX int
)
AS
	SELECT cpType FROM userMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_relative_ranking_week
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_relative_ranking_week]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_relative_ranking_week]
GO

CREATE PROCEDURE [dbo].[game_relative_ranking_week]
(
	@init_time	int
,	@rate int
)
AS

SET NOCOUNT ON




-- 임시테이블 선언.
DECLARE @temp_table TABLE
(
	ranking INT
,	accountIDX INT
,	tempLevel INT
)



--------------------------------------------------------------------
-- 0. 프로시져 시작 할때 userGameDB 백업 하자.	
--------------------------------------------------------------------
DECLARE @tblName varchar(256), @sql varchar(256)

SET @tblName = '[Backup].dbo.LosaGame_' + convert( varchar(16), @init_time ) + '_userGameDB'
--SET @tblName = 'LosaGameQA.dbo.LosaGame_' + convert( varchar(16), @init_time ) + '_userGameDB'
SET @sql = 'SELECT * INTO ' + @tblName + ' FROM dbo.userGameDB WITH( NOLOCK )'

EXECUTE( @sql )



--------------------------------------------------------------------
-- step 1. 탈퇴 유저 / 장성이 된 유저
--------------------------------------------------------------------

-- 탈퇴 유저 : userRelativeLevelDB 삭제.
DELETE
  FROM dbo.userRelativeLevelDB
 WHERE accountIDX NOT IN
(
	SELECT accountIDX
	  FROM dbo.userGameDB WITH( NOLOCK )
	 WHERE userLevel >= 50
)


-- 장성이 된 유저 : userRelativeLevelDB 추가.
INSERT INTO dbo.userRelativeLevelDB( accountIDX, weekend_BackupLevel, weekend_BackupExp, init_time, reward_State, regDate )
(
	SELECT accountIDX, userLevel, userExp, @init_time, 1, GETDATE()
	  FROM dbo.userGameDB WITH( NOLOCK )
	 WHERE userLevel >= 50
	   AND accountIDX NOT IN
	(
		SELECT accountIDX
		  FROM dbo.userRelativeLevelDB WITH( NOLOCK )
	)
)



--------------------------------------------------------------------
-- step 2. 유저 현재 레벨 백업( update )
--			userRelativeLevelDB.weekend_BackupLevel
--------------------------------------------------------------------

UPDATE dbo.userRelativeLevelDB
   SET weekend_BackupLevel = UG.userLevel
  FROM dbo.userRelativeLevelDB URL WITH( NOLOCK )
  JOIN dbo.userGameDB UG WITH( NOLOCK )
	ON UG.accountIDX = URL.accountIDX
 WHERE UG.userLevel >= 50



--------------------------------------------------------------------
-- step 3. 순위 ( userGameDB.userExp )
--------------------------------------------------------------------

-- 임시 테이블에 장성급 유저를 저장.
INSERT INTO @temp_table( ranking, accountIDX, tempLevel )
(
	SELECT ROW_NUMBER() OVER ( ORDER BY userExp DESC ), accountIDX, 50
	  FROM dbo.userGameDB WITH( NOLOCK )
	 WHERE userLevel >= 50
)




DECLARE @userCount INT
SET @userCount = 0;

-- 장성급 유저 수 구하기.
SELECT @userCount = COUNT(*) FROM @temp_table


-- 변수 선언.
DECLARE @5star INT, @4star INT, @3star INT, @2star INT
DECLARE @LoopCount INT, @LoopLevel INT


-- 장성 유저수
IF( @userCount <= 5 )
	BEGIN
		-- 5명 이하.
		SET @2star = 30;
		SET @LoopCount = 2;
		SET @LoopLevel = 51;	-- 2 star
	END
ELSE IF( @userCount > 5 and @userCount <= 50 )
	BEGIN
		-- 6~50.
		SET @3star = 5
		SET @2star = 25;
		SET @LoopCount = 3;
		SET @LoopLevel = 52;	-- 3 start	
	END
ELSE IF( @userCount > 50 and @userCount <= 80 )
	BEGIN
		-- 51~80.
		SET @4star = 2
		SET @3star = 3
		SET @2star = 25;
		SET @LoopCount = 4;
		SET @LoopLevel = 53;	-- 4 start
	END
ELSE IF( @userCount > 80 )
	BEGIN
		-- 81.
		SET @5star = 1
		SET @4star = 2
		SET @3star = 3
		SET @2star = 24;
		SET @LoopCount = 5;
		SET @LoopLevel = 54;	-- 5 start
	END

-- 반복문
WHILE( @LoopCount > 0 )
BEGIN

	IF( @LoopCount = 1 )
		BEGIN
			-- 소장은 나머지 인원이 된다.
			UPDATE @temp_table
			   SET tempLevel = @LoopLevel
			 WHERE tempLevel = 0
		END
	ELSE
		BEGIN
			-- %로 인원 계산하기 위해
			DECLARE @percent INT;
			SET @percent = 
				CASE
					WHEN ( @LoopCount = 2 ) THEN @2star
					WHEN ( @LoopCount = 3 ) THEN @3star
					WHEN ( @LoopCount = 4 ) THEN @4star
					WHEN ( @LoopCount = 5 ) THEN @5star
				END

			DECLARE @userCNT INT;
			SET @userCNT = 0;

			-- 소수점 버림.
			SELECT @userCNT = FLOOR( @userCount * 1. * @percent / 100 );

			IF( @userCNT > 0 )
				BEGIN
					-- 임시테이블 update.
					UPDATE @temp_table
					   SET tempLevel = @LoopLevel
					 WHERE accountIDX IN
					(
						-- 경험치 위에서 부터 순위
						SELECT TOP( @userCNT ) accountIDX
						  FROM @temp_table
						 WHERE tempLevel = 0
						 ORDER BY ranking
					)
				END
		END

	SET @LoopLevel = @LoopLevel - 1;
	SET @LoopCount = @LoopCount - 1;

END

-- 최종업데이트 : 임시테이블의 tempLevel 을 userGameDB.userLevel 에 업데이트
UPDATE b
   SET userLevel = a.tempLevel
  FROM
(
	SELECT * FROM @temp_table
) a
  join userGameDB b WITH( NOLOCK )
	ON a.accountIDX = b.accountIDX
 WHERE b.userlevel >= 50



--------------------------------------------------------------------
-- 4. 경험치 비교( userGameDB.userExp <> 
--		userRelativeLevelDB.weekend_BackupExp
--		userRelativeLevelDB.reward_State 갱신
--------------------------------------------------------------------

-- 플레이 한 유저
UPDATE dbo.userRelativeLevelDB
   SET reward_State = 1
 WHERE accountIDX in
(
	SELECT URL.accountIDX
	  FROM dbo.userRelativeLevelDB URL WITH( NOLOCK ),
		   dbo.userGameDB UG WITH( NOLOCK )
	 WHERE UG.userLevel >= 50
       AND UG.userExp <> URL.weekend_BackupExp
)

-- 플레이 안한 유저는 0으로 
UPDATE dbo.userRelativeLevelDB
   SET reward_State = 0
 WHERE accountIDX in
(
	SELECT URL.accountIDX
	  FROM dbo.userRelativeLevelDB URL WITH( NOLOCK ),
		   dbo.userGameDB UG WITH( NOLOCK )
	 WHERE UG.userLevel >= 50
       AND UG.userExp = URL.weekend_BackupExp
)

--------------------------------------------------------------------
-- 5. 경험치 차감 userGameDB.userExp
--		: init_time 비교하여 중복 차감을 방지한다.
--		: 경험치 % 차감 계산시 소수점 자리는 버림으로 계산한다.
--------------------------------------------------------------------
UPDATE dbo.userGameDB
   SET userExp = userExp - FLOOR( ( userExp * 1. * @rate ) / 100 )
 WHERE userLevel >= 50
   AND accountIDX in
(
	SELECT accountIDX
	  FROM dbo.userRelativeLevelDB WITH( NOLOCK )
	 WHERE init_time <> @init_time
)


-- 바로 init_time 업데이트 해줘야 한다.
UPDATE dbo.userRelativeLevelDB
   SET init_time = @init_time
 WHERE accountIDX in
(
	SELECT accountIDX
	  FROM dbo.userRelativeLevelDB WITH( NOLOCK )
	 WHERE init_time <> @init_time
) 



--------------------------------------------------------------------
-- 6. 경험치 백업 userGameDB.userExp -> 
--			userRelativeLevelDB.weekend_BackupExp
--------------------------------------------------------------------

UPDATE dbo.userRelativeLevelDB
   SET weekend_BackupExp = UG.userExp
  FROM dbo.userRelativeLevelDB URL WITH( NOLOCK )
  JOIN dbo.userGameDB UG WITH( NOLOCK )
	ON UG.accountIDX = URL.accountIDX
 WHERE UG.userLevel >= 50
GO


-- ----------------------------
-- procedure structure for web_event_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_count]
GO

CREATE PROCEDURE [dbo].[web_event_count]
(
	@accountIDX int
,	@eventType smallint
)
AS
	SELECT count(*) FROM LosaGame_log.DBO.log_event WHERE accountIDX=@accountIDX and eventType=@eventType
GO


-- ----------------------------
-- procedure structure for game_guild_fail_add_peso
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_fail_add_peso]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_fail_add_peso]
GO

CREATE PROCEDURE [dbo].[game_guild_fail_add_peso]
(
	@accountIDX int
,	@peso int
)
AS

	UPDATE userGameDB SET gameMoney = gameMoney + @peso WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for z_nouse_090903_game_region_backup_compen
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_090903_game_region_backup_compen]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_090903_game_region_backup_compen]
GO

CREATE PROCEDURE [dbo].[z_nouse_090903_game_region_backup_compen]

AS

	DECLARE @tblName varchar(100), @sql varchar(300), @limitRenpoint int
	DECLARE @i tinyint, @rtn bit, @tcount tinyint

	SET @i = 65
	SET @rtn = 0
	SET @limitRenpoint = DBO.DEFINE_REGION_LIMIT_RENSPOINT()

	WHILE (@rtn = 0)
	BEGIN
		SET @tblName = 'LosaGame_' + RTrim(substring(convert(varchar(10), getdate(), 112),3,10)) + '_userRegionDB_compen_se_' + char(@i)
		SET @tcount = (SELECT count(*) FROM [Backup].DBO.sysobjects WHERE [uid]=1 and xtype='U' and [name]=@tblName)

		If (@tcount = 0)
			SET @rtn = 1
		ELSE
			SET @i = @i + 1
	END

	SET @sql = 'SELECT accountIDX, rt1point, rt1count, rt2point, rt2count, regionType, renspoint, regDate INTO [Backup].DBO.' + @tblName + ' FROM userRegionDB_compen WHERE regDate > ''' + Left(getdate(), 10) + ''''
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for AGENT_RANKING_FACTION_DAILY
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_RANKING_FACTION_DAILY]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_RANKING_FACTION_DAILY]
GO

CREATE PROCEDURE [dbo].[AGENT_RANKING_FACTION_DAILY]

AS

	INSERT INTO userRankingDB_faction (accountIDX)
	SELECT accountIDX FROM userRecordBattleDB WITH(NOLOCK) WHERE (type2_win + type2_lose) > 0 and 
	accountIDX not in (SELECT accountIDX FROM userRankingDB_faction WITH(NOLOCK))

	-- rank_total
	IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_temp')
	DROP TABLE userRankingDB_temp

	SELECT a.accountIDX, RANK() OVER(ORDER BY (a.type2_win + a.type2_lose) DESC, a.type2_lose ASC) AS 'rank' 
	INTO userRankingDB_temp 
	FROM (
		SELECT accountIDX, type2_win, type2_lose FROM userRecordBattleDB WITH(NOLOCK) WHERE (type2_win + type2_lose) > 0
	) a, (
		SELECT accountIDX FROM userMemberDB WITH(NOLOCK) 
		WHERE userType > 20
	) b 
	WHERE a.accountIDX = b.accountIDX

	UPDATE userRankingDB_faction SET rank_total = 0 WHERE rank_total > 0

	UPDATE userRankingDB_faction SET rank_total = b.rank 
	FROM (SELECT accountIDX, rank FROM userRankingDB_temp WITH(NOLOCK)) b INNER JOIN userRankingDB_faction a WITH(NOLOCK) ON b.accountIDX = a.accountIDX

	-- rank_now
	IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_temp')
	DROP TABLE userRankingDB_temp

	SELECT a.accountIDX, RANK() OVER(ORDER BY (isnull(a.type2_win,0) - isnull(b.win_fix,0)) + (isnull(a.type2_lose,0) - isnull(b.lose_fix,0)) DESC, (isnull(a.type2_lose,0) - isnull(b.lose_fix,0)) ASC, a.accountIDX ASC) AS 'rank' 
	INTO userRankingDB_temp 
	FROM userRecordBattleDB a WITH(NOLOCK) INNER JOIN userRankingDB_faction b WITH(NOLOCK) ON a.accountIDX = b.accountIDX 
	WHERE (isnull(a.type2_win,0) - isnull(b.win_fix,0)) + (isnull(a.type2_lose,0) - isnull(b.lose_fix,0)) > 0 

	UPDATE userRankingDB_faction SET rank_now = 0 WHERE rank_now > 0

	UPDATE userRankingDB_faction SET rank_now = b.rank 
	FROM (SELECT accountIDX, rank FROM userRankingDB_temp WITH(NOLOCK)) b INNER JOIN userRankingDB_faction a WITH(NOLOCK) ON b.accountIDX = a.accountIDX

	-- rank_faction
	IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_temp')
	DROP TABLE userRankingDB_temp

	SELECT a.accountIDX, RANK() OVER(ORDER BY ((convert(bigint, a.type2_win) + a.type2_lose) * (a.type2_kill))/(a.type2_kill + a.type2_death) DESC, a.type2_kill ASC) AS 'rank' 
	INTO userRankingDB_temp 
	FROM (
		SELECT accountIDX, type2_win, type2_lose, type2_kill, type2_death FROM userRecordBattleDB WHERE (type2_win + type2_lose) > 0 and (type2_kill + type2_death) > 0
	) a, (
		SELECT accountIDX FROM userMemberDB WITH(NOLOCK) 
		WHERE userType > 20
	) b 
	WHERE a.accountIDX = b.accountIDX

	UPDATE userRankingDB_faction SET rank_faction = 0 WHERE rank_faction > 0

	UPDATE userRankingDB_faction SET rank_faction = b.rank
	FROM (SELECT accountIDX, rank FROM userRankingDB_temp WITH(NOLOCK)) b INNER JOIN userRankingDB_faction a WITH(NOLOCK) ON b.accountIDX = a.accountIDX
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_class_group_rank_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_class_group_rank_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_class_group_rank_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_class_group_rank_data]
(
	@accountIDX int
)
AS
	SELECT classType, nowRanking FROM userRankingDB_class WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_classHanName
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_classHanName]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_classHanName]
GO

CREATE PROCEDURE [dbo].[web_get_classHanName]
(
	@classType int
)
AS
	SELECT classHanName FROM define_class WITH(NOLOCK) WHERE idx=@classType
GO


-- ----------------------------
-- procedure structure for game_relative_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_relative_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_relative_add]
GO

CREATE PROCEDURE [dbo].[game_relative_add]
(
	@accountIDX int
)
AS

SET NOCOUNT ON

IF( EXISTS( SELECT * FROM dbo.userRelativeLevelDB WITH( NOLOCK ) WHERE accountIDX = @accountIDX ) )
BEGIN
	RETURN
END
ELSE
BEGIN
	INSERT INTO dbo.userRelativeLevelDB ( accountIDX, weekend_BackupLevel, weekend_BackupExp, init_time, reward_State, regDate )
	VALUES( @accountIDX, 50, 0, 0, 0, GETDATE() )
END
GO


-- ----------------------------
-- procedure structure for web_realmember_agree_log_get_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_realmember_agree_log_get_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_realmember_agree_log_get_info]
GO

CREATE PROCEDURE [dbo].[web_realmember_agree_log_get_info]
(
	@idx int
)
AS
	SELECT accountIDX, agreeSDate, agreeEDate, userKey, permitType, regDate FROM Losagame_log.DBO.log_agree WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_guild_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_delete]
GO

CREATE PROCEDURE [dbo].[game_guild_delete]
(
	@guildIDX int
)
AS
	DELETE FROM userGuildDB WHERE idx=@guildIDX
	DELETE FROM userGuildInfoDB WHERE guildIDX=@guildIDX
GO


-- ----------------------------
-- procedure structure for wemade_userinfo_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[wemade_userinfo_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[wemade_userinfo_get_list]
GO

CREATE PROCEDURE [dbo].[wemade_userinfo_get_list]
(
	@searchType int
,	@searchString nvarchar(64)
)

AS

	SET NOCOUNT ON

	IF (@searchType = 2)
	BEGIN
		SELECT a.userID, b.userName, b.realType, b.userJumin1, b.userJumin2, b.userEnCode, c.tel, c.mobile, a.cpType, a.joinType
		FROM userMemberDB a WITH(NOLOCK)
			 LEFT JOIN userNameDB b WITH(NOLOCK) ON a.accountIDX=b.accountIDX
			 LEFT JOIN userInfoBDB c WITH(NOLOCK) ON a.accountIDX=c.accountIDX
		WHERE b.userEnCode=@searchString
	END
	ELSE IF (@searchType = 1)
	BEGIN
		SELECT a.userID, b.userName, b.realType, b.userJumin1, b.userJumin2, b.userEnCode, c.tel, c.mobile, a.cpType, a.joinType
		FROM userMemberDB a WITH(NOLOCK)
			 LEFT JOIN userNameDB b WITH(NOLOCK) ON a.accountIDX=b.accountIDX
			 LEFT JOIN userInfoBDB c WITH(NOLOCK) ON a.accountIDX=c.accountIDX
		WHERE a.userID=@searchString
	END
	ELSE IF (@searchType = 3)
	BEGIN
		SELECT a.userID, b.userName, b.realType, b.userJumin1, b.userJumin2, b.userEnCode, c.tel, c.mobile, a.cpType, a.joinType
		FROM userMemberDB a WITH(NOLOCK)
			 LEFT JOIN userNameDB b WITH(NOLOCK) ON a.accountIDX=b.accountIDX
			 LEFT JOIN userInfoBDB c WITH(NOLOCK) ON a.accountIDX=c.accountIDX
		WHERE b.userName=@searchString
	END
	ELSE IF (@searchType = 4)
	BEGIN
		SELECT a.userID, b.userName, b.realType, b.userJumin1, b.userJumin2, b.userEnCode, c.tel, c.mobile, a.cpType, a.joinType
		FROM userMemberDB a WITH(NOLOCK)
			 LEFT JOIN userNameDB b WITH(NOLOCK) ON a.accountIDX=b.accountIDX
			 LEFT JOIN userInfoBDB c WITH(NOLOCK) ON a.accountIDX=c.accountIDX
		WHERE c.mobile=@searchString
	END
	ELSE IF (@searchType = 5)
	BEGIN
		SELECT TOP 300 a.userID, b.userName, b.realType, b.userJumin1, b.userJumin2, b.userEnCode, c.tel, c.mobile, a.cpType, a.joinType
		FROM userMemberDB a WITH(NOLOCK)
			 LEFT JOIN userNameDB b WITH(NOLOCK) ON a.accountIDX=b.accountIDX
			 LEFT JOIN userInfoBDB c WITH(NOLOCK) ON a.accountIDX=c.accountIDX
		WHERE a.email=@searchString
	END
GO


-- ----------------------------
-- procedure structure for AGENT_RANKING_CLASS_TOP100
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_RANKING_CLASS_TOP100]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_RANKING_CLASS_TOP100]
GO

CREATE PROCEDURE [dbo].[AGENT_RANKING_CLASS_TOP100]
AS

SET NOCOUNT ON

IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_class_top100')
DROP TABLE userRankingDB_class_top100

CREATE TABLE userRankingDB_class_top100
(
	idx			int	IDENTITY(1,1)	NOT	NULL
,	accountIDX	int				NOT	NULL
,	nickName		varchar(20)		NULL
,	userLevel		int				NULL
,	guildIDX		int				NULL
,	classType		int				NOT	NULL		DEFAULT(0)
,	rank_prev		int				NOT	NULL		DEFAULT(0)
,	rank_now		int				NOT	NULL		DEFAULT(0)
,	classLevel		int				NOT	NULL		DEFAULT(0)
,	classEXP		int				NOT	NULL		DEFAULT(0)
)
Create  Clustered  Index idx_idx On userRankingDB_class_top100 (idx)
Create  Index idx_classType On userRankingDB_class_top100 (classType)
Create  Index idx_guildIDX On userRankingDB_class_top100 (guildIDX)

INSERT INTO userRankingDB_class_top100 (accountIDX, classType, rank_prev, rank_now, classLevel, classEXP)
SELECT accountIDX, classType, prevRanking, nowRanking, userLevel, expert FROM userRankingDB_class WITH(NOLOCK) WHERE nowRanking <= 100

UPDATE a SET nickName = b.nickName 
FROM (
	SELECT accountIDX, nickName FROM userMemberDB WITH(NOLOCK)
) b JOIN userRankingDB_class_top100 a ON b.accountIDX = a.accountIDX

UPDATE a SET userLevel = b.userLevel 
FROM (
	SELECT accountIDX, userLevel FROM userGameDB WITH(NOLOCK)
) b JOIN userRankingDB_class_top100 a ON b.accountIDX = a.accountIDX

UPDATE a SET guildIDX = b.guildIDX 
FROM (
	SELECT accountIDX, guildIDX, guildJoinType FROM userGuildInfoDB WITH(NOLOCK)
) b JOIN userRankingDB_class_top100 a ON b.accountIDX = a.accountIDX WHERE b.guildJoinType=1
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_class_group_class_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_class_group_class_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_class_group_class_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_class_group_class_data]
(
	@accountIDX int
)
As
	SELECT	class1_type, class1_level, class1_expert, class2_type, class2_level, class2_expert, class3_type, class3_level, class3_expert,
			class4_type, class4_level, class4_expert, class5_type, class5_level, class5_expert, class6_type, class6_level, class6_expert,
			class7_type, class7_level, class7_expert, class8_type, class8_level, class8_expert, class9_type, class9_level, class9_expert,
			class10_type, class10_level, class10_expert 
	FROM userClassDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_cash
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_cash]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_cash]
GO

CREATE PROCEDURE [dbo].[web_get_cash]
(
	@accountIDX int
)
As
	SELECT amtCash FROM userCashDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_region_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_region_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_region_save]
GO

CREATE PROCEDURE [dbo].[game_region_save]
(
	@rt1point int
,	@rt1point_today int
,	@rt1point_bonus int
,	@rt2point int
,	@rt2point_today int
,	@rt2point_bonus int
)
AS
	UPDATE userRegionDB SET
		rt1point = @rt1point
,		rt1point_today = @rt1point_today
,		rt1point_bonus = @rt1point_bonus
,		rt2point = @rt2point
,		rt2point_today = @rt2point_today
,		rt2point_bonus = @rt2point_bonus
GO


-- ----------------------------
-- procedure structure for manage_login_error_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_login_error_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_login_error_add]
GO

CREATE PROCEDURE [dbo].[manage_login_error_add]
(
	@logType int
,	@content varchar(2000)
,	@connIP varchar(16)
)
AS
	INSERT INTO LosaGame_log.DBO.log_admin_page (logType, content, connIP, regDate)
	VALUES (@logType,@content,@connIP,getdate())
GO


-- ----------------------------
-- procedure structure for game_guild_create_guild
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_create_guild]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_create_guild]
GO

CREATE PROCEDURE [dbo].[game_guild_create_guild]
(
	@accountIDX int
,	@guildName varchar(20)
,	@aboutguild varchar(110)
,	@guildmark int
,	@maxcount int
)
AS

	SET XACT_ABORT ON

	DECLARE @cnt int, @errcount int, @guildIDX int, @masterIDX int

	SET @cnt = 0
	SET @errcount = 0

	SET @cnt = (SELECT count(*) FROM userGuildDB WHERE guildName=@guildName)
	if (@cnt > 0)
	BEGIN
		SET @errcount = 2
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @cnt = (SELECT count(*) FROM userGuildInfoDB WHERE accountIDX=@accountIDX and guildJoinType > 0)
	if (@cnt > 0)
	BEGIN
		SET @errcount = 3
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	BEGIN TRAN

	if (@errcount = 0)
	BEGIN
		SELECT 1 AS 'returnVal'

		DELETE FROM userGuildInfoDB WHERE accountIDX = @accountIDX

		INSERT INTO userGuildDB (guildName, aboutguild, guildmark, ranking, point, todaypoint, guildLevel, maxcount, membercount, regDate)
		VALUES (@guildName, @aboutguild, @guildmark, 0, 0, 0, 0, @maxcount, 1, GETDATE())

		SET @guildIDX = (SELECT idx FROM userGuildDB WHERE guildName=@guildName)

		INSERT INTO userGuildInfoDB (accountIDX, guildIDX, guildPosition, guildJoinType, regDate)
		VALUES (@accountIDX, @guildIDX, '길드장', 1, GETDATE())

		INSERT INTO userRecordGuildDB (guildIDX, type1_win, type1_lose, type1_kill, type1_death, regDate)
		VALUES (@guildIDX, 0, 0, 0, 0, GETDATE())

	END

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for wemade_userinfo_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[wemade_userinfo_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[wemade_userinfo_get_data]
GO

CREATE PROCEDURE [dbo].[wemade_userinfo_get_data]
(
	@userID nvarchar(12)
)
AS

	SELECT a.userID, a.cpType, b.userName, b.realType, b.userJumin1, b.userJumin2, b.userEnCode, a.regDate, c.tel, c.mobile, a.email, c.zipcode, c.address1, c.address2
	FROM userMemberDB a WITH(NOLOCK)
		 LEFT JOIN userNameDB b WITH(NOLOCK) ON a.accountIDX=b.accountIDX
		 LEFT JOIN userInfoBDB c WITH(NOLOCK) ON a.accountIDX=c.accountIDX
	WHERE a.userID=@userID
GO


-- ----------------------------
-- procedure structure for AGENT_RANKING_CLASS_GROUP_TOP10000
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_RANKING_CLASS_GROUP_TOP10000]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_RANKING_CLASS_GROUP_TOP10000]
GO

CREATE PROCEDURE [dbo].[AGENT_RANKING_CLASS_GROUP_TOP10000]
AS

SET NOCOUNT ON

IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_classgroup_top10000')
DROP TABLE userRankingDB_classgroup_top10000

CREATE TABLE userRankingDB_classgroup_top10000
(
	idx			int	IDENTITY(1,1)	NOT	NULL
,	accountIDX	int				NOT	NULL
,	nickName		nvarchar(20)		NULL
,	userLevel		int				NOT	NULL
,	expert		int				NOT	NULL
,	rank_now		int				NOT	NULL
,	rank_prev		int				NOT	NULL
,	guildIDX		int				NULL
,	guildName		nvarchar(20)		NULL
,	guildMark		int				NULL
,	regDate		datetime			NOT	NULL
)
Create  Clustered  Index idx_idx On userRankingDB_classgroup_top10000 (idx)
Create  Index idx_accountIDX On userRankingDB_classgroup_top10000 (accountIDX)

INSERT INTO userRankingDB_classgroup_top10000 (accountIDX, userLevel, expert, rank_now, rank_prev, regDate)
SELECT TOP 10000 accountIDX, userLevel, expert, ranking_1day, ranking_2day, getdate() FROM userRankingDB_classgroup WITH(NOLOCK) ORDER BY ranking_1day ASC

UPDATE a SET nickName = b.nickName 
FROM (
	SELECT accountIDX, nickName FROM userMemberDB WITH(NOLOCK)
) b JOIN userRankingDB_classgroup_top10000 a ON b.accountIDX = a.accountIDX

UPDATE a SET guildIDX = b.guildIDX 
FROM (
	SELECT accountIDX, guildIDX, guildJoinType FROM userGuildInfoDB WITH(NOLOCK)
) b JOIN userRankingDB_classgroup_top10000 a ON b.accountIDX = a.accountIDX WHERE b.guildJoinType=1

UPDATE a SET guildName = b.guildName, guildMark = b.guildmark 
FROM (
	SELECT idx, guildName, guildMark FROM userGuildDB WITH(NOLOCK)
) b JOIN userRankingDB_classgroup_top10000 a ON b.idx = a.guildIDX
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_battle_record_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_battle_record_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_battle_record_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_battle_record_data]
(
	@accountIDX int
)
AS
	SELECT a.userLevel, b.type1_kill, b.type1_death, b.type2_kill, b.type2_death, b.type3_kill, b.type3_death, b.type4_kill, b.type4_death 
	FROM userGameDB a JOIN userRecordBattleDB b ON a.accountIDX=b.accountIDX WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_accountIDX_to_nickname
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_accountIDX_to_nickname]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_accountIDX_to_nickname]
GO

CREATE PROCEDURE [dbo].[web_get_accountIDX_to_nickname]
(
	@nickName varchar(20)
)
As
	SELECT accountIDX FROM userMemberDB WITH(NOLOCK) WHERE nickName = @nickName
GO


-- ----------------------------
-- procedure structure for game_region_player_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_region_player_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_region_player_count]
GO

CREATE PROCEDURE [dbo].[game_region_player_count]
(
	@regionType int
)
AS

SET NOCOUNT ON

DECLARE @limitRenpoint int
SET @limitRenpoint = DBO.DEFINE_REGION_LIMIT_RENSPOINT()

SELECT count(*)
  FROM dbo.userGameDB WITH(NOLOCK)
 WHERE regionType=@regionType
   AND renspoint > @limitRenpoint
GO


-- ----------------------------
-- procedure structure for game_mannerpoint_log_get_receiveIDX_from_tableIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_mannerpoint_log_get_receiveIDX_from_tableIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_mannerpoint_log_get_receiveIDX_from_tableIDX]
GO

CREATE PROCEDURE [dbo].[game_mannerpoint_log_get_receiveIDX_from_tableIDX]
(
	@idx varchar(200)
)
AS
	DECLARE @strSQL varchar(1000)

	SET @strSQL = 'SELECT receiveIDX FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK) WHERE idx in (' + @idx + ')'
	EXECUTE (@strSQL)
GO


-- ----------------------------
-- procedure structure for game_guild_change_max_capacity
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_change_max_capacity]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_change_max_capacity]
GO

CREATE PROCEDURE [dbo].[game_guild_change_max_capacity]
(
	@guildIDX int
,	@n int
)
AS
	DECLARE @membercount int, @maxcount int, @guildLevel int
	SET @membercount = (SELECT count(*) FROM userGuildInfoDB WITH(NOLOCK) WHERE guildIDX=@guildIDX and guildJoinType=1)
	SET @guildLevel = (SELECT guildLevel FROM userGuildDB WITH(NOLOCK) WHERE idx=@guildIDX)

	IF (@membercount > @n)
	BEGIN
		SET @n = @membercount
	END

	SET @maxcount = @guildLevel * 8

	IF (@maxcount = 0)
		SET @maxcount = 8
	ELSE IF (@maxcount > 32)
		SET @maxcount = 32

	IF (@maxcount < @n)
	BEGIN
		SET @n = @maxcount
	END

	SELECT @n AS 'returnVal'
	UPDATE userGuildDB SET membercount=@membercount, maxcount=@n WHERE idx=@guildIDX
GO


-- ----------------------------
-- procedure structure for web_recommend_point_save_dec
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_recommend_point_save_dec]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_recommend_point_save_dec]
GO

CREATE PROCEDURE [dbo].[web_recommend_point_save_dec]
(
	@accountIDX int
,	@point int
)
AS
	if (@point = 0)
	BEGIN
		UPDATE userInfoDB SET rec_inc=0, rec_dec=-1 WHERE accountIDX = @accountIDX
	END
	else
	BEGIN
		UPDATE userInfoDB SET rec_dec=rec_dec-1 WHERE accountIDX = @accountIDX
	END
GO


-- ----------------------------
-- procedure structure for USP_LTS_WEEKTIME_PARENT_CHILD_CINFO
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_CINFO]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_CINFO]
GO

CREATE PROCEDURE [dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_CINFO]
	@strUserID			varchar(25),		-- 자녀_계정 고유 일련번호
	@strAgreeType		char(1)		-- 동의여부(N : 미수락, S : 본인자신수락, Y : 동의수락, I : 동의요청중, C : 동의취소) 
AS
/*
	Grant Execute on dbo.USP_LTS_WEEKTIME_PARENT_CHILD_CINFO to Mirusr_1
*/
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- 전체 검색
	IF Len(@strAgreeType) > 0
		BEGIN
			Select 
				C.*, M.*, N.userName, N.userBirthday, N.userNumber
			From (
				Select 
					PARENT_ID, CHILD_ID, Agree_Type, CONVERT(VARCHAR(10), AgreeDate, 121) AS AgreeDate, RegIP, CONVERT(VARCHAR(10), RegDate, 121) AS RegDate
				From TB_LTS_WEEKTIME_PARENT_CHILD_INFO with (noLock)
				Where CHILD_ID = @strUserID
				And Agree_Type = @strAgreeType
			) As C
			INNER JOIN dbo.userMemberDB M WITH(NOLOCK) 
			ON C.CHILD_ID = M.userID
			INNER JOIN dbo.userNameDB N WITH (NOLOCK)
			ON M.accountIDX = N.accountIDX 
		END 
	ELSE 
		BEGIN
			Select 
				C.*, M.*, N.userName, N.userBirthday, N.userNumber
			From (
				Select 
					PARENT_ID, CHILD_ID, Agree_Type, CONVERT(VARCHAR(10), AgreeDate, 121) AS AgreeDate, RegIP, CONVERT(VARCHAR(10), RegDate, 121) AS RegDate
				From TB_LTS_WEEKTIME_PARENT_CHILD_INFO with (noLock)
				Where CHILD_ID = @strUserID
				And Agree_Type <> 'S'
			) As C
			INNER JOIN dbo.userMemberDB M WITH(NOLOCK) 
			ON C.CHILD_ID = M.userID
			INNER JOIN dbo.userNameDB N WITH (NOLOCK)
			ON M.accountIDX = N.accountIDX 
		END 

	SET NOCOUNT OFF;
END
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_battle_rank_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_battle_rank_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_battle_rank_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_battle_rank_data]
(
	@accountIDX int
)
As
	SELECT win_fix, tie_fix, lose_fix, win_prev, tie_prev, lose_prev, rank_prev, rank_now, rank_total, rank_battle 
	FROM userRankingDB_battle WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_accountIDX_to_naverIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_accountIDX_to_naverIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_accountIDX_to_naverIDX]
GO

CREATE PROCEDURE [dbo].[web_get_accountIDX_to_naverIDX]
(
	@naverIDX int
)
As
	SELECT accountIDX, cpID FROM userCooperationDB WITH(NOLOCK) WHERE note=@naverIDX and cpType=600
GO


-- ----------------------------
-- procedure structure for game_region_init_renspoint
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_region_init_renspoint]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_region_init_renspoint]
GO

CREATE PROCEDURE [dbo].[game_region_init_renspoint]

AS
/*
	DECLARE @tblName varchar(100), @sql varchar(300), @rndkey varchar(4), @limitRenpoint int
	SET @rndkey = (SELECT LEFT(NEWID(), 4))
	SET @tblName = '[Backup].DBO.LosaGame_' + RTrim(substring(convert(varchar(10), getdate(), 112),3,10)) + '_userGameDB_season_end_' + @rndkey

	SET @limitRenpoint = DBO.DEFINE_REGION_LIMIT_RENSPOINT()

	SET @sql = 'SELECT accountIDX, gameMoney, userLevel, userEXP, rencpoint, renspoint INTO ' + @tblName + ' FROM userGameDB WHERE renspoint > ' + @limitRenpoint
	EXECUTE (@sql)
*/
	UPDATE userGameDB SET renspoint=0 WHERE renspoint > 0
GO


-- ----------------------------
-- procedure structure for game_present_get_list_dahyuk
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_present_get_list_dahyuk]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_present_get_list_dahyuk]
GO

CREATE PROCEDURE [dbo].[game_present_get_list_dahyuk]
(
	@idx varchar(10)
,	@receiveIDX varchar(12)
,	@topN int
)
AS

	declare @sql NVARCHAR(4000)
	declare @parmDefinition NVARCHAR(2000)

	
	SET @sql = N'SELECT top (@topN_In) a.idx, a.sendIDX, isNull(b.nickName, ''탈퇴 회원''), a.presentType, 
		a.value1, a.value2, a.value3, a.value4, a.msgType, a.flag, a.limitDate 	
		FROM userPresentDB a with(nolock)  Left join userMemberDB b with(nolock) on a.sendIDX = b.accountIDX 
		WHERE a.receiveIDX = @receiveIDX_In  and a.idx > @idx_In  order by a.idx asc'

	set @ParmDefinition = N'@receiveIDX_In varchar(12),@idx_In varchar(10), @topN_In int'

execute sp_executesql @sql, @ParmDefinition, @receiveIDX_In=@receiveIDX, @idx_In=@idx, @topN_In = @topN
GO


-- ----------------------------
-- procedure structure for game_guild_change_master
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_change_master]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_change_master]
GO

CREATE PROCEDURE [dbo].[game_guild_change_master]
(
	@masterIDX int
,	@changeIDX int
,	@guildIDX int
)
AS

	SET XACT_ABORT ON
	BEGIN TRAN

	UPDATE userGuildInfoDB SET guildPosition='길드장', msg=4 WHERE guildIDX=@guildIDX and accountIDX=@changeIDX
	UPDATE userGuildInfoDB SET guildPosition='길드원' WHERE guildIDX=@guildIDX and accountIDX=@masterIDX

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for web_recommend_mypoint_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_recommend_mypoint_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_recommend_mypoint_save]
GO

CREATE PROCEDURE [dbo].[web_recommend_mypoint_save]
(
	@accountIDX int
,	@point smallint
,	@pointType varchar(4)
)
As
	if (@pointType = 'inc')
		UPDATE userInfoDB SET rec_inc = rec_inc + @point WHERE accountIDX=@accountIDX
	else if (@pointType = 'dec')
		UPDATE userInfoDB SET rec_dec = rec_dec + @point WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for USP_LTS_WEEKTIME_PARENT_CHILD_AGREE_UPD
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_AGREE_UPD]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_AGREE_UPD]
GO

CREATE PROCEDURE [dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_AGREE_UPD] 
	-- Add the parameters for the stored procedure here
	@strPUserID		varchar(25),		-- 부모_계정 고유 일련번호
	@strCUserID		varchar(25),		-- 자녀_계정 고유 일련번호	
	@strAgreeType		char(1)			-- 동의여부(N : 미수락, S : 본인자신수락, Y : 동의수락, I : 동의요청중, C : 동의취소) 
AS
/*
	Grant Execute on dbo.USP_LTS_WEEKTIME_PARENT_CHILD_AGREE_UPD to Mirusr_1
*/
BEGIN
	-- 동의 요청인 경우 
	IF @strAgreeType = 'Y' 
	BEGIN 
		-- 이미 동의한 경우 
		IF EXISTS ( SELECT * 
			      FROM dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO WITH (NOLOCK)
			     WHERE CHILD_ID = @strCUserID
			       AND Agree_Type = 'Y'
		)
		BEGIN
			RETURN (-5)
		END 
	END 

	-- 부모동의 요청중인 경우
	IF EXISTS ( SELECT * 
		      FROM dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO WITH (NOLOCK)
		     WHERE PARENT_ID = @strPUserID
		       AND CHILD_ID = @strCUserID
		       AND Agree_Type = 'I'
	)
	BEGIN
		-- 트랜잭션 시작
		BEGIN TRAN
			-- SELF 설정인 데이터 삭제
			DELETE 
			  FROM dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO
			 WHERE CHILD_ID = @strCUserID
			   AND Agree_Type = 'S'

			IF @@ERROR <> 0
			BEGIN
				ROLLBACK TRAN
				RETURN (-2)
			END

			-- 부모동의 수락/취소 
			UPDATE dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO
			   SET Agree_Type = @strAgreeType,
			       AgreeDate = GETDATE()
			 WHERE PARENT_ID = @strPUserID
			   AND CHILD_ID = @strCUserID
			   AND Agree_Type = 'I'

			IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
			BEGIN
				ROLLBACK TRAN
				RETURN (-3)
			END

			-- 동의 수락일 경우 자녀의 게임별 설정 시간 제거
			IF @strAgreeType = 'Y' 
			Begin
				-- 자녀의 게임별 설정 시간 제거
				DELETE 
				  FROM dbo.TB_LTS_WEEKTIME
				 WHERE UserId = @strCUserID

				IF @@ERROR <> 0
				BEGIN
					ROLLBACK TRAN
					RETURN (-4)
				END
			END

		COMMIT TRAN
		RETURN (1)
	END 
	ELSE
	BEGIN
		RETURN (-1)
	END
END
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_battle_game_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_battle_game_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_battle_game_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_battle_game_data]
(
	@accountIDX int
)
As
	SELECT	type1_win AS 'win'
,			type1_lose AS 'lose'
,			type1_kill AS 'kill'
,			type1_death AS 'death'
	FROM userRecordBattleDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_accountIDX_to_cpID
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_accountIDX_to_cpID]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_accountIDX_to_cpID]
GO

CREATE PROCEDURE [dbo].[web_get_accountIDX_to_cpID]
(
	@cpID varchar(20)
,	@cpType int
)
As
	SELECT accountIDX, cpID FROM userCooperationDB WITH(NOLOCK) WHERE cpID=@cpID and cpType=@cpType
GO


-- ----------------------------
-- procedure structure for game_region_get_point
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_region_get_point]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_region_get_point]
GO

CREATE PROCEDURE [dbo].[game_region_get_point]
AS
	SELECT rt1point, rt1point_today, rt1point_bonus, rt2point, rt2point_today, rt2point_bonus FROM userRegionDB WITH(NOLOCK)
GO


-- ----------------------------
-- procedure structure for game_friend_join_list_original
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_join_list_original]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_join_list_original]
GO

CREATE PROCEDURE [dbo].[game_friend_join_list_original]
(
	@idx int
,	@accountIDX int
,	@topNo int
)
AS

	DECLARE @strSQL nvarchar(1000)
	DECLARE @ParmDefinition nvarchar(500)

	SET @strSQL = N'SELECT Top (@topNo_in) a.idx, a.friendAccIDX, b.nickName from userFriendDB a WITH(NOLOCK) join userMemberDB b WITH(NOLOCK) on a.friendAccIDX = b.accountIDX '
	SET @strSQL = @strSQL + ' WHERE a.userAccIDX = @accountIDX_in and a.idx < @idx_in and flag=0 order by a.idx desc'

	SET @ParmDefinition = N'@topNo_in int, @accountIDX_in int, @idx_in int'

	EXECUTE sp_executesql @strSQL, @ParmDefinition, @idx_in=@idx, @accountIDX_in=@accountIDX, @topNo_in=@topNo
GO


-- ----------------------------
-- procedure structure for game_guild_change_guildname
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_change_guildname]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_change_guildname]
GO

CREATE PROCEDURE [dbo].[game_guild_change_guildname]
(
	@guildIDX int
,	@guildName varchar(20)
)
AS

	DECLARE @cnt int, @errcount int

	SET @cnt = 0
	SET @errcount = 0

	SET @cnt = (SELECT count(*) FROM userGuildDB WITH(NOLOCK) WHERE guildName=@guildName)
	if (@cnt > 0)
	BEGIN
		SET @errcount = 2
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	if (@errcount = 0)
	BEGIN
		SELECT 1 AS 'returnVal'

		UPDATE userGuildDB SET guildName=@guildName WHERE idx=@guildIDX
	END
GO


-- ----------------------------
-- procedure structure for web_user_login_enkey_update
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_user_login_enkey_update]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_user_login_enkey_update]
GO

CREATE PROCEDURE [dbo].[web_user_login_enkey_update]
(
	@userID varchar(12)
,	@encodeKey char(15)
,	@userIP varchar(15)
)
AS

SET NOCOUNT ON

DECLARE @accountIDX int
SET @accountIDX = (
	SELECT accountIDX
	  FROM dbo.userMemberDB WITH(NOLOCK)
	 WHERE userID = @userID
)

UPDATE userLoginDB
   SET encodeKey = @encodeKey,
	   userIP = @userIP,
	   connDate = GETDATE()
WHERE accountIDX = @accountIDX
if @@ROWCOUNT = 0
BEGIN
	SELECT 0
END
ELSE
BEGIN
	SELECT 1
END
GO


-- ----------------------------
-- procedure structure for USP_LTS_WEEKTIME_PARENT_AGREE_EMAIL_SEND_LIST
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_WEEKTIME_PARENT_AGREE_EMAIL_SEND_LIST]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_WEEKTIME_PARENT_AGREE_EMAIL_SEND_LIST]
GO

CREATE PROCEDURE [dbo].[USP_LTS_WEEKTIME_PARENT_AGREE_EMAIL_SEND_LIST]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- 회원가입시 보호자 동의한 18세 미만 아이들 목록 
	-- 아이디, 이름, 버튼클릭경로1, 버튼클릭경로2, 부모이메일
	-- 셧다운 : 통합 
	SELECT UserID, userName, CLA_Email, DomainName + '/youth/youth_game_useinfo_mail.asp?CUID=' + EncCUserID AS BTN1, DomainName + '/youth/youth_main.asp' AS BTN2, age
	  FROM (
		SELECT M.UserID, N.userName, G.DomainName, G.EncCUserID, G.CLA_Email, 
		       YEAR(GETDATE() - (Case When userNumber = 1 OR userNumber = 2 Then	
				Convert(datetime, Convert(varchar(8), '19' + userBirthday)) 
		       Else 
				Case When userNumber = 3 OR userNumber = 4 Then 
					Convert(datetime, Convert(varchar(8), '20' + userBirthday)) 
				End 
		       End) - 1) - YEAR(0) AS 'age'			
	          FROM dbo.userMemberDB M WITH (NOLOCK) 
			INNER JOIN dbo.userNameDB N WITH (NOLOCK)
				ON M.accountIDX = N.accountIDX 	
			INNER JOIN dbo.userParentDB P WITH (NOLOCK)
				ON N.accountIDX = P.accountIDX 	
			INNER JOIN dbo.TB_LTS_Channel_LegalAgent G WITH (NOLOCK)
				ON M.UserID = G.CLA_ChildID
		 -- 간편회원 이상
	         WHERE M.joinType > 1
		   AND M.cpType = 0

	) AS F
	WHERE F.age < 18
	UNION ALL
	-- 셧다운 : 다음
	SELECT UserID, userName, CLA_Email, DomainName + '/youth/youth_game_useinfo_mail.asp?CUID=' + EncCUserID AS BTN1, DomainName +  '/youth/youth_main.asp' AS BTN2, age
	  FROM (
		SELECT M.UserID, N.userName, G.DomainName, G.EncCUserID, G.CLA_Email, 
		       YEAR(GETDATE() - (Case When userNumber = 1 OR userNumber = 2 Then	
				Convert(datetime, Convert(varchar(8), '19' + userBirthday)) 
		       Else 
				Case When userNumber = 3 OR userNumber = 4 Then 
					Convert(datetime, Convert(varchar(8), '20' + userBirthday)) 
				End 
		       End) - 1) - YEAR(0) AS 'age'			
	          FROM dbo.userMemberDB M WITH (NOLOCK) 
			INNER JOIN dbo.userNameDB N WITH (NOLOCK)
				ON M.accountIDX = N.accountIDX 	
			INNER JOIN dbo.TB_LTS_Channel_LegalAgent G WITH (NOLOCK)
				ON M.UserID = G.CLA_ChildID
		 -- 간편회원 이상
	         WHERE M.joinType > 1
		   AND M.cpType = 400
	) AS F
	WHERE F.age < 18
	UNION ALL
	-- 셧다운 : 플레이넷
	SELECT UserID, userName, CLA_Email, DomainName + '/youth/youth_game_useinfo_mail.asp?CUID=' + EncCUserID AS BTN1, DomainName + '/youth/youth_main.asp' AS BTN2, age
	  FROM (
		SELECT M.UserID, N.userName, G.DomainName, G.EncCUserID, G.CLA_Email, 
		       YEAR(GETDATE() - (Case When userNumber = 1 OR userNumber = 2 Then	
				Convert(datetime, Convert(varchar(8), '19' + userBirthday)) 
		       Else 
				Case When userNumber = 3 OR userNumber = 4 Then 
					Convert(datetime, Convert(varchar(8), '20' + userBirthday)) 
				End 
		       End) - 1) - YEAR(0) AS 'age'		
	          FROM dbo.userMemberDB M WITH (NOLOCK) 
			INNER JOIN dbo.userNameDB N WITH (NOLOCK)
				ON M.accountIDX = N.accountIDX 	
			INNER JOIN dbo.TB_LTS_Channel_LegalAgent G WITH (NOLOCK)
				ON M.UserID = G.CLA_ChildID
		 -- 간편회원 이상
	         WHERE M.joinType > 1
		   AND M.cpType = 600
	) AS F
	WHERE F.age < 18
	UNION ALL
	-- 셧다운 : 투니랜드
	SELECT UserID, userName, CLA_Email, DomainName + '/youth/youth_game_useinfo_mail.asp?CUID=' + EncCUserID AS BTN1, DomainName + '/youth/youth_main.asp' AS BTN2, age
	  FROM (
		SELECT M.UserID, N.userName, G.DomainName, G.EncCUserID, G.CLA_Email, 
		       YEAR(GETDATE() - (Case When userNumber = 1 OR userNumber = 2 Then	
				Convert(datetime, Convert(varchar(8), '19' + userBirthday)) 
		       Else 
				Case When userNumber = 3 OR userNumber = 4 Then 
					Convert(datetime, Convert(varchar(8), '20' + userBirthday)) 
				End 
		       End) - 1) - YEAR(0) AS 'age'		
	          FROM dbo.userMemberDB M WITH (NOLOCK) 
			INNER JOIN dbo.userNameDB N WITH (NOLOCK)
				ON M.accountIDX = N.accountIDX 	
			INNER JOIN dbo.TB_LTS_Channel_LegalAgent G WITH (NOLOCK)
				ON M.UserID = G.CLA_ChildID
		 -- 간편회원 이상
	         WHERE M.joinType > 1
		   AND M.cpType = 700
	) AS F
	WHERE F.age < 18

	SET NOCOUNT OFF;
END
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_award_rank_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_award_rank_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_award_rank_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_award_rank_data]
(
	@accountIDX int
)
As
	SELECT	award1_now, award2_now, award3_now, award4_now, award5_now, award6_now, award7_now, award8_now, award9_now, award10_now,
			award11_now, award12_now, award13_now, award14_now, award15_now, award16_now, award17_now, award18_now, award19_now, award20_now, 
			award21_now, award22_now, award23_now, award24_now, award25_now, award26_now, award27_now 
	FROM userRankingDB_award WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_get_accountIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_get_accountIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_get_accountIDX]
GO

CREATE PROCEDURE [dbo].[web_get_accountIDX]
(
	@userID varchar(12)
)
As
	SELECT accountIDX FROM userMemberDB WITH(NOLOCK) WHERE userID = @userID
GO


-- ----------------------------
-- procedure structure for game_region_get_compen
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_region_get_compen]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_region_get_compen]
GO

CREATE PROCEDURE [dbo].[game_region_get_compen]
(
	@accountIDX int
)
AS
	SELECT TOP 1 idx, rt1point, rt1point_bonus, rt1count, rt2point, rt2point_bonus, rt2count, regionType, renspoint, regionRanking FROM userRegionDB_compen WITH(NOLOCK) WHERE accountIDX=@accountIDX ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for _nouse_manage_mannerpoint_log_search_list_type
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[_nouse_manage_mannerpoint_log_search_list_type]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[_nouse_manage_mannerpoint_log_search_list_type]
GO

CREATE PROCEDURE [dbo].[_nouse_manage_mannerpoint_log_search_list_type]
(
	@searchType varchar(12)
,	@searchString varchar(15)
,	@notInPage varchar(4)
,	@pageSize varchar(4)
,	@resultType varchar(2)
)
AS
	DECLARE @strSQL varchar(800)

	SET @strSQL = ''

	IF (@resultType = '0')
	BEGIN
		SET @strSQL = @strSQL + 'SELECT TOP ' + @pageSize + ' idx, b.nickName AS ''reportNick'', a.reportIDX, a.reportMP, a.reportpubIP, c.nickName AS ''receiveNick'', a.receiveIDX, a.receivepubIP, a.receiveMP, a.regDate FROM LosaGame_log.DBO.log_mannerpoint a JOIN userMemberDB b ON a.reportIDX = b.accountIDX JOIN userMemberDB c on a.receiveIDX = c.accountIDX '
		SET @strSQL = @strSQL + 'WHERE ' + @searchType + ' = ''' + @searchString + ''' and a.receivePoint < 0 and a.resultType = 0 and a.idx not in ('
		SET @strSQL = @strSQL + 'SELECT TOP ' + @notInPage + ' idx FROM LosaGame_log.DBO.log_mannerpoint WHERE ' + @searchType + ' = ''' + @searchString + ''' and receivePoint < 0 and resultType = 0 ORDER BY regDate DESC'
		SET @strSQL = @strSQL + ') ORDER BY a.regDate DESC'
	END
	ELSE
	BEGIN
		SET @strSQL = @strSQL + 'SELECT TOP ' + @pageSize + ' idx, b.nickName AS ''reportNick'', a.reportIDX, a.reportMP, a.reportpubIP, c.nickName AS ''receiveNick'', a.receiveIDX, a.receivepubIP, a.receiveMP, a.regDate FROM LosaGame_log.DBO.log_mannerpoint a JOIN userMemberDB b ON a.reportIDX = b.accountIDX JOIN userMemberDB c on a.receiveIDX = c.accountIDX '
		SET @strSQL = @strSQL + 'WHERE ' + @searchType + ' = ''' + @searchString + ''' and a.receivePoint < 0 and a.idx not in ('
		SET @strSQL = @strSQL + 'SELECT TOP ' + @notInPage + ' idx FROM LosaGame_log.DBO.log_mannerpoint WHERE ' + @searchType + ' = ''' + @searchString + ''' and receivePoint < 0 ORDER BY regDate DESC'
		SET @strSQL = @strSQL + ') ORDER BY a.regDate DESC'
	END

	EXECUTE (@strSQL)
GO


-- ----------------------------
-- procedure structure for game_guild_battle_record_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_battle_record_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_battle_record_save]
GO

CREATE PROCEDURE [dbo].[game_guild_battle_record_save]
(
	@guildIDX int
,	@battleType int
,	@win int
,	@lose int
,	@killed int
,	@death int
)
AS
	UPDATE userRecordGuildDB SET 
		type1_win = @win, 
		type1_lose = @lose, 
		type1_kill = @killed, 
		type1_death = @death 
	WHERE guildIDX = @guildIDX
GO


-- ----------------------------
-- procedure structure for web_user_login_enkey_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_user_login_enkey_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_user_login_enkey_get_data]
GO

CREATE PROCEDURE [dbo].[web_user_login_enkey_get_data]  
(  
 @accountIDX int  
)  
AS  
  
SET NOCOUNT ON  


DECLARE @CURRENTDATE DATETIME
DECLARE @CONNECTDATE DATETIME

SET @CURRENTDATE = DATEADD(HH, -2, GETDATE());  
SET @CONNECTDATE = ( SELECT conndate FROM dbo.userLoginDB WHERE accountIDX = @accountIDX)
  
BEGIN
	IF( @CURRENTDATE < @CONNECTDATE )
	SET @CONNECTDATE = @CURRENTDATE
END

SELECT encodeKey, gameServerID, userIP, @CONNECTDATE as conndate 
  FROM dbo.userLoginDB WITH(NOLOCK)  
 WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_league_user_reward_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_user_reward_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_user_reward_get_data]
GO

CREATE PROCEDURE [dbo].[game_league_user_reward_get_data]
(
	@accountIDX int
)
AS

SET NOCOUNT ON

SELECT idx, sendNickname, leagueName, roundnum, maxRound, presentCode1, presentCode2, presentCode3, presentCode4
  FROM dbo.userLeagueRewardUserDB WITH(NOLOCK)
 WHERE accountIDX=@accountIDX
   AND regDate >= DATEADD(d, -14, GETDATE())
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_award_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_award_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_award_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_award_data]
(
	@accountIDX int
)
As
	SELECT	award1_type, award1_point, award2_type, award2_point, award3_type, award3_point, award4_type, award4_point, award5_type, award5_point,
			award6_type, award6_point, award7_type, award7_point, award8_type, award8_point, award9_type, award9_point, award10_type, award10_point
	FROM userAwardDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_training_rank_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_training_rank_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_training_rank_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_training_rank_data]
(
	@accountIDX int
)
As
	SELECT win_fix, tie_fix, lose_fix, win_prev, tie_prev, lose_prev, rank_prev, rank_now, rank_total, rank_training 
	FROM userRankingDB_training WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_game_server_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_game_server_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_game_server_get_list]
GO

CREATE PROCEDURE [dbo].[web_game_server_get_list]

AS

SET NOCOUNT ON

SELECT serverID, serverName
  FROM dbo.define_game_server WITH(NOLOCK)
GO


-- ----------------------------
-- procedure structure for game_region_compen_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_region_compen_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_region_compen_delete]
GO

CREATE PROCEDURE [dbo].[game_region_compen_delete]
(
	@idx int
,	@accountIDX int
,	@nickName varchar(20)
,	@peso int
)
AS
	DELETE FROM userRegionDB_compen WHERE idx=@idx

	INSERT INTO Log_Data.DBO.log_data_peso (accountIDX, nickName, peso, logType, regDate)
	VALUES (@accountIDX, @nickName, @peso, 9, getdate())
GO


-- ----------------------------
-- procedure structure for _nouse_manage_mannerpoint_log_search_list_date
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[_nouse_manage_mannerpoint_log_search_list_date]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[_nouse_manage_mannerpoint_log_search_list_date]
GO

CREATE PROCEDURE [dbo].[_nouse_manage_mannerpoint_log_search_list_date]
(
	@sDate varchar(10)
,	@eDate varchar(10)
,	@notInPage varchar(4)
,	@pageSize varchar(4)
,	@resultType varchar(2)
)
AS
	DECLARE @strSQL varchar(800)

	SET @strSQL = ''

	IF (@resultType = '0')
	BEGIN
		SET @strSQL = @strSQL + 'SELECT TOP ' + @pageSize + ' idx, b.nickName AS ''reportNick'', a.reportIDX, a.reportMP, a.reportpubIP, c.nickName AS ''receiveNick'', a.receiveIDX, a.receivepubIP, a.receiveMP, a.regDate FROM LosaGame_log.DBO.log_mannerpoint a JOIN userMemberDB b on a.reportIDX = b.accountIDX JOIN userMemberDB c on a.receiveIDX = c.accountIDX '
		SET @strSQL = @strSQL + 'WHERE a.regDate >= ''' + @sDate + ''' and a.regDate <= ''' + @eDate + ''' and a.receivePoint < 0 and a.resultType = 0 and a.idx not in ('
		SET @strSQL = @strSQL + 'SELECT TOP ' + @notInPage + ' idx FROM LosaGame_log.DBO.log_mannerpoint WHERE regDate >= ''' + @sDate + ''' and regDate <= ''' + @eDate + ''' and receivePoint < 0 and resultType=0 ORDER BY regDate DESC'
		SET @strSQL = @strSQL + ') ORDER BY a.regDate DESC'
	END
	ELSE
	BEGIN
		SET @strSQL = @strSQL + 'SELECT TOP ' + @pageSize + ' idx, b.nickName AS ''reportNick'', a.reportIDX, a.reportMP, a.reportpubIP, c.nickName AS ''receiveNick'', a.receiveIDX, a.receivepubIP, a.receiveMP, a.regDate FROM LosaGame_log.DBO.log_mannerpoint a JOIN userMemberDB b on a.reportIDX = b.accountIDX JOIN userMemberDB c on a.receiveIDX = c.accountIDX '
		SET @strSQL = @strSQL + 'WHERE a.regDate >= ''' + @sDate + ''' and a.regDate <= ''' + @eDate + ''' and a.receivePoint < 0 and a.idx not in ('
		SET @strSQL = @strSQL + 'SELECT TOP ' + @notInPage + ' idx FROM LosaGame_log.DBO.log_mannerpoint WHERE regDate >= ''' + @sDate + ''' and regDate <= ''' + @eDate + ''' and receivePoint < 0 ORDER BY regDate DESC'
		SET @strSQL = @strSQL + ') ORDER BY a.regDate DESC'
	END


	EXECUTE (@strSQL)
GO


-- ----------------------------
-- procedure structure for game_guild_attend_set_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_attend_set_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_attend_set_add]
GO

CREATE PROCEDURE [dbo].[game_guild_attend_set_add]

	@GUILD_IDX		INT,
	@ACCOUNT_IDX	INT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	10000

	DECLARE @nReturn			INT
	DECLARE @REG_DATE			DATETIME
	DECLARE @INIT_DATE			DATETIME
		
	SET @REG_DATE=GETDATE()
	SET @INIT_DATE = 0
	
	-- 날짜 초기화
	EXEC @nReturn=dbo.usp_RegDate_get_init @REG_DATE, 5, @INIT_DATE OUTPUT
	IF (@nReturn<>0)
	BEGIN
		RETURN;
	END

	-- 이미 출석체크한 사용자는 같은날 다시 체크 할 수 없다.
	IF EXISTS (SELECT *  FROM dbo.userGuildAttendDB WITH (READCOMMITTED) WHERE InitDate=@INIT_DATE and AccountIDX=@ACCOUNT_IDX)
	BEGIN
		SELECT -1
		RETURN;
	END
	
	BEGIN TRAN
		-- 출석 체크
		INSERT dbo.userGuildAttendDB WITH (XLOCK, ROWLOCK) VALUES (@INIT_DATE, @ACCOUNT_IDX, @GUILD_IDX, @REG_DATE);
		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
			SELECT -2
			RETURN;
		END

	COMMIT TRAN

	SELECT 0
	RETURN;
GO


-- ----------------------------
-- procedure structure for web_user_login_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_user_login_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_user_login_count]
GO

CREATE PROCEDURE [dbo].[web_user_login_count]
(
	@userID varchar(12)
)
AS

SET NOCOUNT ON

DECLARE @accountIDX int
SET @accountIDX = (
	SELECT accountIDX
	  FROM dbo.userMemberDB WITH(NOLOCK)
	 WHERE userID = @userID
)

SELECT COUNT(*)
  FROM dbo.userLoginDB WITH(NOLOCK)
 WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_league_user_reward_del
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_user_reward_del]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_user_reward_del]
GO

CREATE PROCEDURE [dbo].[game_league_user_reward_del]
(
	@idx int
)
AS

SET NOCOUNT ON

DELETE FROM dbo.userLeagueRewardUserDB
 WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_all_userinfo_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_all_userinfo_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_all_userinfo_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_all_userinfo_data]
(
	@accountIDX int
)
As
	SELECT visit_count, rec_Index FROM userInfoDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_game_server_get_data_top1
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_game_server_get_data_top1]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_game_server_get_data_top1]
GO

CREATE PROCEDURE [dbo].[web_game_server_get_data_top1]

AS

DECLARE @maxcount int
SET @maxcount = DBO.DEFINE_SERVER_CONNECTION_MAX_COUNT()

SELECT TOP 1 serverID
FROM define_game_server
WHERE connNumber < @maxcount
  AND [status]=1
  AND serverName like 'QA%'
ORDER BY connNumber ASC
GO


-- ----------------------------
-- procedure structure for game_region_backup_point
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_region_backup_point]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_region_backup_point]
GO

CREATE PROCEDURE [dbo].[game_region_backup_point]  
  
AS  
  
 DECLARE @tblNameA varchar(100), @tblNameB varchar(100), @sql varchar(300), @limitRenpoint int  
 DECLARE @i tinyint, @rtn bit, @tcount tinyint  
  
 SET @i = 65  
 SET @rtn = 0  
 SET @limitRenpoint = DBO.DEFINE_REGION_LIMIT_RENSPOINT()  
  
 WHILE (@rtn = 0)  
 BEGIN  
  SET @tblNameA = 'LosaGame_' + RTrim(substring(convert(varchar(10), getdate(), 112),3,10)) + '_userGameDB_se_' + char(@i)  
  SET @tblNameB = 'LosaGame_' + RTrim(substring(convert(varchar(10), getdate(), 112),3,10)) + '_userGuildDB_se_' + char(@i)  
  SET @tcount = (SELECT count(*) FROM [Backup].DBO.sysobjects WHERE [uid]=1 and xtype='U' and [name]=@tblNameA)  
  SET @tcount = @tcount + (SELECT count(*) FROM [Backup].DBO.sysobjects WHERE [uid]=1 and xtype='U' and [name]=@tblNameB)  
  
  If (@tcount = 0)  
   SET @rtn = 1  
  ELSE  
   SET @i = @i + 1  
 END  
  
 SET @sql = 'SELECT accountIDX, gameMoney, userLevel, userEXP, userHerocEXP, userHerosEXP, rencpoint, renspoint, regionType INTO [Backup].DBO.' + @tblNameA + ' FROM userGameDB WHERE renspoint > ' + Convert(varchar(6), @limitRenpoint) + ' or userHerocEXP > 0 or userHerosEXP > 0'  
 EXECUTE (@sql)  
  
 SET @sql = 'SELECT idx, guildName, guildmark, ranking, point, todaypoint, guildLevel INTO [Backup].DBO.' + @tblNameB + ' FROM userGuildDB'  
 EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for _nouse_manage_mannerpoint_log_search_count_type
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[_nouse_manage_mannerpoint_log_search_count_type]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[_nouse_manage_mannerpoint_log_search_count_type]
GO

CREATE PROCEDURE [dbo].[_nouse_manage_mannerpoint_log_search_count_type]
(
	@searchType varchar(12)
,	@searchString varchar(15)
,	@resultType varchar(2)
)
AS
	DECLARE @strSQL varchar(500)

	IF (@resultType = '0')
	BEGIN
		SET @strSQL = 'SELECT count(*) FROM LosaGame_log.DBO.log_mannerpoint WHERE ' + @searchType + ' = ''' + @searchString + ''' and receivepoint <> 0 and resultType = 0'
	END
	ELSE
	BEGIN
		SET @strSQL = 'SELECT count(*) FROM LosaGame_log.DBO.log_mannerpoint WHERE ' + @searchType + ' = ''' + @searchString + ''' and receivepoint <> 0'
	END

	EXECUTE (@strSQL)
GO


-- ----------------------------
-- procedure structure for game_guild_attend_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_attend_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_attend_get_list]
GO

CREATE PROCEDURE [dbo].[game_guild_attend_get_list]

	@INIT_DATE		DATETIME,
	@GUILD_IDX		INT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	10000

	DECLARE @nReturn			INT


	SELECT AccountIDX FROM dbo.userGuildAttendDB WITH (READCOMMITTED) 
	WHERE InitDate=@INIT_DATE and GuildIDX=@GUILD_IDX

	IF (@@ERROR<>0)
	BEGIN
		SELECT -1
		RETURN;
	END

RETURN;
GO


-- ----------------------------
-- procedure structure for web_search_userPWD_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_search_userPWD_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_search_userPWD_get_data]
GO

CREATE PROCEDURE [dbo].[web_search_userPWD_get_data]
(
	@userID varchar(12)
,	@juminEncode varchar(64)
)
AS
	SELECT a.userID, a.userPWD, a.EMail FROM userMemberDB a JOIN userNameDB b ON a.accountIDX=b.accountIDX WHERE a.userID = @userID and b.userEnCode = @juminEncode
GO


-- ----------------------------
-- procedure structure for game_league_user_reward_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_user_reward_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_user_reward_add]
GO

CREATE PROCEDURE [dbo].[game_league_user_reward_add]
(
	@leagueIDX int
)
AS

SET NOCOUNT ON

DECLARE @rt1A int, @rt1B int, @rt1C int, @rt1D int
DECLARE @rt2A int, @rt2B int, @rt2C int, @rt2D int
DECLARE @rt3A int, @rt3B int, @rt3C int, @rt3D int
DECLARE @rt4A int, @rt4B int, @rt4C int, @rt4D int
DECLARE @rt5A int, @rt5B int, @rt5C int, @rt5D int
DECLARE @rt6A int, @rt6B int, @rt6C int, @rt6D int
DECLARE @rt7A int, @rt7B int, @rt7C int, @rt7D int
DECLARE @rt8A int, @rt8B int, @rt8C int, @rt8D int
DECLARE @rt9A int, @rt9B int, @rt9C int, @rt9D int
DECLARE @rt10A int, @rt10B int, @rt10C int, @rt10D int
DECLARE @rt11A int, @rt11B int, @rt11C int, @rt11D int
DECLARE @infoIDX int
DECLARE @maxRound smallint
DECLARE @sendNickName nvarchar(20)
DECLARE @leagueName nvarchar(20)
DECLARE @teamList table (accountIDX int, currentRound tinyint)

-- 보상 받을 전체 유저
INSERT INTO @teamList (accountIDX, currentRound)
SELECT a.accountIDX, b.currentRound
  FROM dbo.userLeagueTeamMemberDB a WITH(NOLOCK)
  JOIN dbo.userLeagueTeamDB b WITH(NOLOCK)
	ON a.teamIDX=b.idx
 WHERE a.leagueIDX=@leagueIDX
   AND b.leagueIDX=@leagueIDX
   AND a.joinType=1

SELECT @infoIDX = idx,
	   @leagueName = leagueName,
	   @maxRound = maxRound
  FROM dbo.userLeagueInfoDB WITH(NOLOCK)
 WHERE leagueIDX=@leagueIDX

SET @sendNickName = ISNULL((
	SELECT b.nickName
	  FROM dbo.userLeagueListDB a WITH(NOLOCK)
	  JOIN dbo.userMemberDB b WITH(NOLOCK)
		ON a.accountIDX=b.accountIDX
	 WHERE a.idx=@leagueIDX
), '개발자K')

SELECT @rt1A = roundType1_presentCode1,
	   @rt1B = roundType1_presentCode2,
	   @rt1C = roundType1_presentCode3,
	   @rt1D = roundType1_presentCode4,
	   @rt2A = roundType2_presentCode1,
	   @rt2B = roundType2_presentCode2,
	   @rt2C = roundType2_presentCode3,
	   @rt2D = roundType2_presentCode4,
	   @rt3A = roundType3_presentCode1,
	   @rt3B = roundType3_presentCode2,
	   @rt3C = roundType3_presentCode3,
	   @rt3D = roundType3_presentCode4,
	   @rt4A = roundType4_presentCode1,
	   @rt4B = roundType4_presentCode2,
	   @rt4C = roundType4_presentCode3,
	   @rt4D = roundType4_presentCode4,
	   @rt5A = roundType5_presentCode1,
	   @rt5B = roundType5_presentCode2,
	   @rt5C = roundType5_presentCode3,
	   @rt5D = roundType5_presentCode4,
	   @rt6A = roundType6_presentCode1,
	   @rt6B = roundType6_presentCode2,
	   @rt6C = roundType6_presentCode3,
	   @rt6D = roundType6_presentCode4,
	   @rt7A = roundType7_presentCode1,
	   @rt7B = roundType7_presentCode2,
	   @rt7C = roundType7_presentCode3,
	   @rt7D = roundType7_presentCode4,
	   @rt8A = roundType8_presentCode1,
	   @rt8B = roundType8_presentCode2,
	   @rt8C = roundType8_presentCode3,
	   @rt8D = roundType8_presentCode4,
	   @rt9A = roundType9_presentCode1,
	   @rt9B = roundType9_presentCode2,
	   @rt9C = roundType9_presentCode3,
	   @rt9D = roundType9_presentCode4,
	   @rt10A = roundType10_presentCode1,
	   @rt10B = roundType10_presentCode2,
	   @rt10C = roundType10_presentCode3,
	   @rt10D = roundType10_presentCode4,
	   @rt11A = roundType11_presentCode1,
	   @rt11B = roundType11_presentCode2,
	   @rt11C = roundType11_presentCode3,
	   @rt11D = roundType11_presentCode4
  FROM dbo.userLeagueRoundDB WITH(NOLOCK)
 WHERE infoIDX=@infoIDX

IF (EXISTS(SELECT * FROM @teamList WHERE currentRound=1))
BEGIN
	INSERT INTO dbo.userLeagueRewardUserDB (
		accountIDX, leagueIDX, sendNickname, leagueName, roundnum, maxRound, presentCode1, presentCode2, presentCode3, presentCode4, regDate
	)
	SELECT accountIDX, @leagueIDX, @sendNickName, @leagueName, currentRound, @maxRound, @rt1A, @rt1B, @rt1C, @rt1D, GETDATE()
	  FROM @teamList
	 WHERE currentRound=1
END

IF (EXISTS(SELECT * FROM @teamList WHERE currentRound=2))
BEGIN
	INSERT INTO dbo.userLeagueRewardUserDB (
		accountIDX, leagueIDX, sendNickname, leagueName, roundnum, maxRound, presentCode1, presentCode2, presentCode3, presentCode4, regDate
	)
	SELECT accountIDX, @leagueIDX, @sendNickName, @leagueName, currentRound, @maxRound, @rt2A, @rt2B, @rt2C, @rt2D, GETDATE()
	  FROM @teamList
	 WHERE currentRound=2
END

IF (EXISTS(SELECT * FROM @teamList WHERE currentRound=3))
BEGIN
	INSERT INTO dbo.userLeagueRewardUserDB (
		accountIDX, leagueIDX, sendNickname, leagueName, roundnum, maxRound, presentCode1, presentCode2, presentCode3, presentCode4, regDate
	)
	SELECT accountIDX, @leagueIDX, @sendNickName, @leagueName, currentRound, @maxRound, @rt3A, @rt3B, @rt3C, @rt3D, GETDATE()
	  FROM @teamList
	 WHERE currentRound=3
END

IF (EXISTS(SELECT * FROM @teamList WHERE currentRound=4))
BEGIN
	INSERT INTO dbo.userLeagueRewardUserDB (
		accountIDX, leagueIDX, sendNickname, leagueName, roundnum, maxRound, presentCode1, presentCode2, presentCode3, presentCode4, regDate
	)
	SELECT accountIDX, @leagueIDX, @sendNickName, @leagueName, currentRound, @maxRound, @rt4A, @rt4B, @rt4C, @rt4D, GETDATE()
	  FROM @teamList
	 WHERE currentRound=4
END

IF (EXISTS(SELECT * FROM @teamList WHERE currentRound=5))
BEGIN
	INSERT INTO dbo.userLeagueRewardUserDB (
		accountIDX, leagueIDX, sendNickname, leagueName, roundnum, maxRound, presentCode1, presentCode2, presentCode3, presentCode4, regDate
	)
	SELECT accountIDX, @leagueIDX, @sendNickName, @leagueName, currentRound, @maxRound, @rt5A, @rt5B, @rt5C, @rt5D, GETDATE()
	  FROM @teamList
	 WHERE currentRound=5
END

IF (EXISTS(SELECT * FROM @teamList WHERE currentRound=6))
BEGIN
	INSERT INTO dbo.userLeagueRewardUserDB (
		accountIDX, leagueIDX, sendNickname, leagueName, roundnum, maxRound, presentCode1, presentCode2, presentCode3, presentCode4, regDate
	)
	SELECT accountIDX, @leagueIDX, @sendNickName, @leagueName, currentRound, @maxRound, @rt6A, @rt6B, @rt6C, @rt6D, GETDATE()
	  FROM @teamList
	 WHERE currentRound=6
END

IF (EXISTS(SELECT * FROM @teamList WHERE currentRound=7))
BEGIN
	INSERT INTO dbo.userLeagueRewardUserDB (
		accountIDX, leagueIDX, sendNickname, leagueName, roundnum, maxRound, presentCode1, presentCode2, presentCode3, presentCode4, regDate
	)
	SELECT accountIDX, @leagueIDX, @sendNickName, @leagueName, currentRound, @maxRound, @rt7A, @rt7B, @rt7C, @rt7D, GETDATE()
	  FROM @teamList
	 WHERE currentRound=7
END

IF (EXISTS(SELECT * FROM @teamList WHERE currentRound=8))
BEGIN
	INSERT INTO dbo.userLeagueRewardUserDB (
		accountIDX, leagueIDX, sendNickname, leagueName, roundnum, maxRound, presentCode1, presentCode2, presentCode3, presentCode4, regDate
	)
	SELECT accountIDX, @leagueIDX, @sendNickName, @leagueName, currentRound, @maxRound, @rt8A, @rt8B, @rt8C, @rt8D, GETDATE()
	  FROM @teamList
	 WHERE currentRound=8
END

IF (EXISTS(SELECT * FROM @teamList WHERE currentRound=9))
BEGIN
	INSERT INTO dbo.userLeagueRewardUserDB (
		accountIDX, leagueIDX, sendNickname, leagueName, roundnum, maxRound, presentCode1, presentCode2, presentCode3, presentCode4, regDate
	)
	SELECT accountIDX, @leagueIDX, @sendNickName, @leagueName, currentRound, @maxRound, @rt9A, @rt9B, @rt9C, @rt9D, GETDATE()
	  FROM @teamList
	 WHERE currentRound=9
END

IF (EXISTS(SELECT * FROM @teamList WHERE currentRound=10))
BEGIN
	INSERT INTO dbo.userLeagueRewardUserDB (
		accountIDX, leagueIDX, sendNickname, leagueName, roundnum, maxRound, presentCode1, presentCode2, presentCode3, presentCode4, regDate
	)
	SELECT accountIDX, @leagueIDX, @sendNickName, @leagueName, currentRound, @maxRound, @rt10A, @rt10B, @rt10C, @rt10D, GETDATE()
	  FROM @teamList
	 WHERE currentRound=10
END

IF (EXISTS(SELECT * FROM @teamList WHERE currentRound=11))
BEGIN
	INSERT INTO dbo.userLeagueRewardUserDB (
		accountIDX, leagueIDX, sendNickname, leagueName, roundnum, maxRound, presentCode1, presentCode2, presentCode3, presentCode4, regDate
	)
	SELECT accountIDX, @leagueIDX, @sendNickName, @leagueName, currentRound, @maxRound, @rt11A, @rt11B, @rt11C, @rt11D, GETDATE()
	  FROM @teamList
	 WHERE currentRound=11
END
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_all_ranking_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_all_ranking_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_all_ranking_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_all_ranking_data]
(
	@accountIDX int
)
As
	SELECT class, battle, training, award, medal, tester FROM userRankingDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_friend_userType
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_userType]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_userType]
GO

CREATE PROCEDURE [dbo].[web_friend_userType]
(
	@accountIDX int
)
As
	SELECT userType, eventType FROM userMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_region_backup_compen
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_region_backup_compen]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_region_backup_compen]
GO

CREATE PROCEDURE [dbo].[game_region_backup_compen]

AS

	DECLARE @tblName varchar(100), @sql varchar(300), @limitRenpoint int
	DECLARE @i tinyint, @rtn bit, @tcount tinyint

	SET @i = 65
	SET @rtn = 0
	SET @limitRenpoint = DBO.DEFINE_REGION_LIMIT_RENSPOINT()

	WHILE (@rtn = 0)
	BEGIN
		SET @tblName = 'LosaGame_' + RTrim(substring(convert(varchar(10), getdate(), 112),3,10)) + '_userRegionDB_compen_se_' + char(@i)
		SET @tcount = (SELECT count(*) FROM [Backup].DBO.sysobjects WHERE [uid]=1 and xtype='U' and [name]=@tblName)

		If (@tcount = 0)
			SET @rtn = 1
		ELSE
			SET @i = @i + 1
	END

	SET @sql = 'SELECT accountIDX, rt1point, rt1point_bonus, rt1count, rt2point, rt2point_bonus, rt2count, regionType, renspoint, regDate INTO [Backup].DBO.' + @tblName + ' FROM userRegionDB_compen WHERE regDate > ''' + Left(getdate(), 10) + ''''
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for AGENT_RANKING_AWARD_TOP3
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_RANKING_AWARD_TOP3]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_RANKING_AWARD_TOP3]
GO

CREATE PROCEDURE [dbo].[AGENT_RANKING_AWARD_TOP3]

AS
/*
	DECLARE @aIDX1 int, @aIDX2 int, @aIDX3 int, @Lv1 int, @Lv2 int, @Lv3 int, @nn1 varchar(20), @nn2 varchar(20), @nn3 varchar(20)
	DECLARE @nDate datetime, @dateIDX char(8), @i tinyint, @sql nvarchar(200)
	DECLARE @p nvarchar(100), @out int
	
	SET @nDate = Left(getdate(),10)
	SET @dateIDX = convert(char(8),@nDate,112)
	SET @i = 1
	
	WHILE (@i <= 27)
	BEGIN
	
		SET @sql = 'SELECT @idx=accountIDX FROM userRankingDB_award WHERE award' + convert(varchar(4), @i) + '_now=1'
		SET @p = '@idx int output'
		EXEC sp_executesql @sql, @p, @idx=@aIDX1 output
	
		SET @Lv1 = (SELECT userLevel FROM userGameDB WHERE accountIDX=@aIDX1)
		SET @nn1 = (SELECT nickName FROM userMemberDB WHERE accountIDX=@aIDX1)
	
		SET @sql = 'SELECT @idx=accountIDX FROM userRankingDB_award WHERE award' + convert(varchar(4), @i) + '_now=2'
		SET @p = '@idx int output'
		EXEC sp_executesql @sql, @p, @idx=@aIDX2 output
	
		SET @Lv2 = (SELECT userLevel FROM userGameDB WHERE accountIDX=@aIDX2)
		SET @nn2 = (SELECT nickName FROM userMemberDB WHERE accountIDX=@aIDX2)
	
		SET @sql = 'SELECT @idx=accountIDX FROM userRankingDB_award WHERE award' + convert(varchar(4), @i) + '_now=3'
		SET @p = '@idx int output'
		EXEC sp_executesql @sql, @p, @idx=@aIDX3 output
	
		SET @Lv3 = (SELECT userLevel FROM userGameDB WHERE accountIDX=@aIDX3)
		SET @nn3 = (SELECT nickName FROM userMemberDB WHERE accountIDX=@aIDX3)
	
		INSERT INTO userRankingDB_award_top3 (awardType, rank1_accountIDX, rank1_userLevel, rank1_nickName, rank2_accountIDX, rank2_userLevel, rank2_nickName, rank3_accountIDX, rank3_userLevel, rank3_nickName, dateIDX)
		VALUES (@i, @aIDX1, @Lv1, @nn1, @aIDX2, @Lv2, @nn2, @aIDX3, @Lv3, @nn3, @dateIDX)
	
		SET @i = @i + 1
	END
*/
GO


-- ----------------------------
-- procedure structure for game_gold_set_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_gold_set_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_gold_set_delete]
GO

CREATE PROCEDURE [dbo].[game_gold_set_delete]

	@ACCOUNT_IDX	INT,
	@GOLD_TYPE		TINYINT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;
	
	DECLARE @nReturn		INT	= 0		-- True

	UPDATE dbo.userGoldDB WITH (XLOCK, ROWLOCK)
	   SET GoldStatus = 0
	 WHERE AccountIDX = @ACCOUNT_IDX
	   AND GoldType = @GOLD_TYPE
	   AND GoldStatus = 1
	   AND ExpirationDate < GETDATE();

	IF (@@ERROR <> 0)
	BEGIN
		RETURN -1;
	END

	RETURN @nReturn;
GO


-- ----------------------------
-- procedure structure for web_search_userID_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_search_userID_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_search_userID_get_data]
GO

CREATE PROCEDURE [dbo].[web_search_userID_get_data]
(
	@juminEncode varchar(64)
)
AS
	SELECT userID FROM userMemberDB WHERE accountIDX in (SELECT accountIDX FROM userNameDB WHERE userEnCode=@juminEncode)
GO


-- ----------------------------
-- procedure structure for game_league_user_list_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_user_list_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_user_list_add]
GO

CREATE PROCEDURE [dbo].[game_league_user_list_add]
(
	@accountIDX int
,	@startDate int
,	@endDate int
,	@leagueType tinyint
,	@leagueState tinyint
,	@leagueName nvarchar(20)
,	@maxRound smallint
,	@bannerA int
,	@bannerB int
,	@modeType int
,	@maxcount tinyint
,	@autoType tinyint
,	@recruitDate int
,	@waitDate int
,	@roundType1_playDate int
,	@roundType2_playDate int
,	@roundType3_playDate int
,	@roundType4_playDate int
,	@roundType5_playDate int
,	@roundType6_playDate int
,	@roundType7_playDate int
,	@roundType8_playDate int
,	@roundType9_playDate int
,	@roundType10_playDate int
,	@roundType11_playDate int
)
AS

SET NOCOUNT ON

BEGIN TRAN

DECLARE @leagueIDX int
DECLARE @infoIDX int
DECLARE @roundIDX int

INSERT INTO dbo.userLeagueListDB (
	accountIDX, startDate, endDate, leagueType, leagueState, regDate
)
VALUES (
	@accountIDX, @startDate, @endDate, @leagueType, @leagueState, GETDATE()
)

IF (@@ROWCOUNT = 0 or @@ERROR <> 0)
BEGIN
	ROLLBACK TRAN
	SET @leagueIDX = 0
	SELECT @leagueIDX AS 'idx'
END
ELSE
BEGIN
	SET @leagueIDX = SCOPE_IDENTITY()
END


INSERT INTO dbo.userLeagueInfoDB (
	leagueIDX, leagueName, maxRound, bannerA, bannerB, modeType, maxcount, autoType, announce, recruitDate, waitDate, regDate
)
VALUES (
	@leagueIDX, @leagueName, @maxRound, @bannerA, @bannerB, @modeType, @maxcount, @autoType, '', @recruitDate, @waitDate, GETDATE()
)


IF (@@ROWCOUNT = 0 or @@ERROR <> 0)
BEGIN
	ROLLBACK TRAN
	SET @infoIDX = 0
	SELECT @infoIDX AS 'idx'
END
ELSE
BEGIN
	SET @infoIDX = SCOPE_IDENTITY()
END


INSERT INTO dbo.userLeagueRoundDB (
	infoIDX,
	roundType1_playDate, roundType1_presentCode1, roundType1_presentCode2, roundType1_presentCode3, roundType1_presentCode4,
	roundType2_playDate, roundType2_presentCode1, roundType2_presentCode2, roundType2_presentCode3, roundType2_presentCode4,
	roundType3_playDate, roundType3_presentCode1, roundType3_presentCode2, roundType3_presentCode3, roundType3_presentCode4,
	roundType4_playDate, roundType4_presentCode1, roundType4_presentCode2, roundType4_presentCode3, roundType4_presentCode4,
	roundType5_playDate, roundType5_presentCode1, roundType5_presentCode2, roundType5_presentCode3, roundType5_presentCode4,
	roundType6_playDate, roundType6_presentCode1, roundType6_presentCode2, roundType6_presentCode3, roundType6_presentCode4,
	roundType7_playDate, roundType7_presentCode1, roundType7_presentCode2, roundType7_presentCode3, roundType7_presentCode4,
	roundType8_playDate, roundType8_presentCode1, roundType8_presentCode2, roundType8_presentCode3, roundType8_presentCode4,
	roundType9_playDate, roundType9_presentCode1, roundType9_presentCode2, roundType9_presentCode3, roundType9_presentCode4,
	roundType10_playDate, roundType10_presentCode1, roundType10_presentCode2, roundType10_presentCode3, roundType10_presentCode4,
	roundType11_playDate, roundType11_presentCode1, roundType11_presentCode2, roundType11_presentCode3, roundType11_presentCode4,
	regDate
)
VALUES (
	@infoIDX,
	@roundType1_playDate, 0, 0, 0, 0,
	@roundType2_playDate, 0, 0, 0, 0,
	@roundType3_playDate, 0, 0, 0, 0,
	@roundType4_playDate, 0, 0, 0, 0,
	@roundType5_playDate, 0, 0, 0, 0,
	@roundType6_playDate, 0, 0, 0, 0,
	@roundType7_playDate, 0, 0, 0, 0,
	@roundType8_playDate, 0, 0, 0, 0,
	@roundType9_playDate, 0, 0, 0, 0,
	@roundType10_playDate, 0, 0, 0, 0,
	@roundType11_playDate, 0, 0, 0, 0,
	GETDATE()
)


IF (@@ROWCOUNT = 0 or @@ERROR <> 0)
BEGIN
	ROLLBACK TRAN
	SET @roundIDX = 0
	SELECT @roundIDX AS 'idx'
END
ELSE
BEGIN
	COMMIT TRAN
	SELECT @leagueIDX AS 'idx'
END
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_all_medal_level
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_all_medal_level]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_all_medal_level]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_all_medal_level]
(
	@accountIDX int
)
AS
	SELECT medalLevel, expert FROM userRankingDB_medal WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_friend_list_get_idx_level_dev
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_list_get_idx_level_dev]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_list_get_idx_level_dev]
GO

CREATE PROCEDURE [dbo].[web_friend_list_get_idx_level_dev]
(
	@accountIDX int
)
AS
	SELECT a.friendAccIDX, b.userLevel FROM userFriendDB a WITH(NOLOCK) JOIN userGameDB b WITH(NOLOCK) ON a.friendAccIDX = b.accountIDX 
	WHERE a.userAccIDX=@accountIDX and a.flag=1
GO


-- ----------------------------
-- procedure structure for game_record_battle_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_record_battle_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_record_battle_save]
GO

CREATE PROCEDURE [dbo].[game_record_battle_save]
(
	@accountIDX int
,	@type1_win int
,	@type1_lose int
,	@type1_kill int
,	@type1_death int
,	@type2_win int
,	@type2_lose int
,	@type2_kill int
,	@type2_death int
,	@type3_win int
,	@type3_lose int
,	@type3_kill int
,	@type3_death int
,	@type4_win int
,	@type4_lose int
,	@type4_kill int
,	@type4_death int
)

AS

	if (not exists(SELECT * FROM userRecordBattleDB WHERE accountIDX=@accountIDX))
	BEGIN
		INSERT INTO userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, type3_win, type3_lose, type3_kill, type3_death, type4_win, type4_lose, type4_kill, type4_death, regDate)
		VALUES (@accountIDX, @type1_win, @type1_lose, @type1_kill, @type1_death, @type2_win, @type2_lose, @type2_kill, @type2_death, @type3_win, @type3_lose, @type3_kill, @type3_death, @type4_win, @type4_lose, @type4_kill, @type4_death, getdate())
	END
	ELSE
	BEGIN
		UPDATE userRecordBattleDB SET
			type1_win	= @type1_win
		,	type1_lose	= @type1_lose
		,	type1_kill	= @type1_kill
		,	type1_death	= @type1_death
		,	type2_win	= @type2_win
		,	type2_lose	= @type2_lose
		,	type2_kill	= @type2_kill
		,	type2_death	= @type2_death
		,	type3_win	= @type3_win
		,	type3_lose	= @type3_lose
		,	type3_kill	= @type3_kill
		,	type3_death	= @type3_death
		,	type4_win	= @type4_win
		,	type4_lose	= @type4_lose
		,	type4_kill	= @type4_kill
		,	type4_death	= @type4_death
		WHERE accountIDX = @accountIDX

	END
GO


-- ----------------------------
-- procedure structure for AGENT_RANKING_AWARD_TOP100
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_RANKING_AWARD_TOP100]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_RANKING_AWARD_TOP100]
GO

CREATE PROCEDURE [dbo].[AGENT_RANKING_AWARD_TOP100]
AS
/*
SET NOCOUNT ON

DECLARE @i tinyint, @awardCnt tinyint, @sql varchar(500)

SET @i = 1
SET @awardCnt = 27  ------------ 수상 개수 (수상 추가시 이곳도 증가)

IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_award_top100')
DROP TABLE userRankingDB_award_top100

CREATE TABLE userRankingDB_award_top100
(
	idx			int	IDENTITY(1,1)	NOT	NULL
,	accountIDX	int				NOT	NULL
,	nickName		varchar(20)		NULL
,	userLevel		int				NULL
,	guildIDX		int				NULL
,	awardType	int				NOT	NULL		DEFAULT(0)
,	rank_prev		int				NOT	NULL		DEFAULT(0)
,	rank_now		int				NOT	NULL		DEFAULT(0)
,	awardEXP		int				NOT	NULL		DEFAULT(0)
)

WHILE (@i <= @awardCnt)
BEGIN
	SET @sql = ''
	SET @sql = @sql + 'INSERT INTO userRankingDB_award_top100 (accountIDX, awardType, rank_prev, rank_now, awardEXP) '
	SET @sql = @sql + 'SELECT TOP 100 accountIDX, ' + CONVERT(varchar(2), @i) + ', award' + CONVERT(varchar(2), @i) + '_prev, award' + CONVERT(varchar(2), @i) + '_now, award' + CONVERT(varchar(2), @i) + '_point '
	SET @sql = @sql + 'FROM userRankingDB_award WITH(NOLOCK) WHERE award' + CONVERT(varchar(2), @i) + '_now > 0 ORDER BY award' + CONVERT(varchar(2), @i) + '_now ASC'
	EXECUTE (@sql)
	SET @i = @i + 1
END


UPDATE a SET nickName = b.nickName 
FROM (
	SELECT accountIDX, nickName FROM userMemberDB WITH(NOLOCK) WHERE accountIDX in (SELECT accountIDX FROM userRankingDB_award_top100)
) b JOIN userRankingDB_award_top100 a ON b.accountIDX = a.accountIDX


UPDATE a SET guildIDX = b.guildIDX 
FROM (
	SELECT accountIDX, guildIDX, guildJoinType FROM userGuildInfoDB WITH(NOLOCK)
) b JOIN userRankingDB_award_top100 a ON b.accountIDX = a.accountIDX WHERE b.guildJoinType=1


UPDATE a SET userLevel = b.userLevel 
FROM (
	SELECT accountIDX, userLevel FROM userGameDB WITH(NOLOCK) WHERE accountIDX in (SELECT accountIDX FROM userRankingDB_award_top100)
) b JOIN userRankingDB_award_top100 a ON b.accountIDX = a.accountIDX
*/
GO


-- ----------------------------
-- procedure structure for game_gold_set_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_gold_set_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_gold_set_data]
GO

CREATE PROCEDURE [dbo].[game_gold_set_data]

	@TABLE_INDEX	INT,
	@ACCOUNT_IDX	INT,
	@AMOUNT			INT

AS

	SET NOCOUNT ON;

	DECLARE @nReturn		INT; -- True
	DECLARE @REAL_AMT		INT;
	DECLARE @RESULT_AMT		INT;
	DECLARE @GOLD_STATUS	TINYINT;

	SET @nReturn = 0;
	SET @REAL_AMT = 0;
	SET @RESULT_AMT = 0;
	SET @GOLD_STATUS = 0;

	SELECT @REAL_AMT = ISNULL(Amount, 0)
	  FROM dbo.userGoldDB WITH (NOLOCK)
	 WHERE AccountIDX = @ACCOUNT_IDX
	   AND idx = @TABLE_INDEX
	   AND GoldStatus = 1;

	IF ((@REAL_AMT - @AMOUNT) < 0)
	BEGIN
		--여기 수정함                
		SELECT 1, @TABLE_INDEX, @REAL_AMT, @AMOUNT;
		RETURN;
	END

	SET @RESULT_AMT = @REAL_AMT - @AMOUNT;
	IF (@RESULT_AMT > 0)
	BEGIN
		SET @GOLD_STATUS = 1;
	END
	ELSE
	BEGIN
		SET @GOLD_STATUS = 0;
	END

	UPDATE dbo.userGoldDB WITH (XLOCK, ROWLOCK)
	   SET Amount = @RESULT_AMT,
	       GoldStatus = @GOLD_STATUS
	 WHERE AccountIDX = @ACCOUNT_IDX
	   AND idx = @TABLE_INDEX;

	IF (@@ROWCOUNT = 0) OR (@@ERROR <> 0)
	BEGIN
		SELECT 2, @TABLE_INDEX, @REAL_AMT, @AMOUNT;
		RETURN;
	END

	--여기 수정한거, 원래 0이면 성공임
	SELECT 0, @TABLE_INDEX AS idx, @RESULT_AMT AS Amount, @AMOUNT AS UsedAmount;
GO


-- ----------------------------
-- procedure structure for web_resite_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_resite_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_resite_get_data]
GO

CREATE PROCEDURE [dbo].[web_resite_get_data]
(
	@accountIDX int
)
AS
	SELECT clickDate FROM userInfoDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_league_team_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_self_index]
GO

CREATE PROCEDURE [dbo].[game_league_team_self_index]
(
	@leagueIDX int
,	@leaderIDX int
)
AS

SET NOCOUNT ON

SELECT TOP 1 idx
FROM dbo.userLeagueTeamDB WITH(NOLOCK)
WHERE leagueIDX = @leagueIDX
  AND leaderIDX = @leaderIDX
ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_all_medal_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_all_medal_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_all_medal_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_all_medal_data]
(
	@accountIDX int
)
As
	SELECT	medal1_type, medal2_type, medal3_type, medal4_type, medal5_type, 
			medal6_type, medal7_type, medal8_type, medal9_type, medal10_type 
	FROM userMedalDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_friend_list_get_idx_level
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_list_get_idx_level]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_list_get_idx_level]
GO

CREATE PROCEDURE [dbo].[web_friend_list_get_idx_level]
(
	@accountIDX int
)
AS
	SELECT a.friendAccIDX, b.userLevel FROM userFriendDB a WITH(NOLOCK) JOIN userGameDB b WITH(NOLOCK) ON a.friendAccIDX = b.accountIDX 
	WHERE a.userAccIDX=@accountIDX and a.flag=1 and a.friendAccIDX not in (SELECT accountIDX FROM userMemberDB WITH(NOLOCK) WHERE userType < 10)
GO


-- ----------------------------
-- procedure structure for game_record_battle_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_record_battle_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_record_battle_get_data]
GO

CREATE PROCEDURE [dbo].[game_record_battle_get_data]
(
	@accountIDX int
)
AS

	SELECT	type1_win, type1_lose, type1_kill, type1_death, 
			type2_win, type2_lose, type2_kill, type2_death, 
			type3_win, type3_lose, type3_kill, type3_death, 
			type4_win, type4_lose, type4_kill, type4_death 
	FROM userRecordBattleDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for AGENT_RANKING_AWARD
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_RANKING_AWARD]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_RANKING_AWARD]
GO

CREATE PROCEDURE [dbo].[AGENT_RANKING_AWARD]

AS
/*
	DECLARE @strSQL varchar(500)
	DECLARE @i tinyint, @j tinyint

	IF (NOT EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name='userRankingDB_temp'))
	BEGIN
		CREATE TABLE userRankingDB_temp
		(
			accountIDX int
		,	rank int
		)
	END

	UPDATE userRankingDB_award SET 
		award1_prev = award1_now
	,	award2_prev = award2_now
	,	award3_prev = award3_now
	,	award4_prev = award4_now
	,	award5_prev = award5_now
	,	award6_prev = award6_now
	,	award7_prev = award7_now
	,	award8_prev = award8_now
	,	award9_prev = award9_now
	,	award10_prev = award10_now
	,	award11_prev = award11_now
	,	award12_prev = award12_now
	,	award13_prev = award13_now
	,	award14_prev = award14_now
	,	award15_prev = award15_now
	,	award16_prev = award16_now
	,	award17_prev = award17_now
	,	award18_prev = award18_now
	,	award19_prev = award19_now
	,	award20_prev = award20_now
	,	award21_prev = award21_now
	,	award22_prev = award22_now
	,	award23_prev = award23_now
	,	award24_prev = award24_now
	,	award25_prev = award25_now
	,	award26_prev = award26_now
	,	award27_prev = award27_now

	SET @i = 1

	WHILE (@i <= 27)

	BEGIN

		SET @j = 1
		TRUNCATE TABLE userRankingDB_temp_expert

		WHILE (@j <= 10)

		BEGIN
			SET @strSQL = ''
			SET @strSQL = @strSQL + 'INSERT INTO userRankingDB_temp_expert (accountIDX, expert)'
			SET @strSQL = @strSQL + 'SELECT accountIDX, award' + CONVERT(varchar(2), @j) + '_point FROM userAwardDB WITH(NOLOCK) '
			SET @strSQL = @strSQL + 'WHERE award' + CONVERT(varchar(2), @j) + '_type = ' + CONVERT(varchar(2), @i)
			EXEC (@strSQL)
			SET @j = @j + 1
		END

		TRUNCATE TABLE userRankingDB_temp

		INSERT INTO userRankingDB_temp (accountIDX, rank) 
		SELECT accountIDX, RANK() OVER(ORDER BY expert DESC) AS 'rank' FROM userRankingDB_temp_expert WITH(NOLOCK)

		SET @strSQL = ''
		SET @strSQL = 'UPDATE a SET award' + CONVERT(varchar(4), @i) + '_now = b.rank FROM (SELECT accountIDX, rank FROM userRankingDB_temp) b INNER JOIN userRankingDB_award a ON a.accountIDX = b.accountIDX'
		EXEC (@strSQL)

		SET @strSQL = ''
		SET @strSQL = 'UPDATE a SET award' + CONVERT(varchar(4), @i) + '_point = b.expert FROM (SELECT accountIDX, expert FROM userRankingDB_temp_expert) b INNER JOIN userRankingDB_award a ON a.accountIDX = b.accountIDX'
		EXEC (@strSQL)

		SET @i = @i + 1

	END
*/
GO


-- ----------------------------
-- procedure structure for game_gold_set_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_gold_set_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_gold_set_add]
GO

CREATE PROCEDURE [dbo].[game_gold_set_add]

	@ACCOUNT_IDX		INT,
	@ORIGINAL_AMOUNT	INT,
	@AMOUNT				INT,
	@GOLD_TYPE			TINYINT,
	@EXPIRATION_DATE	DATETIME

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	DECLARE @nReturn		INT	= 0		-- True
	DECLARE @INSERT_INDEX	INT = 0
	
	INSERT INTO dbo.userGoldDB WITH (XLOCK, ROWLOCK) (AccountIDX, OriginalAmount, Amount, GoldType, GoldStatus, ExpirationDate, RegDate)
	VALUES (@ACCOUNT_IDX, @ORIGINAL_AMOUNT, @AMOUNT, @GOLD_TYPE, 1, @EXPIRATION_DATE, GETDATE())

	IF (@@ROWCOUNT = 0) OR (@@ERROR <> 0)
	BEGIN
		RETURN -1;
	END
	
	SET @INSERT_INDEX = SCOPE_IDENTITY()
	
	SELECT @INSERT_INDEX AS TableIndex;
	   

	RETURN @nReturn;
GO


-- ----------------------------
-- procedure structure for web_resite_bonus_point
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_resite_bonus_point]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_resite_bonus_point]
GO

CREATE PROCEDURE [dbo].[web_resite_bonus_point]
(
	@accountIDX varchar(12)
,	@bonusCash int
,	@userIP varchar(16)
)
AS
	UPDATE userInfoDB SET clickDate = getdate() WHERE accountIDX=@accountIDX

	UPDATE userCashDB SET
		amtCash = amtCash + @bonusCash
,		amtBonus = amtBonus + @bonusCash
,		chgDate = getdate()
	WHERE accountIDX = @accountIDX

	INSERT INTO LosaGame_log.DBO.log_cash (accountIDX, userIP, [DBID], applyType, amount, note, regDate)
	VALUES (@accountIDX, @userIP, 'BNNCLICK', 'B0', @bonusCash, '배너 클릭 보너스', getdate())
GO


-- ----------------------------
-- procedure structure for game_league_team_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_save]
GO

CREATE PROCEDURE [dbo].[game_league_team_save]
(
	@idx int
,	@leaderIDX int
,	@leaguePosition smallint
,	@currentRound tinyint
,	@factionPoint int
)
AS

SET NOCOUNT ON

UPDATE dbo.userLeagueTeamDB
SET leaderIDX = @leaderIDX
,	leaguePosition = @leaguePosition
,	currentRound = @currentRound
,	factionPoint = @factionPoint
WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_all_game_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_all_game_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_all_game_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_all_game_data]
(
	@accountIDX int
)
As
	SELECT	a.playTime
,			c.type1_win AS 'battle_win'
,			c.type1_lose AS 'battle_lose'
,			c.type1_kill AS 'battle_kill'
,			c.type1_death AS 'battle_death'
,			a.userLevel, a.connDate, b.gameServerID 
	FROM userGameDB a WITH(NOLOCK) INNER JOIN userLoginDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX INNER JOIN userRecordBattleDB c WITH(NOLOCK) ON a.accountIDX = c.accountIDX
	WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_friend_list_get_guildmember
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_list_get_guildmember]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_list_get_guildmember]
GO

CREATE PROCEDURE [dbo].[web_friend_list_get_guildmember]
(
	@accountIDX int
,	@guildIDX int
)
AS
	SELECT a.accountIDX, b.userLevel FROM userGuildInfoDB a WITH(NOLOCK) JOIN userGameDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX 
	WHERE a.guildIDX=@guildIDX and a.guildJoinType=1 and a.accountIDX not in (@accountIDX)
GO


-- ----------------------------
-- procedure structure for game_ranking_hero_topN
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_ranking_hero_topN]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_ranking_hero_topN]
GO

CREATE PROCEDURE [dbo].[game_ranking_hero_topN]
(
	@rank1 int
,	@rank2 int
)
AS

	SET NOCOUNT ON

	SELECT a.accountIDX, b.userLevel, c.nickName, a.title, d.type3_win, d.type3_lose, b.regionType, b.userHerocEXP + b.userHerosEXP AS 'userHeroEXP'
	FROM userRankingDB_hero a WITH(NOLOCK)
		LEFT JOIN userGameDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX
		LEFT JOIN userMemberDB c WITH(NOLOCK) ON a.accountIDX = c.accountIDX
		LEFT JOIN userRecordBattleDB d WITH(NOLOCK) ON a.accountIDX = d.accountIDX
	WHERE a.daily >= @rank1 and a.daily <= @rank2 ORDER BY a.daily ASC
GO


-- ----------------------------
-- procedure structure for game_guild_get_list_original
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_get_list_original]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_get_list_original]
GO

CREATE PROCEDURE [dbo].[game_guild_get_list_original]
(
	@topn int
,	@idx int
)
AS
	DECLARE @sql nvarchar(1000)
	DECLARE @ParmDefinition nvarchar(500)

	SET @sql = N'SELECT TOP (@topn_in) a.idx, a.guildName, a.aboutguild, a.guildmark, a.point, a.maxcount, a.regDate, a.membercount, a.todaypoint, a.guildLevel, a.regionType, '
	SET @sql = @sql + ' b.type1_win, b.type1_lose, b.type1_kill, b.type1_death '
	SET @sql = @sql + ' FROM userGuildDB a WITH(NOLOCK) INNER JOIN userRecordGuildDB b WITH(NOLOCK) ON a.idx = b.guildIDX WHERE a.idx < @idx_in ORDER BY a.idx DESC'

	SET @ParmDefinition = N'@topn_in int, @idx_in int'

	EXECUTE sp_executesql @sql, @ParmDefinition, @topn_in=@topn, @idx_in=@idx
GO


-- ----------------------------
-- procedure structure for game_gold_get_used_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_gold_get_used_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_gold_get_used_list]
GO

CREATE PROCEDURE [dbo].[game_gold_get_used_list]

	@ACCOUNT_IDX	INT,
	@GOLD_TYPE		TINYINT,
	@TOP_N			SMALLINT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	DECLARE @nReturn		INT	= 0		-- True
	
	SELECT TOP (@TOP_N) idx, OriginalAmount, Amount, ExpirationDate
	  FROM dbo.userGoldDB WITH (NOLOCK)
	 WHERE AccountIDX = @ACCOUNT_IDX
	   AND GoldType = @GOLD_TYPE
	   AND GoldStatus = 0
	 ORDER BY idx DESC

	RETURN @nReturn;
GO


-- ----------------------------
-- procedure structure for z_nouse_game_friend_best_join_in
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_game_friend_best_join_in]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_game_friend_best_join_in]
GO

CREATE PROCEDURE [dbo].[z_nouse_game_friend_best_join_in]
(
	@accountIDX int
,	@friendIDX int
)
AS
	DECLARE @default int, @cnt int, @errcount int
	SET @default = 5	--디폴트 절친 제한 수

	SET @cnt = 0
	SET @errcount = 0

	SET @cnt = (SELECT count(*) FROM userMemberDB where accountIDX=@friendIDX)
	IF (@cnt = 0)
	BEGIN
		SET @errcount = 2
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @cnt = (SELECT count(*) FROM userFriendBestDB WHERE accountIDX=@accountIDX and friendIDX=@friendIDX)
	IF (@cnt > 0)
	BEGIN
		SET @errcount = 3
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @cnt = (SELECT count(*) FROM userFriendBestDB WHERE accountIDX=@friendIDX and friendIDX=@accountIDX)
	IF (@cnt > 0)
	BEGIN
		SET @errcount = 4
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @cnt = (SELECT count(*) FROM userFriendBestDB where accountIDX=@friendIDX and flag > 0)
	if (@cnt >= @default)
	BEGIN
		SET @errcount = 5
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	IF (@errcount > 0)
	BEGIN
		SELECT @errcount AS 'returnVal'
	END
	ELSE
	BEGIN
		SELECT 1 AS 'returnVal'
		INSERT INTO userFriendBestDB (accountIDX, friendIDX, flag, flagTime, regDate)
		VALUES (@friendIDX, @accountIDX, 0, 0, getdate())
	END
GO


-- ----------------------------
-- procedure structure for game_league_team_round_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_round_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_round_save]
GO

CREATE PROCEDURE [dbo].[game_league_team_round_save]
(
	@teamIDX int
,	@currentRound tinyint
)
AS

SET NOCOUNT ON

UPDATE dbo.userLeagueTeamDB
SET currentRound = @currentRound
WHERE idx=@teamIDX
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_all_classgroup_expert
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_all_classgroup_expert]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_all_classgroup_expert]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_all_classgroup_expert]
(
	@accountIDX int
)
AS
	SELECT 	userEXP FROM userGameDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_friend_join_app
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_join_app]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_join_app]
GO

CREATE PROCEDURE [dbo].[web_friend_join_app]
(
	@accountIDX int
,	@friendIDX int
)
AS

	SET XACT_ABORT ON

	BEGIN TRAN

	DECLARE @cnt tinyint
	SET @cnt = (SELECT count(*) FROM userFriendDB WITH(NOLOCK) WHERE userAccIDX=@accountIDX and friendAccIDX=@friendIDX and flag=1)

	IF (@cnt = 0)
	BEGIN
		INSERT INTO userFriendDB (userAccIDX, friendAccIDX, flag, regDate) VALUES (@accountIDX, @friendIDX, 1, getdate())
		INSERT INTO userFriendDB (userAccIDX, friendAccIDX, flag, regDate) VALUES (@friendIDX, @accountIDX, 1, getdate())
	END

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_ranking_hero_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_ranking_hero_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_ranking_hero_get_data]
GO

CREATE PROCEDURE [dbo].[game_ranking_hero_get_data]
(
	@accountIDX int
)
AS
	SELECT title, daily, season1, season2, season3, season4, season5, season6 FROM userRankingDB_hero WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_guild_use_item
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_use_item]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_use_item]
GO

CREATE PROCEDURE [dbo].[game_guild_use_item]
(
	@no varchar(4)
,	@tblIDX varchar(12)
)
AS
	DECLARE @sql varchar(200)
	SET @sql = 'UPDATE userItemETCDB SET item' + @no + '_type=0, item' + @no + '_value1=0, item' + @no + '_value2=0 WHERE idx=' + @tblIDX
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for game_gold_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_gold_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_gold_get_data]
GO

CREATE PROCEDURE [dbo].[game_gold_get_data]

	@ACCOUNT_IDX	INT,
	@GOLD_TYPE		TINYINT

AS  

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	DECLARE @nReturn  INT = 0  -- True

	SELECT idx, OriginalAmount, Amount, ExpirationDate
	  FROM dbo.userGoldDB WITH (NOLOCK)
	 WHERE AccountIDX = @ACCOUNT_IDX
	   AND GoldType = @GOLD_TYPE
	   AND GoldStatus = 1
	   AND ExpirationDate > GETDATE()
	 ORDER BY ExpirationDate ASC, idx asc;

	RETURN @nReturn;
GO


-- ----------------------------
-- procedure structure for z_nouse_game_friend_best_join_delete_all
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_game_friend_best_join_delete_all]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_game_friend_best_join_delete_all]
GO

CREATE PROCEDURE [dbo].[z_nouse_game_friend_best_join_delete_all]
(
	@accountIDX int
)
AS

	DELETE FROM userFriendBestDB WHERE accountIDX=@accountIDX and flag=0
GO


-- ----------------------------
-- procedure structure for game_league_team_position_update
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_position_update]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_position_update]
GO

CREATE PROCEDURE [dbo].[game_league_team_position_update]
(
	@teamIndex int
,	@position int
)
AS

SET NOCOUNT ON

UPDATE dbo.userLeagueTeamDB 
SET leaguePosition = @position
WHERE idx = @teamIndex
GO


-- ----------------------------
-- procedure structure for web_minihome_userinfo_all_award_level
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_userinfo_all_award_level]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_userinfo_all_award_level]
GO

CREATE PROCEDURE [dbo].[web_minihome_userinfo_all_award_level]
(
	@accountIDX int
)
AS
	SELECT awardLevel, expert FROM userRankingDB_award WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_friend_join
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_join]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_join]
GO

CREATE PROCEDURE [dbo].[web_friend_join]
(
	@accountIDX int
,	@friendIDX int
)
AS
	INSERT INTO userFriendDB (userAccIDX, friendAccIDX, flag, regDate)
	VALUES (@friendIDX, @accountIDX, 0, getdate())
GO


-- ----------------------------
-- procedure structure for game_questcomplete_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_questcomplete_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_questcomplete_save]
GO

CREATE PROCEDURE [dbo].[game_questcomplete_save]
(
	@idx int
,	@quest1_type int
,	@quest1_time int
,	@quest2_type int
,	@quest2_time int
,	@quest3_type int
,	@quest3_time int
,	@quest4_type int
,	@quest4_time int
,	@quest5_type int
,	@quest5_time int
,	@quest6_type int
,	@quest6_time int
,	@quest7_type int
,	@quest7_time int
,	@quest8_type int
,	@quest8_time int
,	@quest9_type int
,	@quest9_time int
,	@quest10_type int
,	@quest10_time int
,	@quest11_type int
,	@quest11_time int
,	@quest12_type int
,	@quest12_time int
,	@quest13_type int
,	@quest13_time int
,	@quest14_type int
,	@quest14_time int
,	@quest15_type int
,	@quest15_time int
,	@quest16_type int
,	@quest16_time int
,	@quest17_type int
,	@quest17_time int
,	@quest18_type int
,	@quest18_time int
,	@quest19_type int
,	@quest19_time int
,	@quest20_type int
,	@quest20_time int
)
AS
	UPDATE userQuestCompleteDB SET
		quest1_type = @quest1_type
,		quest1_time = @quest1_time
,		quest2_type = @quest2_type
,		quest2_time = @quest2_time
,		quest3_type = @quest3_type
,		quest3_time = @quest3_time
,		quest4_type = @quest4_type
,		quest4_time = @quest4_time
,		quest5_type = @quest5_type
,		quest5_time = @quest5_time
,		quest6_type = @quest6_type
,		quest6_time = @quest6_time
,		quest7_type = @quest7_type
,		quest7_time = @quest7_time
,		quest8_type = @quest8_type
,		quest8_time = @quest8_time
,		quest9_type = @quest9_type
,		quest9_time = @quest9_time
,		quest10_type = @quest10_type
,		quest10_time = @quest10_time
,		quest11_type = @quest11_type
,		quest11_time = @quest11_time
,		quest12_type = @quest12_type
,		quest12_time = @quest12_time
,		quest13_type = @quest13_type
,		quest13_time = @quest13_time
,		quest14_type = @quest14_type
,		quest14_time = @quest14_time
,		quest15_type = @quest15_type
,		quest15_time = @quest15_time
,		quest16_type = @quest16_type
,		quest16_time = @quest16_time
,		quest17_type = @quest17_type
,		quest17_time = @quest17_time
,		quest18_type = @quest18_type
,		quest18_time = @quest18_time
,		quest19_type = @quest19_type
,		quest19_time = @quest19_time
,		quest20_type = @quest20_type
,		quest20_time = @quest20_time 
	WHERE idx = @idx
GO


-- ----------------------------
-- procedure structure for game_character_get_self_index_original
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_character_get_self_index_original]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_character_get_self_index_original]
GO

CREATE PROCEDURE [dbo].[game_character_get_self_index_original]
(
	@accountIDX int
,	@getCount int
)
As
	DECLARE @sql nvarchar(500)
	DECLARE @ParmDefinition nvarchar(500)

	SET @sql = N'SELECT TOP (@getCount_in) idx FROM userCharacterDB WHERE accountIDX = @accountIDX_in ORDER BY idx DESC'

	SET @ParmDefinition = N'@getCount_in int, @accountIDX_in int'

	EXECUTE sp_executesql @sql, @ParmDefinition, @accountIDX_in=@accountIDX, @getCount_in=@getCount
GO


-- ----------------------------
-- procedure structure for game_get_nickname
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_get_nickname]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_get_nickname]
GO

CREATE PROCEDURE [dbo].[game_get_nickname]
(
	@accountIDX int
)
AS
	SELECT nickName FROM userMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for z_nouse_game_friend_best_join_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_game_friend_best_join_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_game_friend_best_join_delete]
GO

CREATE PROCEDURE [dbo].[z_nouse_game_friend_best_join_delete]
(
	@idx int
)
AS
	DELETE FROM userFriendBestDB WHERE idx=@idx and flag=0
GO


-- ----------------------------
-- procedure structure for game_league_team_point_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_point_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_point_save]
GO

CREATE PROCEDURE [dbo].[game_league_team_point_save]
(
	@idx int
,	@factionPoint int
,	@currentRound tinyint
,	@leaguePosition smallint
,	@leagueStartPosition smallint
)
AS

SET NOCOUNT ON

UPDATE dbo.userLeagueTeamDB
   SET leaguePosition = @leaguePosition,
	   currentRound = @currentRound,
	   factionPoint = @factionPoint,
	   leagueStartPosition = @leagueStartPosition
 WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_minihome_reg_friend_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_reg_friend_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_reg_friend_count]
GO

CREATE PROCEDURE [dbo].[web_minihome_reg_friend_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM userFriendDB WITH(NOLOCK) WHERE friendAccIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_friend_is_join2
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_is_join2]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_is_join2]
GO

CREATE PROCEDURE [dbo].[web_friend_is_join2]
(
	@userAccIDX int
,	@friendAccIDX int
)
As
	SELECT count(*) FROM userFriendDB WITH(NOLOCK) WHERE userAccIDX = @userAccIDX and friendAccIDX = @friendAccIDX and flag=0
GO


-- ----------------------------
-- procedure structure for game_questcomplete_get_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_questcomplete_get_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_questcomplete_get_self_index]
GO

CREATE PROCEDURE [dbo].[game_questcomplete_get_self_index]
(
	@accountIDX int
)
AS
	SELECT Max(idx) FROM userQuestCompleteDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_get_limitType
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_get_limitType]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_get_limitType]
GO

CREATE PROCEDURE [dbo].[game_get_limitType]
(
	@accountIDX int
)
As
	SELECT	limitType, limitDate FROM userMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for z_nouse_game_friend_best_join_app_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_game_friend_best_join_app_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_game_friend_best_join_app_self_index]
GO

CREATE PROCEDURE [dbo].[z_nouse_game_friend_best_join_app_self_index]
(
	@accountIDX int
,	@friendIDX int
)
AS

	SELECT MAX(idx) FROM userFriendBestDB WHERE accountIDX=@accountIDX and friendIDX=@friendIDX and flag=1

	-- game_friend_best_join_app 의 유저인덱스와는 주체가 다름. 똑같이 맞췄다가 요청으로 변경.
GO


-- ----------------------------
-- procedure structure for game_league_team_member_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_member_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_member_list]
GO

CREATE PROCEDURE [dbo].[game_league_team_member_list]
(
	@teamIDX int
)
AS

SET NOCOUNT ON

SELECT a.idx, a.accountIDX, b.nickName, c.userLevel, c.renspoint,
	   CASE WHEN d.guildJoinType=1 THEN d.guildIDX
	   ELSE 0
	   END AS guildIDX
FROM dbo.userLeagueTeamMemberDB a WITH(NOLOCK)
JOIN dbo.userMemberDB b WITH(NOLOCK)
  ON a.accountIDX = b.accountIDX
JOIN dbo.userGameDB c WITH(NOLOCK)
  ON a.accountIDX = c.accountIDX
LEFT JOIN dbo.userGuildInfoDB d WITH(NOLOCK)
  ON a.accountIDX = d.accountIDX
WHERE a.teamIDX=@teamIDX
  AND a.joinType=1
ORDER BY a.idx ASC
GO


-- ----------------------------
-- procedure structure for web_minihome_medal_all_medal_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_medal_all_medal_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_medal_all_medal_data]
GO

CREATE PROCEDURE [dbo].[web_minihome_medal_all_medal_data]
(
	@accountIDX int
)
As
	SELECT	medal1_type, medal2_type, medal3_type, medal4_type, medal5_type, 
			medal6_type, medal7_type, medal8_type, medal9_type, medal10_type 
	FROM userMedalDB WHERE accountIDX = @accountIDX ORDER BY idx ASC
GO


-- ----------------------------
-- procedure structure for web_friend_is_join1
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_is_join1]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_is_join1]
GO

CREATE PROCEDURE [dbo].[web_friend_is_join1]
(
	@userAccIDX int
,	@friendAccIDX int
)
As
	SELECT count(*) FROM userFriendDB WITH(NOLOCK) WHERE userAccIDX = @friendAccIDX and friendAccIDX = @userAccIDX and flag=0
GO


-- ----------------------------
-- procedure structure for game_questcomplete_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_questcomplete_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_questcomplete_get_list]
GO

CREATE PROCEDURE [dbo].[game_questcomplete_get_list]
(
	@accountIDX int
)
AS
	SELECT	idx, 
			quest1_type, quest1_time, quest2_type, quest2_time, quest3_type, quest3_time, quest4_type, quest4_time, quest5_type, quest5_time, 
			quest6_type, quest6_time, quest7_type, quest7_time, quest8_type, quest8_time, quest9_type, quest9_time, quest10_type, quest10_time, 
			quest11_type, quest11_time, quest12_type, quest12_time, quest13_type, quest13_time, quest14_type, quest14_time, quest15_type, quest15_time, 
			quest16_type, quest16_time, quest17_type, quest17_time, quest18_type, quest18_time, quest19_type, quest19_time, quest20_type, quest20_time 
	FROM userQuestCompleteDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_get_ladderpoint
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_get_ladderpoint]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_get_ladderpoint]
GO

CREATE PROCEDURE [dbo].[game_get_ladderpoint]
(
	@accountIDX int
)
AS
	SELECT rencpoint FROM userGameDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for z_nouse_game_friend_best_join_app
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_game_friend_best_join_app]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_game_friend_best_join_app]
GO

CREATE PROCEDURE [dbo].[z_nouse_game_friend_best_join_app]
(
	@idx int
,	@accountIDX int
,	@friendIDX int
)
AS

	SET XACT_ABORT ON

	DECLARE @default int, @cnt int, @errcount int
	SET @default = 5	--디폴트 절친 제한 수
	SET @cnt = 0
	SET @errcount = 0

	SET @cnt = (SELECT count(*) FROM userMemberDB WITH(NOLOCK) WHERE accountIDX=@friendIDX)
	if (@cnt = 0)
	BEGIN
		SET @errcount = 2
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @cnt = (SELECT count(*) FROM userFriendDB WITH(NOLOCK) WHERE userAccIDX=@accountIDX and friendAccIDX=@friendIDX and flag=1)
	if (@cnt = 0)
	BEGIN
		SET @errcount = 3
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @cnt = (SELECT count(*) FROM userFriendBestDB where accountIDX=@accountIDX and flag > 0)
	if (@cnt >= @default)
	BEGIN
		SET @errcount = 4
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @cnt = (SELECT count(*) FROM userFriendBestDB where accountIDX=@friendIDX and flag > 0)
	if (@cnt >= @default)
	BEGIN
		SET @errcount = 5
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @cnt = (SELECT count(*) FROM userFriendBestDB where accountIDX=@accountIDX and friendIDX=@friendIDX and flag=1)
	if (@cnt > 0)
	BEGIN
		SET @errcount = 6
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @cnt = (SELECT count(*) FROM userFriendBestDB WHERE idx=@idx)
	if (@cnt = 0)
	BEGIN
		SET @errcount = 7
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	BEGIN TRAN

	if (@errcount = 0)
	BEGIN
		SELECT 1 AS 'returnVal'

		UPDATE userFriendBestDB SET flag=1 WHERE idx=@idx

		INSERT INTO userFriendBestDB (accountIDX, friendIDX, flag, flagTime, regDate)
		VALUES (@friendIDX, @accountIDX, 1, 0, getdate())
	END

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_league_team_member_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_member_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_member_delete]
GO

CREATE PROCEDURE [dbo].[game_league_team_member_delete]
(
	@idx int
,	@accountIDX int
)
AS

SET NOCOUNT ON

DECLARE @renspoint int
DECLARE @chkcnt int
DECLARE @errcount int

SET @chkcnt = 0
SET @errcount = 0

SET @chkcnt = (SELECT COUNT(*) FROM dbo.userMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX)
IF (@chkcnt = 0)
BEGIN
	SET @errcount = -2
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @renspoint = (SELECT renspoint FROM userGameDB WITH(NOLOCK) WHERE accountIDX=@accountIDX)
SELECT @renspoint AS factionPoint

DELETE FROM dbo.userLeagueTeamMemberDB
WHERE idx=@idx
  AND accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_minihome_guild_member_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_guild_member_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_guild_member_count]
GO

CREATE PROCEDURE [dbo].[web_minihome_guild_member_count]
(
	@guildIDX int
)
AS
	SELECT count(*) FROM userGuildInfoDB WITH(NOLOCK) WHERE guildIDX=@guildIDX and guildJoinType=1
GO


-- ----------------------------
-- procedure structure for web_friend_is_friend
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_is_friend]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_is_friend]
GO

CREATE PROCEDURE [dbo].[web_friend_is_friend]
(
	@userAccIDX int
,	@friendAccIDX int
)
As
	SELECT count(*) FROM userFriendDB WITH(NOLOCK) WHERE userAccIDX = @userAccIDX and friendAccIDX = @friendAccIDX
GO


-- ----------------------------
-- procedure structure for game_questcomplete_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_questcomplete_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_questcomplete_add]
GO

CREATE PROCEDURE [dbo].[game_questcomplete_add]
(
	@accountIDX int
,	@quest1_type int
,	@quest1_time int
,	@quest2_type int
,	@quest2_time int
,	@quest3_type int
,	@quest3_time int
,	@quest4_type int
,	@quest4_time int
,	@quest5_type int
,	@quest5_time int
,	@quest6_type int
,	@quest6_time int
,	@quest7_type int
,	@quest7_time int
,	@quest8_type int
,	@quest8_time int
,	@quest9_type int
,	@quest9_time int
,	@quest10_type int
,	@quest10_time int
,	@quest11_type int
,	@quest11_time int
,	@quest12_type int
,	@quest12_time int
,	@quest13_type int
,	@quest13_time int
,	@quest14_type int
,	@quest14_time int
,	@quest15_type int
,	@quest15_time int
,	@quest16_type int
,	@quest16_time int
,	@quest17_type int
,	@quest17_time int
,	@quest18_type int
,	@quest18_time int
,	@quest19_type int
,	@quest19_time int
,	@quest20_type int
,	@quest20_time int
)
AS
	INSERT INTO userQuestCompleteDB 
	(accountIDX, 
	 quest1_type, quest1_time, quest2_type, quest2_time, quest3_type, quest3_time, quest4_type, quest4_time, quest5_type, quest5_time, 
	 quest6_type, quest6_time, quest7_type, quest7_time, quest8_type, quest8_time, quest9_type, quest9_time, quest10_type, quest10_time, 
	 quest11_type, quest11_time, quest12_type, quest12_time, quest13_type, quest13_time, quest14_type, quest14_time, quest15_type, quest15_time, 
	 quest16_type, quest16_time, quest17_type, quest17_time, quest18_type, quest18_time, quest19_type, quest19_time, quest20_type, quest20_time) 
	VALUES
	(@accountIDX, 
	 @quest1_type, @quest1_time, @quest2_type, @quest2_time, @quest3_type, @quest3_time, @quest4_type, @quest4_time, @quest5_type, @quest5_time, 
	 @quest6_type, @quest6_time, @quest7_type, @quest7_time, @quest8_type, @quest8_time, @quest9_type, @quest9_time, @quest10_type, @quest10_time, 
	 @quest11_type, @quest11_time, @quest12_type, @quest12_time, @quest13_type, @quest13_time, @quest14_type, @quest14_time, @quest15_type, @quest15_time, 
	 @quest16_type, @quest16_time, @quest17_type, @quest17_time, @quest18_type, @quest18_time, @quest19_type, @quest19_time, @quest20_type, @quest20_time)
GO


-- ----------------------------
-- procedure structure for game_get_age_from_id
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_get_age_from_id]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_get_age_from_id]
GO

CREATE PROCEDURE [dbo].[game_get_age_from_id]
(
	@userID varchar(12)
)
AS

--SELECT b.userBirthday, b.userNumber
--FROM userMemberDB a WITH(NOLOCK)
--JOIN userNameDB b WITH(NOLOCK)
--  ON a.accountIDX=b.accountIDX
--WHERE a.userID=@userID

-- TO DO : CpType 추가 - 다음 셧다운 인증 처리(20150424)
SELECT b.userBirthday, b.userNumber, A.cpType FROM userMemberDB a WITH(NOLOCK) JOIN userNameDB b WITH(NOLOCK)  ON a.accountIDX=b.accountIDX
WHERE a.userID=@userID
GO


-- ----------------------------
-- procedure structure for z_nouse_game_friend_best_cancel
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_game_friend_best_cancel]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_game_friend_best_cancel]
GO

CREATE PROCEDURE [dbo].[z_nouse_game_friend_best_cancel]
(
	@accountIDX int
,	@friendIDX int
,	@flag int
,	@setTime int
)
AS

	SET XACT_ABORT ON

	BEGIN TRAN

	UPDATE userFriendBestDB SET flag=@flag, flagTime=@setTime WHERE accountIDX=@accountIDX and friendIDX=@friendIDX
	UPDATE userFriendBestDB SET flag=@flag, flagTime=@setTime WHERE friendIDX=@accountIDX and accountIDX=@friendIDX

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_league_team_member_app_reg
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_member_app_reg]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_member_app_reg]
GO

CREATE PROCEDURE [dbo].[game_league_team_member_app_reg]
(
	@accountIDX int
,	@leagueIDX int
,	@teamIDX int
,	@factionType tinyint
)
AS

SET NOCOUNT ON

DECLARE @chkcnt int
DECLARE @errcount int
DECLARE @maxmember tinyint
DECLARE @dbFactionType tinyint

SET @chkcnt = 0
SET @errcount = 0
SET @maxmember = 0
SET @dbFactionType = 0

SET @chkcnt = (SELECT COUNT(*) FROM dbo.userMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX)
IF (@chkcnt = 0)
BEGIN
	SET @errcount = 2
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @chkcnt = (SELECT joinType FROM dbo.userMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX)
IF (@chkcnt <= 1)
BEGIN
	SET @errcount = 3
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @chkcnt = (SELECT COUNT(*) FROM dbo.userLeagueTeamMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX AND leagueIDX=@leagueIDX AND joinType=1)
IF (@chkcnt > 0)
BEGIN
	SET @errcount = 4
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @maxmember = (SELECT maxcount FROM dbo.userLeagueTeamDB WITH(NOLOCK) WHERE idx=@teamIDX)
SET @chkcnt = (SELECT COUNT(*) FROM dbo.userLeagueTeamMemberDB WITH(NOLOCK) WHERE teamIDX=@teamIDX AND joinType=1)

IF (@maxmember <= @chkcnt)
BEGIN
	SET @errcount = 5
	SELECT @errcount AS 'returnVal'
	RETURN
END

IF (@factionType > 0)
BEGIN
	SET @dbFactionType = (SELECT regionType FROM dbo.userGameDB WITH(NOLOCK) WHERE accountIDX=@accountIDX)
	IF (@factionType <> @dbFactionType)
	BEGIN
		SET @errcount = 6
		SELECT @errcount AS 'returnVal'
		RETURN
	END
END

IF (@errcount = 0)
BEGIN
	SET @errcount = 1
	SELECT @errcount AS 'returnVal'

	UPDATE dbo.userLeagueTeamMemberDB
	SET joinType=1
	WHERE teamIDX=@teamIDX AND accountIDX=@accountIDX
END
GO


-- ----------------------------
-- procedure structure for web_minihome_guild_get_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_guild_get_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_guild_get_info]
GO

CREATE PROCEDURE [dbo].[web_minihome_guild_get_info]
(
	@guildIDX int
)
AS
	SELECT guildname, guildmark FROM userGuildDB WITH(NOLOCK) WHERE idx=@guildIDX
GO


-- ----------------------------
-- procedure structure for web_friend_is
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_is]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_is]
GO

CREATE PROCEDURE [dbo].[web_friend_is]
(
	@userAccIDX int
,	@friendAccIDX int
)
As
	SELECT count(*) FROM userFriendDB WITH(NOLOCK) WHERE userAccIDX = @userAccIDX and friendAccIDX = @friendAccIDX and flag=1
GO


-- ----------------------------
-- procedure structure for game_quest_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_quest_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_quest_save]
GO

CREATE PROCEDURE [dbo].[game_quest_save]
(
	@idx int
,	@quest1_type int
,	@quest1_value1 int
,	@quest1_value2 int
,	@quest1_time int
,	@quest2_type int
,	@quest2_value1 int
,	@quest2_value2 int
,	@quest2_time int
,	@quest3_type int
,	@quest3_value1 int
,	@quest3_value2 int
,	@quest3_time int
,	@quest4_type int
,	@quest4_value1 int
,	@quest4_value2 int
,	@quest4_time int
,	@quest5_type int
,	@quest5_value1 int
,	@quest5_value2 int
,	@quest5_time int
,	@quest6_type int
,	@quest6_value1 int
,	@quest6_value2 int
,	@quest6_time int
,	@quest7_type int
,	@quest7_value1 int
,	@quest7_value2 int
,	@quest7_time int
,	@quest8_type int
,	@quest8_value1 int
,	@quest8_value2 int
,	@quest8_time int
,	@quest9_type int
,	@quest9_value1 int
,	@quest9_value2 int
,	@quest9_time int
,	@quest10_type int
,	@quest10_value1 int
,	@quest10_value2 int
,	@quest10_time int
,	@quest11_type int
,	@quest11_value1 int
,	@quest11_value2 int
,	@quest11_time int
,	@quest12_type int
,	@quest12_value1 int
,	@quest12_value2 int
,	@quest12_time int
,	@quest13_type int
,	@quest13_value1 int
,	@quest13_value2 int
,	@quest13_time int
,	@quest14_type int
,	@quest14_value1 int
,	@quest14_value2 int
,	@quest14_time int
,	@quest15_type int
,	@quest15_value1 int
,	@quest15_value2 int
,	@quest15_time int
,	@quest16_type int
,	@quest16_value1 int
,	@quest16_value2 int
,	@quest16_time int
,	@quest17_type int
,	@quest17_value1 int
,	@quest17_value2 int
,	@quest17_time int
,	@quest18_type int
,	@quest18_value1 int
,	@quest18_value2 int
,	@quest18_time int
,	@quest19_type int
,	@quest19_value1 int
,	@quest19_value2 int
,	@quest19_time int
,	@quest20_type int
,	@quest20_value1 int
,	@quest20_value2 int
,	@quest20_time int
)
AS
	UPDATE userQuestDB SET
		quest1_type = @quest1_type
,		quest1_value1 = @quest1_value1
,		quest1_value2 = @quest1_value2
,		quest1_time = @quest1_time
,		quest2_type = @quest2_type
,		quest2_value1 = @quest2_value1
,		quest2_value2 = @quest2_value2
,		quest2_time = @quest2_time
,		quest3_type = @quest3_type
,		quest3_value1 = @quest3_value1
,		quest3_value2 = @quest3_value2
,		quest3_time = @quest3_time
,		quest4_type = @quest4_type
,		quest4_value1 = @quest4_value1
,		quest4_value2 = @quest4_value2
,		quest4_time = @quest4_time
,		quest5_type = @quest5_type
,		quest5_value1 = @quest5_value1
,		quest5_value2 = @quest5_value2
,		quest5_time = @quest5_time
,		quest6_type = @quest6_type
,		quest6_value1 = @quest6_value1
,		quest6_value2 = @quest6_value2
,		quest6_time = @quest6_time
,		quest7_type = @quest7_type
,		quest7_value1 = @quest7_value1
,		quest7_value2 = @quest7_value2
,		quest7_time = @quest7_time
,		quest8_type = @quest8_type
,		quest8_value1 = @quest8_value1
,		quest8_value2 = @quest8_value2
,		quest8_time = @quest8_time
,		quest9_type = @quest9_type
,		quest9_value1 = @quest9_value1
,		quest9_value2 = @quest9_value2
,		quest9_time = @quest9_time
,		quest10_type = @quest10_type
,		quest10_value1 = @quest10_value1
,		quest10_value2 = @quest10_value2
,		quest10_time = @quest10_time
,		quest11_type = @quest11_type
,		quest11_value1 = @quest11_value1
,		quest11_value2 = @quest11_value2
,		quest11_time = @quest11_time
,		quest12_type = @quest12_type
,		quest12_value1 = @quest12_value1
,		quest12_value2 = @quest12_value2
,		quest12_time = @quest12_time
,		quest13_type = @quest13_type
,		quest13_value1 = @quest13_value1
,		quest13_value2 = @quest13_value2
,		quest13_time = @quest13_time
,		quest14_type = @quest14_type
,		quest14_value1 = @quest14_value1
,		quest14_value2 = @quest14_value2
,		quest14_time = @quest14_time
,		quest15_type = @quest15_type
,		quest15_value1 = @quest15_value1
,		quest15_value2 = @quest15_value2
,		quest15_time = @quest15_time
,		quest16_type = @quest16_type
,		quest16_value1 = @quest16_value1
,		quest16_value2 = @quest16_value2
,		quest16_time = @quest16_time
,		quest17_type = @quest17_type
,		quest17_value1 = @quest17_value1
,		quest17_value2 = @quest17_value2
,		quest17_time = @quest17_time
,		quest18_type = @quest18_type
,		quest18_value1 = @quest18_value1
,		quest18_value2 = @quest18_value2
,		quest18_time = @quest18_time
,		quest19_type = @quest19_type
,		quest19_value1 = @quest19_value1
,		quest19_value2 = @quest19_value2
,		quest19_time = @quest19_time
,		quest20_type = @quest20_type
,		quest20_value1 = @quest20_value1
,		quest20_value2 = @quest20_value2
,		quest20_time = @quest20_time 
	WHERE idx = @idx
GO


-- ----------------------------
-- procedure structure for game_get_age
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_get_age]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_get_age]
GO

CREATE PROCEDURE [dbo].[game_get_age]
(
	@accountIDX int
)
AS
	SELECT userBirthday, userNumber FROM userNameDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for z_nouse_100916_game_friend_join_app
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_100916_game_friend_join_app]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_100916_game_friend_join_app]
GO

CREATE PROCEDURE [dbo].[z_nouse_100916_game_friend_join_app]
(
	@accountIDX int
,	@friendIDX int
)
AS

	SET XACT_ABORT ON

	DECLARE @default int, @cnt int, @errcount int, @guildIDX int, @myextend int, @youextend int
	SET @default = 100	--디폴트 친구 제한 수
	SET @cnt = 0
	SET @errcount = 0

	SET @cnt = (SELECT count(*) FROM userMemberDB where accountIDX=@friendIDX)
	if (@cnt = 0)
	BEGIN
		SET @errcount = 2
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @myextend = (SELECT 
		isNull(sum(case item1_type when 4000002 then item1_value1 else 0 end), 0)
	+	isNull(sum(case item2_type when 4000002 then item2_value1 else 0 end), 0)
	+	isNull(sum(case item3_type when 4000002 then item3_value1 else 0 end), 0)
	+	isNull(sum(case item4_type when 4000002 then item4_value1 else 0 end), 0)
	+	isNull(sum(case item5_type when 4000002 then item5_value1 else 0 end), 0)
	+	isNull(sum(case item6_type when 4000002 then item6_value1 else 0 end), 0)
	+	isNull(sum(case item7_type when 4000002 then item7_value1 else 0 end), 0)
	+	isNull(sum(case item8_type when 4000002 then item8_value1 else 0 end), 0)
	+	isNull(sum(case item9_type when 4000002 then item9_value1 else 0 end), 0)
	+	isNull(sum(case item10_type when 4000002 then item10_value1 else 0 end), 0)
	+	isNull(sum(case item11_type when 4000002 then item11_value1 else 0 end), 0)
	+	isNull(sum(case item12_type when 4000002 then item12_value1 else 0 end), 0)
	+	isNull(sum(case item13_type when 4000002 then item13_value1 else 0 end), 0)
	+	isNull(sum(case item14_type when 4000002 then item14_value1 else 0 end), 0)
	+	isNull(sum(case item15_type when 4000002 then item15_value1 else 0 end), 0)
	+	isNull(sum(case item16_type when 4000002 then item16_value1 else 0 end), 0)
	+	isNull(sum(case item17_type when 4000002 then item17_value1 else 0 end), 0)
	+	isNull(sum(case item18_type when 4000002 then item18_value1 else 0 end), 0)
	+	isNull(sum(case item19_type when 4000002 then item19_value1 else 0 end), 0)
	+	isNull(sum(case item20_type when 4000002 then item20_value1 else 0 end), 0)
	FROM userItemEtcDB WHERE accountIDX=@accountIDX)

	SET @cnt = (SELECT count(*) FROM userFriendDB where userAccIDX=@accountIDX and flag=1 and friendAccIDX not in (209274,322139,209270,209272,209273,1105,1106,209271,380032,1107,209264,209268,1108,209267,209276,281811,209269,2304,485241,380044,591852,711450,505421,380045,382884,380042,380043,361290))
	if (@cnt >= (@myextend + @default))
	BEGIN
		SET @errcount = 3
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @youextend = (SELECT 
		isNull(sum(case item1_type when 4000002 then item1_value1 else 0 end), 0)
	+	isNull(sum(case item2_type when 4000002 then item2_value1 else 0 end), 0)
	+	isNull(sum(case item3_type when 4000002 then item3_value1 else 0 end), 0)
	+	isNull(sum(case item4_type when 4000002 then item4_value1 else 0 end), 0)
	+	isNull(sum(case item5_type when 4000002 then item5_value1 else 0 end), 0)
	+	isNull(sum(case item6_type when 4000002 then item6_value1 else 0 end), 0)
	+	isNull(sum(case item7_type when 4000002 then item7_value1 else 0 end), 0)
	+	isNull(sum(case item8_type when 4000002 then item8_value1 else 0 end), 0)
	+	isNull(sum(case item9_type when 4000002 then item9_value1 else 0 end), 0)
	+	isNull(sum(case item10_type when 4000002 then item10_value1 else 0 end), 0)
	+	isNull(sum(case item11_type when 4000002 then item11_value1 else 0 end), 0)
	+	isNull(sum(case item12_type when 4000002 then item12_value1 else 0 end), 0)
	+	isNull(sum(case item13_type when 4000002 then item13_value1 else 0 end), 0)
	+	isNull(sum(case item14_type when 4000002 then item14_value1 else 0 end), 0)
	+	isNull(sum(case item15_type when 4000002 then item15_value1 else 0 end), 0)
	+	isNull(sum(case item16_type when 4000002 then item16_value1 else 0 end), 0)
	+	isNull(sum(case item17_type when 4000002 then item17_value1 else 0 end), 0)
	+	isNull(sum(case item18_type when 4000002 then item18_value1 else 0 end), 0)
	+	isNull(sum(case item19_type when 4000002 then item19_value1 else 0 end), 0)
	+	isNull(sum(case item20_type when 4000002 then item20_value1 else 0 end), 0)
	FROM userItemEtcDB WHERE accountIDX=@friendIDX)

	SET @cnt = (SELECT count(*) FROM userFriendDB where userAccIDX=@friendIDX and flag=1 and friendAccIDX not in (209274,322139,209270,209272,209273,1105,1106,209271,380032,1107,209264,209268,1108,209267,209276,281811,209269,2304,485241,380044,591852,711450,505421,380045,382884,380042,380043,361290))
	if (@cnt >= (@youextend + @default))
	BEGIN
		SET @errcount = 4
		SELECT @errcount AS 'returnVal'
		RETURN
	END

	SET @cnt = (SELECT count(*) FROM userFriendDB where userAccIDX=@accountIDX and friendAccIDX=@friendIDX and flag=1)
	if (@cnt > 0)
	BEGIN
		SET @errcount = 5
		SELECT @errcount AS 'returnVal'
		RETURN
	END

/*
	SET @cnt = 0
	SET @guildIDX = ISNULL((SELECT guildIDX FROM userGuildInfoDB WHERE accountIDX=@accountIDX and guildJoinType=1), -1)
	if (@guildIDX > 0)
	BEGIN
		SET @cnt = (SELECT count(*) FROM userGuildInfoDB WHERE guildIDX=@guildIDX and accountIDX=@friendIDX and guildJoinType=1)
	END
	if (@cnt > 0)
	BEGIN
		SET @errcount = 6
		SELECT @errcount AS 'returnVal'
		RETURN
	END
*/
	BEGIN TRAN

	if (@errcount = 0)
	BEGIN
		SELECT 1 AS 'returnVal'

		DELETE FROM userFriendDB WHERE userAccIDX=@accountIDX and friendAccIDX=@friendIDX and flag=0

		INSERT INTO userFriendDB (userAccIDX, friendAccIDX, flag, regDate)
		VALUES (@accountIDX, @friendIDX, 1, getdate())

		INSERT INTO userFriendDB (userAccIDX, friendAccIDX, flag, regDate)
		VALUES (@friendIDX, @accountIDX, 1, getdate())
	END

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_league_team_member_app_list_del
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_member_app_list_del]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_member_app_list_del]
GO

CREATE PROCEDURE [dbo].[game_league_team_member_app_list_del]
(
	@accountIDX int
,	@leagueIDX int
)
AS

SET NOCOUNT ON

DELETE FROM dbo.userLeagueTeamMemberDB
WHERE accountIDX=@accountIDX
  AND leagueIDX=@leagueIDX
  AND joinType=0
GO


-- ----------------------------
-- procedure structure for web_minihome_get_play_type
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_get_play_type]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_get_play_type]
GO

CREATE PROCEDURE [dbo].[web_minihome_get_play_type]
(
	@accountIDX int
)
AS
	SELECT gameServerID FROM userLoginDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_friend_guild_member_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_guild_member_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_guild_member_list]
GO

CREATE PROCEDURE [dbo].[web_friend_guild_member_list]
(
	@guildIDX int
,	@accountIDX int
)
AS
	SELECT accountIDX FROM userGuildInfoDB WITH(NOLOCK) WHERE guildIDX = @guildIDX and guildJoinType=1
GO


-- ----------------------------
-- procedure structure for game_quest_get_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_quest_get_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_quest_get_self_index]
GO

CREATE PROCEDURE [dbo].[game_quest_get_self_index]
(
	@accountIDX int
)
AS
	SELECT Max(idx) FROM userQuestDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_game_sexp_deduct_init
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_game_sexp_deduct_init]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_game_sexp_deduct_init]
GO

CREATE PROCEDURE [dbo].[game_game_sexp_deduct_init]
AS
	UPDATE userGameDB SET userHerosEXP=0 WHERE userHerosEXP=-1
GO


-- ----------------------------
-- procedure structure for game_character_get_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_character_get_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_character_get_self_index]
GO

CREATE PROCEDURE [dbo].[game_character_get_self_index]
(
	@accountIDX int
,	@getCount int
)
As

	SELECT TOP (@getCount) idx FROM userCharacterDB WHERE accountIDX = @accountIDX ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for game_league_team_member_app_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_member_app_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_member_app_list]
GO

CREATE PROCEDURE [dbo].[game_league_team_member_app_list]
(
	@teamIDX int
)
AS

SET NOCOUNT ON

SELECT a.idx, a.accountIDX, b.nickName, c.userLevel, c.regionType, 
	   CASE WHEN d.guildJoinType=1 THEN d.guildIDX
	   ELSE 0
	   END AS guildIDX
FROM dbo.userLeagueTeamMemberDB a WITH(NOLOCK)
JOIN dbo.userMemberDB b WITH(NOLOCK)
  ON a.accountIDX = b.accountIDX
JOIN dbo.userGameDB c WITH(NOLOCK)
  ON a.accountIDX = c.accountIDX
LEFT JOIN dbo.userGuildInfoDB d WITH(NOLOCK)
  ON a.accountIDX = d.accountIDX
WHERE a.teamIDX=@teamIDX
  AND a.joinType=0
ORDER BY a.idx ASC
GO


-- ----------------------------
-- procedure structure for web_minihome_get_nickname_level
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_get_nickname_level]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_get_nickname_level]
GO

CREATE PROCEDURE [dbo].[web_minihome_get_nickname_level]
(
	@accountIDX int
)
AS
	SELECT a.nickname, b.userLevel from userMemberDB a WITH(NOLOCK) INNER JOIN userGameDB b WITH(NOLOCK) ON a.accountIDX=b.accountIDX where a.accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_friend_guild_member_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_friend_guild_member_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_friend_guild_member_count]
GO

CREATE PROCEDURE [dbo].[web_friend_guild_member_count]
(
	@accountIDX int
,	@guildIDX int
)
AS
	SELECT count(*) FROM userGuildInfoDB WITH(NOLOCK) WHERE guildIDX=@guildIDX and accountIDX <> @accountIDX and guildJoinType=1
GO


-- ----------------------------
-- procedure structure for manage_block_id_search_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_block_id_search_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_block_id_search_count]
GO

CREATE PROCEDURE [dbo].[manage_block_id_search_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM LosaGame_log.DBO.log_block WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_quest_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_quest_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_quest_get_list]
GO

CREATE PROCEDURE [dbo].[game_quest_get_list]
(
	@accountIDX int
)
AS
	SELECT	idx, 
			quest1_type, quest1_value1, quest1_value2, quest1_time, quest2_type, quest2_value1, quest2_value2, quest2_time, quest3_type, quest3_value1, quest3_value2, quest3_time, 
			quest4_type, quest4_value1, quest4_value2, quest4_time, quest5_type, quest5_value1, quest5_value2, quest5_time, quest6_type, quest6_value1, quest6_value2, quest6_time, 
			quest7_type, quest7_value1, quest7_value2, quest7_time, quest8_type, quest8_value1, quest8_value2, quest8_time, quest9_type, quest9_value1, quest9_value2, quest9_time, 
			quest10_type, quest10_value1, quest10_value2, quest10_time, quest11_type, quest11_value1, quest11_value2, quest11_time, quest12_type, quest12_value1, quest12_value2, quest12_time, 
			quest13_type, quest13_value1, quest13_value2, quest13_time, quest14_type, quest14_value1, quest14_value2, quest14_time, quest15_type, quest15_value1, quest15_value2, quest15_time, 
			quest16_type, quest16_value1, quest16_value2, quest16_time, quest17_type, quest17_value1, quest17_value2, quest17_time, quest18_type, quest18_value1, quest18_value2, quest18_time,
			quest19_type, quest19_value1, quest19_value2, quest19_time, quest20_type, quest20_value1, quest20_value2, quest20_time 
	FROM userQuestDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_game_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_game_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_game_save]
GO

CREATE PROCEDURE [dbo].[game_game_save]
(
	@accountIDX int
,	@userState int
,	@gameMoney bigint
,	@conn_count int
,	@connDate datetime
,	@userLevel int
,	@userEXP int
,	@playTime int
,	@regionType int
,	@userFishingLevel int
,	@userFishingEXP int
,	@refillData int
,	@userExcavationLevel int
,	@userExcavationEXP int
,	@init_time int
)
As

SET NOCOUNT ON

IF @userLevel < 50
BEGIN
	-- 기존 루틴 그대로
	UPDATE dbo.userGameDB
	   SET gameMoney = @gameMoney
	,	userState = @userState
	,	playTime = playTime + Round((@playTime/1000)/60,0)
	,	conn_count = @conn_count
	,	userLevel = @userLevel
	,	userEXP = @userEXP
	,	userFishingLevel = @userFishingLevel
	,	userFishingEXP = @userFishingEXP
	,	regionType = @regionType
	,	connDate = @connDate
	,	refillData = @refillData
	,	userExcavationLevel = @userExcavationLevel
	,	userExcavationEXP = @userExcavationEXP 
	, Practice = 0
	 WHERE accountIDX = @accountIDX

END
ELSE
BEGIN
	--
	IF( EXISTS( SELECT * FROM dbo.userRelativeLevelDB WITH( NOLOCK )
				 WHERE accountIDX = @accountIDX ) )
	BEGIN
		
		UPDATE dbo.userGameDB
		   SET gameMoney = @gameMoney
		,	userState = @userState
		,	playTime = playTime + Round((@playTime/1000)/60,0)
		,	conn_count = @conn_count
		--,	userLevel = @userLevel
		,	userEXP = @userEXP
		,	userFishingLevel = @userFishingLevel
		,	userFishingEXP = @userFishingEXP
		,	regionType = @regionType
		,	connDate = @connDate
		,	refillData = @refillData
		,	userExcavationLevel = @userExcavationLevel
		,	userExcavationEXP = @userExcavationEXP 
		, Practice = 0
		 WHERE accountIDX = @accountIDX

		UPDATE dbo.userRelativeLevelDB
		   SET init_time = @init_time
		 WHERE accountIDX = @accountIDX

	END
	ELSE
	BEGIN
		-- 기존 루틴 그대로 : 혹시나 ?
		UPDATE dbo.userGameDB
		   SET gameMoney = @gameMoney
		,	userState = @userState
		,	playTime = playTime + Round((@playTime/1000)/60,0)
		,	conn_count = @conn_count
		,	userLevel = @userLevel
		,	userEXP = @userEXP
		,	userFishingLevel = @userFishingLevel
		,	userFishingEXP = @userFishingEXP
		,	regionType = @regionType
		,	connDate = @connDate
		,	refillData = @refillData
		,	userExcavationLevel = @userExcavationLevel
		,	userExcavationEXP = @userExcavationEXP 
		, Practice = 0
		 WHERE accountIDX = @accountIDX
	END
END
GO


-- ----------------------------
-- procedure structure for game_character_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_character_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_character_get_list]
GO

CREATE PROCEDURE [dbo].[game_character_get_list]
(
	@accountIDX INT
)
AS

SET NOCOUNT ON

SELECT idx, ClassType,
       CI_type, CI_gender, CI_beard, CI_face, CI_hair, CI_skinColor, CI_hairColor, CI_trinket, CI_underwear,
       EI1_type, EI2_type, EI3_type, EI4_type, CI_position,
       limitTime, limitType, leaderType, rentalType, rentalTime, awakeType, awakeTime 
  FROM dbo.userCharacterDB WITH(NOLOCK)
 WHERE accountIDX = @accountIDX
 ORDER BY idx ASC
GO


-- ----------------------------
-- procedure structure for game_league_team_member_app_del
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_member_app_del]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_member_app_del]
GO

CREATE PROCEDURE [dbo].[game_league_team_member_app_del]
(
	@idx int
)
AS

SET NOCOUNT ON

DELETE FROM dbo.userLeagueTeamMemberDB WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_minihome_get_leader_class
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_get_leader_class]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_get_leader_class]
GO

CREATE PROCEDURE [dbo].[web_minihome_get_leader_class]
(
	@accountIDX int
)
AS
	SELECT ClassType FROM userCharacterDB WITH(NOLOCK) WHERE accountIDX=@accountIDX and leaderType=1
GO


-- ----------------------------
-- procedure structure for web_event_recommend_point_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_recommend_point_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_recommend_point_save]
GO

CREATE PROCEDURE [dbo].[web_event_recommend_point_save]
(
	@accountIDX int
,	@point int
,	@userIP varchar(15)
)
AS
	INSERT INTO LosaGame_log.DBO.log_event_recommend_ipcheck (accountIDX, userIP, point, regDate)
	VALUES (@accountIDX, @userIP, @point, getdate())

	IF (exists(SELECT * FROM event_recommend WHERE accountIDX=@accountIDX))
	BEGIN
		UPDATE event_recommend SET
			nowpoint = nowpoint + @point
		,	todaypoint = todaypoint + @point
		,	accpoint = accpoint + @point
		WHERE accountIDX=@accountIDX
	END
	ELSE
	BEGIN
		INSERT INTO event_recommend (accountIDX, nowpoint, todaypoint, accpoint, regDate)
		VALUES (@accountIDX, @point, @point, @point, getdate())
	END
GO


-- ----------------------------
-- procedure structure for web_freefill_get_userinfo
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_freefill_get_userinfo]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_freefill_get_userinfo]
GO

CREATE PROCEDURE [dbo].[web_freefill_get_userinfo]
(
	@accountIDX int
)
AS
	SELECT userID, joinType FROM userMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for manage_block_id_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_block_id_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_block_id_list]
GO

CREATE PROCEDURE [dbo].[manage_block_id_list]
(
	@pagesize varchar(8)
,	@notpage varchar(8)
)
AS
	DECLARE @sql varchar(500)
	SET @sql = ''
	SET @sql = @sql + 'SELECT TOP ' + @pagesize + ' a.idx, a.accountIDX, isNull(b.userID, ''회원탈퇴'') AS ''userID'', isNull(b.nickname, ''회원탈퇴'') AS ''nickname'', a.actionID, a.note, b.userType, a.regDate FROM LosaGame_log.DBO.log_block a LEFT JOIN userMemberDB b ON a.accountIDX=b.accountIDX '
	SET @sql = @sql + 'WHERE a.limitType=1000 and a.idx not in (SELECT TOP ' + @notpage + ' idx FROM LosaGame_log.DBO.log_block WHERE limitType=1000 ORDER BY idx DESC) '
	SET @sql = @sql + 'ORDER BY a.idx DESC'

	EXECUTE(@sql)
GO


-- ----------------------------
-- procedure structure for game_quest_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_quest_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_quest_delete]
GO

CREATE PROCEDURE [dbo].[game_quest_delete]
(
	@accountIDX int
)
AS

	DELETE FROM userQuestDB WHERE accountIDX = @accountIDX
	DELETE FROM userQuestCompleteDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_game_renpoint_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_game_renpoint_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_game_renpoint_save]
GO

CREATE PROCEDURE [dbo].[game_game_renpoint_save]
(
	@accountIDX int
,	@rencpoint int
,	@renspoint int
)
As
	UPDATE userGameDB SET
	rencpoint = @rencpoint
,	renspoint = @renspoint
	WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_character_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_character_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_character_get_data]
GO

CREATE PROCEDURE [dbo].[game_character_get_data]
(
	@idx INT
)
AS

SET NOCOUNT ON

SELECT accountIDX,
	   ClassType, CI_type, CI_gender, CI_beard, CI_face, CI_hair, CI_skinColor, CI_hairColor, CI_trinket, CI_underwear,
	   EI1_type, EI2_type, EI3_type, EI4_type, CI_position,
	   limitTime, limitType, leaderType, rentalType, rentalTime, awakeType, awakeTime 
  FROM dbo.userCharacterDB WITH(NOLOCK)
 WHERE idx = @idx
GO


-- ----------------------------
-- procedure structure for game_league_team_member_app_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_league_team_member_app_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_league_team_member_app_add]
GO

CREATE PROCEDURE [dbo].[game_league_team_member_app_add]
(
	@accountIDX int
,	@leagueIDX int
,	@teamIDX int
)
AS

SET NOCOUNT ON

DECLARE @chkcnt int
DECLARE @errcount int
DECLARE @maxque tinyint

SET @chkcnt = 0
SET @errcount = 0
SET @maxque = 8

SET @chkcnt = (SELECT joinType FROM dbo.userMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX)
IF (@chkcnt <= 1)
BEGIN
	SET @errcount = 2
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @chkcnt = (SELECT COUNT(*) FROM dbo.userLeagueTeamDB WITH(NOLOCK) WHERE idx=@teamIDX)
IF (@chkcnt = 0)
BEGIN
	SET @errcount = 6
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @chkcnt = (SELECT COUNT(*) FROM dbo.userLeagueTeamMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX AND leagueIDX=@leagueIDX AND joinType=1)
IF (@chkcnt > 0)
BEGIN
	SET @errcount = 3
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @chkcnt = (SELECT COUNT(*) FROM dbo.userLeagueTeamMemberDB WITH(NOLOCK) WHERE accountIDX=@accountIDX AND teamIDX=@teamIDX and joinType=0)
IF (@chkcnt > 0)
BEGIN
	SET @errcount = 4
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @chkcnt = (SELECT COUNT(*) FROM dbo.userLeagueTeamMemberDB WITH(NOLOCK) WHERE teamIDX=@teamIDX and joinType=0)
IF (@maxque <= @chkcnt)
BEGIN
	SET @errcount = 5
	SELECT @errcount AS 'returnVal'
	RETURN
END

IF (@errcount = 0)
BEGIN
	SET @errcount = 1
	SELECT @errcount AS 'returnVal'

	INSERT INTO dbo.userLeagueTeamMemberDB (accountIDX, leagueIDX, teamIDX, joinType, regDate)
	VALUES (@accountIDX, @leagueIDX, @teamIDX, 0, GETDATE())
END
GO


-- ----------------------------
-- procedure structure for web_minihome_get_gameserverid
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_minihome_get_gameserverid]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_minihome_get_gameserverid]
GO

CREATE PROCEDURE [dbo].[web_minihome_get_gameserverid]
(
	@accountIDX int
)
AS
	SELECT gameServerID FROM userLoginDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_recommend_ipcount
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_recommend_ipcount]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_recommend_ipcount]
GO

CREATE PROCEDURE [dbo].[web_event_recommend_ipcount]
(
	@userIP varchar(16)
)
AS
	SELECT COUNT(*) FROM LosaGame_log.DBO.log_event_recommend_ipcheck WITH(NOLOCK) WHERE userIP=@userIP
GO


-- ----------------------------
-- procedure structure for web_fixkey_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_fixkey_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_fixkey_get_data]
GO

CREATE PROCEDURE [dbo].[web_fixkey_get_data]

AS

SET NOCOUNT ON

SELECT encodeKey
  FROM dbo.define_encode_key WITH(NOLOCK)
 WHERE idx = (
	SELECT MAX(idx)
	  FROM dbo.define_encode_key WITH(NOLOCK)
)
GO


-- ----------------------------
-- procedure structure for manage_block_id_get_tblIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_block_id_get_tblIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_block_id_get_tblIDX]
GO

CREATE PROCEDURE [dbo].[manage_block_id_get_tblIDX]
(
	@accountIDX int
)
AS
	SELECT MAX(idx) FROM LosaGame_log.DBO.log_block WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_friend_list_asc_org
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_list_asc_org]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_list_asc_org]
GO

CREATE PROCEDURE [dbo].[game_friend_list_asc_org]
(
	@idx int
,	@accountIDX int
,	@topNo int
)
AS

	SET NOCOUNT ON

	SELECT TOP (@topNo) a.idx, a.friendAccIDX, b.nickName, a.regDate
	FROM userFriendDB a WITH(NOLOCK)
		JOIN userMemberDB b WITH(NOLOCK)
		ON a.friendAccIDX = b.accountIDX
	WHERE a.userAccIDX = @accountIDX
		AND a.flag=1
		AND a.idx > @idx
	ORDER BY a.idx ASC
GO


-- ----------------------------
-- procedure structure for game_game_heroexp_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_game_heroexp_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_game_heroexp_save]
GO

CREATE PROCEDURE [dbo].[game_game_heroexp_save]
(
	@accountIDX int
,	@heroEXP int
)
As
	UPDATE userGameDB SET
		userHerosEXP = @heroEXP 
	WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_character_delete_limitdate
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_character_delete_limitdate]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_character_delete_limitdate]
GO

CREATE PROCEDURE [dbo].[game_character_delete_limitdate]
(
	@accountIDX int
)
As
	DELETE FROM userCharacterDB WHERE accountIDX = @accountIDX and limitTime=0 and limitType=0 and getdate() > DateAdd(d,1,regDate)
GO


-- ----------------------------
-- procedure structure for game_log_level_playtime
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_log_level_playtime]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_log_level_playtime]
GO

CREATE PROCEDURE [dbo].[game_log_level_playtime]
(
	@userLevel int
,	@playTime bigint
)
AS
	INSERT INTO LosaGame_log.DBO.log_level_playtime (userLevel, playTime, regDate)
	VALUES (@userLevel, @playTime, getdate())
GO


-- ----------------------------
-- procedure structure for web_memberout_add_channeling
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_memberout_add_channeling]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_memberout_add_channeling]
GO

CREATE PROCEDURE [dbo].[web_memberout_add_channeling]
(
	@accountIDX int
,	@userID varchar(12)
,	@nickName varchar(20)
,	@userName varchar(10)
,	@userJumin1 varchar(12)
,	@userJumin2 varchar(14)
,	@userEnCode varchar(64)
,	@email varchar(50)
,	@parentName varchar(10)
,	@parentJumin1 varchar(12)
,	@parentJumin2 varchar(14)
,	@parentEncode varchar(64)
,	@parentEmail varchar(50)
,	@agreeSDate datetime
,	@agreeEDate datetime
,	@agreeType tinyint
,	@logIDX int
,	@gameMoney bigint
,	@playTime int
,	@conn_count int
,	@userLevel int
,	@visit_count int
,	@amtCash int
,	@amtBonus int
,	@cause varchar(1000)
,	@joinType int
,	@cpType int
,	@userIP varchar(15)
,	@regDate datetime
,	@returnVal int output
)

AS
	SET XACT_ABORT ON

	Begin Tran

	INSERT INTO LosaGame_log.DBO.log_secession (accountIDX, userID, nickName, userName, userJumin1, userJumin2, userEnCode, email, parentName, parentJumin1, parentJumin2, parentEncode, parentEmail, agreeSDate, agreeEDate, agreeType, logIDX, gameMoney, playTime, conn_count, userLevel, visit_count, amtCash, amtBonus, cause, joinType, cpType, userIP, regDate, outDate)
	VALUES (@accountIDX, @userID, @nickName, @userName, @userJumin1, @userJumin2, @userEnCode, @email, @parentName, @parentJumin1, @parentJumin2, @parentEncode, @parentEmail, @agreeSDate, @agreeEDate, @agreeType, @logIDX, @gameMoney, @playTime, @conn_count, @userLevel, @visit_count, @amtCash, @amtBonus, @cause, @joinType, @cpType, @userIP, @regDate, getdate())

	DELETE FROM userAwardDB WHERE accountIDX=@accountIDX
	DELETE FROM userCashDB WHERE accountIDX=@accountIDX
	DELETE FROM userCharacterDB WHERE accountIDX=@accountIDX
	DELETE FROM userItemDB WHERE accountIDX=@accountIDX
	DELETE FROM userClassDB WHERE accountIDX=@accountIDX
	DELETE FROM userFriendDB WHERE userAccIDX=@accountIDX
	DELETE FROM userFriendDB WHERE friendAccIDX=@accountIDX
	DELETE FROM userGameDB WHERE accountIDX=@accountIDX
	DELETE FROM userCooperationDB WHERE accountIDX=@accountIDX
	DELETE FROM userRecordBattleDB WHERE accountIDX=@accountIDX
	DELETE FROM userInfoDB WHERE accountIDX=@accountIDX
	DELETE FROM userLoginDB WHERE accountIDX=@accountIDX
	DELETE FROM userMedalDB WHERE accountIDX=@accountIDX
	DELETE FROM userMemberDB WHERE accountIDX=@accountIDX
	DELETE FROM userNameDB WHERE accountIDX=@accountIDX
	DELETE FROM userRankingDB WHERE accountIDX=@accountIDX
	DELETE FROM userRankingDB_award WHERE accountIDX=@accountIDX
	DELETE FROM userRankingDB_battle WHERE accountIDX=@accountIDX
	DELETE FROM userRankingDB_classgroup WHERE accountIDX=@accountIDX
	DELETE FROM userRankingDB_medal WHERE accountIDX=@accountIDX
	DELETE FROM userMedalDB_receive WHERE accountIDX=@accountIDX

	if (exists(SELECT * FROM userInfoBDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userInfoBDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userParentDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userParentDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userAbilityDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userAbilityDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userFishDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userFishDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userItemEtcDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userItemEtcDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userItemExtraDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userItemExtraDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userItemMedalDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userItemMedalDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userPresentDB WHERE receiveIDX=@accountIDX))
	BEGIN
		DELETE FROM userPresentDB WHERE receiveIDX=@accountIDX
	END

	if (exists(SELECT * FROM userQuestDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userQuestDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userQuestCompleteDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userQuestCompleteDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userRankingDB_hero WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userRankingDB_hero WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userHqDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userHqDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userLeagueTeamMemberDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userLeagueTeamMemberDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userFriendBestDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userFriendBestDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userFriendBestDB WHERE friendIDX=@accountIDX))
	BEGIN
		DECLARE @flagTime int, @y int, @m int, @d int, @h int, @mm int, @nowDate datetime
		SET @nowDate = DateAdd(d, 5, GETDATE())
		SET @y = (CAST(YEAR(@nowDate) AS int) - 2010) * 100000000
		SET @m = CAST(MONTH(@nowDate) AS int) * 1000000
		SET @d = CAST(DAY(@nowDate) AS int) * 10000
		SET @h = CAST(DATEPART(HOUR, @nowDate) AS int) * 100
		SET @mm = CAST(DATEPART(MINUTE, @nowDate) AS int)
		SET @flagTime = @y + @m + @d + @h + @mm

		UPDATE userFriendBestDB SET flagTime=@flagTime, flag=2 WHERE friendIDX=@accountIDX
	END

	if (exists(SELECT guildIDX FROM userGuildInfoDB WHERE accountIDX=@accountIDX and guildJoinType=1))
	BEGIN
		UPDATE userGuildDB SET membercount = membercount - 1 WHERE idx=(SELECT guildIDX FROM userGuildInfoDB WHERE accountIDX=@accountIDX and guildJoinType=1)
	END

	DELETE FROM userGuildInfoDB WHERE accountIDX=@accountIDX


	if (@@error = 0)
		Commit Tran
	else
		Rollback Tran

	Set @returnVal = @@error
GO


-- ----------------------------
-- procedure structure for web_event_recommend_get_ip
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_recommend_get_ip]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_recommend_get_ip]
GO

CREATE PROCEDURE [dbo].[web_event_recommend_get_ip]
(
	@accountIDX int
)
AS
	SELECT TOP 1 userIP FROM LosaGame_log.DBO.log_event_recommend_ipcheck with(nolock) 
	WHERE accountIDX=@accountIDX ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_fishingfilter_get_user_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_fishingfilter_get_user_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_fishingfilter_get_user_info]
GO

CREATE PROCEDURE [dbo].[web_fishingfilter_get_user_info]
(
	@userID varchar(12)
)
AS
	SELECT accountIDX, nickname FROM userMemberDB WITH(NOLOCK) WHERE userID = @userID
GO


-- ----------------------------
-- procedure structure for manage_block_id_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_block_id_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_block_id_get_list]
GO

CREATE PROCEDURE [dbo].[manage_block_id_get_list]
(
	@pagesize varchar(8)
,	@notpage varchar(8)
)
AS
	DECLARE @sql varchar(500)
	SET @sql = ''
	SET @sql = @sql + 'SELECT TOP ' + @pagesize + ' a.idx, a.accountIDX, isNull(b.nickname, ''회원탈퇴'' AS ''nickname'', a.actionID, a.note, a.regDate FROM LosaGame_log.DBO.log_block a Left JOIN userMemberDB b ON a.accountIDX=b.accountIDX '
	SET @sql = @sql + 'WHERE a.idx not in (SELECT TOP ' + @notpage + ' idx FROM LosaGame_log.DBO.log_block ORDER BY idx DESC) '
	SET @sql = @sql + 'ORDER BY a.idx DESC'

	EXECUTE(@sql)
GO


-- ----------------------------
-- procedure structure for game_friend_list_asc_debug5
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_list_asc_debug5]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_list_asc_debug5]
GO

CREATE PROCEDURE [dbo].[game_friend_list_asc_debug5]
(
	@idx int
,	@accountIDX int
,	@topNo int
)
AS

SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

SELECT TOP (@topNo) a.idx, a.friendAccIDX, b.nickName, a.regDate
  FROM userFriendDB a WITH (INDEX (idx_userAccIDX))
  JOIN userMemberDB b WITH (INDEX (idx_accountIDX))
	ON b.accountIDX = a.friendAccIDX
 WHERE a.userAccIDX = @accountIDX
   AND a.flag=1
   AND a.idx > @idx
 ORDER BY a.idx ASC
GO


-- ----------------------------
-- procedure structure for game_game_heroexp_init
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_game_heroexp_init]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_game_heroexp_init]
GO

CREATE PROCEDURE [dbo].[game_game_heroexp_init]
(
	@accountIDX int
)
AS
	UPDATE userGameDB SET
		userHerocEXP = 0
	,	userHerosEXP = 0
	WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_character_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_character_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_character_delete]
GO

CREATE PROCEDURE [dbo].[game_character_delete]
(
	@idx int
)
As
	DELETE FROM userCharacterDB WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_log_class_buytime
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_log_class_buytime]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_log_class_buytime]
GO

CREATE PROCEDURE [dbo].[game_log_class_buytime]
(
	@classType int
,	@buyTime bigint
)
AS
	INSERT INTO LosaGame_log.DBO.log_class_buytime (classType, buyTime, regDate)
	VALUES (@classType, @buyTime, getdate())
GO


-- ----------------------------
-- procedure structure for web_memberout_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_memberout_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_memberout_add]
GO

CREATE PROCEDURE [dbo].[web_memberout_add]
(
	@accountIDX int
,	@userID varchar(12)
,	@nickName varchar(20)
,	@userName varchar(10)
,	@userJumin1 varchar(12)
,	@userJumin2 varchar(14)
,	@userEnCode varchar(64)
,	@email varchar(50)
,	@parentName varchar(10)
,	@parentJumin1 varchar(12)
,	@parentJumin2 varchar(14)
,	@parentEncode varchar(64)
,	@parentEmail varchar(50)
,	@agreeSDate datetime
,	@agreeEDate datetime
,	@agreeType tinyint
,	@logIDX int
,	@gameMoney bigint
,	@playTime int
,	@conn_count int
,	@userLevel int
,	@visit_count int
,	@amtCash int
,	@amtBonus int
,	@cause varchar(1000)
,	@joinType int
,	@userIP varchar(15)
,	@regDate datetime
,	@returnVal int output
)

AS
	SET XACT_ABORT ON

	Begin Tran

	INSERT INTO LosaGame_log.DBO.log_secession (accountIDX, userID, nickName, userName, userJumin1, userJumin2, userEnCode, email, parentName, parentJumin1, parentJumin2, parentEncode, parentEmail, agreeSDate, agreeEDate, agreeType, logIDX, gameMoney, playTime, conn_count, userLevel, visit_count, amtCash, amtBonus, cause, joinType, userIP, regDate, outDate)
	VALUES (@accountIDX, @userID, @nickName, @userName, @userJumin1, @userJumin2, @userEnCode, @email, @parentName, @parentJumin1, @parentJumin2, @parentEncode, @parentEmail, @agreeSDate, @agreeEDate, @agreeType, @logIDX, @gameMoney, @playTime, @conn_count, @userLevel, @visit_count, @amtCash, @amtBonus, @cause, @joinType, @userIP, @regDate, getdate())

	DELETE FROM userAwardDB WHERE accountIDX=@accountIDX
	DELETE FROM userCashDB WHERE accountIDX=@accountIDX
	DELETE FROM userCharacterDB WHERE accountIDX=@accountIDX
	DELETE FROM userItemDB WHERE accountIDX=@accountIDX
	DELETE FROM userClassDB WHERE accountIDX=@accountIDX
	DELETE FROM userFriendDB WHERE userAccIDX=@accountIDX
	DELETE FROM userFriendDB WHERE friendAccIDX=@accountIDX
	DELETE FROM userGameDB WHERE accountIDX=@accountIDX
	DELETE FROM userRecordBattleDB WHERE accountIDX=@accountIDX
	DELETE FROM userInfoDB WHERE accountIDX=@accountIDX
	DELETE FROM userLoginDB WHERE accountIDX=@accountIDX
	DELETE FROM userMedalDB WHERE accountIDX=@accountIDX
	DELETE FROM userMemberDB WHERE accountIDX=@accountIDX
	DELETE FROM userNameDB WHERE accountIDX=@accountIDX
	DELETE FROM userRankingDB WHERE accountIDX=@accountIDX
	DELETE FROM userRankingDB_award WHERE accountIDX=@accountIDX
	DELETE FROM userRankingDB_battle WHERE accountIDX=@accountIDX
	DELETE FROM userRankingDB_classgroup WHERE accountIDX=@accountIDX
	DELETE FROM userRankingDB_medal WHERE accountIDX=@accountIDX
	DELETE FROM userMedalDB_receive WHERE accountIDX=@accountIDX

	if (exists(SELECT * FROM userInfoBDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userInfoBDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userParentDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userParentDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userAbilityDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userAbilityDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userFishDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userFishDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userItemEtcDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userItemEtcDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userItemExtraDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userItemExtraDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userItemMedalDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userItemMedalDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userPresentDB WHERE receiveIDX=@accountIDX))
	BEGIN
		DELETE FROM userPresentDB WHERE receiveIDX=@accountIDX
	END

	if (exists(SELECT * FROM userQuestDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userQuestDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userQuestCompleteDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userQuestCompleteDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userRankingDB_hero WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userRankingDB_hero WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userHqDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userHqDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userLeagueTeamMemberDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userLeagueTeamMemberDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userFriendBestDB WHERE accountIDX=@accountIDX))
	BEGIN
		DELETE FROM userFriendBestDB WHERE accountIDX=@accountIDX
	END

	if (exists(SELECT * FROM userFriendBestDB WHERE friendIDX=@accountIDX))
	BEGIN
		DECLARE @flagTime int, @y int, @m int, @d int, @h int, @mm int, @nowDate datetime
		SET @nowDate = DateAdd(d, 5, GETDATE())
		SET @y = (CAST(YEAR(@nowDate) AS int) - 2010) * 100000000
		SET @m = CAST(MONTH(@nowDate) AS int) * 1000000
		SET @d = CAST(DAY(@nowDate) AS int) * 10000
		SET @h = CAST(DATEPART(HOUR, @nowDate) AS int) * 100
		SET @mm = CAST(DATEPART(MINUTE, @nowDate) AS int)
		SET @flagTime = @y + @m + @d + @h + @mm

		UPDATE userFriendBestDB SET flagTime=@flagTime, flag=2 WHERE friendIDX=@accountIDX
	END

	if (exists(SELECT guildIDX FROM userGuildInfoDB WHERE accountIDX=@accountIDX and guildJoinType=1))
	BEGIN
		UPDATE userGuildDB SET membercount = membercount - 1 WHERE idx=(SELECT guildIDX FROM userGuildInfoDB WHERE accountIDX=@accountIDX and guildJoinType=1)
	END

	DELETE FROM userGuildInfoDB WHERE accountIDX=@accountIDX


	if (@@error = 0)
		Commit Tran
	else
		Rollback Tran

	Set @returnVal = @@error
GO


-- ----------------------------
-- procedure structure for web_event_recommend_get_checkip
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_recommend_get_checkip]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_recommend_get_checkip]
GO

CREATE PROCEDURE [dbo].[web_event_recommend_get_checkip]
(
	@userIP varchar(16)
)
AS
	SELECT TOP 1 accountIDX, point 
	FROM LosaGame_log.DBO.log_event_recommend_ipcheck WITH(NOLOCK)
	WHERE userIP=@userIP ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_event_teencash_get_userinfo
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_teencash_get_userinfo]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_teencash_get_userinfo]
GO

CREATE PROCEDURE [dbo].[web_event_teencash_get_userinfo]
(
	@accountIDX int
)
AS
	SELECT a.userID, b.userName, b.userBirthday, b.userJumin1, b.userJumin2, b.userNumber, a.email, c.zipcode 
	FROM userMemberDB a LEFT JOIN userNameDB b ON a.accountIDX=b.accountIDX LEFT JOIN userInfoBDB c ON a.accountIDX=c.accountIDX 
	WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for manage_mannerpoint_log_ip_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_mannerpoint_log_ip_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_mannerpoint_log_ip_info]
GO

CREATE PROCEDURE [dbo].[manage_mannerpoint_log_ip_info]
(
	@userIP varchar(15)
)
AS
/*
	SELECT b.accountIDX, b.userID, b.nickName, MAX(a.regDate) AS 'regDate' FROM LosaGame_log.DBO.log_cash a JOIN userMemberDB b ON a.accountIDX = b.accountIDX
	WHERE userIP=@userIP and amount=100  and a.regDate >= LEFT(DATEADD(d, -90, GETDATE()), 10)
	GROUP BY b.accountIDX, b.userID, b.nickName ORDER BY MAX(a.regDate) DESC
*/
GO


-- ----------------------------
-- procedure structure for GAME_FRIEND_LIST_ASC_DEBUG3
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[GAME_FRIEND_LIST_ASC_DEBUG3]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[GAME_FRIEND_LIST_ASC_DEBUG3]
GO

CREATE PROCEDURE [dbo].[GAME_FRIEND_LIST_ASC_DEBUG3]
(
	@IDX INT
,	@ACCOUNTIDX INT
,	@TOPNO INT
)
AS
SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

SELECT A.IDX, A.FRIENDACCIDX, B.NICKNAME, A.REGDATE
  FROM (SELECT TOP (@TOPNO) A.IDX, A.FRIENDACCIDX, A.REGDATE
		  FROM USERFRIENDDB A WITH (INDEX (idx_userAccIDX))
		 WHERE USERACCIDX = @ACCOUNTIDX
		   AND FLAG = 1 
		   AND A.IDX > @IDX 
		 ORDER BY A.IDX ASC) A 
 INNER HASH JOIN USERMEMBERDB B WITH (INDEX (idx_accountIDX))
    ON B.ACCOUNTIDX = A.FRIENDACCIDX
 ORDER BY A.IDX ASC
GO


-- ----------------------------
-- procedure structure for web_login_fail_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_login_fail_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_login_fail_count]
GO

CREATE PROCEDURE [dbo].[web_login_fail_count]
(
	@userIP varchar(15)
)
AS
	SELECT count(*) FROM LosaGame_log.DBO.log_login_failip WITH(NOLOCK) WHERE userIP=@userIP and regDate > Left(getdate(), 10)
GO


-- ----------------------------
-- procedure structure for game_game_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_game_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_game_get_data]
GO

CREATE PROCEDURE [dbo].[game_game_get_data]  
(  
 @userID varchar(12)  
)  
As  
  
SET NOCOUNT ON  
  
  
DECLARE @CURRENTDATE DATETIME
DECLARE @CONNECTDATE DATETIME

SET @CURRENTDATE = GETDATE();
SET @CONNECTDATE = ( SELECT conndate FROM dbo.userGameDB WHERE accountIDX IN ( SELECT accountIDX FROM dbo.userMemberDB WHERE userID = @userID ))
  
BEGIN
	IF( @CURRENTDATE < @CONNECTDATE )
	SET @CONNECTDATE = @CURRENTDATE
END

SELECT a.accountIDX, b.userID, b.nickName, a.userState, a.gameMoney  
  , a.conn_count, @CONNECTDATE, a.userLevel, a.userEXP--, a.relateLevel  
  , b.eventType, isNull(c.class,0) as 'class', b.joinType, b.regDate, a.regionType  
  , a.rencpoint, a.renspoint, isNull(c.region,0) as 'region', b.cpType, ISNULL(d.cpID, '') AS 'cpID'  
  , ISNULL(d.note, '') AS 'cpUNIQ', b.limitType, b.limitDate, a.userFishingLevel, a.userFishingEXP  
  , a.refillData, a.userExcavationLevel, a.userExcavationEXP, a.userHerocEXP, a.userHerosEXP, a.practice   
  FROM userGameDB a WITH( NOLOCK )  
  JOIN userMemberDB b WITH( NOLOCK )  
 ON a.accountIDX = b.accountIDX  
  LEFT JOIN userRankingDB c WITH( NOLOCK )  
 ON a.accountIDX = c.accountIDX  
  LEFT JOIN userCooperationDB d WITH( NOLOCK )  
 ON a.accountIDX=d.accountIDX WHERE b.userID = @userID
GO


-- ----------------------------
-- procedure structure for game_character_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_character_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_character_add]
GO

CREATE PROCEDURE [dbo].[game_character_add]
(
	@accountIDX int
,	@ClassType int
,	@CI_type int
,	@CI_gender int
,	@CI_beard int
,	@CI_face int
,	@CI_hair int
,	@CI_skinColor int
,	@CI_hairColor int
,	@CI_trinket int
,	@CI_underwear int
,	@EI1_type int
,	@EI2_type int
,	@EI3_type int
,	@EI4_type int
,	@limitTime int
,	@limitType int
,	@leaderType smallint
,	@rentalType smallint
,	@rentalTime int
)
AS
	Insert into userCharacterDB (accountIDX, ClassType, CI_type, CI_gender, CI_beard, CI_face, CI_hair, CI_skinColor, CI_hairColor, CI_trinket, CI_underwear, EI1_type, EI2_type, EI3_type, EI4_type, limitTime, limitType, leaderType, rentalType, rentalTime)
	values (@accountIDX, @ClassType, @CI_type, @CI_gender, @CI_beard, @CI_face, @CI_hair, @CI_skinColor, @CI_hairColor, @CI_trinket, @CI_underwear, @EI1_type, @EI2_type, @EI3_type, @EI4_type, @limitTime, @limitType, @leaderType, @rentalType, @rentalTime)
GO


-- ----------------------------
-- procedure structure for manage_block_id_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_block_id_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_block_id_get_data]
GO

CREATE PROCEDURE [dbo].[manage_block_id_get_data]
(
	@nickname varchar(20)
)
As
	SELECT accountIDX, userType FROM userMemberDB WHERE nickName=@nickname
GO


-- ----------------------------
-- procedure structure for web_member_userIP_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_userIP_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_userIP_count]
GO

CREATE PROCEDURE [dbo].[web_member_userIP_count]
(
	@userIP varchar(15)
)
AS
	SELECT count(*) FROM userInfoDB WHERE regDate >= DateAdd(n,-30,getdate()) and userIP=@userIP
GO


-- ----------------------------
-- procedure structure for web_event_recommend_log_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_recommend_log_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_recommend_log_save]
GO

CREATE PROCEDURE [dbo].[web_event_recommend_log_save]
(
	@idx int
,	@point int
)
AS
	UPDATE LosaGame_log.DBO.log_event_recommend SET point=@point WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_event_teencash_get_top5
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_teencash_get_top5]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_teencash_get_top5]
GO

CREATE PROCEDURE [dbo].[web_event_teencash_get_top5]
(
	@numberth tinyint
)
AS
	SELECT a.accountIDX, a.cnt, b.nickname, c.userLevel FROM (
		SELECT TOP 5 accountIDX, count(*) AS 'cnt' FROM event_teencash
		WHERE flag in (1) and numberth=@numberth GROUP BY accountIDX ORDER BY count(*) DESC
	) a JOIN userMemberDB b ON a.accountIDX=b.accountIDX JOIN userGameDB c ON a.accountIDX=c.accountIDX 
	ORDER BY a.cnt DESC
GO


-- ----------------------------
-- procedure structure for USP_LTS_Coupon_Use_SEL
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_Coupon_Use_SEL]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_Coupon_Use_SEL]
GO

CREATE PROCEDURE [dbo].[USP_LTS_Coupon_Use_SEL] 
	-- Add the parameters for the stored procedure here
	@intType			tinyint,
	@intcpType			smallint,
	@intAccountIDX		int,
	@strLoginID			varchar(50),
	@intMaxNum			tinyint,
	@strRegIP			varchar(15)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    -- Insert statements for procedure here
	Declare @intUseCnt		tinyint

	-- 쿠폰 사용 수를 구하다.
	Set @intUseCnt = (Select count(*) From TB_EventCoupon_Use with (noLock)
					Where CPN_Type = @intType
					And CPN_AccountIDX = @intAccountIDX
					And CPN_UserID = @strLoginID
					And CPN_DelFlag = 0)

	-- 쿠폰 사용 횟수 비교
	IF @intMaxNum > @intUseCnt
		Begin
			Begin Tran

			Insert Into TB_EventCoupon_Use (
				CPN_Type, 
				CPN_cpType,
				CPN_AccountIDX,
				CPN_UserID,
				CPN_RegIP,
				CPN_RegDate
			) Values (
				@intType,
				@intcpType,
				@intAccountIDX,
				@strLoginID,
				@strRegIP,
				getdate()
			)

			IF @@ERROR = 0
				Begin
					Commit Tran
					Return 1			-- 사용 성공
				End
			Else
				Begin
					RollBack Tran
					Return 9			-- 사용 실패
				End
		End
	Else
		Begin
			Return 0					-- 이미 사용한 쿠폰
		End


END
GO


-- ----------------------------
-- procedure structure for GAME_FRIEND_LIST_ASC_DEBUG2
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[GAME_FRIEND_LIST_ASC_DEBUG2]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[GAME_FRIEND_LIST_ASC_DEBUG2]
GO

CREATE PROCEDURE [dbo].[GAME_FRIEND_LIST_ASC_DEBUG2]
(
	@IDX INT
,	@ACCOUNTIDX INT
,	@TOPNO INT
)
AS
SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

SELECT A.IDX, A.FRIENDACCIDX, B.NICKNAME, A.REGDATE
  FROM (SELECT TOP (@TOPNO) A.IDX, A.FRIENDACCIDX, A.REGDATE
		  FROM USERFRIENDDB A WITH (INDEX (idx_userAccIDX))
		 WHERE USERACCIDX = @ACCOUNTIDX
		   AND FLAG = 1 
		   AND A.IDX > @IDX 
		 ORDER BY A.IDX ASC) A 
 INNER LOOP JOIN USERMEMBERDB B WITH (INDEX (idx_accountIDX))
    ON B.ACCOUNTIDX = A.FRIENDACCIDX
 ORDER BY A.IDX ASC
GO


-- ----------------------------
-- procedure structure for web_login_fail_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_login_fail_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_login_fail_add]
GO

CREATE PROCEDURE [dbo].[web_login_fail_add]
(
	@userIP varchar(15)
)
AS
	INSERT INTO LosaGame_log.DBO.log_login_failip (userIP, regDate) VALUES (@userIP, getdate())
GO


-- ----------------------------
-- procedure structure for game_friend_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_save]
GO

CREATE PROCEDURE [dbo].[game_friend_save]
(
	@userAccIDX int
,	@friendNickName varchar(20)
)
AS

SET NOCOUNT ON

DECLARE @cnt int
DECLARE @friendAccIDX int

SET @friendAccIDX = (
	SELECT accountIDX
	  FROM dbo.userMemberDB WITH(NOLOCK)
	 WHERE nickname=@friendNickName
)

SET @cnt = (
	SELECT COUNT(*)
	  FROM dbo.userFriendDB WITH(NOLOCK)
	 WHERE userAccIDX=@userAccIDX
	   AND friendAccIDX=@friendAccIDX
)

IF (@cnt = 0 and @friendAccIDX is not null)
BEGIN
	INSERT INTO dbo.userFriendDB (userAccIDX,friendAccIDX,regDate)
	VALUES (@userAccIDX, @friendAccIDX, GETDATE())
END
GO


-- ----------------------------
-- procedure structure for game_channel_get_cp_userID
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_channel_get_cp_userID]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_channel_get_cp_userID]
GO

CREATE PROCEDURE [dbo].[game_channel_get_cp_userID]

	@USER_ID	VARCHAR(20)

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	
	SELECT note FROM dbo.userCooperationDB WITH (READUNCOMMITTED)
	WHERE UserID=@USER_ID
GO


-- ----------------------------
-- procedure structure for manage_block_id_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_block_id_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_block_id_add]
GO

CREATE PROCEDURE [dbo].[manage_block_id_add]
(
	@accountIDX int
,	@note varchar(500)
,	@adminID varchar(12)
)
As
	BEGIN TRAN

	UPDATE userMemberDB SET userType = 1000 WHERE accountIDX=@accountIDX
	INSERT INTO LosaGame_log.DBO.log_block (accountIDX, actionID, limitType, limitDate, note, regDate)
	VALUES (@accountIDX, @adminID, 1000, '2100-01-01', @note, getdate())

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for web_member_user_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_user_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_user_count]
GO

CREATE PROCEDURE [dbo].[web_member_user_count]  
(  
 @userID varchar(20)  
)  
As  
 Select count(*) From userMemberDB where userID = @userID
GO


-- ----------------------------
-- procedure structure for web_event_recommend_ip_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_recommend_ip_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_recommend_ip_count]
GO

CREATE PROCEDURE [dbo].[web_event_recommend_ip_count]
(
	@userIP varchar(16)
,	@point int
)
AS
	SELECT COUNT(*) FROM LosaGame_log.DBO.log_event_recommend WITH(NOLOCK) WHERE userIP=@userIP and point >= @point
GO


-- ----------------------------
-- procedure structure for web_event_honor_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_honor_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_honor_add]
GO

CREATE PROCEDURE [dbo].[web_event_honor_add]
(
	@accountIDX int
,	@honorIDX int
,	@userEncode varchar(64)
,	@userIP varchar(16)
)
AS
	INSERT INTO event_honor (accountIDX, honorIDX, userEncode, userIP, regDate)
	VALUES (@accountIDX, @honorIDX, @userEncode, @userIP, getdate())

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @honorIDX, 3, 1000021, 20, 8, 1, getdate()+7, getdate())
GO


-- ----------------------------
-- procedure structure for USP_LTS_Coupon_SEL
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_Coupon_SEL]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_Coupon_SEL]
GO

CREATE PROCEDURE [dbo].[USP_LTS_Coupon_SEL]
	-- Add the parameters for the stored procedure here
	@intType			tinyint,
	@strCpnNum			varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    -- Insert statements for procedure here
	IF Exists (Select * From TB_EventCoupon with (noLock)
				Where couponType = @intType
				And sn = @strCpnNum
	)
		Begin
			Return 1		-- 존재함
		End
	Else
		Begin
			Return 0		-- 존재하지 않음
		End


END
GO


-- ----------------------------
-- procedure structure for game_friend_list_asc_debug1
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_list_asc_debug1]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_list_asc_debug1]
GO

CREATE PROCEDURE [dbo].[game_friend_list_asc_debug1]
(
	@idx int
,	@accountIDX int
,	@topNo int
)
AS


SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

	SELECT TOP (@topNo) a.idx, a.friendAccIDX, b.nickName, a.regDate
	FROM userFriendDB a WITH  (INDEX (idx_userAccIDX))
		JOIN userMemberDB b 
		ON a.friendAccIDX = b.accountIDX
	WHERE a.userAccIDX = @accountIDX
		AND a.flag=1
		AND a.idx > @idx
	ORDER BY a.idx ASC
GO


-- ----------------------------
-- procedure structure for web_ilikeclick_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ilikeclick_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ilikeclick_save]
GO

CREATE PROCEDURE [dbo].[web_ilikeclick_save]
(
	@accountIDX int
,	@merchant varchar(20)
,	@merchantName varchar(20)
,	@gold int
)
AS
	INSERT INTO LosaGame_log.DBO.log_ilikeclick (accountIDX, merchantCode, merchantName, gold, regDate)
	VALUES (@accountIDX, @merchant, @merchantName, @gold, getdate())
GO


-- ----------------------------
-- procedure structure for AGENT_MATCHMODE_SEASON_RANKING
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_MATCHMODE_SEASON_RANKING]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_MATCHMODE_SEASON_RANKING]
GO

CREATE PROCEDURE [dbo].[AGENT_MATCHMODE_SEASON_RANKING]

AS

	SET NOCOUNT ON;

	UPDATE dbo.userMatchModeSeasonRankingDB
	   SET S1_Ranking = 0,
	       S1_MatchPoint = 0,
		   S1_SeasonDate = LEFT(CONVERT(VARCHAR(20), GETDATE(), 120), 10),
	       S2_Ranking = S1_Ranking,
	       S2_MatchPoint = S1_MatchPoint,
		   S2_SeasonDate = S1_SeasonDate,
		   S3_Ranking = S2_Ranking,
		   S3_MatchPoint = S2_MatchPoint,
		   S3_SeasonDate = S2_SeasonDate,
		   S4_Ranking = S3_Ranking,
		   S4_MatchPoint = S3_MatchPoint,
		   S4_SeasonDate = S3_SeasonDate,
		   S5_Ranking = S4_Ranking,
		   S5_MatchPoint = S4_MatchPoint,
		   S5_SeasonDate = S4_SeasonDate,
		   S6_Ranking = S5_Ranking,
		   S6_MatchPoint = S5_MatchPoint,
		   S6_SeasonDate = S5_SeasonDate,
		   S7_Ranking = S6_Ranking,
		   S7_MatchPoint = S6_MatchPoint,
		   S7_SeasonDate = S6_SeasonDate;


	
	INSERT dbo.userMatchModeSeasonRankingDB (
		AccountIDX,
		S1_Ranking, S1_MatchPoint, S1_SeasonDate, S2_Ranking, S2_MatchPoint, S2_SeasonDate, S3_Ranking, S3_MatchPoint, S3_SeasonDate,
        S4_Ranking, S4_MatchPoint, S4_SeasonDate, S5_Ranking, S5_MatchPoint, S5_SeasonDate, S6_Ranking, S6_MatchPoint, S6_SeasonDate,
        S7_Ranking, S7_MatchPoint, S7_SeasonDate
	)
	SELECT DR.AccountIDX, 0, 0, LEFT(CONVERT(VARCHAR(20), GETDATE(), 120), 10), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	  FROM dbo.userMatchModeDailyRankingDB DR WITH (NOLOCK)
	  LEFT JOIN dbo.userMatchModeSeasonRankingDB SR WITH (NOLOCK)
	    ON DR.AccountIDX = SR.AccountIDX
	 WHERE SR.AccountIDX IS NULL;


	UPDATE SR
	   SET S1_Ranking = DR.Ranking,
	       S1_MatchPoint = DR.MatchPoint
	  FROM (
		SELECT Ranking, AccountIDX, MatchPoint
		  FROM dbo.userMatchModeDailyRankingDB WITH (NOLOCK)
	  ) AS DR
	  JOIN dbo.userMatchModeSeasonRankingDB SR WITH (NOLOCK)
	    ON SR.AccountIDX = DR.AccountIDX;


	DELETE FROM dbo.userMatchModeSeasonRankingDB
	 WHERE S1_Ranking = 0
	   AND S2_Ranking = 0
	   AND S3_Ranking = 0
	   AND S4_Ranking = 0
	   AND S5_Ranking = 0
	   AND S6_Ranking = 0
	   AND S7_Ranking = 0;
GO


-- ----------------------------
-- procedure structure for game_cardmatching_update_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_cardmatching_update_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_cardmatching_update_data]
GO

CREATE PROCEDURE [dbo].[game_cardmatching_update_data]          
          
 @ACCOUNT_IDX INT,              
 @UpdateType		TINYINT,    
 @MissionType		TINYINT,              
 @MissionMark1		TINYINT,               
 @MissionMark2		TINYINT,               
 @Mark1				TINYINT,               
 @Mark2				TINYINT           
AS            
          
 SET NOCOUNT ON;          
 SET LOCK_TIMEOUT 10000;          
           
 BEGIN TRAN            
	IF( @UpdateType = 0 )
		BEGIN 
			UPDATE [dbo].[userCardMatchingDB] WITH (XLOCK, ROWLOCK) SET [MissionCount] = [MissionCount] +1 ,[MissionType] = @MissionType,
				[MissionMark1] = @MissionMark1,[MissionMark2] = @MissionMark2,[Mark1] = @Mark1,[Mark2] = @Mark2, [UpdateTime] = GETDATE(), [RegDate] = GETDATE() WHERE AccountIDX = @ACCOUNT_IDX;
		END 
    ELSE
		BEGIN
			UPDATE [dbo].[userCardMatchingDB] WITH (XLOCK, ROWLOCK) SET [MissionType] = @MissionType,[MissionMark1] = @MissionMark1,[MissionMark2] = @MissionMark2,
					[Mark1] = @Mark1,[Mark2] = @Mark2, [UpdateTime] = GETDATE() WHERE AccountIDX = @ACCOUNT_IDX;
		END

   IF(@@ROWCOUNT=0)              
   BEGIN    
     INSERT INTO [dbo].[userCardMatchingDB] WITH(XLOCK, ROWLOCK) ([MissionCount], [AccountIDX],[MissionType],[MissionMark1],[MissionMark2],[Mark1],[Mark2],[UpdateTime],[RegDate])
		VALUES ( 0, @ACCOUNT_IDX, @MissionType, @MissionMark1, @MissionMark2, @Mark1, @Mark2, GETDATE(),GETDATE())
   END               
 COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for manage_best_limit_count_update
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_best_limit_count_update]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_best_limit_count_update]
GO

CREATE PROCEDURE [dbo].[manage_best_limit_count_update]
(
	@bestcount int
)
AS
	UPDATE define_site_config SET content=@bestcount WHERE objName='bestcount'
GO


-- ----------------------------
-- procedure structure for web_member_recommend_join_friend_add_point
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_recommend_join_friend_add_point]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_recommend_join_friend_add_point]
GO

CREATE PROCEDURE [dbo].[web_member_recommend_join_friend_add_point]
(
	@accountIDX int
,	@recommIDX int
,	@bonusCash varchar(12)
,	@userIP varchar(15)
,	@note varchar(500)

)
As

	UPDATE userCashDB SET
		amtCash = amtCash + @bonusCash
,		amtBonus = amtBonus + @bonusCash
,		chgDate = getdate()
	WHERE accountIDX = @recommIDX

	INSERT INTO LosaGame_log.DBO.log_cash (accountIDX, userIP, DBID, applyType, amount, note, regDate)
	VALUES (@recommIDX, @userIP, 'RECOMMENDJOIN', 'B0', @bonusCash, '추천유저가입 보너스', getdate())

	if (exists(SELECT * FROM userEventDB WHERE accountIDX=@recommIDX))
	BEGIN
		UPDATE userEventDB SET value1 = value1 + 10 WHERE accountIDX=@recommIDX
	END
	ELSE
	BEGIN
		INSERT INTO userEventDB (accountIDX, value1, value2, eventType, regDate)
		VALUES (@recommIDX, 10, 0, 1, getdate())
	END

	UPDATE userInfoDB SET
		rec_index = rec_index + 10
	WHERE accountIDX = @recommIDX

	INSERT INTO userFriendDB (userAccIDX, friendAccIDX, regDate)
	VALUES (@accountIDX, @recommIDX, getdate())

	UPDATE LosaGame_log.DBO.log_recommend_join SET flag=1 WHERE rinkIP = @userIP
GO


-- ----------------------------
-- procedure structure for web_event_recommend_get_idx
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_recommend_get_idx]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_recommend_get_idx]
GO

CREATE PROCEDURE [dbo].[web_event_recommend_get_idx]
(
	@accountIDX int
,	@userIP varchar(15)
)
AS
	SELECT MAX(idx) FROM LosaGame_log.DBO.log_event_recommend WITH(NOLOCK) WHERE accountIDX=@accountIDX and userIP=@userIP
GO


-- ----------------------------
-- procedure structure for web_event_gradeup3_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_gradeup3_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_gradeup3_add]
GO

CREATE PROCEDURE [dbo].[web_event_gradeup3_add]
(
	@accountIDX int
,	@cpType int
,	@userIP varchar(15)
,	@flag tinyint
,	@eventType smallint
)
AS
	BEGIN TRAN

	INSERT INTO LosaGame_log.DBO.log_event (accountIDX, cpType, userIP, flag, eventType, regDate)
	VALUES (@accountIDX, @cpType, @userIP, @flag, @eventType, getdate())

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, 1, 26, 36000, 13, 1, getdate()+14, getdate())

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, 1, 27, 144000, 13, 1, getdate()+14, getdate())

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for USP_LTS_Channel_LegalAgent_INS
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_Channel_LegalAgent_INS]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_Channel_LegalAgent_INS]
GO

CREATE PROCEDURE [dbo].[USP_LTS_Channel_LegalAgent_INS]
	-- Add the parameters for the stored procedure here
	@strChnID		varchar(20),	-- 유저 채널링 아이디 
	@intAccountIdx		int,		-- 유저 IDX 
	@sCUserID		nvarchar(20),	-- 유저 아이디 
	@sPEmail		varchar(50),	-- 이메일
	@intCpType		smallint,	-- CpType (통합 : 0, mgame : 300, daum : 400 , playnetwork : 600, tooniland : 700)
	@strRegIP		varchar(15),	-- IP
	@sCertifyType		char(1),	-- 인증타입(R:주민번호로 인증, I:아이핀으로 인증, 이미인증동의한유저인경우:H)
	@sPname			varchar(20),	-- 보호자명
	@sPIpinCI		varchar(100),	-- IPIN_CI (주민번호 인증인 경우 IPIN으로 치환)
	@sPIpinDI		varchar(100),	-- IPIN_DI (주민번호 인증인 경우 IPIN으로 치환)
	@sEncCUserID		varchar(100),	-- 인코딩된 사용자 계정 고유 일련번호
	@sDomainName		varchar(100)	-- 도메인명
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- 변수 선언
	DECLARE @sDataEncCUserID	varchar(100)

	-- 변수 세팅
	SET @sDataEncCUserID = ''

	SELECT TOP 1 @sDataEncCUserID = EncCUserID 
	  FROM dbo.TB_LTS_Channel_LegalAgent WITH (NOLOCK)
	 WHERE CLA_ChildIdx = @intAccountIdx			

	-- 데이터가 없는 경우
	IF @@ROWCOUNT = 0
	BEGIN
		-- Insert statements for procedure here
		INSERT INTO dbo.TB_LTS_Channel_LegalAgent (CLA_ChnID, CLA_ChildIdx, CLA_ChildID, CLA_Email, CLA_CpType, 
							   CLA_RegIP, CLA_RegDate, Certify_Type, Pname, PIpinCI, 
							   PIpinDI, EncCUserID, DomainName)
		     VALUES (@strChnID, @intAccountIdx, @sCUserID, @sPEmail, @intCpType, 
		             @strRegIP, GETDATE(), @sCertifyType, @sPname, @sPIpinCI, 
			     @sPIpinDI, @sEncCUserID, @sDomainName)

		IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
		BEGIN
			RETURN (-2)
		END
	END
	ELSE
	BEGIN
		-- 데이터는 존재하지만 추가 데이터가 없는 경우
		IF @sDataEncCUserID = '' OR @sDataEncCUserID IS NULL
		BEGIN 
			UPDATE dbo.TB_LTS_Channel_LegalAgent
			   SET Certify_Type = @sCertifyType, 
			       Pname = @sPname, 
			       PIpinCI = @sPIpinCI, 
			       PIpinDI = @sPIpinDI, 
			       EncCUserID = @sEncCUserID, 
			       DomainName = @sDomainName
			 WHERE CLA_ChildIdx = @intAccountIdx			

			IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
			BEGIN
				RETURN (-3)
			END
		END 
		ELSE 
		BEGIN
			-- 등록정보가 있는 경우
			RETURN (-1)
		END
	END

	RETURN (1)
END
GO


-- ----------------------------
-- procedure structure for GAME_FRIEND_LIST_ASC_DEBUG
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[GAME_FRIEND_LIST_ASC_DEBUG]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[GAME_FRIEND_LIST_ASC_DEBUG]
GO

CREATE PROCEDURE [dbo].[GAME_FRIEND_LIST_ASC_DEBUG]
(
	@IDX INT
,	@ACCOUNTIDX INT
,	@TOPNO INT
)
AS
SET NOCOUNT ON 
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

SELECT TOP (@TOPNO) A.IDX, A.FRIENDACCIDX, B.NICKNAME, A.REGDATE
  FROM USERFRIENDDB A
  JOIN USERMEMBERDB B
    ON A.FRIENDACCIDX = B.ACCOUNTIDX
 WHERE A.USERACCIDX = @ACCOUNTIDX  
   AND A.IDX > @IDX 
   AND A.FLAG=1 
 ORDER BY A.IDX ASC
GO


-- ----------------------------
-- procedure structure for web_ilikeclick_get_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_ilikeclick_get_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_ilikeclick_get_count]
GO

CREATE PROCEDURE [dbo].[web_ilikeclick_get_count]
(
	@accountIDX int
,	@merchantCode varchar(40)
)
AS
	SELECT count(*) FROM LosaGame_log.DBO.log_ilikeclick WHERE accountIDX=@accountIDX and merchantCode=@merchantCode
GO


-- ----------------------------
-- procedure structure for AGENT_MATCHMODE_DAILY_RANKING
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_MATCHMODE_DAILY_RANKING]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_MATCHMODE_DAILY_RANKING]
GO

CREATE PROCEDURE [dbo].[AGENT_MATCHMODE_DAILY_RANKING]

AS

	SET NOCOUNT ON;

	TRUNCATE TABLE dbo.userMatchModeDailyRankingDB;

	INSERT INTO dbo.userMatchModeDailyRankingDB (Ranking, AccountIDX, MatchPoint)
	SELECT RANK() OVER(ORDER BY MatchPoint DESC) AS Ranking, AccountIDX, MatchPoint
	  FROM dbo.userMatchModeDB WITH (NOLOCK)
	 WHERE WinCount > 0
	    OR LoseCount > 0;
GO


-- ----------------------------
-- procedure structure for game_cardmatching_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_cardmatching_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_cardmatching_get_data]
GO

CREATE PROCEDURE [dbo].[game_cardmatching_get_data]          
          
 @ACCOUNT_IDX INT          
           
AS            
          
 SET NOCOUNT ON;          
 SET LOCK_TIMEOUT 10000;          
           
 SELECT [MissionType],[MissionMark1],[MissionMark2],[Mark1],[Mark2],[UpdateTime]
 FROM [dbo].[userCardMatchingDB] WITH (NOLOCK)          
  WHERE [AccountIDX] = @ACCOUNT_IDX
GO


-- ----------------------------
-- procedure structure for manage_best_limit_count_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_best_limit_count_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_best_limit_count_get_data]
GO

CREATE PROCEDURE [dbo].[manage_best_limit_count_get_data]

AS
	SELECT content FROM define_site_config WHERE objName='bestcount'
GO


-- ----------------------------
-- procedure structure for web_member_nickname_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_nickname_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_nickname_count]
GO

CREATE PROCEDURE [dbo].[web_member_nickname_count]
(
	@nickname varchar(20)
)
As
	Select count(*) From userMemberDB where nickName = @nickname
GO


-- ----------------------------
-- procedure structure for web_event_recommend_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_recommend_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_recommend_add]
GO

CREATE PROCEDURE [dbo].[web_event_recommend_add]
(
	@accountIDX int
,	@userIP varchar(15)
,	@ref varchar(200)
)
AS
	INSERT INTO LosaGame_log.DBO.log_event_recommend (accountIDX, userIP, ref, point, regDate)
	VALUES (@accountIDX, @userIP, @ref, -1, getdate())
GO


-- ----------------------------
-- procedure structure for web_event_gradeup2_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_gradeup2_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_gradeup2_add]
GO

CREATE PROCEDURE [dbo].[web_event_gradeup2_add]
(
	@accountIDX int
,	@cpType int
,	@userIP varchar(15)
,	@flag tinyint
,	@eventType smallint
)
AS
	BEGIN TRAN

	INSERT INTO LosaGame_log.DBO.log_event (accountIDX, cpType, userIP, flag, eventType, regDate)
	VALUES (@accountIDX, @cpType, @userIP, @flag, @eventType, getdate())

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, 1, 27, 108000, 30, 1, getdate()+14, getdate())

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for USP_LTS_Channel_LegalAgent_INFO
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_Channel_LegalAgent_INFO]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_Channel_LegalAgent_INFO]
GO

CREATE PROCEDURE [dbo].[USP_LTS_Channel_LegalAgent_INFO] 
	-- Add the parameters for the stored procedure here
	@sCUserID		varchar(25)	-- 사용자 아이디 
AS
BEGIN
	SET NOCOUNT ON 

	-- 등록 정보가 있는 경우 
	SELECT * 
          FROM dbo.TB_LTS_Channel_LegalAgent WITH (NOLOCK)
         WHERE CLA_ChildID = @sCUserID

	SET NOCOUNT OFF 
END
GO


-- ----------------------------
-- procedure structure for game_friend_list_asc
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_list_asc]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_list_asc]
GO

CREATE PROCEDURE [dbo].[game_friend_list_asc]
(
	@idx int
,	@accountIDX int
,	@topNo int
)
AS

SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

SELECT TOP (@topNo) a.idx, a.friendAccIDX, b.nickName, a.regDate,
	   a.sendCloverCnt, a.sendCloverDate, a.receiveCloverCnt, a.receiveCloverDate, a.receiveBCloverCnt
  FROM userFriendDB a WITH (INDEX (idx_userAccIDX))
 INNER LOOP JOIN userMemberDB b WITH (INDEX (idx_accountIDX))
	ON a.friendAccIDX = b.accountIDX
 WHERE a.userAccIDX = @accountIDX
   AND a.flag=1
   AND a.idx > @idx
 ORDER BY a.idx ASC
GO


-- ----------------------------
-- procedure structure for manage_event_ilikeclick_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_ilikeclick_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_ilikeclick_count]
GO

CREATE PROCEDURE [dbo].[manage_event_ilikeclick_count]
AS
	SELECT count(*) From Losagame_log.DBO.log_ilikeclick
GO


-- ----------------------------
-- procedure structure for AGENT_INIT_INFO_NONAGREEMENT
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_INIT_INFO_NONAGREEMENT]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_INIT_INFO_NONAGREEMENT]
GO

CREATE PROCEDURE [dbo].[AGENT_INIT_INFO_NONAGREEMENT]

AS

DECLARE @initBirth char(6)
DECLARE @initDay datetime

SET @initBirth = RTRIM(SUBSTRING(CONVERT(varchar(10), DATEADD(yy, -14, GETDATE()), 112), 3, 10))
SET @initDay = DATEADD(d, -14, LEFT(GETDATE(), 10))

-- 2014년이 되면 주민앞자리가 0 으로 바뀌니 그때가서 바꿀 것.
IF (YEAR(GETDATE()) < 2014)
BEGIN
	DELETE FROM dbo.temp_init_nonage

	INSERT INTO dbo.temp_init_nonage (accountIDX)
	SELECT accountIDX
	  FROM dbo.userNameDB WITH(NOLOCK)
     WHERE accountIDX IN (
		SELECT accountIDX
		  FROM dbo.userParentDB WITH(NOLOCK)
		 WHERE agreeType=0
		   AND regDate < @initDay
		)
	   AND (userBirthday > @initBirth or userNumber in (3,4))


	DELETE FROM dbo.userParentDB
     WHERE accountIDX IN (
		SELECT accountIDX
		  FROM dbo.temp_init_nonage
		)

	DELETE FROM dbo.userInfoBDB
	 WHERE accountIDX IN (
		SELECT accountIDX
		  FROM dbo.temp_init_nonage
		)

	UPDATE dbo.userNameDB
	   SET userJumin1=NULL,
		   userJumin2=NULL,
		   ipinCI=NULL,
		   ipinDI=NULL,
		   returnValue=0,
		   realType=0
	 WHERE accountIDX IN (
		SELECT accountIDX
		  FROM dbo.temp_init_nonage
		)
END
GO


-- ----------------------------
-- procedure structure for game_award_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_award_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_award_save]
GO

CREATE PROCEDURE [dbo].[game_award_save]
(
	@idx int
,	@award1_type int
,	@award1_number int
,	@award1_point int
,	@award2_type int
,	@award2_number int
,	@award2_point int
,	@award3_type int
,	@award3_number int
,	@award3_point int
,	@award4_type int
,	@award4_number int
,	@award4_point int
,	@award5_type int
,	@award5_number int
,	@award5_point int
,	@award6_type int
,	@award6_number int
,	@award6_point int
,	@award7_type int
,	@award7_number int
,	@award7_point int
,	@award8_type int
,	@award8_number int
,	@award8_point int
,	@award9_type int
,	@award9_number int
,	@award9_point int
,	@award10_type int
,	@award10_number int
,	@award10_point int
)
As
	Update userAwardDB Set
	award1_type = @award1_type
,	award1_number = @award1_number
,	award1_point = @award1_point
,	award2_type = @award2_type
,	award2_number = @award2_number
,	award2_point = @award2_point
,	award3_type = @award3_type
,	award3_number = @award3_number
,	award3_point = @award3_point
,	award4_type = @award4_type
,	award4_number = @award4_number
,	award4_point = @award4_point
,	award5_type = @award5_type
,	award5_number = @award5_number
,	award5_point = @award5_point
,	award6_type = @award6_type
,	award6_number = @award6_number
,	award6_point = @award6_point
,	award7_type = @award7_type
,	award7_number = @award7_number
,	award7_point = @award7_point
,	award8_type = @award8_type
,	award8_number = @award8_number
,	award8_point = @award8_point
,	award9_type = @award9_type
,	award9_number = @award9_number
,	award9_point = @award9_point
,	award10_type = @award10_type
,	award10_number = @award10_number
,	award10_point = @award10_point
	Where idx=@idx
GO


-- ----------------------------
-- procedure structure for web_event_join
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_join]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_join]
GO

CREATE PROCEDURE [dbo].[web_event_join]
(
	@accountIDX int
,	@cpType int
,	@userIP varchar(16)
)
AS

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate) 
	VALUES (1105, @accountIDX, 3, 5000017, 15, 28, 1, getdate()+28, getdate())

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate) 
	VALUES (1105, @accountIDX, 3, 1000016, 200, 28, 1, getdate()+28, getdate())

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, 3, 1000021, 20, 28, 1, getdate()+28, getdate())

	INSERT INTO LosaGame_log.DBO.log_event_join (accountIDX, cpType, userIP, regDate)
	VALUES (@accountIDX, @cpType, @userIP, getdate())
GO


-- ----------------------------
-- procedure structure for web_member_namecheck_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_namecheck_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_namecheck_add]
GO

CREATE PROCEDURE [dbo].[web_member_namecheck_add]
(
	@accountIDX int
,	@userName varchar(10)
,	@userJumin1 char(6)
,	@userEnCode varchar(64)
,	@userNumber tinyint
,	@gender int
,	@userIP varchar(15)
)
AS

	INSERT INTO userNameDB (accountIDX, userName, userBirthday, userEnCode, userNumber, userGender, returnValue, userIP, regDate)
	VALUES (@accountIDX, @userName, @userJumin1, @userEnCode, @userNumber, @gender, 0, @userIP, getdate())

	UPDATE userMemberDB SET joinType=5 WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for manage_event_recommend_refer
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_recommend_refer]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_recommend_refer]
GO

CREATE PROCEDURE [dbo].[manage_event_recommend_refer]
(
	@accountIDX int
)
AS
	SELECT TOP 500 ref, userIP, point, regDate FROM LosaGame_log.DBO.log_event_recommend WHERE accountIDX=@accountIDX ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_event_gradeup1_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_gradeup1_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_gradeup1_add]
GO

CREATE PROCEDURE [dbo].[web_event_gradeup1_add]
(
	@accountIDX int
,	@cpType int
,	@userIP varchar(15)
,	@flag tinyint
,	@eventType smallint
)
AS
	BEGIN TRAN

	INSERT INTO LosaGame_log.DBO.log_event (accountIDX, cpType, userIP, flag, eventType, regDate)
	VALUES (@accountIDX, @cpType, @userIP, @flag, @eventType, getdate())

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, 1, 26, 36000, 29, 1, getdate()+14, getdate())

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, 1, 27, 36000, 29, 1, getdate()+14, getdate())

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_guildHQ_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guildHQ_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guildHQ_get_data]
GO

CREATE PROCEDURE [dbo].[game_guildHQ_get_data]

	@GUILD_IDX		INT,
	@ITEM_STATUS	TINYINT,		 -- 0: 미설치, 1:설치됨, 2:삭제
	@PAGE			INT,
	@PAGE_SIZE		INT

AS 

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	15000

	IF (@ITEM_STATUS=0)
	BEGIN
		
		-- 길드 공용 인벤 아이템 SELECT
		SELECT ItemCode, COUNT(*) FROM dbo.userGuildHQDB WITH (READCOMMITTED)
		WHERE GuildIDX=@GUILD_IDX and ItemStatus=@ITEM_STATUS
		GROUP BY ItemCode

	END
	ELSE IF (@ITEM_STATUS=1)
	BEGIN
		
		-- 설치된 아이템 SELECT
		SELECT ItemSerial, ItemCode, ItemXZ, ItemY, ItemRotate, ItemDecoScore FROM (
			SELECT ROW_NUMBER() OVER (ORDER BY ItemSerial DESC) as ItemList, ItemSerial, ItemCode, ItemXZ, ItemY, ItemRotate, ItemDecoScore
			FROM dbo.userGuildHQDB WITH (READCOMMITTED) WHERE GuildIDX=@GUILD_IDX and ItemStatus=@ITEM_STATUS
		) as GUILDHQ_LIST
		WHERE ItemList BETWEEN (((@PAGE - 1) * @PAGE_SIZE) + 1) AND @PAGE * @PAGE_SIZE

	END 


	RETURN;
GO


-- ----------------------------
-- procedure structure for web_event_coupon_teencash_log_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_coupon_teencash_log_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_coupon_teencash_log_add]
GO

CREATE PROCEDURE [dbo].[web_event_coupon_teencash_log_add]
(
	@accountIDX int
,	@sn varchar(12)
,	@cpType int
,	@regType tinyint
,	@userIP varchar(15)
)
AS
	INSERT INTO LosaGame_log.DBO.log_event_teencash (accountIDX, sn, cpType, regType, userIP, regDate)
	VALUES (@accountIDX, @sn, @cpType, @regType, @userIP, getdate())
GO


-- ----------------------------
-- procedure structure for AGENT_ENCODE_FIX_KEY_CREATE
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[AGENT_ENCODE_FIX_KEY_CREATE]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[AGENT_ENCODE_FIX_KEY_CREATE]
GO

CREATE PROCEDURE [dbo].[AGENT_ENCODE_FIX_KEY_CREATE]
As

	DECLARE @rndType tinyint, @i tinyint
	DECLARE @encodeKey varchar(15)

	SET @encodeKey = ''
	SET @i = 0

	WHILE (@i < 15)
	BEGIN
		SET @rndType = Convert(tinyint, Round(rand() * 9 - 0.5,0))
		if (@rndType % 3 = 0)
			SET @encodeKey = @encodeKey + char(Round(rand() * 10 - 0.5,0) + 48)
		else if (@rndType % 3 = 1)
			SET @encodeKey = @encodeKey + char(Round(rand() * 26 - 0.5,0) + 65)
		else
			SET @encodeKey = @encodeKey + char(Round(rand() * 26 - 0.5,0) + 97)

		SET @i = @i + 1

	END

	INSERT INTO define_encode_key (encodeKey, regDate) VALUES (@encodeKey, getdate())
GO


-- ----------------------------
-- procedure structure for game_award_level_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_award_level_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_award_level_save]
GO

CREATE PROCEDURE [dbo].[game_award_level_save]
(
	@accountIDX int
,	@awardLevel int
,	@expert int
)
AS
	If (exists(SELECT * FROM userRankingDB_award WHERE accountIDX=@accountIDX))
	BEGIN
		UPDATE userRankingDB_award SET awardLevel=@awardLevel, expert=@expert WHERE accountIDX=@accountIDX
	END
	ELSE
	BEGIN
		INSERT INTO userRankingDB_award (accountIDX, awardLevel, expert, regDate)
		VALUES (@accountIDX, @awardLevel, @expert, getdate())
	END
GO


-- ----------------------------
-- procedure structure for web_event_input_serial_get_userinfo
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_input_serial_get_userinfo]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_input_serial_get_userinfo]
GO

CREATE PROCEDURE [dbo].[web_event_input_serial_get_userinfo]
(
	@accountIDX int
)
AS
	SELECT a.userID, b.userName, b.userJumin1, b.userJumin2, a.email, c.zipcode 
	FROM userMemberDB a JOIN userNameDB b ON a.accountIDX=b.accountIDX JOIN userInfoBDB c ON a.accountIDX=c.accountIDX 
	WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_member_jumin_get_userID
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_jumin_get_userID]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_jumin_get_userID]
GO

CREATE PROCEDURE [dbo].[web_member_jumin_get_userID]
(
	@userJumin varchar(64)
)
AS
	SELECT userID FROM userMemberDB WHERE accountIDX=(SELECT TOP 1 accountIDX FROM userNameDB WHERE userEnCode = @userJumin)
GO


-- ----------------------------
-- procedure structure for manage_event_recommend_link_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_recommend_link_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_recommend_link_list]
GO

CREATE PROCEDURE [dbo].[manage_event_recommend_link_list]
AS
	SELECT TOP 500 accountIDX, ref, point, userip, regdate FROM LosaGame_log.DBO.log_event_recommend WITH(NOLOCK) ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_event_get_coin
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_get_coin]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_get_coin]
GO

CREATE PROCEDURE [dbo].[web_event_get_coin]
(
	@accountIDX int
)
AS
	SELECT value1 FROM userEventDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_guild_user_nick_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_user_nick_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_user_nick_get_data]
GO

CREATE PROCEDURE [dbo].[game_guild_user_nick_get_data]
(
	@nickname varchar(20)
)
AS
	SELECT guildIDX FROM userGuildInfoDB WITH(NOLOCK) WHERE accountIDX=(SELECT accountIDX FROM userMemberDB WITH(NOLOCK) WHERE nickName=@nickname) and guildJoinType=1
GO


-- ----------------------------
-- procedure structure for _nouse_manage_mannerpoint_log_search_count_date
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[_nouse_manage_mannerpoint_log_search_count_date]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[_nouse_manage_mannerpoint_log_search_count_date]
GO

CREATE PROCEDURE [dbo].[_nouse_manage_mannerpoint_log_search_count_date]
(
	@sDate varchar(10)
,	@eDate varchar(10)
,	@resultType tinyint
)
AS

	IF (@resultType = 0)
	BEGIN
		SELECT count(*) FROM LosaGame_log.DBO.log_mannerpoint WHERE regDate >= @sDate and regDate <= @eDate and receivepoint <> 0 and resultType = 0
	END
	ELSE
	BEGIN
		SELECT count(*) FROM LosaGame_log.DBO.log_mannerpoint WHERE regDate >= @sDate and regDate <= @eDate and receivepoint <> 0
	END
GO


-- ----------------------------
-- procedure structure for game_award_get_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_award_get_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_award_get_self_index]
GO

CREATE PROCEDURE [dbo].[game_award_get_self_index]
(
	@accountIDX int
)
As
	SELECT MAX(idx) FROM userAwardDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for manage_present_item_get_accountIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_present_item_get_accountIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_present_item_get_accountIDX]
GO

CREATE PROCEDURE [dbo].[manage_present_item_get_accountIDX]
(
	@nickName varchar(20)
)
AS

	SELECT accountIDX FROM userMemberDB WHERE nickName=@nickName
GO


-- ----------------------------
-- procedure structure for web_member_jumin_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_jumin_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_jumin_count]
GO

CREATE PROCEDURE [dbo].[web_member_jumin_count]
(
	@userJumin varchar(64)
)
As
	SELECT COUNT(*) FROM userNameDB WHERE userEnCode = @userJumin
GO


-- ----------------------------
-- procedure structure for web_event_get_prizer_winning_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_get_prizer_winning_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_get_prizer_winning_count]
GO

CREATE PROCEDURE [dbo].[web_event_get_prizer_winning_count]
(
	@giftType tinyint
)
AS

	SELECT count(*) FROM LosaGame_log.DBO.log_event_openbeta WHERE giftType=@giftType and regDate >= Left(getdate(), 10) and resultType = 1
GO


-- ----------------------------
-- procedure structure for web_event_coupon_teencash
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_coupon_teencash]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_coupon_teencash]
GO

CREATE PROCEDURE [dbo].[web_event_coupon_teencash]
(
	@accountIDX int
)
AS

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, 3, 1000022, 1, 3, 1, getdate()+14, getdate())

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, 3, 1000022, 1, 3, 1, getdate()+14, getdate())
GO


-- ----------------------------
-- procedure structure for game_guild_user_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_guild_user_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_guild_user_get_data]
GO

CREATE PROCEDURE [dbo].[game_guild_user_get_data]
(
	@accountIDX int
)
AS
	SELECT idx, guildName, guildmark FROM userGuildDB WITH(NOLOCK) WHERE idx=(SELECT guildIDX FROM userGuildInfoDB WITH(NOLOCK) WHERE @accountIDX=accountIDX and guildJoinType=1)
GO


-- ----------------------------
-- procedure structure for _nouse_web_minihome_userinfo_all_award_expert
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[_nouse_web_minihome_userinfo_all_award_expert]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[_nouse_web_minihome_userinfo_all_award_expert]
GO

CREATE PROCEDURE [dbo].[_nouse_web_minihome_userinfo_all_award_expert]
(
	@accountIDX int
)
As

	SELECT	ISNULL(SUM(award1_point/100), 0), ISNULL(SUM(award2_point/100), 0), ISNULL(SUM(award3_point/100), 0), 
			ISNULL(SUM(award4_point/100), 0), ISNULL(SUM(award5_point/100), 0), ISNULL(SUM(award6_point/100), 0), 
			ISNULL(SUM(award7_point/100), 0), ISNULL(SUM(award8_point/100), 0), ISNULL(SUM(award9_point/100), 0), ISNULL(SUM(award10_point/100), 0)
	FROM userAwardDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_award_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_award_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_award_get_list]
GO

CREATE PROCEDURE [dbo].[game_award_get_list]
(
	@accountIDX int
)
As
	SELECT	idx, award1_type, award1_number, award1_point, award2_type, award2_number, award2_point, award3_type, award3_number, award3_point,
		award4_type, award4_number, award4_point, award5_type, award5_number, award5_point, award6_type, award6_number, award6_point,
		award7_type, award7_number, award7_point, award8_type, award8_number, award8_point, award9_type, award9_number, award9_point, award10_type, award10_number, award10_point 
	FROM userAwardDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_teencash_add_playtime
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_teencash_add_playtime]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_teencash_add_playtime]
GO

CREATE PROCEDURE [dbo].[web_event_teencash_add_playtime]
(
	@accountIDX int
,	@numberth tinyint
)
AS
	If (not exists(SELECT * FROM event_teencash_playtime WHERE accountIDX=@accountIDX and numberth=@numberth))
	BEGIN
		DECLARE @playtime int
		SET @playtime = (SELECT playTime FROM userGameDB WHERE accountIDX=@accountIDX)

		INSERT INTO event_teencash_playtime (accountIDX, startPlayTime, endPlayTime, numberth, regDate)
		VALUES (@accountIDX, @playtime, @playtime, @numberth, getdate())
	END
GO


-- ----------------------------
-- procedure structure for web_member_join_event_log_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_join_event_log_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_join_event_log_save]
GO

CREATE PROCEDURE [dbo].[web_member_join_event_log_save]
(
	@mgameID varchar(20)
,	@flag varchar(50)
)
AS
	UPDATE LosaGame_log.DBO.log_mgame_cash_event SET cash=1000, flag=@flag WHERE accountIDX=(SELECT accountIDX FROM userCooperationDB WHERE cpID=@mgameID and cpType=300)
GO


-- ----------------------------
-- procedure structure for manage_event_prize_winner_search_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_prize_winner_search_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_prize_winner_search_count]
GO

CREATE PROCEDURE [dbo].[manage_event_prize_winner_search_count]
(
	@searchType int
,	@sDate datetime
,	@eDate datetime
)
AS
	IF (@searchType = 0)
		SELECT count(*) FROM LosaGame_log.DBO.log_event_openbeta WHERE resultType=1 and (regDate >= @sDate and regDate < @eDate)
	ELSE
		SELECT count(*) FROM LosaGame_log.DBO.log_event_openbeta WHERE resultType=1 and giftType=@searchType and (regDate >= @sDate and regDate < @eDate)
GO


-- ----------------------------
-- procedure structure for web_event_coupon_teencash_get_user_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_coupon_teencash_get_user_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_coupon_teencash_get_user_data]
GO

CREATE PROCEDURE [dbo].[web_event_coupon_teencash_get_user_data]
(
	@accountIDX int
)
AS
	SELECT a.joinType, a.regDate, b.userState FROM userMemberDB a JOIN userGameDB b on a.accountIDX=b.accountIDX WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_present_get_list_debug
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_present_get_list_debug]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_present_get_list_debug]
GO

CREATE PROCEDURE [dbo].[game_present_get_list_debug]
(
	@idx int
,	@receiveIDX int
,	@topN int
)
AS

SET NOCOUNT ON
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 

SELECT TOP (@topN) a.idx, a.sendIDX, isNull(b.nickName, '탈퇴 회원'), a.presentType,
				   a.value1, a.value2, a.value3, a.value4, a.msgType, a.flag, a.limitDate
  FROM userPresentDB a WITH (INDEX (idx_receiveIDX))
  LEFT JOIN userMemberDB b WITH (INDEX (idx_accountIDX))
    ON a.sendIDX = b.accountIDX
 WHERE a.receiveIDX = @receiveIDX
   AND a.idx > @idx
 ORDER BY a.idx ASC
GO


-- ----------------------------
-- procedure structure for game_friend_join_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_join_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_join_list]
GO

CREATE PROCEDURE [dbo].[game_friend_join_list]
(
	@idx int
,	@accountIDX int
,	@topNo int
)
AS

SET NOCOUNT ON

SELECT TOP (@topNo) a.idx, a.friendAccIDX, b.nickName
  FROM dbo.userFriendDB a WITH(NOLOCK)
  JOIN userMemberDB b WITH(NOLOCK)
	ON a.friendAccIDX = b.accountIDX
 WHERE a.userAccIDX = @accountIDX
	   AND a.idx < @idx
	   AND flag=0
 ORDER BY a.idx DESC
GO


-- ----------------------------
-- procedure structure for game_award_get_level
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_award_get_level]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_award_get_level]
GO

CREATE PROCEDURE [dbo].[game_award_get_level]
(
	@accountIDX int
)
AS
	SELECT awardLevel, expert FROM userRankingDB_award WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_save]
GO

CREATE PROCEDURE [dbo].[web_event_save]
(
	@accountIDX int
)
AS
	if (exists(SELECT * FROM userEventDB WHERE accountIDX=@accountIDX))
	BEGIN
		UPDATE userEventDB SET value1 = value1 + 1 WHERE accountIDX=@accountIDX
	END
	ELSE
	BEGIN
		INSERT INTO userEventDB (accountIDX, value1, value2, eventType, regDate)
		VALUES (@accountIDX, 1, 0, 1, getdate())
	END
GO


-- ----------------------------
-- procedure structure for web_medal_receive_now
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_medal_receive_now]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_medal_receive_now]
GO

CREATE PROCEDURE [dbo].[web_medal_receive_now]
(
	@accountIDX int
)
As
	SELECT	a.visit_count, a.rec_index, b.userState
	FROM userInfoDB a JOIN userGameDB b ON a.accountIDX = b.accountIDX WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for manage_event_prize_winner_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_prize_winner_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_prize_winner_count]
GO

CREATE PROCEDURE [dbo].[manage_event_prize_winner_count]
AS
	SELECT count(*) FROM LosaGame_log.DBO.log_event_openbeta WHERE resultType=1
GO


-- ----------------------------
-- procedure structure for usp_web_block_ip_get_list_by_userip
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_web_block_ip_get_list_by_userip]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[usp_web_block_ip_get_list_by_userip]
GO

CREATE PROCEDURE [dbo].[usp_web_block_ip_get_list_by_userip]
	@sUserIp	varchar(15)		-- 사용자아이피
AS
BEGIN
	SET NOCOUNT ON

	SELECT content 
	  FROM define_site_config WITH (NOLOCK)
	 WHERE objName = 'blockIP'
	   AND content = @sUserIp

	SET NOCOUNT OFF 
END
GO


-- ----------------------------
-- procedure structure for game_price_class_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_price_class_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_price_class_get_data]
GO

CREATE PROCEDURE [dbo].[game_price_class_get_data]
AS
	SELECT	TOP 1 
			class1_price, class2_price, class3_price, class4_price, class5_price, class6_price, class7_price, class8_price, class9_price, class10_price, 
			class11_price, class12_price, class13_price, class14_price, class15_price, class16_price, class17_price, class18_price, class19_price, class20_price, 
			class21_price, class22_price, class23_price, class24_price, class25_price, class26_price, class27_price, class28_price, class29_price, class30_price, 
			class31_price, class32_price, class33_price, class34_price, class35_price, class36_price, class37_price, class38_price, class39_price, class40_price, 
			class41_price, class42_price, class43_price, class44_price, class45_price, class46_price, class47_price, class48_price, class49_price, class50_price,
			class51_price, class52_price, class53_price, class54_price, class55_price, class56_price, class57_price, class58_price, class59_price, class60_price,
			class61_price, class62_price, class63_price, class64_price, class65_price, class66_price, class67_price, class68_price, class69_price, class70_price,
			class71_price, class72_price, class73_price, class74_price, class75_price, class76_price, class77_price, class78_price, class79_price, class80_price,
			class81_price, class82_price, class83_price, class84_price, class85_price, class86_price, class87_price, class88_price, class89_price, class90_price,
			class91_price, class92_price, class93_price, class94_price, class95_price, class96_price, class97_price, class98_price, class99_price, class100_price
			-- 50 추가. 2013. 05. 10.
			, class101_price, class102_price, class103_price, class104_price, class105_price, class106_price, class107_price, class108_price, class109_price, class110_price 
			, class111_price, class112_price, class113_price, class114_price, class115_price, class116_price, class117_price, class118_price, class119_price, class120_price 
			, class121_price, class122_price, class123_price, class124_price, class125_price, class126_price, class127_price, class128_price, class129_price, class130_price 
			, class131_price, class132_price, class133_price, class134_price, class135_price, class136_price, class137_price, class138_price, class139_price, class140_price 
			, class141_price, class142_price, class143_price, class144_price, class145_price, class146_price, class147_price, class148_price, class149_price, class150_price
	FROM define_class_price ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for game_friend_join_in
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_join_in]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_join_in]
GO

CREATE PROCEDURE [dbo].[game_friend_join_in]
(
	@accountIDX int
,	@friendNick varchar(20)
)
AS

SET NOCOUNT ON

DECLARE @cnt int
DECLARE @errcount int
DECLARE @friendIDX int
DECLARE @eventType int
DECLARE @maxJoinCnt int

SET @cnt = 0
SET @errcount = 0
SET @maxJoinCnt = 20
SET @friendIDX = ISNULL((
	SELECT accountIDX
	  FROM dbo.userMemberDB WITH(NOLOCK)
	 WHERE nickName=@friendNick
), -1)

IF (@friendIDX < 0)
BEGIN
	SET @errcount = 2
	SELECT @errcount AS 'returnVal'
	RETURN
END

/*
SET @eventType = isNull((SELECT eventType FROM userMemberDB WITH(NOLOCK) WHERE nickName=@friendNick), 0)
if (@eventType = 1)
BEGIN
	SET @errcount = 7
	SELECT @errcount AS 'returnVal'
	RETURN
END
*/

SET @cnt = (
	SELECT COUNT(*)
	  FROM dbo.userFriendDB WITH(NOLOCK)
	 WHERE userAccIDX=@accountIDX
	   AND friendAccIDX=@friendIDX
	   AND flag=0
)

IF (@cnt > 0)
BEGIN
	SET @errcount = 3
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @cnt = (
	SELECT COUNT(*)
	  FROM dbo.userFriendDB WITH(NOLOCK)
	 WHERE userAccIDX=@accountIDX
	   AND friendAccIDX=@friendIDX
	   AND flag=1
)

IF (@cnt > 0)
BEGIN
	SET @errcount = 4
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @cnt = (
	SELECT COUNT(*)
	  FROM dbo.userFriendDB WITH(NOLOCK)
	 WHERE userAccIDX=@friendIDX
	   AND friendAccIDX=@accountIDX
	   AND flag=0
)

IF (@cnt > 0)
BEGIN
	SET @errcount = 5
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @cnt = (
	SELECT COUNT(*)
	  FROM dbo.userFriendDB WITH(NOLOCK)
	 WHERE userAccIDX=@friendIDX
	   AND flag=0
)

IF (@cnt >= @maxJoinCnt)
BEGIN
	SET @errcount = 8
	SELECT @errcount AS 'returnVal'
	RETURN
END

IF (@errcount > 0)
BEGIN
	SELECT @errcount AS 'returnVal'
END
ELSE
BEGIN
	SELECT 1 AS 'returnVal'
	INSERT INTO userFriendDB (
		userAccIDX, friendAccIDX, sendCloverCnt, sendCloverDate, receiveCloverCnt, receiveCloverDate, receiveBCloverCnt, flag, regDate
	)
	VALUES (
		@friendIDX, @accountIDX, 0, 0, 0, 0, 0, 0, GETDATE()
	)
END
GO


-- ----------------------------
-- procedure structure for game_award_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_award_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_award_add]
GO

CREATE PROCEDURE [dbo].[game_award_add]
(
	@accountIDX int
,	@award1_type int
,	@award1_number int
,	@award1_point int
,	@award2_type int
,	@award2_number int
,	@award2_point int
,	@award3_type int
,	@award3_number int
,	@award3_point int
,	@award4_type int
,	@award4_number int
,	@award4_point int
,	@award5_type int
,	@award5_number int
,	@award5_point int
,	@award6_type int
,	@award6_number int
,	@award6_point int
,	@award7_type int
,	@award7_number int
,	@award7_point int
,	@award8_type int
,	@award8_number int
,	@award8_point int
,	@award9_type int
,	@award9_number int
,	@award9_point int
,	@award10_type int
,	@award10_number int
,	@award10_point int
)
As
	Insert into userAwardDB (accountIDX,
	award1_type, award1_number, award1_point, award2_type, award2_number, award2_point, award3_type, award3_number, award3_point,
	award4_type, award4_number, award4_point, award5_type, award5_number, award5_point, award6_type, award6_number, award6_point,
	award7_type, award7_number, award7_point, award8_type, award8_number, award8_point, award9_type, award9_number, award9_point,
	award10_type, award10_number, award10_point, regDate
	 ) values (@accountIDX,
	@award1_type, @award1_number, @award1_point, @award2_type, @award2_number, @award2_point, @award3_type, @award3_number, @award3_point,
	@award4_type, @award4_number, @award4_point, @award5_type, @award5_number, @award5_point, @award6_type, @award6_number, @award6_point,
	@award7_type, @award7_number, @award7_point, @award8_type, @award8_number, @award8_point, @award9_type, @award9_number, @award9_point,
	@award10_type, @award10_number, @award10_point, getdate()
	)
GO


-- ----------------------------
-- procedure structure for web_medal_receive_get_flag
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_medal_receive_get_flag]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_medal_receive_get_flag]
GO

CREATE PROCEDURE [dbo].[web_medal_receive_get_flag]
(
	@idx int
,	@accountIDX int
)
AS
	SELECT flag FROM userMedalDB_receive WHERE idx=@idx and accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for usp_userCooperationDB_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_userCooperationDB_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[usp_userCooperationDB_info]
GO

CREATE PROCEDURE [dbo].[usp_userCooperationDB_info]
	@nAccountIDX	int,		-- 회원IDX
	@nCpType		int			-- CP타입(300:엠게임, 400:엠게임, 500:버디버디, 600:네이버, 700:투니랜드)
AS
BEGIN
	SET NOCOUNT ON 

	SELECT accountIDX, userID, cpID, cpIDX, note
	  FROM userCooperationDB WITH (NOLOCK)
	 WHERE accountIDX = @nAccountIDX 
	   AND cpType = @nCpType
	
	SET NOCOUNT OFF 
END
GO


-- ----------------------------
-- procedure structure for game_friend_join_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_join_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_join_delete]
GO

CREATE PROCEDURE [dbo].[game_friend_join_delete]
(
	@idx int
)
AS

SET NOCOUNT ON

DELETE FROM dbo.userFriendDB
 WHERE idx=@idx
   AND flag=0
GO


-- ----------------------------
-- procedure structure for game_attendance_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_attendance_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_attendance_list]
GO

CREATE PROCEDURE [dbo].[game_attendance_list]
(
	@accountIDX INT
)
AS

SET NOCOUNT ON

SELECT idx, accountIDX, checkDate
  FROM dbo.userAttendanceDB WITH(NOLOCK)
 WHERE accountIDX=@accountIDX
 ORDER BY idx ASC
GO


-- ----------------------------
-- procedure structure for web_event_present_add2
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_present_add2]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_present_add2]
GO

CREATE PROCEDURE [dbo].[web_event_present_add2]  
(  
 @accountIDX int  
, @presentType int  
, @value1 int  
, @value2 int  
, @value3 int  
, @value4 int  
, @msgType int  
, @limitDate varchar(10)  
)  
AS  
 INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate)  
 VALUES (1105, @accountIDX, @presentType, @value1, @value2, @value3, @value4, @msgType, 1, CONVERT(datetime, @limitDate, 121), getdate())  


 INSERT INTO LosaGame_log.DBO.log_present (accountIDX, nickname, receiveIDX, presentType, value1, value2, eventType, userIP, note, regDate)  
 VALUES (1105, '개발자K', @accountIDX, @presentType, @value1, @value2, 6, '210.118.58.198', '웹 이벤트 아이템 지급', getdate())
GO


-- ----------------------------
-- procedure structure for web_medal_receive_data_top1
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_medal_receive_data_top1]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_medal_receive_data_top1]
GO

CREATE PROCEDURE [dbo].[web_medal_receive_data_top1]
(
	@accountIDX int
)
As
	SELECT	TOP 1 idx, medal1_type, medal2_type, medal3_type, medal4_type, medal5_type, medal6_type, medal7_type, medal8_type, medal9_type, medal10_type
	FROM userMedalDB WHERE accountIDX=@accountIDX ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_event_recommend_use_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_recommend_use_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_recommend_use_list]
GO

CREATE PROCEDURE [dbo].[web_event_recommend_use_list]
(
	@presentType int
,	@value1 int
)
AS
	SELECT COUNT(*) FROM LosaGame_log.DBO.log_event_recommend_use WITH(NOLOCK) 
	WHERE presentType=@presentType and value1=@value1 and regDate > '2010-12-30 12:00'
GO


-- ----------------------------
-- procedure structure for usp_timeCash_set_expire
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_timeCash_set_expire]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[usp_timeCash_set_expire]
GO

CREATE PROCEDURE [dbo].[usp_timeCash_set_expire]

	@ACCOUNT_IDX		INT,
	@ITEM_CODE			INT,
	@GET_DATE			DATETIME,
	@ITEM_STATUS		TINYINT		OUTPUT, -- 0: 기간만료, 1: Active
	@UPD_DATE			DATETIME	OUTPUT
			
AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000


	DECLARE @END_DATE	DATETIME = 0;
	
	SET @UPD_DATE= 0;
	SET @ITEM_STATUS = 1;

	SELECT @UPD_DATE=UpdDate, @END_DATE=OverDate FROM dbo.userTimeCashDB WITH (READUNCOMMITTED) 
	WHERE AccountIDX=@ACCOUNT_IDX and ItemCode=@ITEM_CODE

	IF (@@ROWCOUNT=1) 
	BEGIN
		-- 기간 만료 예외 처리
		IF (@END_DATE<=@GET_DATE)
		BEGIN
			BEGIN TRAN
				UPDATE dbo.userTimeCashDB WITH (XLOCK, ROWLOCK) SET UpdDate=@GET_DATE, ItemStatus=0
				WHERE AccountIDX=@ACCOUNT_IDX and ItemCode=@ITEM_CODE
				IF (@@ROWCOUNT=0) or (@@ERROR<>0)
				BEGIN
					ROLLBACK TRAN				
					RETURN -1;
				END
			COMMIT TRAN

			SET @ITEM_STATUS=0
			RETURN 0;
		END		
		-- 만료 대상이 아니면 @ITEM_EXPIRE=1

		RETURN 0;
	END
	
	RETURN -2;
GO


-- ----------------------------
-- function structure for SELECT_GEAR_CODE
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[SELECT_GEAR_CODE]') AND type IN ('FN', 'FS', 'FT', 'IF', 'TF'))
	DROP FUNCTION[dbo].[SELECT_GEAR_CODE]
GO

CREATE FUNCTION [dbo].[SELECT_GEAR_CODE]
(
	@accountIDX INT
,	@slotIndex INT
)
RETURNS INT
AS

BEGIN

	DECLARE @returnVal INT
	DECLARE @userGearDB table (itemType int, slotIndex int)

	INSERT INTO @userGearDB (itemType, slotIndex)
	SELECT item1_type, item1_slotindex FROM dbo.userItemExtraDB WITH(NOLOCK) WHERE accountIDX = @accountIDX

	INSERT INTO @userGearDB (itemType, slotIndex)
	SELECT item2_type, item2_slotindex FROM dbo.userItemExtraDB WITH(NOLOCK) WHERE accountIDX = @accountIDX

	INSERT INTO @userGearDB (itemType, slotIndex)
	SELECT item3_type, item3_slotindex FROM dbo.userItemExtraDB WITH(NOLOCK) WHERE accountIDX = @accountIDX

	INSERT INTO @userGearDB (itemType, slotIndex)
	SELECT item4_type, item4_slotindex FROM dbo.userItemExtraDB WITH(NOLOCK) WHERE accountIDX = @accountIDX

	INSERT INTO @userGearDB (itemType, slotIndex)
	SELECT item5_type, item5_slotindex FROM dbo.userItemExtraDB WITH(NOLOCK) WHERE accountIDX = @accountIDX

	INSERT INTO @userGearDB (itemType, slotIndex)
	SELECT item6_type, item6_slotindex FROM dbo.userItemExtraDB WITH(NOLOCK) WHERE accountIDX = @accountIDX

	INSERT INTO @userGearDB (itemType, slotIndex)
	SELECT item7_type, item7_slotindex FROM dbo.userItemExtraDB WITH(NOLOCK) WHERE accountIDX = @accountIDX

	INSERT INTO @userGearDB (itemType, slotIndex)
	SELECT item8_type, item8_slotindex FROM dbo.userItemExtraDB WITH(NOLOCK) WHERE accountIDX = @accountIDX

	INSERT INTO @userGearDB (itemType, slotIndex)
	SELECT item9_type, item9_slotindex FROM dbo.userItemExtraDB WITH(NOLOCK) WHERE accountIDX = @accountIDX

	INSERT INTO @userGearDB (itemType, slotIndex)
	SELECT item10_type, item10_slotindex FROM dbo.userItemExtraDB WITH(NOLOCK) WHERE accountIDX = @accountIDX

	SET @returnVal = (
		SELECT itemType
		  FROM @userGearDB
		 WHERE slotIndex=@slotIndex
	)

	RETURN @returnVal

END
GO


-- ----------------------------
-- procedure structure for game_friend_join_app
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_join_app]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_join_app]
GO

CREATE PROCEDURE [dbo].[game_friend_join_app]
(
	@accountIDX int
,	@friendIDX int
)
AS

--	SET XACT_ABORT ON
SET NOCOUNT ON

DECLARE @default int
DECLARE @cnt int
DECLARE @errcount int
DECLARE @guildIDX int
DECLARE @myextend int
DECLARE @youextend int

SET @default = 100	--디폴트 친구 제한 수
SET @cnt = 0
SET @errcount = 0
SET @myextend = 0
SET @youextend = 0

SET @cnt = (
	SELECT COUNT(*)
	  FROM dbo.userMemberDB WITH(NOLOCK)
	 WHERE accountIDX=@friendIDX
)

IF (@cnt = 0)
BEGIN
	SET @errcount = 2
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @cnt = (
	SELECT COUNT(*)
	  FROM dbo.userFriendDB WITH(NOLOCK)
	 WHERE userAccIDX=@accountIDX
	   AND flag=1
	   AND friendAccIDX NOT IN (
			209274,322139,209270,209272,209273,1105,1106,209271,380032,1107,209264,209268,1108,
			209267,209276,281811,209269,2304,485241,380044,591852,711450,505421,380045,382884,
			380042,380043,361290,1414836,1871572,1871573,1871574,1896968)
)

IF (@cnt >= @default)
BEGIN
	SET @myextend = (
		SELECT ISNULL(SUM(CASE item1_type WHEN 4000002 THEN item1_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item2_type WHEN 4000002 THEN item2_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item3_type WHEN 4000002 THEN item3_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item4_type WHEN 4000002 THEN item4_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item5_type WHEN 4000002 THEN item5_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item6_type WHEN 4000002 THEN item6_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item7_type WHEN 4000002 THEN item7_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item8_type WHEN 4000002 THEN item8_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item9_type WHEN 4000002 THEN item9_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item10_type WHEN 4000002 THEN item10_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item11_type WHEN 4000002 THEN item11_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item12_type WHEN 4000002 THEN item12_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item13_type WHEN 4000002 THEN item13_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item14_type WHEN 4000002 THEN item14_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item15_type WHEN 4000002 THEN item15_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item16_type WHEN 4000002 THEN item16_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item17_type WHEN 4000002 THEN item17_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item18_type WHEN 4000002 THEN item18_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item19_type WHEN 4000002 THEN item19_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item20_type WHEN 4000002 THEN item20_value1 ELSE 0 END), 0)
		  FROM dbo.userItemEtcDB WITH(NOLOCK)
		 WHERE accountIDX=@accountIDX
	)
END

IF (@cnt >= (@myextend + @default))
BEGIN
	SET @errcount = 3
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @cnt = (
	SELECT COUNT(*)
	  FROM dbo.userFriendDB WITH(NOLOCK)
	 WHERE userAccIDX=@friendIDX
	   AND flag=1
	   AND friendAccIDX NOT IN (
			209274,322139,209270,209272,209273,1105,1106,209271,380032,1107,209264,209268,1108,
			209267,209276,281811,209269,2304,485241,380044,591852,711450,505421,380045,382884,
			380042,380043,361290,1414836,1871572,1871573,1871574,1896968)
)

IF (@cnt >= @default)
BEGIN
	SET @youextend = (
		SELECT ISNULL(SUM(CASE item1_type WHEN 4000002 THEN item1_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item2_type WHEN 4000002 THEN item2_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item3_type WHEN 4000002 THEN item3_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item4_type WHEN 4000002 THEN item4_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item5_type WHEN 4000002 THEN item5_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item6_type WHEN 4000002 THEN item6_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item7_type WHEN 4000002 THEN item7_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item8_type WHEN 4000002 THEN item8_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item9_type WHEN 4000002 THEN item9_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item10_type WHEN 4000002 THEN item10_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item11_type WHEN 4000002 THEN item11_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item12_type WHEN 4000002 THEN item12_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item13_type WHEN 4000002 THEN item13_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item14_type WHEN 4000002 THEN item14_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item15_type WHEN 4000002 THEN item15_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item16_type WHEN 4000002 THEN item16_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item17_type WHEN 4000002 THEN item17_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item18_type WHEN 4000002 THEN item18_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item19_type WHEN 4000002 THEN item19_value1 ELSE 0 END), 0) +
			   ISNULL(SUM(CASE item20_type WHEN 4000002 THEN item20_value1 ELSE 0 END), 0)
		  FROM dbo.userItemEtcDB WITH(NOLOCK)
		 WHERE accountIDX=@friendIDX
	)
END

IF (@cnt >= (@youextend + @default))
BEGIN
	SET @errcount = 4
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @cnt = (
	SELECT COUNT(*)
	  FROM dbo.userFriendDB WITH(NOLOCK)
	 WHERE userAccIDX=@accountIDX
	   AND friendAccIDX=@friendIDX
	   AND flag=1
)

IF (@cnt > 0)
BEGIN
	SET @errcount = 5
	SELECT @errcount AS 'returnVal'
	RETURN
END

/*
SET @cnt = 0
SET @guildIDX = ISNULL((SELECT guildIDX FROM userGuildInfoDB WHERE accountIDX=@accountIDX and guildJoinType=1), -1)
if (@guildIDX > 0)
BEGIN
	SET @cnt = (SELECT count(*) FROM userGuildInfoDB WHERE guildIDX=@guildIDX and accountIDX=@friendIDX and guildJoinType=1)
END
if (@cnt > 0)
BEGIN
	SET @errcount = 6
	SELECT @errcount AS 'returnVal'
	RETURN
END
*/

BEGIN TRAN

IF (@errcount = 0)
BEGIN
	SELECT 1 AS 'returnVal'

	DELETE FROM dbo.userFriendDB
	 WHERE userAccIDX=@accountIDX
	   AND friendAccIDX=@friendIDX
	   AND flag=0

	INSERT INTO userFriendDB (
		userAccIDX, friendAccIDX, sendCloverCnt, sendCloverDate, receiveCloverCnt, receiveCloverDate, receiveBCloverCnt, flag, regDate
	)
	VALUES (
		@accountIDX, @friendIDX, 0, 0, 0, 0, 0, 1, GETDATE()
	)
	
	INSERT INTO userFriendDB (
		userAccIDX, friendAccIDX, sendCloverCnt, sendCloverDate, receiveCloverCnt, receiveCloverDate, receiveBCloverCnt, flag, regDate
	)
	VALUES (
		@friendIDX, @accountIDX, 0, 0, 0, 0, 0, 1, GETDATE()
	)
END

COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_attendance_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_attendance_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_attendance_delete]
GO

CREATE PROCEDURE [dbo].[game_attendance_delete]
(
	@accountIDX INT
)
AS

SET NOCOUNT ON

DELETE FROM dbo.userAttendanceDB
 WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_openbeta_give_10coin
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_openbeta_give_10coin]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_openbeta_give_10coin]
GO

CREATE PROCEDURE [dbo].[web_event_openbeta_give_10coin]
(
	@accountIDX int
)
AS
	IF (not exists(SELECT * FROM userEventDB WHERE accountIDX=@accountIDX))
	BEGIN
		INSERT INTO userEventDB (accountIDX, value1, value2, eventType, regDate)
		VALUES (@accountIDX, 10, 0, 2, getdate())
	END
GO


-- ----------------------------
-- procedure structure for web_medal_get_receive_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_medal_get_receive_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_medal_get_receive_data]
GO

CREATE PROCEDURE [dbo].[web_medal_get_receive_data]
(
	@accountIDX int
)
As
	SELECT TOP 5 idx FROM userMedalDB_receive WHERE accountIDX=@accountIDX and flag=0 ORDER BY idx ASC
GO


-- ----------------------------
-- procedure structure for manage_block_id_get_accountIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_block_id_get_accountIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_block_id_get_accountIDX]
GO

CREATE PROCEDURE [dbo].[manage_block_id_get_accountIDX]
(
	@searchType varchar(8)
,	@searchString varchar(12)
)
AS
	DECLARE @sql varchar(200)

	SET @sql = 'SELECT accountIDX FROM userMemberDB WHERE ' + @searchType + '=''' + @searchString + ''''
	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for manage_user_ranking_class_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_user_ranking_class_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_user_ranking_class_data]
GO

CREATE PROCEDURE [dbo].[manage_user_ranking_class_data]
(
	@accountIDX int
)
As
	SELECT	class1_type, class1_level, class2_type, class2_level, class3_type, class3_level, class4_type, class4_level, class5_type, class5_level,
		class6_type, class6_level, class7_type, class7_level, class8_type, class8_level, class9_type, class9_level, class10_type, class10_level
	FROM userClassDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for nouse_web_event_chuchun_120107
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[nouse_web_event_chuchun_120107]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[nouse_web_event_chuchun_120107]
GO

CREATE PROCEDURE [dbo].[nouse_web_event_chuchun_120107]
(  
 @accountIDX int  
, @friendNick nvarchar(20)  
, @userIP varchar(15)  
)  
AS    
  
BEGIN    
  
 SET NOCOUNT ON  
  
 DECLARE @friendIDX int, @friendJoinType int  
 DECLARE @userJoinType int, @userRegDate datetime  
 DECLARE @setESDate datetime, @TMaxNum int, @FMaxNum int, @NTMaxNum int, @NFMaxNum int  
  
 SET @setESDate = '2012-01-19 12:00'  
 SET @TMaxNum = 50000  
 SET @FMaxNum = 20  
  
 SELECT @friendIDX=accountIDX, @friendJoinType=joinType  
 FROM userMemberDB WITH(NOLOCK)  
 WHERE nickName=@friendNick and cpType=0
  
 IF (@@ROWCOUNT = 0)  
 BEGIN  
  RETURN (-1)  
 END  
  
 IF (@friendJoinType <> 10)  
 BEGIN  
  RETURN (-2)  
 END  
  
 SELECT @userJoinType=joinType, @userRegDate=regDate  
 FROM userMemberDB WITH(NOLOCK)  
 WHERE accountIDX=@accountIDX  
  
 IF (@@ROWCOUNT = 0)  
 BEGIN  
  RETURN (-3)  
 END  
  
 IF (@userJoinType <> 10)  
 BEGIN  
  RETURN (-4)  
 END  
  
 IF (DateDiff(hh, @setESDate, @userRegDate) < 0)  
 BEGIN  
  RETURN (-5)  
 END  
  
 IF (EXISTS (SELECT * FROM event_chuchun WITH(NOLOCK) WHERE accountIDX=@accountIDX))  
 BEGIN  
  RETURN (-6)  
 END  
/*    
 SET @NFMaxNum = (SELECT count(*) FROM event_chuchun WITH(NOLOCK) WHERE friendIDX=@friendIDX and flag=1)  
 IF (@NFMaxNum >= @FMaxNum)  
 BEGIN  
  RETURN (-7)  
 END  
*/    
 SET @NTMaxNum = (SELECT count(*) FROM event_chuchun WITH(NOLOCK))  
 IF (@NTMaxNum >= @TMaxNum)  
 BEGIN  
  RETURN (-8)  
 END  
  
 INSERT INTO event_chuchun (accountIDX, friendIDX, flag, userIP, regDate)  
 VALUES (@accountIDX, @friendIDX, 0, @userIP, getdate())  
  
 IF (@@ROWCOUNT <> 1 OR @@ERROR <> 0)  
 BEGIN  
  RETURN (-9)  
 END  
  
 RETURN (1)  
  
END
GO


-- ----------------------------
-- procedure structure for game_friend_dev_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_dev_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_dev_add]
GO

CREATE PROCEDURE [dbo].[game_friend_dev_add]
(
	@accountIDX int
,	@friendNick varchar(20)
)
AS

SET NOCOUNT ON

DECLARE @cnt int
DECLARE @errcount int
DECLARE @friendIDX int

SET @cnt = 0
SET @errcount = 0
SET @friendIDX = ISNULL((
	SELECT accountIDX
	  FROM dbo.userMemberDB WITH(NOLOCK)
	 WHERE nickName=@friendNick
), -1)

IF (@friendIDX < 0)
BEGIN
	SET @errcount = 2
	SELECT @errcount AS 'returnVal'
	RETURN
END

SET @cnt = (
	SELECT count(*)
	  FROM dbo.userFriendDB WITH(NOLOCK)
	 WHERE userAccIDX=@accountIDX
	   AND friendAccIDX=@friendIDX
	   AND flag=1
)

IF (@cnt > 0)
BEGIN
	SET @errcount = 4
	SELECT @errcount AS 'returnVal'
	RETURN
END

IF (@errcount > 0)
BEGIN
	SELECT @errcount AS 'returnVal'
END
ELSE
BEGIN
	SELECT 1 AS 'returnVal'

	INSERT INTO userFriendDB (
		userAccIDX, friendAccIDX,	sendCloverCnt, sendCloverDate, receiveCloverCnt, receiveCloverDate, receiveBCloverCnt, flag, regDate
	)
	VALUES (
		@friendIDX, @accountIDX, 0, 0, 0, 0, 0, 1, GETDATE()
	)

	INSERT INTO userFriendDB (
		userAccIDX, friendAccIDX, sendCloverCnt, sendCloverDate, receiveCloverCnt, receiveCloverDate, receiveBCloverCnt, flag, regDate
	)
	VALUES (
		@accountIDX, @friendIDX, 0, 0, 0, 0, 0, 1, GETDATE()
	)
END
GO


-- ----------------------------
-- procedure structure for game_attendance_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_attendance_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_attendance_add]
GO

CREATE PROCEDURE [dbo].[game_attendance_add]
(
	@accountIDX INT
,	@checkDate DATETIME
)
AS

SET NOCOUNT ON

INSERT INTO dbo.userAttendanceDB (accountIDX, checkDate, regDate)
VALUES (@accountIDX, @checkDate, GETDATE())
GO


-- ----------------------------
-- procedure structure for web_event_login_bonus_peso
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_login_bonus_peso]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_login_bonus_peso]
GO

CREATE PROCEDURE [dbo].[web_event_login_bonus_peso]
(
	@accountIDX varchar(12)
,	@bonusCash int
,	@userIP varchar(16)
)
AS
	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, 4, @bonusCash, 0, 4, 1, getdate() + 28, getdate())

	INSERT INTO LosaGame_log.DBO.log_cash (accountIDX, userIP, [DBID], applyType, amount, note, regDate)
	VALUES (@accountIDX, @userIP, 'LOGIN', 'B0', @bonusCash, '로그인 보너스 페소', getdate())
GO


-- ----------------------------
-- procedure structure for web_medal_get_level
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_medal_get_level]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_medal_get_level]
GO

CREATE PROCEDURE [dbo].[web_medal_get_level]
(
	@accountIDX int
)
AS
	SELECT medalLevel, expert FROM userRankingDB_medal WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for manage_block_id_del
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_block_id_del]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_block_id_del]
GO

CREATE PROCEDURE [dbo].[manage_block_id_del]
(
	@accountIDX int
,	@note varchar(500)
,	@adminID varchar(12)
,	@idx int
)
As
	BEGIN TRAN

	UPDATE userMemberDB SET userType = 100 WHERE accountIDX=@accountIDX
	UPDATE LosaGame_log.DBO.log_block SET 
		limitType = 100
,		limitDate = '1999-01-01' 
,		note = note + '<br><br>' + @adminID + ' 해제<br>' + @note 
	WHERE idx=@idx

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for manage_event_teencash_complete_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_teencash_complete_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_teencash_complete_count]
GO

CREATE PROCEDURE [dbo].[manage_event_teencash_complete_count]
(
	@numberth int
)
AS
	SELECT count(*) FROM event_teencash a JOIN userMemberDB b ON a.accountIDX=b.accountIDX LEFT JOIN userInfoBDB c ON a.accountIDX=c.accountIDX
	WHERE numberth=@numberth and a.flag > 0
GO


-- ----------------------------
-- procedure structure for my_use_query_inputipg_get_userinfo
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[my_use_query_inputipg_get_userinfo]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[my_use_query_inputipg_get_userinfo]
GO

CREATE PROCEDURE [dbo].[my_use_query_inputipg_get_userinfo]
(
	@accountIDX int
)
AS
	SELECT a.userID, b.userName, b.userJumin1, b.userJumin2, a.email, c.zipcode 
	FROM userMemberDB a JOIN userNameDB b ON a.accountIDX=b.accountIDX JOIN userInfoBDB c ON a.accountIDX=c.accountIDX 
	WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_friend_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_delete]
GO

CREATE PROCEDURE [dbo].[game_friend_delete]
(
	@accountIDX int
,	@friendNick varchar(20)
)
AS

	SET XACT_ABORT ON

	DECLARE @friendIDX int
	SET @friendIDX = isNull((SELECT accountIDX FROM userMemberDB with(nolock) WHERE nickName=@friendNick), -1)

	BEGIN TRAN

	if (@friendIDX > 0)
	BEGIN
		DELETE FROM userFriendDB WHERE userAccIDX=@accountIDX and friendAccIDX=@friendIDX
		DELETE FROM userFriendDB WHERE friendAccIDX=@accountIDX and userAccIDX=@friendIDX
	END

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_attend_set_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_attend_set_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_attend_set_data]
GO

CREATE PROCEDURE [dbo].[game_attend_set_data]

	@ACCOUNT_IDX		INT,
	@ATTEND_COUNT		INT,
	@REWARD_TABLE		INT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	DECLARE @nReturn			INT	
	DECLARE @CONNECT_DATE		DATETIME
	
	SET @CONNECT_DATE = GETDATE();	
	SET @nReturn=0			-- True


	BEGIN TRAN

		

		--	MERGE dbo.userAttendDB as TARGET
		--	USING (SELECT @ACCOUNT_IDX, @ATTEND_COUNT, @REWARD_TABLE) AS SOURCE (AccountIDX, AttendCount, RewardTable)
		--	ON (TARGET.AccountIDX=SOURCE.AccountIDX)
		--	WHEN MATCHED THEN
		--		UPDATE SET AttendCount=SOURCE.AttendCount, RewardTable=SOURCE.RewardTable, ConnectDate=@CONNECT_DATE
		--	WHEN NOT MATCHED THEN
		--		INSERT (AccountIDX, AttendCount, RewardTable, ConnectDate, RegDate) VALUES (SOURCE.AccountIDX, SOURCE.AttendCount, SOURCE.RewardTable, @CONNECT_DATE, GETDATE());

		UPDATE dbo.userAttendDB WITH (XLOCK, ROWLOCK) SET AttendCount=@ATTEND_COUNT, RewardTable=@REWARD_TABLE, ConnectDate=@CONNECT_DATE
		WHERE AccountIDX=@ACCOUNT_IDX

		IF (@@ROWCOUNT=0)
		BEGIN	

			INSERT dbo.userAttendDB WITH (XLOCK, ROWLOCK)  (AccountIDX, AttendCount, RewardTable, ConnectDate, RegDate)
			VALUES (@ACCOUNT_IDX, @ATTEND_COUNT, @REWARD_TABLE, @CONNECT_DATE, GETDATE())
			IF (@@ROWCOUNT=0) or (@@ERROR<>0)
			BEGIN
				ROLLBACK TRAN				
				SELECT -1
				RETURN;
			END
		END

	COMMIT TRAN

	SELECT 0, @CONNECT_DATE as ConnectDate;
	RETURN;
GO


-- ----------------------------
-- procedure structure for z_nouse_AGENT_RANKING_CLASS_TOP3
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_AGENT_RANKING_CLASS_TOP3]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_AGENT_RANKING_CLASS_TOP3]
GO

CREATE PROCEDURE [dbo].[z_nouse_AGENT_RANKING_CLASS_TOP3]

AS
	DECLARE @aIDX1 int, @aIDX2 int, @aIDX3 int, @Lv1 int, @Lv2 int, @Lv3 int, @nn1 varchar(20), @nn2 varchar(20), @nn3 varchar(20)
	DECLARE @nDate datetime, @dateIDX char(8), @i tinyint, @sql nvarchar(200), @tblName varchar(32)
	DECLARE @p nvarchar(100), @out int

	SET @nDate = Left(getdate(),10)
	SET @dateIDX = convert(char(8),@nDate,112)
	SET @i = 1

	WHILE (@i <= 40)	-- <-- 캐릭터 추가시 여기 숫자 늘릴 것
	BEGIN
		If (@i <= 20)
		BEGIN
			SET @tblName = 'userRankingDB_classA'
		END
		Else
		BEGIN
			SET @tblName = 'userRankingDB_classB'
		END

		SET @sql = 'SELECT @idx=accountIDX FROM ' + @tblName + ' WHERE class' + convert(varchar(4), @i) + '_now=1'
		SET @p = '@idx int output'
		EXEC sp_executesql @sql, @p, @idx=@aIDX1 output

		SET @Lv1 = (SELECT userLevel FROM userGameDB WHERE accountIDX=@aIDX1)
		SET @nn1 = (SELECT nickName FROM userMemberDB WHERE accountIDX=@aIDX1)

		SET @sql = 'SELECT @idx=accountIDX FROM ' + @tblName + ' WHERE class' + convert(varchar(4), @i) + '_now=2'
		SET @p = '@idx int output'
		EXEC sp_executesql @sql, @p, @idx=@aIDX2 output

		SET @Lv2 = (SELECT userLevel FROM userGameDB WHERE accountIDX=@aIDX2)
		SET @nn2 = (SELECT nickName FROM userMemberDB WHERE accountIDX=@aIDX2)

		SET @sql = 'SELECT @idx=accountIDX FROM ' + @tblName + ' WHERE class' + convert(varchar(4), @i) + '_now=3'
		SET @p = '@idx int output'
		EXEC sp_executesql @sql, @p, @idx=@aIDX3 output

		SET @Lv3 = (SELECT userLevel FROM userGameDB WHERE accountIDX=@aIDX3)
		SET @nn3 = (SELECT nickName FROM userMemberDB WHERE accountIDX=@aIDX3)

		INSERT INTO userRankingDB_class_top3 (classType, rank1_accountIDX, rank1_userLevel, rank1_nickName, rank2_accountIDX, rank2_userLevel, rank2_nickName, rank3_accountIDX, rank3_userLevel, rank3_nickName, dateIDX)
		VALUES (@i, @aIDX1, @Lv1, @nn1, @aIDX2, @Lv2, @nn2, @aIDX3, @Lv3, @nn3, @dateIDX)

		SET @i = @i + 1
	END
GO


-- ----------------------------
-- procedure structure for web_medal_get_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_medal_get_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_medal_get_info]
GO

CREATE PROCEDURE [dbo].[web_medal_get_info]
(
	@idx int
)
AS
	SELECT idx, medalCode, eng_name, point, title, content1, content2 FROM define_medal WHERE idx=(SELECT medalIDX FROM userMedalDB_receive WHERE idx=@idx)
GO


-- ----------------------------
-- procedure structure for web_event_recommend_use
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_recommend_use]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_recommend_use]
GO

CREATE PROCEDURE [dbo].[web_event_recommend_use]
(
	@accountIDX int
,	@presentType int
,	@value1 int
,	@value2 int
,	@mypoint int
,	@userIP varchar(15)
,	@limitdate varchar(20)
)
AS

	UPDATE event_recommend SET nowpoint=0 WHERE accountIDX=@accountIDX

	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, msgType, flag, limitDate, regDate)
	VALUES (1105, @accountIDX, @presentType, @value1, @value2, 3, 1, @limitdate, getdate())

	INSERT INTO LosaGame_log.DBO.log_event_recommend_use (accountIDX, presentType, value1, value2, nowpoint, userIP, regDate)
	VALUES (@accountIDX, @presentType, @value1, @value2, @mypoint, @userIP, getdate())
GO


-- ----------------------------
-- procedure structure for manage_user_ranking_award_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_user_ranking_award_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_user_ranking_award_data]
GO

CREATE PROCEDURE [dbo].[manage_user_ranking_award_data]
(
	@accountIDX int
)
As
	SELECT	award1_type, award1_point, award2_type, award2_point, award3_type, award3_point, award4_type, award4_point, award5_type, award5_point,
		award6_type, award6_point, award7_type, award7_point, award8_type, award8_point, award9_type, award9_point, award10_type, award10_point
	FROM userAwardDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for my_use_query_class_set_price
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[my_use_query_class_set_price]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[my_use_query_class_set_price]
GO

CREATE PROCEDURE [dbo].[my_use_query_class_set_price]
(
	@c1 int
,	@c2 int
,	@c3 int
,	@c4 int
,	@c5 int
,	@c6 int
,	@c7 int
,	@c8 int
,	@c9 int
,	@c10 int
,	@c11 int
,	@c12 int
,	@c13 int
,	@c14 int
,	@c15 int
,	@c16 int
,	@c17 int
,	@c18 int
,	@c19 int
,	@c20 int
,	@c21 int
,	@c22 int
,	@c23 int
,	@c24 int
,	@c25 int
,	@c26 int
,	@c27 int
,	@c28 int
,	@c29 int
,	@c31 int
,	@c33 int
,	@c34 int
,	@c36 int
,	@c38 int
,	@c40 int
,	@c42 int
,	@c44 int
,	@c45 int
,	@c46 int
,	@c47 int
,	@c49 int
,	@c51 int
,	@c53 int
,	@c55 int
,	@c57 int
,	@c59 int
,	@c61 int
,	@c63 int
,	@c64 int
,	@c65 int
,	@c66 int
,	@c67 int
,	@c68 int
,	@c69 int
,	@c70 int
,	@c72 int
,	@c73 int
)
AS
	update define_class_price set 
	class1_price = @c1, 
	class2_price = @c2, 
	class3_price = @c3, 
	class4_price = @c4, 
	class5_price = @c5, 
	class6_price = @c6, 
	class7_price = @c7, 
	class8_price = @c8, 
	class9_price = @c9, 
	class10_price = @c10, 
	class11_price = @c11, 
	class12_price = @c12, 
	class13_price = @c13, 
	class14_price = @c14, 
	class15_price = @c15, 
	class16_price = @c16, 
	class17_price = @c17, 
	class18_price = @c18, 
	class19_price = @c19,
	class20_price = @c20,
	class21_price = @c21, 
	class22_price = @c22,
	class23_price = @c23,
	class24_price = @c24,
	class25_price = @c25,
	class26_price = @c26,
	class27_price = @c27,
	class28_price = @c28,
	class29_price = @c29,
	class30_price = 0,
	class31_price = @c31,
	class32_price = 0,
	class33_price = @c33, 
	class34_price = @c34,
	class35_price = 0,
	class36_price = @c36,
	class37_price = 0,
	class38_price = @c38,
	class39_price = 0,
	class40_price = @c40,
	class41_price = 0,
	class42_price = @c42,
	class43_price = 0,
	class44_price = @c44,
	class45_price = @c45,
	class46_price = @c46,
	class47_price = @c47,
	class48_price = 0,
	class49_price = @c49,
	class50_price = 0,
	class51_price = @c51,
	class52_price = 0,
	class53_price = @c53,
	class54_price = 0,
	class55_price = @c55,
	class56_price = 0,
	class57_price = @c57,
	class58_price = 0,
	class59_price = @c59,
	class60_price = 0,
	class61_price = @c61,
	class62_price = 0,
	class63_price = @c63,
	class64_price = @c64,
	class65_price = @c65,
	class66_price = @c66,
	class67_price = @c67,
	class68_price = @c68,
	class69_price = @c69,
	class70_price = @c70,
	class71_price = 0,
	class72_price = @c72,
	class73_price = @c73
	where idx = (select max(idx) from define_class_price)
GO


-- ----------------------------
-- procedure structure for game_friend_clover_info_update
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_clover_info_update]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_clover_info_update]
GO

CREATE PROCEDURE [dbo].[game_friend_clover_info_update]
(
	@index int
,	@sendCount int
,	@sendDate int
,	@receiveCount int
,	@receiveDate int
,	@BeforeReceiveCount int
)
AS

SET NOCOUNT ON

-- 로그아웃중인 친구에게 클로버를 보냈다.
UPDATE dbo.userFriendDB
   SET sendCloverCnt = @sendCount,
	   sendCloverDate = @sendDate,
	   receiveCloverCnt = @receiveCount,
	   receiveCloverDate = @receiveDate,
	   receiveBCloverCnt = @BeforeReceiveCount
 WHERE idx = @index
GO


-- ----------------------------
-- procedure structure for game_attend_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_attend_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_attend_get_data]
GO

CREATE PROCEDURE [dbo].[game_attend_get_data]

	@ACCOUNT_IDX		INT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000
		
	SELECT AttendCount, RewardTable, ConnectDate FROM dbo.userAttendDB WITH (READUNCOMMITTED)
	WHERE AccountIDX=@ACCOUNT_IDX

	IF (@@ERROR<>0)
	BEGIN	
		SELECT -1
		RETURN;
	END	

	RETURN;
GO


-- ----------------------------
-- procedure structure for z_nouse_AGENT_RANKING_CLASS_TOP100
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_AGENT_RANKING_CLASS_TOP100]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_AGENT_RANKING_CLASS_TOP100]
GO

CREATE PROCEDURE [dbo].[z_nouse_AGENT_RANKING_CLASS_TOP100]
AS

SET NOCOUNT ON

DECLARE @i tinyint, @classCnt tinyint, @sql varchar(500), @tblName varchar(32)

SET @i = 1
SET @classCnt = 40  ------------ 용병 개수 (용병 추가시 이곳도 증가)
SET @tblName = 'userRankingDB_classA'

IF EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name = 'userRankingDB_class_top100')
DROP TABLE userRankingDB_class_top100

CREATE TABLE userRankingDB_class_top100
(
	idx			int	IDENTITY(1,1)	NOT	NULL
,	accountIDX	int				NOT	NULL
,	nickName		varchar(20)		NULL
,	userLevel		int				NULL
,	guildIDX		int				NULL
,	classType		int				NOT	NULL		DEFAULT(0)
,	rank_prev		int				NOT	NULL		DEFAULT(0)
,	rank_now		int				NOT	NULL		DEFAULT(0)
,	classLevel		int				NOT	NULL		DEFAULT(0)
,	classEXP		int				NOT	NULL		DEFAULT(0)
)

WHILE (@i <= @classCnt)
BEGIN
	IF (@i > 20) SET @tblName = 'userRankingDB_classB'

	SET @sql = ''
	SET @sql = @sql + 'INSERT INTO userRankingDB_class_top100 (accountIDX, classType, rank_prev, rank_now, classLevel, classEXP) '
	SET @sql = @sql + 'SELECT TOP 100 accountIDX, ' + CONVERT(varchar(2), @i) + ', class' + CONVERT(varchar(2), @i) + '_prev, class' + CONVERT(varchar(2), @i) + '_now, class' + CONVERT(varchar(2), @i) + '_lv, class' + CONVERT(varchar(2), @i) + '_expert '
	SET @sql = @sql + 'FROM ' + @tblName + ' WITH(NOLOCK) WHERE class' + CONVERT(varchar(2), @i) + '_now > 0 ORDER BY class' + CONVERT(varchar(2), @i) + '_now ASC'
	EXECUTE (@sql)
	SET @i = @i + 1
END


UPDATE a SET nickName = b.nickName 
FROM (
	SELECT accountIDX, nickName FROM userMemberDB WITH(NOLOCK) WHERE accountIDX in (SELECT accountIDX FROM userRankingDB_class_top100)
) b JOIN userRankingDB_class_top100 a ON b.accountIDX = a.accountIDX


UPDATE a SET guildIDX = b.guildIDX 
FROM (
	SELECT accountIDX, guildIDX, guildJoinType FROM userGuildInfoDB WITH(NOLOCK)
) b JOIN userRankingDB_class_top100 a ON b.accountIDX = a.accountIDX WHERE b.guildJoinType=1


UPDATE a SET userLevel = b.userLevel 
FROM (
	SELECT accountIDX, userLevel FROM userGameDB WITH(NOLOCK) WHERE accountIDX in (SELECT accountIDX FROM userRankingDB_class_top100)
) b JOIN userRankingDB_class_top100 a ON b.accountIDX = a.accountIDX
GO


-- ----------------------------
-- procedure structure for web_medal_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_medal_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_medal_get_data]
GO

CREATE PROCEDURE [dbo].[web_medal_get_data]
(
	@accountIDX int
)
As
	SELECT	medal1_type, medal2_type, medal3_type, medal4_type, medal5_type, medal6_type, medal7_type, medal8_type, medal9_type, medal10_type
	FROM userMedalDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_pet_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_pet_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_pet_save]
GO

CREATE PROCEDURE [dbo].[game_pet_save]

	@ACCOUNT_IDX	INT,		-- 사용자 고유키
	@PET_IDX		INT,		-- 펫 고유키
	@PET_RANK		TINYINT,	-- 랭크
	@PET_LEVEL		INT,		-- 레벨
	@PET_EXP		INT,		-- 경험치
	@PET_EQUIP		TINYINT		-- 장착여부
	
AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	BEGIN TRAN

		-- 랭크, 레벨, 경험치, 장착 여부 업데이트 (4EA)
		UPDATE dbo.userPetDB WITH(ROWLOCK, XLOCK) 
		SET petRank=@PET_RANK, petLevel=@PET_LEVEL, petExp=@PET_EXP, petEquip=@PET_EQUIP
		WHERE accountIDX=@ACCOUNT_IDX and petIDX=@PET_IDX

		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
		END

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for manage_singo_log_user_limit_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_singo_log_user_limit_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_singo_log_user_limit_list]
GO

CREATE PROCEDURE [dbo].[manage_singo_log_user_limit_list]
(
	@accountIDX int
)
AS
	SELECT reason, regDate FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK)
	WHERE receiveIDX=@accountIDX and resultType=1 and reason is not null
GO


-- ----------------------------
-- procedure structure for my_use_query_buddybuddy_transfer
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[my_use_query_buddybuddy_transfer]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[my_use_query_buddybuddy_transfer]
GO

CREATE PROCEDURE [dbo].[my_use_query_buddybuddy_transfer]
(
	@accountIDX int
)
AS

BEGIN

	SET NOCOUNT ON

	DECLARE @channelType int
	DECLARE @juminCnt int
	DECLARE @userID varchar(12)
	DECLARE @DBID varchar(12)
	DECLARE @userPWD varchar(24)
	DECLARE @userName nvarchar(20)
	DECLARE @userbirthday char(6)
	DECLARE @userEnCode varchar(64)
	DECLARE @userNumber tinyint
	DECLARE @userGender tinyint

	SELECT @DBID = userID, @channelType = cpType
	FROM userMemberDB WITH(NOLOCK)
	WHERE accountIDX=@accountIDX

	IF (@@ROWCOUNT = 0)
	BEGIN
		SELECT -1
		RETURN
	END

	IF (@channelType <> 500)
  	BEGIN
		SELECT -2
		RETURN
	END

	IF (EXISTS (SELECT * FROM userLoginDB WITH(NOLOCK) WHERE accountIDX=@accountIDX AND gameServerID > 0))
  	BEGIN
		SELECT -3
		RETURN
	END


	SELECT	@userName = WBT_UserName,
			@userID = WBT_UserID,
			@userPWD = WBT_EncPWD,
			@userbirthday = WBT_BirthDay,
			@userEnCode = WBT_EncJumin,
			@userNumber = WBT_FirstJumin,
			@userGender = WBT_Gender
	FROM dbo.TB_WEB_Buddy_Transfer WITH(NOLOCK)
	WHERE WBT_AccountIDX=@accountIDX

	IF (@@ROWCOUNT = 0)
	BEGIN
		SELECT -4
		RETURN
	END

	IF (@userID <> @DBID)
	BEGIN
		SELECT -5
		RETURN
	END

	SET @juminCnt = (SELECT COUNT(*) FROM userNameDB WITH(NOLOCK) WHERE userEnCode=@userEnCode)
	IF (@juminCnt > 1)
  	BEGIN
		SELECT -6
		RETURN
	END


	BEGIN TRAN

	UPDATE userNameDB
	SET userName = @userName
	,	userbirthday = @userbirthday
	,	userEnCode = @userEnCode
	,	userNumber = @userNumber
	,	userGender = @userGender
	,	returnValue = 0
	WHERE accountIDX = @accountIDX

	IF (@@ROWCOUNT <> 1 OR @@ERROR <> 0)
	BEGIN
		ROLLBACK TRAN
		SELECT -7
		RETURN
	END

	UPDATE userMemberDB
	SET userPWD = @userPWD
	,	joinType = 5
	,	cpType = 0
	,	mailling = 0
	WHERE accountIDX = @accountIDX

	IF (@@ROWCOUNT <> 1 OR @@ERROR <> 0)
	BEGIN
		ROLLBACK TRAN
		SELECT -8
		RETURN
	END

	DELETE FROM userCooperationDB WHERE accountIDX=@accountIDX AND cpType=500

	IF (@@ROWCOUNT <> 1 OR @@ERROR <> 0)
	BEGIN
		ROLLBACK TRAN
		SELECT -9
		RETURN
	END

	COMMIT TRAN
	SELECT 1

END
GO


-- ----------------------------
-- procedure structure for game_friend_check_member
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_check_member]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_check_member]
GO

CREATE PROCEDURE [dbo].[game_friend_check_member]
(
	@friendNickName varchar (20)
)
AS

SET NOCOUNT ON

SELECT userID, nickName, accountIDX
  FROM dbo.userMemberDB WITH(NOLOCK)
 WHERE nickName = @friendNickName
GO


-- ----------------------------
-- procedure structure for game_accessory_set_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_accessory_set_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_accessory_set_save]
GO

CREATE PROCEDURE [dbo].[game_accessory_set_save]

	@TABLE_IDX			INT,
	@ACCOUNT_IDX		INT,
	@ITEM_CODE			INT,
	@PERIOD_TYPE		TINYINT,
	@PERIOD_DATE		DATETIME,
	@STAT_VALUE			INT,
	@CLASS_TYPE			INT,
	@COMPOSE_CODE		INT,
	@COMPOSE_VALUE		INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;
	
	BEGIN TRAN
		
		UPDATE dbo.userAccessoryDB
		   SET ItemCode = @ITEM_CODE,
			   PeriodType = @PERIOD_TYPE,
			   PeriodDate = @PERIOD_DATE,
			   StatValue = @STAT_VALUE,
			   ClassType = @CLASS_TYPE,
			   ComposeCode = @COMPOSE_CODE,
			   ComposeValue = @COMPOSE_VALUE
		 WHERE idx = @TABLE_IDX
		   AND AccountIDX = @ACCOUNT_IDX

		IF (@@ROWCOUNT = 0) OR (@@ERROR <> 0)
		BEGIN
			SELECT -1
			ROLLBACK TRAN
			RETURN;
		END

	COMMIT TRAN

	RETURN;
GO


-- ----------------------------
-- procedure structure for z_nouse_AGENT_RANKING_CLASS_B
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_AGENT_RANKING_CLASS_B]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_AGENT_RANKING_CLASS_B]
GO

CREATE PROCEDURE [dbo].[z_nouse_AGENT_RANKING_CLASS_B]

AS

	DECLARE @strSQL varchar(500), @limitLevel varchar(4)
	DECLARE @i tinyint, @j tinyint

	IF (NOT EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name='userRankingDB_temp'))
	BEGIN
		CREATE TABLE userRankingDB_temp
		(
			accountIDX int
		,	rank int
		)
	END

	UPDATE userRankingDB_classB SET 
		class21_prev = class21_now
,		class22_prev = class22_now
,		class23_prev = class23_now
,		class24_prev = class24_now
,		class25_prev = class25_now
,		class26_prev = class26_now
,		class27_prev = class27_now
,		class28_prev = class28_now
,		class29_prev = class29_now
,		class30_prev = class30_now
,		class31_prev = class31_now
,		class32_prev = class32_now
,		class33_prev = class33_now
,		class34_prev = class34_now
,		class35_prev = class35_now
,		class36_prev = class36_now
,		class37_prev = class37_now
,		class38_prev = class38_now
,		class39_prev = class39_now
,		class40_prev = class40_now	-- <--캐릭터 추가될 때 여기도 추가

	SET @i = 21

	WHILE (@i <= 40)	-- <--캐릭터 추가될 때 여기 숫자를 늘릴 것

	BEGIN

		SET @j = 1
		SET @limitLevel = (SELECT limitrankingLevel FROM define_class WHERE idx=@i)

		TRUNCATE TABLE userRankingDB_temp_level

		WHILE (@j <= 10)
		BEGIN
			SET @strSQL = ''
			SET @strSQL = @strSQL + 'INSERT INTO userRankingDB_temp_level (accountIDX, [level], expert) '
			SET @strSQL = @strSQL + 'SELECT accountIDX, class' + CONVERT(varchar(2), @j) + '_level, class' + CONVERT(varchar(2), @j) + '_expert FROM userClassDB WITH(NOLOCK) '
			SET @strSQL = @strSQL + 'WHERE class' + CONVERT(varchar(2), @j) + '_type = ' + CONVERT(varchar(2), @i) + ' '
			SET @strSQL = @strSQL + 'and class' + CONVERT(varchar(2), @j) + '_level >= ' + @limitLevel
			EXEC (@strSQL)
			SET @j = @j + 1
		END

		INSERT INTO userRankingDB_classB (accountIDX) 
		SELECT DISTINCT(accountIDX) FROM userRankingDB_temp_level WHERE accountIDX not in (SELECT accountIDX FROM userRankingDB_classB WITH(NOLOCK))

		TRUNCATE TABLE userRankingDB_temp

		INSERT INTO userRankingDB_temp (accountIDX, rank) 
		SELECT accountIDX, RANK() OVER(ORDER BY [level] DESC, expert DESC) AS 'rank' FROM userRankingDB_temp_level WITH(NOLOCK)

		SET @strSQL = ''
		SET @strSQL = 'UPDATE a SET class' + CONVERT(varchar(4), @i) + '_now = b.rank FROM (SELECT accountIDX, rank FROM userRankingDB_temp WITH(NOLOCK)) b INNER JOIN userRankingDB_classB a ON a.accountIDX = b.accountIDX'
		EXEC (@strSQL)

		SET @strSQL = ''
		SET @strSQL = 'UPDATE a SET class' + CONVERT(varchar(4), @i) + '_expert = b.expert, class' + CONVERT(varchar(4), @i) + '_lv = b.level FROM (SELECT accountIDX, expert, [level] FROM userRankingDB_temp_level) b INNER JOIN userRankingDB_classB a ON a.accountIDX = b.accountIDX'
		EXEC (@strSQL)

		SET @i = @i + 1

	END
GO


-- ----------------------------
-- procedure structure for web_medal_define_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_medal_define_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_medal_define_list]
GO

CREATE PROCEDURE [dbo].[web_medal_define_list]
AS
	SELECT medalCode, eng_name, point, title, content1, content2 FROM define_medal ORDER BY medalCode ASC
GO


-- ----------------------------
-- procedure structure for game_pet_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_pet_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_pet_get_list]
GO

CREATE PROCEDURE [dbo].[game_pet_get_list]

	@ACCOUNT_IDX	INT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	BEGIN
		SELECT petIDX, petCode, petRank, petLevel, petExp, petEquip FROM dbo.userPetDB WITH (READUNCOMMITTED)
		WHERE accountIDX=@ACCOUNT_IDX and petStatus=1
	END
GO


-- ----------------------------
-- procedure structure for manage_singo_log_user_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_singo_log_user_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_singo_log_user_info]
GO

CREATE PROCEDURE [dbo].[manage_singo_log_user_info]
(
	@accountIDX int
)
AS
	SELECT a.userID, a.nickName, a.limitType, a.limitDate, b.userLevel, b.playTime, c.visit_count, a.email, c.cnnDate, b.connDate, a.regDate 
	FROM userMemberDB a WITH(NOLOCK) JOIN userGameDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX JOIN userInfoDB c WITH(NOLOCK) ON a.accountIDX = c.accountIDX
	WHERE a.accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for manage_userinfo_singo_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_singo_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_singo_list]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_singo_list]
(
	@accountIDX int
)
AS
	DECLARE @startDate datetime
	SET @startDate = (SELECT regDate FROM userMemberDB WHERE accountIDX=@accountIDX)

	SELECT idx, receiveNick, roomInfo, chatInfo, note, flag, reason, regDate FROM LosaGame_log.DBO.log_mannerpoint WHERE regDate >= @startDate and receiveIDX=@accountIDX ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for game_friend_best_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_best_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_best_save]
GO

CREATE PROCEDURE [dbo].[game_friend_best_save]
(
	@idx int
,	@flag int
,	@flagTime int
)
AS

	UPDATE userFriendBestDB SET 
		flag=@flag
,		flagTime=@flagTime
	WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_accessory_set_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_accessory_set_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_accessory_set_delete]
GO

CREATE PROCEDURE [dbo].[game_accessory_set_delete]

	@TABLE_IDX			INT,
	@ACCOUNT_IDX		INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;
	
	BEGIN TRAN

		DELETE FROM dbo.userAccessoryDB
		 WHERE accountIDX = @ACCOUNT_IDX
		   AND idx = @TABLE_IDX;

		IF (@@ROWCOUNT = 0) OR (@@ERROR <> 0)
		BEGIN
			SELECT -1
			ROLLBACK TRAN
			RETURN;
		END

	COMMIT TRAN

	RETURN;
GO


-- ----------------------------
-- procedure structure for z_nouse_AGENT_RANKING_CLASS_A
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_AGENT_RANKING_CLASS_A]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_AGENT_RANKING_CLASS_A]
GO

CREATE PROCEDURE [dbo].[z_nouse_AGENT_RANKING_CLASS_A]

AS

	DECLARE @strSQL varchar(500), @limitLevel varchar(4)
	DECLARE @i tinyint, @j tinyint

	IF (NOT EXISTS(SELECT table_name FROM information_schema.tables WHERE table_name='userRankingDB_temp'))
	BEGIN
		CREATE TABLE userRankingDB_temp
		(
			accountIDX int
		,	rank int
		)
	END

	UPDATE userRankingDB_classA SET 
		class1_prev = class1_now
	,	class2_prev = class2_now
	,	class3_prev = class3_now
	,	class4_prev = class4_now
	,	class5_prev = class5_now
	,	class6_prev = class6_now
	,	class7_prev = class7_now
	,	class8_prev = class8_now
	,	class9_prev = class9_now
	,	class10_prev = class10_now
	,	class11_prev = class11_now
	,	class12_prev = class12_now
	,	class13_prev = class13_now
	,	class14_prev = class14_now
	,	class15_prev = class15_now
	,	class16_prev = class16_now
	,	class17_prev = class17_now
	,	class18_prev = class18_now
	,	class19_prev = class19_now
	,	class20_prev = class20_now

	SET @i = 1

	WHILE (@i <= 20)

	BEGIN

		SET @j = 1
		SET @limitLevel = (SELECT limitrankingLevel FROM define_class WHERE idx=@i)

		TRUNCATE TABLE userRankingDB_temp_level

		WHILE (@j <= 10)
		BEGIN
			SET @strSQL = ''
			SET @strSQL = @strSQL + 'INSERT INTO userRankingDB_temp_level (accountIDX, [level], expert) '
			SET @strSQL = @strSQL + 'SELECT accountIDX, class' + CONVERT(varchar(2), @j) + '_level, class' + CONVERT(varchar(2), @j) + '_expert FROM userClassDB WITH(NOLOCK) '
			SET @strSQL = @strSQL + 'WHERE class' + CONVERT(varchar(2), @j) + '_type = ' + CONVERT(varchar(2), @i) + ' '
			SET @strSQL = @strSQL + 'and class' + CONVERT(varchar(2), @j) + '_level >= ' + @limitLevel
			EXEC (@strSQL)
			SET @j = @j + 1
		END

		INSERT INTO userRankingDB_classA (accountIDX) 
		SELECT DISTINCT(accountIDX) FROM userRankingDB_temp_level WHERE accountIDX not in (SELECT accountIDX FROM userRankingDB_classA WITH(NOLOCK))

		TRUNCATE TABLE userRankingDB_temp

		INSERT INTO userRankingDB_temp (accountIDX, rank) 
		SELECT accountIDX, RANK() OVER(ORDER BY [level] DESC, expert DESC) AS 'rank' FROM userRankingDB_temp_level WITH(NOLOCK)

		SET @strSQL = ''
		SET @strSQL = 'UPDATE a SET class' + CONVERT(varchar(4), @i) + '_now = b.rank FROM (SELECT accountIDX, rank FROM userRankingDB_temp WITH(NOLOCK)) b INNER JOIN userRankingDB_classA a ON a.accountIDX = b.accountIDX'
		EXEC (@strSQL)

		SET @strSQL = ''
		SET @strSQL = 'UPDATE a SET class' + CONVERT(varchar(4), @i) + '_expert = b.expert, class' + CONVERT(varchar(4), @i) + '_lv = b.level FROM (SELECT accountIDX, expert, [level] FROM userRankingDB_temp_level WITH(NOLOCK)) b INNER JOIN userRankingDB_classA a ON a.accountIDX = b.accountIDX'
		EXEC (@strSQL)

		SET @i = @i + 1

	END
GO


-- ----------------------------
-- procedure structure for web_medal_define_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_medal_define_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_medal_define_count]
GO

CREATE PROCEDURE [dbo].[web_medal_define_count]

AS
	SELECT max(medalCode) FROM define_medal
GO


-- ----------------------------
-- procedure structure for game_pet_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_pet_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_pet_delete]
GO

CREATE PROCEDURE [dbo].[game_pet_delete]

	@ACCOUNT_IDX	INT,
	@PET_IDX		INT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	BEGIN TRAN

		-- 펫 데이터 삭제 처리
		UPDATE dbo.userPetDB WITH (ROWLOCK, XLOCK) SET petStatus=0 WHERE accountIDX=@ACCOUNT_IDX and petIDX=@PET_IDX
		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
		END

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for manage_singo_log_room_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_singo_log_room_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_singo_log_room_info]
GO

CREATE PROCEDURE [dbo].[manage_singo_log_room_info]
(
	@idx int
)
AS
	SELECT playType, modeType, sub1Type, sub2Type, reportpubIP, receivepubIP, roomInfo, chatInfo, note, flag 
	FROM LosaGame_log.DBO.log_mannerpoint WITH(NOLOCK)
	WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for manage_userinfo_search_channelingID
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_search_channelingID]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_search_channelingID]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_search_channelingID]
(
	@cpID varchar(32)
)
AS
	SELECT accountIDX, userID, cpType, regDate FROM userCooperationDB WITH(NOLOCK) WHERE cpID=@cpID
GO


-- ----------------------------
-- procedure structure for game_friend_best_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_best_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_best_list]
GO

CREATE PROCEDURE [dbo].[game_friend_best_list]
(
	@accountIDX int
)
AS

	SELECT idx, friendIDX, flag, flagTime FROM userFriendBestDB WITH(NOLOCK) WHERE accountIDX=@accountIDX and flag > 0 ORDER BY idx ASC
GO


-- ----------------------------
-- procedure structure for game_accessory_set_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_accessory_set_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_accessory_set_add]
GO

CREATE PROCEDURE [dbo].[game_accessory_set_add]

	@ACCOUNT_IDX		INT,
	@ITEM_CODE			INT,
	@PERIOD_TYPE		TINYINT,
	@PERIOD_DATE		DATETIME,
	@STAT_VALUE			INT,
	@CLASS_TYPE			INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;
	
	DECLARE @TABLE_INDEX	INT
	SET @TABLE_INDEX = 0

	BEGIN TRAN

		INSERT INTO dbo.userAccessoryDB (AccountIDX, ItemCode, PeriodType, PeriodDate, StatValue, ClassType, RegDate)
		VALUES (@ACCOUNT_IDX, @ITEM_CODE, @PERIOD_TYPE, @PERIOD_DATE, @STAT_VALUE, @CLASS_TYPE, GETDATE())

		IF (@@ROWCOUNT = 0) OR (@@ERROR <> 0)
		BEGIN
			SELECT -1
			ROLLBACK TRAN
			RETURN;
		END

		SET @TABLE_INDEX = @@IDENTITY
	
	COMMIT TRAN
	
	SELECT @TABLE_INDEX AS idx;
GO


-- ----------------------------
-- procedure structure for z_nouse_110414_game_present_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_110414_game_present_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_110414_game_present_save]
GO

CREATE PROCEDURE [dbo].[z_nouse_110414_game_present_save]
(
	@tblIDX int
)
AS
	UPDATE userPresentDB SET flag=0 WHERE idx=@tblIDX
GO


-- ----------------------------
-- procedure structure for web_medal_add2
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_medal_add2]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_medal_add2]
GO

CREATE PROCEDURE [dbo].[web_medal_add2]
(
	@idx int
,	@medalType1 int
,	@medalType2 int
,	@medalType3 int
,	@medalType4 int
,	@medalType5 int
,	@medalType6 int
,	@medalType7 int
,	@medalType8 int
,	@medalType9 int
,	@medalType10 int
)
AS
	UPDATE userMedalDB SET 
	medal1_type = @medalType1
,	medal2_type = @medalType2
,	medal3_type = @medalType3
,	medal4_type = @medalType4
,	medal5_type = @medalType5
,	medal6_type = @medalType6
,	medal7_type = @medalType7
,	medal8_type = @medalType8
,	medal9_type = @medalType9
,	medal10_type = @medalType10 
	WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_pet_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_pet_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_pet_add]
GO

CREATE PROCEDURE [dbo].[game_pet_add]

	@ACCOUNT_IDX	INT,
	@PET_CODE		INT,
	@PET_RANK		TINYINT,
	@PET_LEVEL		INT

AS	

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	DECLARE @PET_IDX	INT	

	BEGIN TRAN
		
		-- 펫 생성하기
		INSERT dbo.userPetDB WITH (ROWLOCK, XLOCK) (accountIDX, petCode, petRank, petLevel) VALUES (@ACCOUNT_IDX, @PET_CODE, @PET_RANK, @PET_LEVEL)
		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN			
			ROLLBACK TRAN			
		END

		-- 펫 고유 키값 Return
		SET @PET_IDX = @@IDENTITY
	
	COMMIT TRAN
	
	SELECT @PET_IDX as PET_IDX, @PET_CODE as PET_CODE, @PET_RANK as PET_RANK, @PET_LEVEL as PET_LEVEL;
GO


-- ----------------------------
-- procedure structure for manage_event_teencash_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_event_teencash_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_event_teencash_count]
GO

CREATE PROCEDURE [dbo].[manage_event_teencash_count]
AS
	SELECT count(*) FROM event_teencash a JOIN userMemberDB b ON a.accountIDX=b.accountIDX JOIN userInfoBDB c ON a.accountIDX=c.accountIDX
	WHERE a.flag=0
GO


-- ----------------------------
-- procedure structure for manage_userinfo_saveB
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_saveB]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_saveB]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_saveB]
(
	@accountIDX int
,	@email varchar(50)
,	@mailling tinyint
,	@tel varchar(16)
,	@mobile varchar(16)
)
AS
	UPDATE userMemberDB SET
		email = @email
,		mailling = @mailling
	WHERE accountIDX=@accountIDX

	UPDATE userInfoBDB SET
		tel = @tel
,		mobile = @mobile
	WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_friend_best_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_best_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_best_delete]
GO

CREATE PROCEDURE [dbo].[game_friend_best_delete]
(
	@idx int
)
AS
	DELETE FROM userFriendBestDB WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_avatar_shop_buy_item
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_avatar_shop_buy_item]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_avatar_shop_buy_item]
GO

CREATE PROCEDURE [dbo].[web_avatar_shop_buy_item]
(
	@accountIDX varchar(12)
,	@amtCash int
)
AS

	DECLARE  @bonus int
	SET @bonus = (SELECT count(*) FROM userCashDB WITH(NOLOCK) WHERE accountIDX = @accountIDX and amtBonus > amtCash - @amtCash)

	IF (@bonus > 0)
	BEGIN
		UPDATE UserCashDB SET
			amtCash = amtCash - @amtCash
		,	amtBonus = amtCash - @amtCash
		,	chgDate = getdate()
		WHERE accountIDX = @accountIDX
	END
	ELSE
	BEGIN
		UPDATE UserCashDB SET
			amtCash = amtCash - @amtCash
		,	chgDate = getdate()
		WHERE accountIDX = @accountIDX
	END
GO


-- ----------------------------
-- procedure structure for event_item_limited_set_init
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[event_item_limited_set_init]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[event_item_limited_set_init]
GO

CREATE PROCEDURE [dbo].[event_item_limited_set_init]

	@EVENT_TYPE			TINYINT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000
	
	IF EXISTS (SELECT * FROM dbo.event_item_limited WHERE AccountIDX>0 and EventType=@EVENT_TYPE)
	BEGIN
		BEGIN TRAN

			DELETE dbo.event_item_limited WHERE AccountIDX>0 and EventType=@EVENT_TYPE
			IF (@@ERROR<>0)
			BEGIN
				ROLLBACK TRAN
				SELECT -1
				RETURN;
			END

		COMMIT TRAN
	END

	SELECT 0
	RETURN;
GO


-- ----------------------------
-- procedure structure for web_medal_add1
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_medal_add1]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_medal_add1]
GO

CREATE PROCEDURE [dbo].[web_medal_add1]
(
	@accountIDX int
,	@medalType int
)
AS
	INSERT INTO userMedalDB (accountIDX, medal1_type) VALUES (@accountIDX, @medalType)
GO


-- ----------------------------
-- procedure structure for game_personalHQ_set_status
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_personalHQ_set_status]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_personalHQ_set_status]
GO

CREATE PROCEDURE [dbo].[game_personalHQ_set_status]
		
	@ACCOUNT_IDX	INT,
	@ITEM_SERIAL	BIGINT,
	@ITEM_CODE		INT,	
	@ITEM_STATUS	TINYINT		-- 0:인벤(해제), 2: 삭제

AS 

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	15000

	DECLARE @nReturn	INT = 0;
	
	BEGIN TRAN		
		
		UPDATE dbo.userPersonalHQDB WITH (XLOCK, ROWLOCK) SET ItemXZ=0, ItemY=0, ItemRotate=0, ItemStatus=@ITEM_STATUS 
		WHERE ItemSerial=@ITEM_SERIAL

		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
			RETURN;
		END

	COMMIT TRAN


	-- 설치로그
	-- EXEC LINKED_CONNECTION_BAK.LosaLogDataC.dbo.log_guildHQ_fit_set_insert @GUILD_IDX, @ACCOUNT_IDX, @ITEM_SERIAL, @ITEM_CODE, 0

	RETURN;
GO


-- ----------------------------
-- procedure structure for usp_Member_get_user_accountIDX
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_Member_get_user_accountIDX]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[usp_Member_get_user_accountIDX]
GO

CREATE PROCEDURE [dbo].[usp_Member_get_user_accountIDX]
	
	@USER_ID		VARCHAR(20),
	@USER_ID_TYPE	TINYINT,
	@ACCOUNT_IDX	INT			OUTPUT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 15000

	SET @ACCOUNT_IDX=0

	IF (@USER_ID_TYPE=1)
	BEGIN
		
		 SET @ACCOUNT_IDX=(SELECT AccountIDX FROM dbo.userMemberDB WITH (READUNCOMMITTED) WHERE nickName=@USER_ID)

		IF (@ACCOUNT_IDX=0) or (@ACCOUNT_IDX IS NULL)
		BEGIN
			RETURN -1
		END 
	END
	ELSE 
	BEGIN
		
		SET @ACCOUNT_IDX=(SELECT AccountIDX FROM dbo.userMemberDB WITH (READUNCOMMITTED) WHERE UserID=@USER_ID)

		IF (@ACCOUNT_IDX=0) or (@ACCOUNT_IDX IS NULL)
		BEGIN
			RETURN -1
		END 
	END 

	RETURN ;
GO


-- ----------------------------
-- procedure structure for manage_userinfo_saveA
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_saveA]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_saveA]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_saveA]
(
	@accountIDX int
,	@email varchar(50)
,	@mailling tinyint
)
AS
	UPDATE userMemberDB SET
		email = @email
,		mailling = @mailling
	WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_friend_best_add_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_best_add_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_best_add_self_index]
GO

CREATE PROCEDURE [dbo].[game_friend_best_add_self_index]
(
	@accountIDX int
,	@friendIDX int
)
AS

	SELECT TOP 1 idx FROM userFriendBestDB 
	WHERE accountIDX=@accountIDX and friendIDX=@friendIDX and flag=1 ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_avatar_myitem_sell
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_avatar_myitem_sell]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_avatar_myitem_sell]
GO

CREATE PROCEDURE [dbo].[web_avatar_myitem_sell]
(
	@accountIDX int
,	@amtCash int
,	@userIP varchar(16)
,	@objCode varchar(12)
)
AS
	DECLARE @note varchar(100)
	SET @note = @objCode + ' 되팔기'

	UPDATE userCashDB SET
		amtCash = amtCash + @amtCash
	,	amtBonus = amtBonus + @amtCash 
	WHERE accountIDX = @accountIDX

	INSERT INTO LosaGame_log.DBO.log_cash (accountIDX, userIP, DBID, applyType, amount, note, regDate)
	VALUES (@accountIDX, @userIP, 'IO', 'SI', @amtCash, @note, getdate())
GO


-- ----------------------------
-- procedure structure for event_item_limited_set_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[event_item_limited_set_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[event_item_limited_set_data]
GO

CREATE PROCEDURE [dbo].[event_item_limited_set_data]

	@ACCOUNT_IDX		INT,
	@EVENT_TYPE			TINYINT,
	@GOODS_INDEX		INT,
	@GOODS_COUNT		TINYINT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	DECLARE @nReturn			INT	
	SET @nReturn=0			-- True

	BEGIN TRAN

		--	MERGE dbo.event_item_limited as TARGET
		--	USING (SELECT @ACCOUNT_IDX, @MISSION_TYPE, @MISSION_CODE, @MISSION_VALUE, @MISSION_STATUS) AS SOURCE (AccountIDX, MissionType, MissionCode, MissionValue, MissionStatus)
		--	ON (TARGET.AccountIDX=SOURCE.AccountIDX and TARGET.MissionType=SOURCE.MissionType and TARGET.MissionCode=SOURCE.MissionCode)
		--	WHEN MATCHED THEN
		--		UPDATE SET MissionValue=SOURCE.MissionValue, MissionStatus=SOURCE.MissionStatus
		--	WHEN NOT MATCHED THEN
		--		INSERT (AccountIDX, MissionType, MissionCode, MissionValue, MissionStatus) VALUES (@ACCOUNT_IDX, SOURCE.MissionType, SOURCE.MissionCode, SOURCE.MissionValue, SOURCE.MissionStatus);

		UPDATE dbo.event_item_limited WITH (XLOCK, ROWLOCK) SET GoodsCount=@GOODS_COUNT
		WHERE AccountIDX=@ACCOUNT_IDX and EventType=@EVENT_TYPE and GoodsIndex=@GOODS_INDEX

		IF (@@ROWCOUNT=0)
		BEGIN	

			INSERT dbo.event_item_limited WITH (XLOCK, ROWLOCK) (AccountIDX, EventType, GoodsIndex, GoodsCount)	VALUES (@ACCOUNT_IDX, @EVENT_TYPE, @GOODS_INDEX, @GOODS_COUNT)
			IF (@@ROWCOUNT=0) or (@@ERROR<>0)
			BEGIN
				ROLLBACK TRAN				
				SELECT -1
				RETURN;
			END
		END

	COMMIT TRAN

	SELECT @nReturn
	RETURN;
GO


-- ----------------------------
-- procedure structure for web_medal_add_point
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_medal_add_point]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_medal_add_point]
GO

CREATE PROCEDURE [dbo].[web_medal_add_point]
(
	@accountIDX int
,	@medalIDX int
,	@medalLevel int
,	@expert int
)
AS
	BEGIN TRAN

	UPDATE userMedalDB_receive SET flag=1 WHERE accountIDX=@accountIDX and medalIDX=@medalIDX

	IF (exists(SELECT * FROM userRankingDB_medal WHERE accountIDX=@accountIDX))
		UPDATE userRankingDB_medal SET medalLevel = @medalLevel, expert = @expert WHERE accountIDX=@accountIDX
	ELSE
	BEGIN
		INSERT INTO userRankingDB_medal (accountIDX, medalLevel, expert, ranking_prev, ranking_now, regDate)
		VALUES (@accountIDX, @medalLevel, @expert, 0, 0, getdate())
	END

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_personalHQ_set_fit
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_personalHQ_set_fit]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_personalHQ_set_fit]
GO

CREATE PROCEDURE [dbo].[game_personalHQ_set_fit]	
	
	@ACCOUNT_IDX	INT,
	@ITEM_SERIAL	BIGINT,	
	@ITEM_CODE		INT,
	@ITEM_XZ		INT,
	@ITEM_Y			INT,
	@ITEM_ROTATE	TINYINT,
	@ITEM_STATUS	TINYINT		-- 1:설치, 2: 변경

AS 

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	15000

	DECLARE @nReturn	INT = 0;
	
	
	-- 최초 설치시 즉, 인벤(ItemStus=0)에서 userGuildHQDB로 넘어와서 설치 될때 서버가 ItemSerial 정보를 모르기 때문에 제일 먼저 인벤에
	-- 들어온 아이템 부터 설치 하도록 ItemSerial을 서버에 전달
	IF (@ITEM_SERIAL=0 and @ITEM_STATUS=1)
	BEGIN 
		SET @ITEM_SERIAL= (SELECT MIN(ItemSerial) FROM dbo.userPersonalHQDB WHERE AccountIDX=@ACCOUNT_IDX and ItemCode=@ITEM_CODE and ItemStatus=0)
		SELECT @ITEM_SERIAL
	END
	
	BEGIN TRAN
		
		-- @ITEM_STATUS 는 0: 미설치, 1:설치됨, 2:삭제 만 사용되지만, 현재 설치된 아이템의 위치 변경을 위해 
		-- 현재 프로시저에서 2번 코드를 받지만 실제는 1로 강제 초기화 하여 설치로 상태 정보를 유지한다.
		SET @ITEM_STATUS=1

		UPDATE dbo.userPersonalHQDB WITH (XLOCK, ROWLOCK) SET ItemXZ=@ITEM_XZ, ItemY=@ITEM_Y, ItemRotate=@ITEM_ROTATE, ItemStatus=@ITEM_STATUS 
		WHERE ItemSerial=@ITEM_SERIAL

		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			SELECT -1;
			ROLLBACK TRAN
			RETURN;
		END

	COMMIT TRAN

	-- 설치로그
	-- EXEC LINKED_CONNECTION_BAK.LosaLogDataC.dbo.log_guildHQ_fit_set_insert @GUILD_IDX, @ACCOUNT_IDX, @ITEM_SERIAL, @ITEM_CODE, 1

	RETURN;
GO


-- ----------------------------
-- procedure structure for USP_LTS_WEEKTIME_SelectShutdown_Age
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_WEEKTIME_SelectShutdown_Age]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_WEEKTIME_SelectShutdown_Age]
GO

CREATE PROCEDURE [dbo].[USP_LTS_WEEKTIME_SelectShutdown_Age]
	-- Add the parameters for the stored procedure here
	@intMakeCodeNo int
	, @strLoginID varchar(25)
AS
/*
	Grant Execute on dbo.USP_LTS_WEEKTIME_SelectShutdown_Age to Mirusr_1
*/
BEGIN

	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

	Select 
		M.*, N.userName, N.userBirthday, N.userNumber
	From (
		Select Top 1 * From userMemberDB with (noLock)
		Where userID = @strLoginID
	) As M 
	Left Outer Join userNameDB As N with (noLock)
	ON M.accountIDX = N.accountIDX


END
GO


-- ----------------------------
-- procedure structure for manage_userinfo_present_delete_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_present_delete_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_present_delete_data]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_present_delete_data]
(
	@idx int
)
AS
	SELECT sendIDX, presentType, value1, value2, limitDate, regDate FROM userPresentDB WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for game_friend_best_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_friend_best_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_friend_best_add]
GO

CREATE PROCEDURE [dbo].[game_friend_best_add]
(
	@accountIDX int
,	@friendIDX int
)
AS

	DECLARE @cnt int

	SET @cnt = (SELECT count(*) FROM userMemberDB WITH(NOLOCK) WHERE accountIDX=@friendIDX)
	IF (@cnt > 0)
	BEGIN
		INSERT INTO userFriendBestDB (accountIDX, friendIDX, flag, flagTime, regDate)
		VALUES (@accountIDX, @friendIDX, 1, 0, getdate())
	END
GO


-- ----------------------------
-- procedure structure for web_avatar_myitem_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_avatar_myitem_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_avatar_myitem_delete]
GO

CREATE PROCEDURE [dbo].[web_avatar_myitem_delete]
(
	@accountIDX int
,	@userIP varchar(16)
,	@objCode varchar(12)
)
AS
	DECLARE @note varchar(100)
	SET @note = @objCode + ' 삭제'

	INSERT INTO LosaGame_log.DBO.log_cash (accountIDX, userIP, DBID, applyType, amount, note, regDate)
	VALUES (@accountIDX, @userIP, 'IO', 'DI', 0, @note, getdate())
GO


-- ----------------------------
-- procedure structure for event_item_limited_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[event_item_limited_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[event_item_limited_get_data]
GO

CREATE PROCEDURE [dbo].[event_item_limited_get_data]

	@PAGE_SIZE	INT,  -- 페이지 당 SELECT 할 갯수
	@PAGE		INT	  -- 페이지 번호

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000
	
	SELECT AccountIDX, EventType, GoodsIndex, GoodsCount FROM (
		SELECT ROW_NUMBER() OVER (ORDER BY AccountIDX) as RowNumber, AccountIDX, EventType, GoodsIndex, GoodsCount 
		FROM dbo.event_item_limited WITH (READUNCOMMITTED)
		WHERE AccountIDX>0 and EventType=0
	) as A WHERE RowNumber BETWEEN ((@PAGE - 1) * @PAGE_SIZE + 1) And (@PAGE * @PAGE_SIZE) 
	
	IF (@@ERROR<>0)
	BEGIN		
		RETURN;
	END	

	RETURN;
GO


-- ----------------------------
-- procedure structure for web_mannerpoint_visit
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_mannerpoint_visit]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_mannerpoint_visit]
GO

CREATE PROCEDURE [dbo].[web_mannerpoint_visit]
(
	@accountIDX int
,	@p int
,	@userIP varchar(16)
)
As
	INSERT INTO LosaGame_log.DBO.log_mannerpoint_sitevisit (accountIDX, point, userIP, regDate)
	VALUES (@accountIDX, @p, @userIP, getdate())
GO


-- ----------------------------
-- procedure structure for game_personalHQ_set_default_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_personalHQ_set_default_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_personalHQ_set_default_add]
GO

CREATE PROCEDURE [dbo].[game_personalHQ_set_default_add]
	
	@ACCCOUNT_IDX	INT,	
	@ITEM_CODE		INT,
	@ITEM_XZ		INT,
	@ITEM_Y			INT,
	@ITEM_ROTATE	TINYINT	

AS 

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	15000

	DECLARE @nReturn	INT = 0;
	
	BEGIN TRAN
		-- 길드 본부 꾸미기 아이템 추가
		INSERT dbo.userPersonalHQDB WITH (XLOCK, ROWLOCK) (AccountIDX, ItemCode, ItemXZ, ItemY, ItemRotate, ItemStatus) VALUES (@ACCCOUNT_IDX, @ITEM_CODE, @ITEM_XZ, @ITEM_Y, @ITEM_ROTATE, 1)
		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
			RETURN;
		END
	COMMIT TRAN

	RETURN;
GO


-- ----------------------------
-- procedure structure for USP_LTS_WEEKTIME_PARENT_CHILD_SELF_INS
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_SELF_INS]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_SELF_INS]
GO

CREATE PROCEDURE [dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_SELF_INS] 
	-- Add the parameters for the stored procedure here
	@strPUserID		varchar(25),			-- 부모_계정 고유 일련번호(자녀 스스로 설정인 경우 자녀_계정 고유번호 입력)
	@strCUserID		varchar(25),			-- 자녀_계정 고유 일련번호	
	@strAgreeType		char(1),			-- 동의여부(S : 본인자신수락, Y : 동의수락, I : 동의요청중, C : 동의취소) 
	@strRegIP		varchar(15)
AS
/*
	Grant Execute on dbo.USP_LTS_WEEKTIME_PARENT_CHILD_SELF_INS to Mirusr_1
*/
BEGIN
	-- 자녀 스스로 게임 설정한 경우 
	IF NOT EXISTS ( SELECT * 
			  FROM dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO WITH (NOLOCK)
			 WHERE PARENT_ID = @strPUserID
			   AND CHILD_ID = @strCUserID
	)
	BEGIN
		INSERT INTO dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO (PARENT_ID, CHILD_ID, Agree_Type, AgreeDate, RegIP)
		     VALUES (@strPUserID, @strCUserID, @strAgreeType, GETDATE(), @strRegIP)

		IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
		BEGIN
			RETURN (-1)
		END
	END 
	RETURN (1)
	
	SET NOCOUNT OFF
END
GO


-- ----------------------------
-- procedure structure for manage_userinfo_present_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_present_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_present_delete]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_present_delete]
(
	@idx int
,	@accountIDX int
)
AS
	DELETE FROM userPresentDB WHERE idx=@idx and receiveIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_fish_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_fish_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_fish_save]
GO

CREATE PROCEDURE [dbo].[game_fish_save]
(
	@idx int
,	@fish1_type tinyint
,	@fish1_an int
,	@fish2_type tinyint
,	@fish2_an int
,	@fish3_type tinyint
,	@fish3_an int
,	@fish4_type tinyint
,	@fish4_an int
,	@fish5_type tinyint
,	@fish5_an int
,	@fish6_type tinyint
,	@fish6_an int
,	@fish7_type tinyint
,	@fish7_an int
,	@fish8_type tinyint
,	@fish8_an int
,	@fish9_type tinyint
,	@fish9_an int
,	@fish10_type tinyint
,	@fish10_an int
,	@fish11_type tinyint
,	@fish11_an int
,	@fish12_type tinyint
,	@fish12_an int
,	@fish13_type tinyint
,	@fish13_an int
,	@fish14_type tinyint
,	@fish14_an int
,	@fish15_type tinyint
,	@fish15_an int
,	@fish16_type tinyint
,	@fish16_an int
,	@fish17_type tinyint
,	@fish17_an int
,	@fish18_type tinyint
,	@fish18_an int
,	@fish19_type tinyint
,	@fish19_an int
,	@fish20_type tinyint
,	@fish20_an int
)
As
	UPDATE userFishDB SET
	fish1_type = @fish1_type
,	fish1_an = @fish1_an
,	fish2_type = @fish2_type
,	fish2_an = @fish2_an
,	fish3_type = @fish3_type
,	fish3_an = @fish3_an
,	fish4_type = @fish4_type
,	fish4_an = @fish4_an
,	fish5_type = @fish5_type
,	fish5_an = @fish5_an
,	fish6_type = @fish6_type
,	fish6_an = @fish6_an
,	fish7_type = @fish7_type
,	fish7_an = @fish7_an
,	fish8_type = @fish8_type
,	fish8_an = @fish8_an
,	fish9_type = @fish9_type
,	fish9_an = @fish9_an
,	fish10_type = @fish10_type
,	fish10_an = @fish10_an
,	fish11_type = @fish11_type
,	fish11_an = @fish11_an
,	fish12_type = @fish12_type
,	fish12_an = @fish12_an
,	fish13_type = @fish13_type
,	fish13_an = @fish13_an
,	fish14_type = @fish14_type
,	fish14_an = @fish14_an
,	fish15_type = @fish15_type
,	fish15_an = @fish15_an
,	fish16_type = @fish16_type
,	fish16_an = @fish16_an
,	fish17_type = @fish17_type
,	fish17_an = @fish17_an
,	fish18_type = @fish18_type
,	fish18_an = @fish18_an
,	fish19_type = @fish19_type
,	fish19_an = @fish19_an
,	fish20_type = @fish20_type
,	fish20_an = @fish20_an
	WHERE idx = @idx
GO


-- ----------------------------
-- procedure structure for web_as_nday_trainees_game_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_as_nday_trainees_game_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_as_nday_trainees_game_data]
GO

CREATE PROCEDURE [dbo].[web_as_nday_trainees_game_data]
(
	@sDate varchar(10)
,	@eDate varchar(10)
)
AS
	SELECT	a.accountIDX, a.nickName, b.userLevel, b.conn_count, Case When b.userState = -1 Then 100000 Else b.userState End AS 'userState', b.playTime, b.userEXP 
,			c.type1_win + c.type1_lose + c.type1_kill + c.type1_death AS 'sumbattle'
,			c.type1_win AS 'win'
,			c.type1_lose AS 'lose'
,			c.type1_kill AS 'kill'
,			c.type1_death AS 'death'
,			b.gameMoney, a.joinType, d.userBirthday, d.userNumber, d.userGender 
	FROM userMemberDB a JOIN userGameDB b ON a.accountIDX = b.accountIDX JOIN userRecordBattleDB c ON a.accountIDX = c.accountIDX LEFT JOIN userNameDB d ON a.accountIDX = d.accountIDX 
	WHERE a.accountIDX in (SELECT accountIDX FROM userGameDB WHERE (regDate >= @sDate and regDate < @eDate) and userLevel=0) ORDER BY b.conn_count ASC, userState ASC, b.userEXP ASC, sumbattle ASC
GO


-- ----------------------------
-- procedure structure for game_accessory_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_accessory_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_accessory_get_list]
GO

CREATE PROCEDURE [dbo].[game_accessory_get_list]

	@TABLE_IDX			INT,
	@ACCOUNT_IDX		INT,
	@TOP_NUM			INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;
	
	SELECT TOP (@TOP_NUM) idx, ItemCode, PeriodType, PeriodDate, StatValue, ClassType, ComposeCode, ComposeValue
	  FROM dbo.userAccessoryDB WITH (NOLOCK)
	 WHERE AccountIDX = @ACCOUNT_IDX
	   AND idx > @TABLE_IDX
	 ORDER BY idx ASC
GO


-- ----------------------------
-- procedure structure for web_member_inst
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_inst]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_inst]
GO

CREATE PROCEDURE [dbo].[web_member_inst]
(
	@userID varchar(12)
,	@nickName varchar(12)
,	@userPWD varchar(24)
)
AS

SET NOCOUNT ON

DECLARE @accountIDX int

-- 싱글존
INSERT INTO dbo.userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, regDate)
VALUES (@userID, @nickName, @userPWD, 'ioman@ioenter.com', 0, 100, 10, GETDATE())

SET @accountIDX = (SELECT accountIDX FROM dbo.userMemberDB WHERE userID=@userID)

INSERT INTO dbo.userGameDB (accountIDX, userState, gameMoney, playTime, conn_count, userLevel, connDate, regDate)
VALUES (@accountIDX, 0, 0, 0, 0, 0, '2000-01-01', GETDATE())

INSERT INTO dbo.userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, regDate)
VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE())

INSERT INTO dbo.userLoginDB (accountIDX,encodeKey,gameServerID,connDate) VALUES (@accountIDX,'111111111111111',0,GETDATE())


-- QA존 계정 생성
INSERT INTO LosaGameQA.DBO.userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, regDate)
VALUES (@userID, @nickName, @userPWD, 'ioman@ioenter.com', 0, 100, 10, GETDATE())

SET @accountIDX = (SELECT accountIDX FROM LosaGameQA.DBO.userMemberDB WHERE userID=@userID)

INSERT INTO LosaGameQA.DBO.userGameDB (accountIDX, userState, gameMoney, playTime, conn_count, userLevel, connDate, regDate)
VALUES (@accountIDX, 0, 0, 0, 0, 0, '2000-01-01', GETDATE())

INSERT INTO LosaGameQA.DBO.userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, regDate)
VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE())

INSERT INTO LosaGameQA.DBO.userLoginDB (accountIDX,encodeKey,gameServerID,connDate) VALUES (@accountIDX,'111111111111111',0,GETDATE())


-- 개발 계정 생성
INSERT INTO LosaGameDev.DBO.userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, regDate)
VALUES (@userID, @nickName, @userPWD, 'ioman@ioenter.com', 0, 100, 10, GETDATE())

SET @accountIDX = (SELECT accountIDX FROM LosaGameDev.DBO.userMemberDB WHERE userID=@userID)

INSERT INTO LosaGameDev.DBO.userGameDB (accountIDX, userState, gameMoney, playTime, conn_count, userLevel, connDate, regDate)
VALUES (@accountIDX, 0, 0, 0, 0, 0, '2000-01-01', GETDATE())

INSERT INTO LosaGameDev.DBO.userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, regDate)
VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE())

INSERT INTO LosaGameDev.DBO.userLoginDB (accountIDX,encodeKey,gameServerID,connDate) VALUES (@accountIDX,'111111111111111',0,GETDATE())


---- 알파존 계정 생성
--INSERT INTO LINKED_CONNECTION_ALPHA.LosaGame.DBO.userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, regDate)
--VALUES (@userID, @nickName, @userPWD, 'ioman@ioenter.com', 0, 100, 10, GETDATE())

--SET @accountIDX = (SELECT accountIDX FROM LINKED_CONNECTION_ALPHA.LosaGame.DBO.userMemberDB WHERE userID=@userID)

--INSERT INTO LINKED_CONNECTION_ALPHA.LosaGame.DBO.userGameDB (accountIDX, userState, gameMoney, playTime, conn_count, userLevel, connDate, regDate)
--VALUES (@accountIDX, 0, 0, 0, 0, 0, '2000-01-01', GETDATE())

--INSERT INTO LINKED_CONNECTION_ALPHA.LosaGame.DBO.userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, regDate)
--VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE())

--INSERT INTO LINKED_CONNECTION_ALPHA.LosaGame.DBO.userLoginDB (accountIDX,encodeKey,gameServerID,connDate) VALUES (@accountIDX,'111111111111111',0,GETDATE())
--GO
/****** Object:  StoredProcedure [dbo].[web_member_ins_Backup]    Script Date: 04/06/2020 18:19:56 ******/
SET ANSI_NULLS ON
GO


-- ----------------------------
-- procedure structure for game_personalHQ_set_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_personalHQ_set_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_personalHQ_set_add]
GO

CREATE PROCEDURE [dbo].[game_personalHQ_set_add]

	@ACCOUNT_IDX	INT,
	@ITEM_CODE		INT

AS 

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	15000

	DECLARE @nReturn	INT = 0;

	BEGIN TRAN
		-- 길드 본부 꾸미기 아이템 추가
		INSERT dbo.userPersonalHQDB WITH (XLOCK, ROWLOCK) (AccountIDX, ItemCode) VALUES (@ACCOUNT_IDX, @ITEM_CODE)
		IF (@@ROWCOUNT=0) or (@@ERROR<>0)
		BEGIN
			ROLLBACK TRAN
			RETURN;
		END

	COMMIT TRAN

	RETURN;
GO


-- ----------------------------
-- procedure structure for USP_LTS_WEEKTIME_PARENT_CHILD_PINFO
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_PINFO]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_PINFO]
GO

CREATE PROCEDURE [dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_PINFO]
	@strPUserID		varchar(25),	-- 부모_계정 고유 일련번호(자녀조건으로만 조회하고 싶으면 0)
	@strCUserID		varchar(25)		-- 자녀_계정 고유 일련번호
AS
/*
	Grant Execute on dbo.USP_LTS_WEEKTIME_PARENT_CHILD_PINFO to Mirusr_1
*/
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF Len(@strPUserID) > 2
		BEGIN 
			Select 
				C.*, M.*, N.userName, N.userBirthday, N.userNumber
			From (
				Select 
					PARENT_ID, CHILD_ID, Agree_Type, CONVERT(VARCHAR(10), AgreeDate, 121) AS AgreeDate, RegIP, CONVERT(VARCHAR(10), RegDate, 121) AS RegDate
				From TB_LTS_WEEKTIME_PARENT_CHILD_INFO with (noLock)
				Where PARENT_ID = @strPUserID
				And CHILD_ID = @strCUserID
				And Agree_Type <> 'S'
			) As C
			INNER JOIN dbo.userMemberDB M WITH(NOLOCK) 
			ON C.PARENT_ID = M.userID
			INNER JOIN dbo.userNameDB N WITH (NOLOCK)
			ON M.accountIDX = N.accountIDX 
		END 
	ELSE 
		BEGIN
			Select 
				C.*, M.*, N.userName, N.userBirthday, N.userNumber
			From (
				Select 
					PARENT_ID, CHILD_ID, Agree_Type, CONVERT(VARCHAR(10), AgreeDate, 121) AS AgreeDate, RegIP, CONVERT(VARCHAR(10), RegDate, 121) AS RegDate
				From TB_LTS_WEEKTIME_PARENT_CHILD_INFO with (noLock)
				Where CHILD_ID = @strCUserID
				And Agree_Type <> 'S'
			) As C
			INNER JOIN dbo.userMemberDB M WITH(NOLOCK) 
			ON C.CHILD_ID = M.userID
			INNER JOIN dbo.userNameDB N WITH (NOLOCK)
			ON M.accountIDX = N.accountIDX 
		END

	SET NOCOUNT OFF;
END
GO


-- ----------------------------
-- procedure structure for USP_WEB_Buddy_Transfer_SEL2
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_WEB_Buddy_Transfer_SEL2]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_WEB_Buddy_Transfer_SEL2]
GO

CREATE PROCEDURE [dbo].[USP_WEB_Buddy_Transfer_SEL2] 
	-- Add the parameters for the stored procedure here
	@strBuddyID			varchar(20)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    -- Insert statements for procedure here
	IF Exists (Select Top 1 WBT_AccountIDX From dbo.TB_WEB_Buddy_Transfer with (noLock)
				Where WBT_BuddyID = @strBuddyID And WBT_Status = 1
	)
		Begin
			Return 1		-- 이미 신청함
		End
	Else
		Begin
			Return 0		-- 신청하지 않음
		End
END
GO


-- ----------------------------
-- procedure structure for manage_userinfo_parent_tel_noagreement
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_parent_tel_noagreement]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_parent_tel_noagreement]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_parent_tel_noagreement]
(
	@accountIDX int
,	@parentName varchar(10)
,	@parentBirth char(6)
,	@parentJumin1 char(12)
,	@parentJumin2 char(14)
,	@parentEncode varchar(64)
,	@parentNumber tinyint
,	@email varchar(50)
,	@agreeSDate datetime
,	@agreeEDate datetime
,	@agreeType tinyint
,	@userIP varchar(15)
)
AS
	If (exists(SELECT * FROM userParentDB WHERE accountIDX=@accountIDX))
	BEGIN
		UPDATE userParentDB SET
			parentName = @parentName
,			parentBirth = @parentBirth
,			parentJumin1 = @parentJumin1
,			parentJumin2 = @parentJumin2
,			parentEncode = @parentEncode
,			parentNumber = @parentNumber
,			email = @email
,			agreeSDate = @agreeSDate
,			agreeEDate = @agreeEDate 
		WHERE accountIDX=@accountIDX
	END
	ELSE
	BEGIN
		INSERT INTO userParentDB (accountIDX, parentName, parentBirth, parentJumin1, parentJumin2, parentEncode, parentNumber, email, agreeSDate, agreeEDate, agreeType, logIDX, regDate)
		VALUES (@accountIDX, @parentName, @parentBirth, @parentJumin1, @parentJumin2, @parentEncode, @parentNumber, @email, @agreeSDate, @agreeEDate, 0, 0, getdate())
	END

	INSERT INTO Losagame_log.DBO.log_agree (accountIDX, agreeSDate, agreeEDate, parentEncode, email, userKey, userIP, permitDate, permitIP, permitType, regDate)
	VALUES (@accountIDX, @agreeSDate, @agreeEDate, @parentEncode, @email, '', '', getdate(), @userIP, 0, getdate())

	DECLARE @idx int
	SET @idx = (SELECT TOP 1 idx FROM Losagame_log.DBO.log_agree WHERE accountIDX=@accountIDX ORDER BY idx DESC)

	UPDATE userParentDB SET
		logIDX = @idx 
	WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_fish_get_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_fish_get_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_fish_get_self_index]
GO

CREATE PROCEDURE [dbo].[game_fish_get_self_index]
(
	@accountIDX int
)
AS
	SELECT TOP 1 idx FROM userFishDB WHERE accountIDX = @accountIDX ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_as_nday_member_now_level
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_as_nday_member_now_level]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_as_nday_member_now_level]
GO

CREATE PROCEDURE [dbo].[web_as_nday_member_now_level]
(
	@sDate varchar(10)
,	@eDate varchar(10)
)
AS
	SELECT userLevel, count(*) AS 'cnt' FROM userGameDB WITH(NOLOCK) WHERE accountIDX in (
	SELECT accountIDX FROM userMemberDB WITH(NOLOCK) WHERE regDate >= @sDate and regDate < @eDate
	) GROUP BY userLevel
GO


-- ----------------------------
-- procedure structure for game_ability_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_ability_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_ability_save]
GO

CREATE PROCEDURE [dbo].[game_ability_save]
(
	@idx int
,	@class1_type int
,	@class1_basic01 tinyint
,	@class1_basic02 tinyint
,	@class1_basic03 tinyint
,	@class1_basic04 tinyint
,	@class1_skill1_sd tinyint
,	@class1_skill1_asd tinyint
,	@class1_skill1_ad tinyint
,	@class1_skill1_as tinyint
,	@class1_timeslot int
,	@class1_limitdate datetime
,	@class2_type int
,	@class2_basic01 tinyint
,	@class2_basic02 tinyint
,	@class2_basic03 tinyint
,	@class2_basic04 tinyint
,	@class2_skill1_sd tinyint
,	@class2_skill1_asd tinyint
,	@class2_skill1_ad tinyint
,	@class2_skill1_as tinyint
,	@class2_timeslot int
,	@class2_limitdate datetime
,	@class3_type int
,	@class3_basic01 tinyint
,	@class3_basic02 tinyint
,	@class3_basic03 tinyint
,	@class3_basic04 tinyint
,	@class3_skill1_sd tinyint
,	@class3_skill1_asd tinyint
,	@class3_skill1_ad tinyint
,	@class3_skill1_as tinyint
,	@class3_timeslot int
,	@class3_limitdate datetime
,	@class4_type int
,	@class4_basic01 tinyint
,	@class4_basic02 tinyint
,	@class4_basic03 tinyint
,	@class4_basic04 tinyint
,	@class4_skill1_sd tinyint
,	@class4_skill1_asd tinyint
,	@class4_skill1_ad tinyint
,	@class4_skill1_as tinyint
,	@class4_timeslot int
,	@class4_limitdate datetime
,	@class5_type int
,	@class5_basic01 tinyint
,	@class5_basic02 tinyint
,	@class5_basic03 tinyint
,	@class5_basic04 tinyint
,	@class5_skill1_sd tinyint
,	@class5_skill1_asd tinyint
,	@class5_skill1_ad tinyint
,	@class5_skill1_as tinyint
,	@class5_timeslot int
,	@class5_limitdate datetime
)
AS
	UPDATE userAbilityDB SET
		class1_type = @class1_type
,		class1_basic01 = @class1_basic01
,		class1_basic02 = @class1_basic02
,		class1_basic03 = @class1_basic03
,		class1_basic04 = @class1_basic04
,		class1_skill1_sd = @class1_skill1_sd
,		class1_skill1_asd = @class1_skill1_asd
,		class1_skill1_ad = @class1_skill1_ad
,		class1_skill1_as = @class1_skill1_as
,		class1_timeslot = @class1_timeslot
,		class1_limitdate = @class1_limitdate
,		class2_type = @class2_type
,		class2_basic01 = @class2_basic01
,		class2_basic02 = @class2_basic02
,		class2_basic03 = @class2_basic03
,		class2_basic04 = @class2_basic04
,		class2_skill1_sd = @class2_skill1_sd
,		class2_skill1_asd = @class2_skill1_asd
,		class2_skill1_ad = @class2_skill1_ad
,		class2_skill1_as = @class2_skill1_as
,		class2_timeslot = @class2_timeslot
,		class2_limitdate = @class2_limitdate
,		class3_type = @class3_type
,		class3_basic01 = @class3_basic01
,		class3_basic02 = @class3_basic02
,		class3_basic03 = @class3_basic03
,		class3_basic04 = @class3_basic04
,		class3_skill1_sd = @class3_skill1_sd
,		class3_skill1_asd = @class3_skill1_asd
,		class3_skill1_ad = @class3_skill1_ad
,		class3_skill1_as = @class3_skill1_as
,		class3_timeslot = @class3_timeslot
,		class3_limitdate = @class3_limitdate
,		class4_type = @class4_type
,		class4_basic01 = @class4_basic01
,		class4_basic02 = @class4_basic02
,		class4_basic03 = @class4_basic03
,		class4_basic04 = @class4_basic04
,		class4_skill1_sd = @class4_skill1_sd
,		class4_skill1_asd = @class4_skill1_asd
,		class4_skill1_ad = @class4_skill1_ad
,		class4_skill1_as = @class4_skill1_as
,		class4_timeslot = @class4_timeslot
,		class4_limitdate = @class4_limitdate
,		class5_type = @class5_type
,		class5_basic01 = @class5_basic01
,		class5_basic02 = @class5_basic02
,		class5_basic03 = @class5_basic03
,		class5_basic04 = @class5_basic04
,		class5_skill1_sd = @class5_skill1_sd
,		class5_skill1_asd = @class5_skill1_asd
,		class5_skill1_ad = @class5_skill1_ad
,		class5_skill1_as = @class5_skill1_as
,		class5_timeslot = @class5_timeslot
,		class5_limitdate = @class5_limitdate
	WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for web_member_ins_Backup
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_ins_Backup]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_ins_Backup]
GO

CREATE PROCEDURE [dbo].[web_member_ins_Backup]
(
	@userID varchar(12)
,	@nickName varchar(12)
,	@userPWD varchar(24)
,	@joinType int
,	@userLevel int
,	@peso int
,	@cpType int
)
AS

DECLARE @accountIDX int
DECLARE @userState int
DECLARE @playTime int
DECLARE @conn_count int
DECLARE @connDate datetime
DECLARE @note nvarchar(50)

SET @note = ''

IF (@userLevel = 0)
BEGIN
	SET @userState = 0
	SET @playTime = 0
	SET @conn_count = 0
	SET @connDate = '2000-01-01'
END
ELSE
BEGIN
	SET @userState = -1
	SET @playTime = @userLevel * 20
	SET @conn_count = @userLevel * 5
	SET @connDate = GETDATE()
END


-- 싱글존 계정 생성
INSERT INTO dbo.userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, cpType, regDate)
VALUES (@userID, @nickName, @userPWD, 'ioman@ioenter.com', 0, 100, @joinType, @cpType, GETDATE())

SET @accountIDX = (SELECT accountIDX FROM dbo.userMemberDB WHERE userID=@userID)

INSERT INTO dbo.userGameDB (accountIDX, userState, gameMoney, playTime, conn_count, userLevel, connDate, regDate)
VALUES (@accountIDX, @userState, @peso, @playTime, @conn_count, @userLevel, @connDate, GETDATE())

INSERT INTO dbo.userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, regDate)
VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE())

INSERT INTO dbo.userLoginDB (accountIDX,encodeKey,gameServerID,connDate)
VALUES (@accountIDX,'111111111111111',0,GETDATE())

IF (@cpType > 0)
BEGIN
	IF (@cpType = 400)
	BEGIN
		SET @note = 'Ojd02'
	END

	IF (@cpType = 600)
	BEGIN
		SET @note = @accountIDX
	END

	INSERT INTO dbo.userCooperationDB (accountIDX, userID, cpIDX, cpID, cpType, note, regDate)
	VALUES (@accountIDX, @userID, @accountIDX, @userID, @cpType, @note, GETDATE())
END


-- QA존 계정 생성
INSERT INTO LosaGameQA.DBO.userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, cpType, regDate)
VALUES (@userID, @nickName, @userPWD, 'ioman@ioenter.com', 0, 100, @joinType, @cpType, GETDATE())

SET @accountIDX = (SELECT accountIDX FROM LosaGameQA.DBO.userMemberDB WHERE userID=@userID)

INSERT INTO LosaGameQA.DBO.userGameDB (accountIDX, userState, gameMoney, playTime, conn_count, userLevel, connDate, regDate)
VALUES (@accountIDX, @userState, @peso, @playTime, @conn_count, @userLevel, @connDate, GETDATE())

INSERT INTO LosaGameQA.DBO.userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, regDate)
VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE())

INSERT INTO LosaGameQA.DBO.userLoginDB (accountIDX,encodeKey,gameServerID,connDate)
VALUES (@accountIDX,'111111111111111',0,GETDATE())

IF (@cpType > 0)
BEGIN
	IF (@cpType = 400)
	BEGIN
		SET @note = 'Ojd02'
	END

	IF (@cpType = 600)
	BEGIN
		SET @note = @accountIDX
	END

	INSERT INTO LosaGameQA.DBO.userCooperationDB (accountIDX, userID, cpIDX, cpID, cpType, note, regDate)
	VALUES (@accountIDX, @userID, @accountIDX, @userID, @cpType, @note, GETDATE())
END


-- 개발존 계정 생성
INSERT INTO LosaGameDev.DBO.userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, cpType, regDate)
VALUES (@userID, @nickName, @userPWD, 'ioman@ioenter.com', 0, 100, @joinType, @cpType, GETDATE())

SET @accountIDX = (SELECT accountIDX FROM LosaGameDev.DBO.userMemberDB WHERE userID=@userID)

INSERT INTO LosaGameDev.DBO.userGameDB (accountIDX, userState, gameMoney, playTime, conn_count, userLevel, connDate, regDate)
VALUES (@accountIDX, @userState, @peso, @playTime, @conn_count, @userLevel, @connDate, GETDATE())

INSERT INTO LosaGameDev.DBO.userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, regDate)
VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE())

INSERT INTO LosaGameDev.DBO.userLoginDB (accountIDX,encodeKey,gameServerID,connDate)
VALUES (@accountIDX,'111111111111111',0,GETDATE())

IF (@cpType > 0)
BEGIN
	IF (@cpType = 400)
	BEGIN
		SET @note = 'Ojd02'
	END

	IF (@cpType = 600)
	BEGIN
		SET @note = @accountIDX
	END

	INSERT INTO LosaGameDev.DBO.userCooperationDB (accountIDX, userID, cpIDX, cpID, cpType, note, regDate)
	VALUES (@accountIDX, @userID, @accountIDX, @userID, @cpType, @note, GETDATE())
END
GO


-- ----------------------------
-- procedure structure for game_personalHQ_get_user_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_personalHQ_get_user_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_personalHQ_get_user_info]
GO

CREATE PROCEDURE [dbo].[game_personalHQ_get_user_info]

	@ACCOUNT_IDX		INT

AS 

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	15000

	IF EXISTS (SELECT * FROM dbo.userPersonalHQDB WITH (READUNCOMMITTED) WHERE AccountIDX=@ACCOUNT_IDX)
	BEGIN
		SELECT 1;
		RETURN
	END
	
	SELECT 0;
	RETURN;
GO


-- ----------------------------
-- procedure structure for USP_LTS_WEEKTIME_PARENT_CHILD_LIST
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_LIST]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_LIST]
GO

CREATE PROCEDURE [dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_LIST]
	@strUserID			varchar(25),		-- 부모_계정 고유 일련번호
	@strAgreeType		char(1)				-- 동의여부(N : 미수락, S : 본인자신수락, Y : 동의수락, I : 동의요청중, C : 동의취소) 
AS
/*
	Grant Execute on dbo.USP_LTS_WEEKTIME_PARENT_CHILD_LIST to Mirusr_1
*/
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF Len(@strAgreeType) > 0
		BEGIN 
			Select 
				C.*, M.*, N.userName, N.userBirthday, N.userNumber
			From (
				Select 
					PARENT_ID, CHILD_ID, Agree_Type, CONVERT(VARCHAR(10), AgreeDate, 121) AS AgreeDate, RegIP, CONVERT(VARCHAR(10), RegDate, 121) AS cRegDate
				From TB_LTS_WEEKTIME_PARENT_CHILD_INFO with (noLock)
				Where PARENT_ID = @strUserID
				AND Agree_Type = @strAgreeType
			) As C
			INNER JOIN dbo.userMemberDB M WITH(NOLOCK) 
			ON C.CHILD_ID = M.userID
			INNER JOIN dbo.userNameDB N WITH (NOLOCK)
			ON M.accountIDX = N.accountIDX 
		END		
	ELSE 
		BEGIN
			Select 
				C.*, M.*, N.userName, N.userBirthday, N.userNumber
			From (
				Select 
					PARENT_ID, CHILD_ID, Agree_Type, CONVERT(VARCHAR(10), AgreeDate, 121) AS AgreeDate, RegIP, CONVERT(VARCHAR(10), RegDate, 121) AS cRegDate
				From TB_LTS_WEEKTIME_PARENT_CHILD_INFO with (noLock)
				Where PARENT_ID = @strUserID
			) As C
			INNER JOIN dbo.userMemberDB M WITH(NOLOCK) 
			ON C.CHILD_ID = M.userID
			INNER JOIN dbo.userNameDB N WITH (NOLOCK)
			ON M.accountIDX = N.accountIDX 

		END 

	SET NOCOUNT OFF;
END
GO


-- ----------------------------
-- procedure structure for USP_WEB_Buddy_Transfer_SEL
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_WEB_Buddy_Transfer_SEL]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_WEB_Buddy_Transfer_SEL]
GO

CREATE PROCEDURE [dbo].[USP_WEB_Buddy_Transfer_SEL] 
	-- Add the parameters for the stored procedure here
	@intAccountIDX			int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    -- Insert statements for procedure here
	IF Exists (Select Top 1 WBT_AccountIDX From dbo.TB_WEB_Buddy_Transfer with (noLock)
				Where WBT_AccountIDX = @intAccountIDX
	)
		Begin
			Return 1		-- 이미 신청함
		End
	Else
		Begin
			Return 0		-- 신청하지 않음
		End
END
GO


-- ----------------------------
-- procedure structure for manage_userinfo_parent_tel_agreement
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_parent_tel_agreement]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_parent_tel_agreement]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_parent_tel_agreement]
(
	@accountIDX int
,	@parentName varchar(10)
,	@parentBirth char(6)
,	@parentJumin1 char(12)
,	@parentJumin2 char(14)
,	@parentEncode varchar(64)
,	@parentNumber tinyint
,	@email varchar(50)
,	@agreeSDate datetime
,	@agreeEDate datetime
,	@agreeType tinyint
,	@userIP varchar(15)
)
AS

	BEGIN TRAN

	If (exists(SELECT * FROM userParentDB WHERE accountIDX=@accountIDX))
	BEGIN
		UPDATE userParentDB SET
			parentName = @parentName
,			parentBirth = @parentBirth
,			parentJumin1 = @parentJumin1
,			parentJumin2 = @parentJumin2
,			parentEncode = @parentEncode
,			parentNumber = @parentNumber
,			email = @email
,			agreeSDate = @agreeSDate
,			agreeEDate = @agreeEDate
,			agreeType = @agreeType 
		WHERE accountIDX=@accountIDX
	END
	ELSE
	BEGIN
		INSERT INTO userParentDB (accountIDX, parentName, parentBirth, parentJumin1, parentJumin2, parentEncode, parentNumber, email, agreeSDate, agreeEDate, agreeType, logIDX, regDate)
		VALUES (@accountIDX, @parentName, @parentBirth, @parentJumin1, @parentJumin2, @parentEncode, @parentNumber, @email, @agreeSDate, @agreeEDate, @agreeType, 0, getdate())
	END

	INSERT INTO Losagame_log.DBO.log_agree (accountIDX, agreeSDate, agreeEDate, parentEncode, email, userKey, userIP, permitDate, permitIP, permitType, regDate)
	VALUES (@accountIDX, @agreeSDate, @agreeEDate, @parentEncode, @email, '', '', getdate(), @userIP, 1, getdate())

	DECLARE @idx int
	SET @idx = (SELECT TOP 1 idx FROM Losagame_log.DBO.log_agree WHERE accountIDX=@accountIDX ORDER BY idx DESC)

	UPDATE userParentDB SET
		logIDX = @idx 
	WHERE accountIDX=@accountIDX

	UPDATE userMemberDB SET joinType=10 WHERE accountIDX=@accountIDX

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_fish_get_data_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_fish_get_data_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_fish_get_data_list]
GO

CREATE PROCEDURE [dbo].[game_fish_get_data_list]
(
	@accountIDX int
)
AS
	SELECT	idx, fish1_type, fish1_an, fish2_type, fish2_an, fish3_type, fish3_an, fish4_type, fish4_an, fish5_type, fish5_an,
			fish6_type, fish6_an, fish7_type, fish7_an, fish8_type, fish8_an, fish9_type, fish9_an, fish10_type, fish10_an,
			fish11_type, fish11_an, fish12_type, fish12_an, fish13_type, fish13_an, fish14_type, fish14_an, fish15_type, fish15_an,
			fish16_type, fish16_an, fish17_type, fish17_an, fish18_type, fish18_an, fish19_type, fish19_an, fish20_type, fish20_an 
	FROM userFishDB WITH(NOLOCK) WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for z_nouse_manage_mannerpoint_log_list_search
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_manage_mannerpoint_log_list_search]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_manage_mannerpoint_log_list_search]
GO

CREATE PROCEDURE [dbo].[z_nouse_manage_mannerpoint_log_list_search]
(
	@pageSize varchar(4)
,	@notInPage varchar(4)
,	@querystring varchar(60)
,	@searchType varchar(20)
)
AS
	DECLARE @strSQL varchar(800)
	SET @strSQL = ''

	IF (@searchType = 'A')
	BEGIN
	SET @strSQL = @strSQL + 'SELECT TOP ' + @pageSize + ' idx, isNull(b.nickName, ''회원탈퇴'') AS ''reportNick'', a.reportIDX, a.reportMP, a.reportpubIP, isNull(c.nickName,''회원탈퇴'') AS ''receiveNick'', a.receiveIDX, a.receivepubIP, a.receiveMP, a.receivepoint, a.resultType, a.regDate FROM LosaGame_log.DBO.log_mannerpoint a LEFT JOIN userMemberDB b ON a.reportIDX = b.accountIDX LEFT JOIN userMemberDB c on a.receiveIDX = c.accountIDX '
	SET @strSQL = @strSQL + 'WHERE ' + @querystring + ' and a.idx not in (SELECT TOP ' + @notInPage + ' idx FROM LosaGame_log.DBO.log_mannerpoint WHERE ' + @querystring + ' ORDER BY idx ASC'
	SET @strSQL = @strSQL + ') ORDER BY a.idx ASC'
	END
	ELSE
	BEGIN
	SET @strSQL = @strSQL + 'SELECT TOP ' + @pageSize + ' idx, isNull(b.nickName, ''회원탈퇴'') AS ''reportNick'', a.reportIDX, a.reportMP, a.reportpubIP, isNull(c.nickName,''회원탈퇴'') AS ''receiveNick'', a.receiveIDX, a.receivepubIP, a.receiveMP, a.receivepoint, a.resultType, a.regDate FROM LosaGame_log.DBO.log_mannerpoint a LEFT JOIN userMemberDB b ON a.reportIDX = b.accountIDX LEFT JOIN userMemberDB c on a.receiveIDX = c.accountIDX '
	SET @strSQL = @strSQL + 'WHERE ' + @querystring + ' and a.idx not in (SELECT TOP ' + @notInPage + ' idx FROM LosaGame_log.DBO.log_mannerpoint WHERE ' + @querystring + ' ORDER BY idx DESC'
	SET @strSQL = @strSQL + ') ORDER BY a.idx DESC'
	END

	EXECUTE (@strSQL)
GO


-- ----------------------------
-- procedure structure for web_as_nday_member_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_as_nday_member_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_as_nday_member_count]
GO

CREATE PROCEDURE [dbo].[web_as_nday_member_count]
(
	@sDate varchar(10)
,	@eDate varchar(10)
)
AS
	SELECT count(*) FROM userMemberDB WHERE regDate >= @sDate and regDate < @eDate
GO


-- ----------------------------
-- procedure structure for game_ability_get_self_index
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_ability_get_self_index]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_ability_get_self_index]
GO

CREATE PROCEDURE [dbo].[game_ability_get_self_index]
(
	@accountIDX int
)
AS
	SELECT TOP 1 idx FROM userAbilityDB WHERE accountIDX = @accountIDX ORDER BY idx DESC
GO


-- ----------------------------
-- procedure structure for web_member_ins
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_ins]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_ins]
GO

CREATE PROCEDURE [dbo].[web_member_ins]

	@USER_ID	VARCHAR(12),
	@NICK_NAME	VARCHAR(20),
	@USER_PWD	VARCHAR(24),
	@JOIN_TYPE	INT,
	@USER_LEVEL INT,
	@PESO		INT,
	@CP_TYPE	INT

AS

DECLARE @accountIDX int
DECLARE @userState int
DECLARE @playTime int
DECLARE @conn_count int
DECLARE @connDate datetime
DECLARE @note nvarchar(50)

SET @note = ''

IF (@USER_LEVEL = 0)
BEGIN
	SET @userState = 0
	SET @playTime = 0
	SET @conn_count = 0
	SET @connDate = '2000-01-01'
END
ELSE
BEGIN
	SET @userState = -1
	SET @playTime = @USER_LEVEL * 20
	SET @conn_count = @USER_LEVEL * 5
	SET @connDate = GETDATE()
END


-- QA존 계정 생성
INSERT INTO dbo.userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, cpType, regDate)
VALUES (@USER_ID, @NICK_NAME, @USER_PWD, 'io@ioenter.com', 0, 100, @JOIN_TYPE, @CP_TYPE, GETDATE())

SET @accountIDX = @@IDENTITY

INSERT INTO dbo.userGameDB (accountIDX, userState, gameMoney, playTime, conn_count, userLevel, connDate, regDate)
VALUES (@accountIDX, @userState, @PESO, @playTime, @conn_count, @USER_LEVEL, @connDate, GETDATE())

INSERT INTO dbo.userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, regDate)
VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE())

INSERT INTO dbo.userLoginDB (accountIDX,encodeKey,gameServerID,connDate)
VALUES (@accountIDX,'111111111111111',0,GETDATE())

IF (@CP_TYPE > 0)
BEGIN
	IF (@CP_TYPE = 400)
	BEGIN
		SET @note = 'Ojd02'
	END

	IF (@CP_TYPE = 600)
	BEGIN
		SET @note = @accountIDX
	END

	INSERT INTO dbo.userCooperationDB (accountIDX, userID, cpIDX, cpID, cpType, note, regDate)
	VALUES (@accountIDX, @USER_ID, @accountIDX, @USER_ID, @CP_TYPE, @note, GETDATE())
END


-- 개발존 계정 생성
-- INSERT INTO LosaGameDev.LosaGame.dbo.userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, cpType, regDate)
-- VALUES (@USER_ID, @NICK_NAME, @USER_PWD, 'io@ioenter.com', 0, 100, @JOIN_TYPE, @CP_TYPE, GETDATE())
-- 
-- 
-- SET @accountIDX = (select accountIDX from LosaGameDev.LosaGame.dbo.userMemberDB where userID = @USER_ID)
-- 
-- INSERT INTO LosaGameDev.LosaGame.dbo.userGameDB (accountIDX, userState, gameMoney, playTime, conn_count, userLevel, connDate, regDate)
-- VALUES (@accountIDX, @userState, @PESO, @playTime, @conn_count, @USER_LEVEL, @connDate, GETDATE())
-- 
-- INSERT INTO LosaGameDev.LosaGame.dbo.userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, regDate)
-- VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE())
-- 
-- INSERT INTO LosaGameDev.LosaGame.dbo.userLoginDB (accountIDX,encodeKey,gameServerID,connDate)
-- VALUES (@accountIDX,'111111111111111',0,GETDATE())
-- 
-- IF (@CP_TYPE > 0)
-- BEGIN
-- 	IF (@CP_TYPE = 400)
-- 	BEGIN
-- 		SET @note = 'Ojd02'
-- 	END
-- 
-- 	IF (@CP_TYPE = 600)
-- 	BEGIN
-- 		SET @note = @accountIDX
-- 	END
-- 
-- 	INSERT INTO LosaGameDev.LosaGame.dbo.userCooperationDB (accountIDX, userID, cpIDX, cpID, cpType, note, regDate)
-- 	VALUES (@accountIDX, @USER_ID, @accountIDX, @USER_ID, @CP_TYPE, @note, GETDATE())
-- END
GO


-- ----------------------------
-- procedure structure for game_personalHQ_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_personalHQ_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_personalHQ_get_data]
GO

CREATE PROCEDURE [dbo].[game_personalHQ_get_data]

	@ACCOUNT_IDX		INT,
	@ITEM_STATUS		TINYINT,		 -- 0: 미설치, 1:설치됨, 2:삭제
	@PAGE				INT,
	@PAGE_SIZE			INT

AS 

	SET NOCOUNT ON
	SET LOCK_TIMEOUT	15000

	IF (@ITEM_STATUS=0)
	BEGIN
		
		-- 길드 공용 인벤 아이템 SELECT
		SELECT ItemCode, COUNT(*) FROM dbo.userPersonalHQDB WITH (READCOMMITTED)
		WHERE AccountIDX=@ACCOUNT_IDX and ItemStatus=@ITEM_STATUS
		GROUP BY ItemCode

	END
	ELSE IF (@ITEM_STATUS=1)
	BEGIN
		
		-- 설치된 아이템 SELECT
		SELECT ItemSerial, ItemCode, ItemXZ, ItemY, ItemRotate, ItemDecoScore FROM (
			SELECT ROW_NUMBER() OVER (ORDER BY ItemSerial DESC) as ItemList, ItemSerial, ItemCode, ItemXZ, ItemY, ItemRotate, ItemDecoScore
			FROM dbo.userPersonalHQDB WITH (READCOMMITTED) WHERE AccountIDX=@ACCOUNT_IDX and ItemStatus=@ITEM_STATUS
		) as USER_PERSONAL_HQ_LIST
		WHERE ItemList BETWEEN (((@PAGE - 1) * @PAGE_SIZE) + 1) AND @PAGE * @PAGE_SIZE

	END 


	RETURN;
GO


-- ----------------------------
-- procedure structure for USP_LTS_WEEKTIME_PARENT_CHILD_INS
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_INS]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_INS]
GO

CREATE PROCEDURE [dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_INS] 
	-- Add the parameters for the stored procedure here
	@strPUserID		varchar(25),		-- 부모_계정 고유 일련번호
	@strCUserID		varchar(25),		-- 자녀_계정 고유 일련번호	
	@strAgreeType		char(1),	-- 동의여부(N : 미수락, S : 본인자신수락, Y : 동의수락, I : 동의요청중, C : 동의취소) 
	@strRegIP		varchar(15)
AS
/*
	Grant Execute on dbo.USP_LTS_WEEKTIME_PARENT_CHILD_INS to Mirusr_1
*/
BEGIN
	SET NOCOUNT ON

	-- 자녀가 이미 등록된 경우
	IF EXISTS ( SELECT * 
		      FROM dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO WITH (NOLOCK)
		     WHERE CHILD_ID = @strCUserID
		       AND Agree_Type = 'Y'
	)
		BEGIN
			RETURN (-1)
		END 
	ELSE
		BEGIN
			-- 자녀가 해당 부모의 동의요청을 취소한 경우
			IF EXISTS ( SELECT * 
					  FROM dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO WITH (NOLOCK)
					 WHERE PARENT_ID = @strPUserID
					   AND CHILD_ID = @strCUserID
					   AND Agree_Type = 'C'
			)
				BEGIN
					RETURN (-2)
				END 
			ELSE
				BEGIN
					-- 동일한 자녀와 부모 관계를 요청할 경우
					IF EXISTS ( SELECT * 
							  FROM dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO WITH (NOLOCK)
							 WHERE PARENT_ID = @strPUserID
							   AND CHILD_ID = @strCUserID
							   AND Agree_Type = 'I'
					)
						BEGIN
							RETURN (-4)
						END 
					ELSE
						Begin
							-- 동일한 자녀와 부모 관계를 요청할 경우
							IF EXISTS ( SELECT * 
									  FROM dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO WITH (NOLOCK)
									 WHERE CHILD_ID = @strCUserID
									 AND Agree_Type = 'S'
							)
								BEGIN
									-- 트랜잭션 시작
									BEGIN TRAN
										-- 자녀 등록 정보 삭제
										DELETE FROM dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO
										WHERE CHILD_ID = @strCUserID
										AND Agree_Type = 'S'

										-- 자녀 등록
										INSERT INTO dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO (PARENT_ID, CHILD_ID, Agree_Type, RegIP)
											 VALUES (@strPUserID, @strCUserID, @strAgreeType, @strRegIP)

										IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
										BEGIN
											ROLLBACK TRAN
											RETURN (-2)
										END

									COMMIT TRAN
									RETURN (1)

								END 
							ELSE
								Begin
									-- 트랜잭션 시작
									BEGIN TRAN
										-- 자녀 등록
										INSERT INTO dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO (PARENT_ID, CHILD_ID, Agree_Type, RegIP)
											 VALUES (@strPUserID, @strCUserID, @strAgreeType, @strRegIP)

										IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
										BEGIN
											ROLLBACK TRAN
											RETURN (-2)
										END

									COMMIT TRAN
									RETURN (1)
								End
						End
				END
		END

	SET NOCOUNT OFF
END
GO


-- ----------------------------
-- procedure structure for USP_WEB_Buddy_Transfer_INS
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_WEB_Buddy_Transfer_INS]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_WEB_Buddy_Transfer_INS]
GO

CREATE PROCEDURE [dbo].[USP_WEB_Buddy_Transfer_INS] 
	-- Add the parameters for the stored procedure here
	@intAccountIDX			int,
	@strUserName			nvarchar(10),
	@strUserID				nvarchar(20),
	@strBuddyID				varchar(20),
	@encPassword			varchar(24),
	@strBirthDay			char(6),
	@encJumin				varchar(64),
	@intFJumin				tinyint,
	@intGender				tinyint,
	@bitMailling			bit,
	@bitNameChk				bit,
	@intStatus				tinyint,
	@strRegIP				varchar(15)
AS
/*
	@intStatus : 상태값
		1 = 신청 완료
		2 = 주민번호 존재
*/
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;

    -- Insert statements for procedure here

	IF Not Exists (Select Top 1 WBT_AccountIDX From dbo.TB_WEB_Buddy_Transfer with (noLock)
					Where WBT_AccountIDX = @intAccountIDX OR WBT_EncJumin = @encJumin
	)
		Begin
		Begin Tran
			-- 저장
			INSERT INTO [dbo].[TB_WEB_Buddy_Transfer] (
				[WBT_AccountIDX]
				,[WBT_UserName]
				,[WBT_UserID]
				,[WBT_BuddyID]
				,[WBT_EncPWD]
				,[WBT_BirthDay]
				,[WBT_EncJumin]
				,[WBT_FirstJumin]
				,[WBT_Gender]
				,[WBT_Mailling]
				,[WBT_NameChk]
				,[WBT_Status]
				,[WBT_RegIP]
				,[WBT_RegDate]
			) VALUES (
				@intAccountIDX
				, @strUserName
				, @strUserID
				, @strBuddyID
				, @encPassword
				, @strBirthDay
				, @encJumin
				, @intFJumin
				, @intGender
				, @bitMailling
				, @bitNameChk
				, @intStatus
				, @strRegIP
				, getdate()
			)

			IF @@ERROR = 0
				Begin
					Commit Tran
					Return 1			-- 신청 성공
				End
			Else
				Begin
					RollBack Tran
					Return 9			-- 실패
				End

		End
	Else
		Begin
			Return 0		-- 이미 존재
		End


END
GO


-- ----------------------------
-- procedure structure for manage_userinfo_parent_get_userinfo
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_parent_get_userinfo]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_parent_get_userinfo]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_parent_get_userinfo]
(
	@accountIDX int
)
AS
	SELECT a.userID, b.userName, b.userJumin1, b.userJumin2, a.email, c.zipcode 
	FROM userMemberDB a JOIN userNameDB b ON a.accountIDX=b.accountIDX JOIN userInfoBDB c ON a.accountIDX=c.accountIDX 
	WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_fish_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_fish_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_fish_add]
GO

CREATE PROCEDURE [dbo].[game_fish_add]
(
	@accountIDX int
,	@fish1_type tinyint
,	@fish1_an int
,	@fish2_type tinyint
,	@fish2_an int
,	@fish3_type tinyint
,	@fish3_an int
,	@fish4_type tinyint
,	@fish4_an int
,	@fish5_type tinyint
,	@fish5_an int
,	@fish6_type tinyint
,	@fish6_an int
,	@fish7_type tinyint
,	@fish7_an int
,	@fish8_type tinyint
,	@fish8_an int
,	@fish9_type tinyint
,	@fish9_an int
,	@fish10_type tinyint
,	@fish10_an int
,	@fish11_type tinyint
,	@fish11_an int
,	@fish12_type tinyint
,	@fish12_an int
,	@fish13_type tinyint
,	@fish13_an int
,	@fish14_type tinyint
,	@fish14_an int
,	@fish15_type tinyint
,	@fish15_an int
,	@fish16_type tinyint
,	@fish16_an int
,	@fish17_type tinyint
,	@fish17_an int
,	@fish18_type tinyint
,	@fish18_an int
,	@fish19_type tinyint
,	@fish19_an int
,	@fish20_type tinyint
,	@fish20_an int
)
AS
	INSERT INTO userFishDB (
		accountIDX, 
		fish1_type, fish1_an, fish2_type, fish2_an, fish3_type, fish3_an, fish4_type, fish4_an, fish5_type, fish5_an,
		fish6_type, fish6_an, fish7_type, fish7_an, fish8_type, fish8_an, fish9_type, fish9_an, fish10_type, fish10_an,
		fish11_type, fish11_an, fish12_type, fish12_an, fish13_type, fish13_an, fish14_type, fish14_an, fish15_type, fish15_an,
		fish16_type, fish16_an, fish17_type, fish17_an, fish18_type, fish18_an, fish19_type, fish19_an, fish20_type, fish20_an,
		regDate
	)
	VALUES (
		@accountIDX, 
		@fish1_type, @fish1_an, @fish2_type, @fish2_an, @fish3_type, @fish3_an, @fish4_type, @fish4_an, @fish5_type, @fish5_an,
		@fish6_type, @fish6_an, @fish7_type, @fish7_an, @fish8_type, @fish8_an, @fish9_type, @fish9_an, @fish10_type, @fish10_an,
		@fish11_type, @fish11_an, @fish12_type, @fish12_an, @fish13_type, @fish13_an, @fish14_type, @fish14_an, @fish15_type, @fish15_an,
		@fish16_type, @fish16_an, @fish17_type, @fish17_an, @fish18_type, @fish18_an, @fish19_type, @fish19_an, @fish20_type, @fish20_an,
		getdate()
	)
GO


-- ----------------------------
-- procedure structure for z_nouse_manage_mannerpoint_log_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_manage_mannerpoint_log_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_manage_mannerpoint_log_list]
GO

CREATE PROCEDURE [dbo].[z_nouse_manage_mannerpoint_log_list]
(
	@pageSize varchar(4)
,	@notInPage varchar(4)
)
AS
	DECLARE @strSQL varchar(800)

	SET @strSQL = ''
	SET @strSQL = @strSQL + 'SELECT TOP ' + @pageSize + ' idx, b.nickName AS ''reportNick'', a.reportIDX, a.reportMP, a.reportpubIP, c.nickName AS ''receiveNick'', a.receiveIDX, a.receivepubIP, a.receiveMP, a.receivepoint, a.resultType, a.regDate FROM LosaGame_log.DBO.log_mannerpoint a JOIN userMemberDB b ON a.reportIDX = b.accountIDX JOIN userMemberDB c on a.receiveIDX = c.accountIDX '
	SET @strSQL = @strSQL + 'WHERE a.idx not in (SELECT TOP ' + @notInPage + ' idx FROM LosaGame_log.DBO.log_mannerpoint ORDER BY idx DESC'
	SET @strSQL = @strSQL + ') ORDER BY a.idx DESC'
	EXECUTE (@strSQL)
GO


-- ----------------------------
-- procedure structure for web_as_nday_game_start_button_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_as_nday_game_start_button_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_as_nday_game_start_button_count]
GO

CREATE PROCEDURE [dbo].[web_as_nday_game_start_button_count]
(
	@sDate varchar(10)
,	@eDate varchar(10)
)
AS
	SELECT count(distinct(accountIDX)) FROM LosaGame_log.DBO.log_play_exec WITH(NOLOCK) WHERE accountIDX in (
		SELECT accountIDX FROM userMemberDB WITH(NOLOCK) WHERE regDate >= @sDate and regDate < @eDate
	)
GO


-- ----------------------------
-- procedure structure for game_ability_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_ability_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_ability_get_list]
GO

CREATE PROCEDURE [dbo].[game_ability_get_list]
(
	@accountIDX int
)
AS
	SELECT	idx
,			class1_type, class1_basic01, class1_basic02, class1_basic03, class1_basic04, class1_skill1_sd, class1_skill1_asd, class1_skill1_ad, class1_skill1_as, class1_timeslot, class1_limitdate 
,			class2_type, class2_basic01, class2_basic02, class2_basic03, class2_basic04, class2_skill1_sd, class2_skill1_asd, class2_skill1_ad, class2_skill1_as, class2_timeslot, class2_limitdate 
,			class3_type, class3_basic01, class3_basic02, class3_basic03, class3_basic04, class3_skill1_sd, class3_skill1_asd, class3_skill1_ad, class3_skill1_as, class3_timeslot, class3_limitdate 
,			class4_type, class4_basic01, class4_basic02, class4_basic03, class4_basic04, class4_skill1_sd, class4_skill1_asd, class4_skill1_ad, class4_skill1_as, class4_timeslot, class4_limitdate 
,			class5_type, class5_basic01, class5_basic02, class5_basic03, class5_basic04, class5_skill1_sd, class5_skill1_asd, class5_skill1_ad, class5_skill1_as, class5_timeslot, class5_limitdate 
	FROM userAbilityDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_member_get_writetype
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_get_writetype]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_get_writetype]
GO

CREATE PROCEDURE [dbo].[web_member_get_writetype]
(
	@accountIDX int
)
AS
	SELECT joinType, limitType, limitDate FROM userMemberDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_PCBangPlayTime_Reward
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_PCBangPlayTime_Reward]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_PCBangPlayTime_Reward]
GO

CREATE PROCEDURE [dbo].[game_PCBangPlayTime_Reward]
AS
BEGIN
	
	DECLARE @LimitTime INT = 30
	DECLARE @DateTime NVARCHAR(10) = CONVERT(NVARCHAR(10), GetDate()-1, 112)

	DECLARE @sendIDX int, @receiveIDX int
	SET @sendIDX = (
		SELECT accountIDX
		  FROM [LosaGame].dbo.userMemberDB WITH(NOLOCK)
		 WHERE nickName='개발자K'
	)
	
	IF (@sendIDX IS NULL)
	BEGIN
		SET @sendIDX = (
			SELECT accountIDX
			  FROM [LosaGame].dbo.userMemberDB WITH(NOLOCK)
			 WHERE nickName='DeveloperK'
		)
	END  

	INSERT INTO LosaGame.dbo.userPCBangPregentDB(PCBangDate, AccountIDX, PCBangCount, PCBangBonusCash)
	SELECT  PCBangDate, AccountIDX, max(PCBangIndexCount.PCBangCount), max(presentGold)
	FROM LosaGame.dbo.userPCBangPlayTimeDB AS PPT
	INNER JOIN ( SELECT PCBangIndex, count(PCBangIndex) AS PCBangCount, CASE WHEN count(PCBangIndex) >= 5 THEN 1250
					WHEN count(PCBangIndex) >= 4 THEN 750
					WHEN count(PCBangIndex) >= 3 THEN 450
					WHEN count(PCBangIndex) >= 2 THEN 250
					ELSE 100
					END AS presentGold FROM LosaGame.dbo.userPCBangPlayTimeDB
					WHERE AccountIDX NOT IN (SELECT AccountIDX FROM [LosaGame].[dbo].[userMemberDB] WHERE limitType = 100 AND  limitDate > Getdate())
					AND PCBangPlayTime >= 30 AND PCBangDate = @DateTime
					GROUP by PCBangDate, PCBangIndex) AS PCBangIndexCount
	ON PCBangIndexCount.PCBangIndex = PPT.PCBangIndex
	WHERE PCBangDate = @DateTime
	Group By PCBangDate, PPT.AccountIDX

	INSERT INTO LosaGame.dbo.userPresentDB
	(
		sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate
	)
	SELECT  @sendIDX, AccountIDX, 13,  PCBangBonusCash, 72, 0, 0, 1132, 0, GETDATE() + 3, Getdate()
	FROM LosaGame.dbo.userPCBangPregentDB
	WHERE PCBangDate = @DateTime


END
GO


-- ----------------------------
-- procedure structure for USP_LTS_WEEKTIME_PARENT_CHILD_DEL
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_DEL]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_DEL]
GO

CREATE PROCEDURE [dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_DEL] 
	-- Add the parameters for the stored procedure here
	@strPUserID		varchar(25),		-- 부모_계정 고유 일련번호
	@strCUserID		varchar(25),		-- 자녀_계정 고유 일련번호	
	@strAgreeType		char(1)			-- 현재동의상태(N : 미수락, S : 본인자신수락, Y : 동의수락, I : 동의요청중, C : 동의취소) 
AS
/*
	Grant Execute on dbo.USP_LTS_WEEKTIME_PARENT_CHILD_DEL to Mirusr_1
*/
BEGIN
	-- 자녀 정보가 있는 경우
	IF EXISTS ( SELECT * 
		      FROM dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO WITH (NOLOCK)
		     WHERE PARENT_ID = @strPUserID
		       AND CHILD_ID = @strCUserID
	)
	BEGIN
		-- 트랜잭션 시작
		BEGIN TRAN

			-- 자녀 등록 정보 삭제
			DELETE 
			  FROM dbo.TB_LTS_WEEKTIME_PARENT_CHILD_INFO
			 WHERE PARENT_ID = @strPUserID
			   AND CHILD_ID = @strCUserID

			IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
			BEGIN
				ROLLBACK TRAN
				RETURN (-1)
			END
		
			-- 동의 수락 상태인 경우에만 자녀의 시간설정타임 삭제가능
			IF @strAgreeType = 'Y' 
			BEGIN 
				-- 자녀의 게임별 설정 시간 제거
				DELETE 
				  FROM dbo.TB_LTS_WEEKTIME
				 WHERE UserId = @strCUserID

				IF @@ERROR <> 0
				BEGIN
					ROLLBACK TRAN
					RETURN (-2)
				END
			END
		COMMIT TRAN
		RETURN (1)
	END 
	ELSE
	BEGIN
		RETURN (-3)
	END
END
GO


-- ----------------------------
-- procedure structure for usp_TB_WEB_Buddy_Transfer_get_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_TB_WEB_Buddy_Transfer_get_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[usp_TB_WEB_Buddy_Transfer_get_info]
GO

CREATE PROCEDURE [dbo].[usp_TB_WEB_Buddy_Transfer_get_info]
	@sSrchType	VARCHAR(10),		-- 검색타입[userID:아이디, BuddyID:버디아이디, userName:이름]
	@sSrchString	VARCHAR(20)		-- 검색어
AS
BEGIN
	SET NOCOUNT ON

	IF @sSrchType = 'userID'
	BEGIN 
		SELECT WBT_Seq, WBT_AccountIDX, WBT_UserName, WBT_UserID, WBT_BuddyID,
		       WBT_EncPWD, WBT_BirthDay, WBT_EncJumin, WBT_FirstJumin, WBT_Gender,
		       WBT_Mailling, WBT_NameChk, WBT_Status, WBT_RegIP, WBT_RegDate
		  FROM TB_WEB_Buddy_Transfer WITH (NOLOCK)
		 WHERE WBT_UserID = @sSrchString
	END 
	ELSE IF @sSrchType = 'BuddyID'
	BEGIN 
		SELECT WBT_Seq, WBT_AccountIDX, WBT_UserName, WBT_UserID, WBT_BuddyID,
		       WBT_EncPWD, WBT_BirthDay, WBT_EncJumin, WBT_FirstJumin, WBT_Gender,
		       WBT_Mailling, WBT_NameChk, WBT_Status, WBT_RegIP, WBT_RegDate
		  FROM TB_WEB_Buddy_Transfer WITH (NOLOCK)
		 WHERE WBT_BuddyID = @sSrchString
	END 
	ELSE IF @sSrchType = 'userName'
	BEGIN 
		SELECT WBT_Seq, WBT_AccountIDX, WBT_UserName, WBT_UserID, WBT_BuddyID,
		       WBT_EncPWD, WBT_BirthDay, WBT_EncJumin, WBT_FirstJumin, WBT_Gender,
		       WBT_Mailling, WBT_NameChk, WBT_Status, WBT_RegIP, WBT_RegDate
		  FROM TB_WEB_Buddy_Transfer WITH (NOLOCK)
		 WHERE WBT_UserName = @sSrchString
	END 

	SET NOCOUNT OFF
END
GO


-- ----------------------------
-- procedure structure for manage_userinfo_parent_fax_post_agreement
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_parent_fax_post_agreement]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_parent_fax_post_agreement]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_parent_fax_post_agreement]
(
	@accountIDX int
,	@parentEncode varchar(64)
,	@email varchar(50)
,	@agreeSDate datetime
,	@agreeEDate datetime
,	@agreeType tinyint
,	@userIP varchar(15)
)
AS

	BEGIN TRAN

	UPDATE userParentDB SET
		email = @email
,		agreeSDate = @agreeSDate
,		agreeEDate = @agreeEDate
,		agreeType = @agreeType
	WHERE accountIDX=@accountIDX

	INSERT INTO Losagame_log.DBO.log_agree (accountIDX, agreeSDate, agreeEDate, parentEncode, email, userKey, userIP, permitDate, permitIP, permitType, regDate)
	VALUES (@accountIDX, @agreeSDate, @agreeEDate, @parentEncode, @email, '', '', getdate(), @userIP, 1, getdate())

	DECLARE @idx int
	SET @idx = (SELECT TOP 1 idx FROM Losagame_log.DBO.log_agree WHERE accountIDX=@accountIDX ORDER BY idx DESC)

	UPDATE userParentDB SET
		logIDX = @idx 
	WHERE accountIDX=@accountIDX

	UPDATE userMemberDB SET joinType=10 WHERE accountIDX=@accountIDX

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_fame_give_point
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_fame_give_point]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_fame_give_point]
GO

CREATE PROCEDURE [dbo].[game_fame_give_point]
(
	@playType int
,	@modeType int
,	@sub1Type int
,	@sub2Type int
,	@reportIDX int
,	@reportNick varchar(20)
,	@reportpubIP varchar(15)
,	@reportpriIP varchar(15)
,	@receiveNick varchar(20)
,	@receivepubIP varchar(15)
,	@roomInfo varchar(3000)
,	@chatInfo varchar(2000)
,	@note varchar(200)
)
As

	DECLARE @receiveIDX int
	SET @receiveIDX = (SELECT accountIDX FROM userMemberDB WHERE nickName=@receiveNick)

	INSERT INTO LosaGame_log.DBO.log_mannerpoint (playType, modeType, sub1Type, sub2Type, reportIDX, reportNick, reportpubIP, reportpriIP, receiveIDX, receiveNick, receivepubIP, roomInfo, chatInfo, note, regDate)
	VALUES (@playType, @modeType, @sub1Type, @sub2Type, @reportIDX, @reportNick, @reportpubIP, @reportpriIP, @receiveIDX, @receiveNick, @receivepubIP, @roomInfo, @chatInfo, @note, getdate())
GO


-- ----------------------------
-- procedure structure for z_nouse_game_present_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_game_present_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_game_present_get_list]
GO

CREATE PROCEDURE [dbo].[z_nouse_game_present_get_list]
(
	@idx varchar(10)
,	@receiveIDX varchar(12)
,	@topN varchar(10)
)
AS
	DECLARE @sql varchar(500)
	SET @sql = 'SELECT top ' + @topN + ' a.idx, b.nickName, a.presentType, a.packet FROM userPresentDB a join userMemberDB b on a.sendIDX = b.accountIDX '
	SET @sql = @sql + 'WHERE a.receiveIDX = ' + @receiveIDX + ' and a.idx > ' + @idx + ' order by a.idx asc'

	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for web_as_nday_game_not_connect_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_as_nday_game_not_connect_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_as_nday_game_not_connect_count]
GO

CREATE PROCEDURE [dbo].[web_as_nday_game_not_connect_count]
(
	@sDate varchar(10)
,	@eDate varchar(10)
)
AS
	SELECT count(*) FROM userGameDB WITH(NOLOCK) WHERE accountIDX in (
		SELECT accountIDX FROM userMemberDB WITH(NOLOCK) WHERE regDate >= @sDate and regDate < @eDate
	) and userState = 0 and conn_count = 0
GO


-- ----------------------------
-- procedure structure for game_ability_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_ability_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_ability_add]
GO

CREATE PROCEDURE [dbo].[game_ability_add]
(
	@accountIDX int
,	@class1_type int
,	@class1_basic01 tinyint
,	@class1_basic02 tinyint
,	@class1_basic03 tinyint
,	@class1_basic04 tinyint
,	@class1_skill1_sd tinyint
,	@class1_skill1_asd tinyint
,	@class1_skill1_ad tinyint
,	@class1_skill1_as tinyint
,	@class1_timeslot int
,	@class1_limitdate datetime
,	@class2_type int
,	@class2_basic01 tinyint
,	@class2_basic02 tinyint
,	@class2_basic03 tinyint
,	@class2_basic04 tinyint
,	@class2_skill1_sd tinyint
,	@class2_skill1_asd tinyint
,	@class2_skill1_ad tinyint
,	@class2_skill1_as tinyint
,	@class2_timeslot int
,	@class2_limitdate datetime
,	@class3_type int
,	@class3_basic01 tinyint
,	@class3_basic02 tinyint
,	@class3_basic03 tinyint
,	@class3_basic04 tinyint
,	@class3_skill1_sd tinyint
,	@class3_skill1_asd tinyint
,	@class3_skill1_ad tinyint
,	@class3_skill1_as tinyint
,	@class3_timeslot int
,	@class3_limitdate datetime
,	@class4_type int
,	@class4_basic01 tinyint
,	@class4_basic02 tinyint
,	@class4_basic03 tinyint
,	@class4_basic04 tinyint
,	@class4_skill1_sd tinyint
,	@class4_skill1_asd tinyint
,	@class4_skill1_ad tinyint
,	@class4_skill1_as tinyint
,	@class4_timeslot int
,	@class4_limitdate datetime
,	@class5_type int
,	@class5_basic01 tinyint
,	@class5_basic02 tinyint
,	@class5_basic03 tinyint
,	@class5_basic04 tinyint
,	@class5_skill1_sd tinyint
,	@class5_skill1_asd tinyint
,	@class5_skill1_ad tinyint
,	@class5_skill1_as tinyint
,	@class5_timeslot int
,	@class5_limitdate datetime
)
AS
	INSERT INTO userAbilityDB (accountIDX, class1_type, class1_basic01, class1_basic02, class1_basic03, class1_basic04, class1_skill1_sd, class1_skill1_asd, class1_skill1_ad, class1_skill1_as, class1_timeslot, class1_limitdate, class2_type, class2_basic01, class2_basic02, class2_basic03, class2_basic04, class2_skill1_sd, class2_skill1_asd, class2_skill1_ad, class2_skill1_as, class2_timeslot, class2_limitdate, class3_type, class3_basic01, class3_basic02, class3_basic03, class3_basic04, class3_skill1_sd, class3_skill1_asd, class3_skill1_ad, class3_skill1_as, class3_timeslot, class3_limitdate, class4_type, class4_basic01, class4_basic02, class4_basic03, class4_basic04, class4_skill1_sd, class4_skill1_asd, class4_skill1_ad, class4_skill1_as, class4_timeslot, class4_limitdate, class5_type, class5_basic01, class5_basic02, class5_basic03, class5_basic04, class5_skill1_sd, class5_skill1_asd, class5_skill1_ad, class5_skill1_as, class5_timeslot, class5_limitdate, regDate)
	VALUES (@accountIDX, @class1_type, @class1_basic01, @class1_basic02, @class1_basic03, @class1_basic04, @class1_skill1_sd, @class1_skill1_asd, @class1_skill1_ad, @class1_skill1_as, @class1_timeslot, @class1_limitdate, @class2_type, @class2_basic01, @class2_basic02, @class2_basic03, @class2_basic04, @class2_skill1_sd, @class2_skill1_asd, @class2_skill1_ad, @class2_skill1_as, @class2_timeslot, @class2_limitdate, @class3_type, @class3_basic01, @class3_basic02, @class3_basic03, @class3_basic04, @class3_skill1_sd, @class3_skill1_asd, @class3_skill1_ad, @class3_skill1_as, @class3_timeslot, @class3_limitdate, @class4_type, @class4_basic01, @class4_basic02, @class4_basic03, @class4_basic04, @class4_skill1_sd, @class4_skill1_asd, @class4_skill1_ad, @class4_skill1_as, @class4_timeslot, @class4_limitdate, @class5_type, @class5_basic01, @class5_basic02, @class5_basic03, @class5_basic04, @class5_skill1_sd, @class5_skill1_asd, @class5_skill1_ad, @class5_skill1_as, @class5_timeslot, @class5_limitdate, getdate())
GO


-- ----------------------------
-- procedure structure for web_member_get_jointype
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_get_jointype]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_get_jointype]
GO

CREATE PROCEDURE [dbo].[web_member_get_jointype]
(
	@accountIDX int
)
AS
	SELECT joinType FROM userMemberDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_PCBangPlayTime_mylist
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_PCBangPlayTime_mylist]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_PCBangPlayTime_mylist]
GO

CREATE PROCEDURE [dbo].[game_PCBangPlayTime_mylist]

	@ACCOUNT_IDX		INT

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;

	SELECT PCBangDate
		  ,PCBangIndex
		  ,AccountIDX
		  ,PCBangPlayTime
	  FROM LosaGame.dbo.userPCBangPlayTimeDB WITH (READUNCOMMITTED)
	  WHERE AccountIDX = @ACCOUNT_IDX
GO


-- ----------------------------
-- procedure structure for USP_LTS_WEEKTIME_PARENT_CHILD_CINFO2
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_CINFO2]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_CINFO2]
GO

CREATE PROCEDURE [dbo].[USP_LTS_WEEKTIME_PARENT_CHILD_CINFO2]
	@strPUserID			varchar(25),		-- 부모_계정 고유 일련번호
	@strCUserID			varchar(25),		-- 자녀_계정 고유 일련번호
	@strAgreeType		char(1)				-- 동의여부(N : 미수락, S : 본인자신수락, Y : 동의수락, I : 동의요청중, C : 동의취소) 
AS
/*
	Grant Execute on dbo.USP_LTS_WEEKTIME_PARENT_CHILD_CINFO2 to Mirusr_1
*/
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- 전체 검색
	IF Len(@strAgreeType) > 0
		BEGIN
			Select 
				C.*, M.*, N.userName, N.userBirthday, N.userNumber
			From (
				Select 
					PARENT_ID, CHILD_ID, Agree_Type, CONVERT(VARCHAR(10), AgreeDate, 121) AS AgreeDate, RegIP, CONVERT(VARCHAR(10), RegDate, 121) AS RegDate
				From TB_LTS_WEEKTIME_PARENT_CHILD_INFO with (noLock)
				Where PARENT_ID = @strPUserID
				And CHILD_ID = @strCUserID
				And Agree_Type = @strAgreeType
			) As C
			INNER JOIN dbo.userMemberDB M WITH(NOLOCK) 
			ON C.CHILD_ID = M.userID
			INNER JOIN dbo.userNameDB N WITH (NOLOCK)
			ON M.accountIDX = N.accountIDX 
		END 
	ELSE 
		BEGIN
			Select 
				C.*, M.*, N.userName, N.userBirthday, N.userNumber
			From (
				Select 
					PARENT_ID, CHILD_ID, Agree_Type, CONVERT(VARCHAR(10), AgreeDate, 121) AS AgreeDate, RegIP, CONVERT(VARCHAR(10), RegDate, 121) AS RegDate
				From TB_LTS_WEEKTIME_PARENT_CHILD_INFO with (noLock)
				Where PARENT_ID = @strPUserID
				And CHILD_ID = @strCUserID
				And Agree_Type <> 'S'
			) As C
			INNER JOIN dbo.userMemberDB M WITH(NOLOCK) 
			ON C.CHILD_ID = M.userID
			INNER JOIN dbo.userNameDB N WITH (NOLOCK)
			ON M.accountIDX = N.accountIDX 
		END 

	SET NOCOUNT OFF;
END
GO


-- ----------------------------
-- procedure structure for manage_userinfo_get_upgrade_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_get_upgrade_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_get_upgrade_data]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_get_upgrade_data]
(
	@accountIDX int
)
AS
	SELECT	idx, 
			class1_type, class1_basic01, class1_basic02, class1_basic03, class1_basic04, class1_skill1_sd, class1_skill1_asd, class1_skill1_ad, class1_skill1_as, 
			class2_type, class2_basic01, class2_basic02, class2_basic03, class2_basic04, class2_skill1_sd, class2_skill1_asd, class2_skill1_ad, class2_skill1_as, 
			class3_type, class3_basic01, class3_basic02, class3_basic03, class3_basic04, class3_skill1_sd, class3_skill1_asd, class3_skill1_ad, class3_skill1_as, 
			class4_type, class4_basic01, class4_basic02, class4_basic03, class4_basic04, class4_skill1_sd, class4_skill1_asd, class4_skill1_ad, class4_skill1_as, 
			class5_type, class5_basic01, class5_basic02, class5_basic03, class5_basic04, class5_skill1_sd, class5_skill1_asd, class5_skill1_ad, class5_skill1_as 
	FROM userAbilityDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_present_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_present_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_present_get_list]
GO

CREATE PROCEDURE [dbo].[game_present_get_list]
(
	@idx int
,	@receiveIDX int
,	@topN int
)
AS

	SELECT TOP (@topN) a.idx, a.sendIDX, isNull(b.nickName, '탈퇴 회원'), a.presentType, a.value1, a.value2, a.value3, a.value4, a.msgType, a.flag, a.limitDate
	FROM userPresentDB a WITH(NOLOCK)
		  Left join userMemberDB b WITH(NOLOCK)
		  ON a.sendIDX = b.accountIDX
	WHERE a.receiveIDX = @receiveIDX
		   AND a.idx > @idx
	ORDER BY a.idx ASC
GO


-- ----------------------------
-- procedure structure for z_nouse_manage_member_list_sch_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_manage_member_list_sch_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_manage_member_list_sch_count]
GO

CREATE PROCEDURE [dbo].[z_nouse_manage_member_list_sch_count]
(
	@schType varchar(8)
,	@schString varchar(12)
)
AS
	DECLARE @strSQL varchar(300)
	SET @strSQL = 'select count(*) from userMemberDB where ' + @schType + ' like ''%' + @schString + '%'''
	EXEC(@strSQL)
GO


-- ----------------------------
-- procedure structure for web_as_nday_game_crush_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_as_nday_game_crush_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_as_nday_game_crush_count]
GO

CREATE PROCEDURE [dbo].[web_as_nday_game_crush_count]
(
	@sDate varchar(10)
,	@eDate varchar(10)
)
AS
	SELECT count(*) FROM userGameDB WITH(NOLOCK) WHERE accountIDX in (
		SELECT accountIDX FROM userMemberDB WITH(NOLOCK) WHERE regDate >= @sDate and regDate < @eDate
	) and userState = 0 and conn_count > 0
GO


-- ----------------------------
-- procedure structure for z_nouse_game_fame_give_point
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_game_fame_give_point]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_game_fame_give_point]
GO

CREATE PROCEDURE [dbo].[z_nouse_game_fame_give_point]
(
	@playType int
,	@modeType int
,	@sub1Type int
,	@sub2Type int
,	@reportIDX int
,	@reportpubIP varchar(15)
,	@reportpriIP varchar(15)
,	@reportMP int
,	@receiveNick varchar(20)
,	@receivepubIP varchar(15)
,	@receiveMP int
,	@receivepoint int
,	@roomInfo varchar(3000)
,	@chatInfo varchar(2000)
,	@note varchar(200)
)
As

	DECLARE @checkcount int, @userType int, @receiveIDX int, @resultType int

	SET @checkcount = DBO.game_mannerpoint_qualification_check(@reportIDX, @receiveIDX, @reportpubIP, getdate())
	SET @userType = (SELECT userType FROM userMemberDB WHERE accountIDX=@reportIDX)
	SET @resultType = 0

	IF (@userType < 10)
	BEGIN
		SET @checkcount = 0
		SET @resultType = 1
		SET @receivepoint = -1
	END

	IF (@checkcount = 0)
	BEGIN
		SELECT 1 AS 'returnVal'

		SET @receiveIDX = (SELECT accountIDX FROM userMemberDB WHERE nickName=@receiveNick)
		INSERT INTO LosaGame_log.DBO.log_mannerpoint (playType, modeType, sub1Type, sub2Type, reportIDX, reportpubIP, reportpriIP, reportMP, receiveIDX, receivepubIP, receiveMP, receivepoint, roomInfo, chatInfo, note, resultType, regDate)
		VALUES (@playType, @modeType, @sub1Type, @sub2Type, @reportIDX, @reportpubIP, @reportpriIP, @reportMP, @receiveIDX, @receivepubIP, @receiveMP, @receivepoint, @roomInfo, @chatInfo, @note, @resultType, getdate())
	END
	ELSE
	BEGIN
		SELECT @checkcount AS 'returnVal'
	END
GO


-- ----------------------------
-- procedure structure for web_member_edit_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_edit_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_edit_get_data]
GO

CREATE PROCEDURE [dbo].[web_member_edit_get_data]
(
	@accountIDX int
)
AS
	SELECT	a.userID, a.nickName, a.userPWD, a.EMail, a.mailling, a.joinType,
			a.trackingcode, a.regDate, 
			b.userName, b.userEnCode,
			isNull(c.tel,'') AS 'tel', isNull(c.mobile,'') AS 'mobile',
			isNull(c.zipcode,'') AS 'zipcode', isNull(c.address1,'') AS 'address1',
			isNull(c.address2,'') AS 'address2'
	FROM userMemberDB a WITH(NOLOCK)
		 JOIN userNameDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX
		 LEFT JOIN userInfoBDB c WITH(NOLOCK) ON a.accountIDX=c.accountIDX
	WHERE a.accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_PCBangPlayTime_ADD
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_PCBangPlayTime_ADD]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_PCBangPlayTime_ADD]
GO

CREATE PROCEDURE [dbo].[game_PCBangPlayTime_ADD]
	@ACCOUNT_IDX			INT,			-- 유저 인덱스
	@PCBangIndex			INT			-- PC방 인덱스
AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;
	
	DECLARE @nReturn		INT	
	SET @nReturn=0			-- True
	
		declare @CurrentDate NVARCHAR(10)
		SET @CurrentDate = CONVERT(NVARCHAR(10), GetDate(), 112)

	BEGIN TRAN

		IF (EXISTS(SELECT * FROM dbo.userPCBangPlayTimeDB WITH (NOLOCK) WHERE AccountIDX = @ACCOUNT_IDX ANd PCBangDate = @CurrentDate))
		BEGIN
			IF (EXISTS(SELECT * FROM dbo.userPCBangPlayTimeDB WITH (NOLOCK) WHERE AccountIDX = @ACCOUNT_IDX AND PCBangIndex = @PCBangIndex ANd PCBangDate = @CurrentDate))
			BEGIN
				UPDATE dbo.userPCBangPlayTimeDB
				   SET PCBangPlayTime = PCBangPlayTime + 1
				 WHERE AccountIDX = @ACCOUNT_IDX AND PCBangIndex = @PCBangIndex ANd PCBangDate = @CurrentDate
			END
		END
		ELSE
		BEGIN
			INSERT INTO dbo.userPCBangPlayTimeDB (AccountIDX, PCBangIndex, PCBangDate, PCBangPlayTime) 
			VALUES ( @ACCOUNT_IDX, @PCBangIndex, @CurrentDate, 1);
		END

		IF (@@ROWCOUNT = 0) or (@@ERROR <> 0)			
		BEGIN
			SELECT -1;
			ROLLBACK TRAN
			RETURN;
		END
	
	COMMIT TRAN
	
	SELECT 1;
	RETURN;
GO


-- ----------------------------
-- procedure structure for web_community_get_best_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_community_get_best_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_community_get_best_count]
GO

CREATE PROCEDURE [dbo].[web_community_get_best_count]

AS
	SELECT [content] FROM define_site_config WITH(NOLOCK) WHERE objName='bestcount'
GO


-- ----------------------------
-- procedure structure for manage_userinfo_get_special_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_get_special_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_get_special_data]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_get_special_data]
(
	@accountIDX int
)
AS
	SELECT	idx, 
			item1_type, item1_value1, item1_value2, 
			item2_type, item2_value1, item2_value2, 
			item3_type, item3_value1, item3_value2, 
			item4_type, item4_value1, item4_value2, 
			item5_type, item5_value1, item5_value2, 
			item6_type, item6_value1, item6_value2, 
			item7_type, item7_value1, item7_value2, 
			item8_type, item8_value1, item8_value2, 
			item9_type, item9_value1, item9_value2, 
			item10_type, item10_value1, item10_value2, 
			item11_type, item11_value1, item11_value2, 
			item12_type, item12_value1, item12_value2, 
			item13_type, item13_value1, item13_value2, 
			item14_type, item14_value1, item14_value2, 
			item15_type, item15_value1, item15_value2, 
			item16_type, item16_value1, item16_value2, 
			item17_type, item17_value1, item17_value2, 
			item18_type, item18_value1, item18_value2, 
			item19_type, item19_value1, item19_value2, 
			item20_type, item20_value1, item20_value2 
	FROM userItemEtcDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for z_nouse_110414_game_present_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_110414_game_present_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_110414_game_present_get_list]
GO

CREATE PROCEDURE [dbo].[z_nouse_110414_game_present_get_list]
(
	@idx varchar(10)
,	@receiveIDX varchar(12)
,	@topN varchar(10)
)
AS
	DECLARE @sql varchar(500)
	SET @sql = 'SELECT top ' + @topN + ' a.idx, a.sendIDX, isNull(b.nickName, ''탈퇴 회원''), a.presentType, a.value1, a.value2, a.value3, a.value4, a.msgType, a.flag, a.limitDate FROM userPresentDB a Left join userMemberDB b on a.sendIDX = b.accountIDX '
	SET @sql = @sql + 'WHERE a.receiveIDX = ' + @receiveIDX + ' and a.idx > ' + @idx + ' order by a.idx asc'

	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for game_present_delete_all
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_present_delete_all]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_present_delete_all]
GO

CREATE PROCEDURE [dbo].[game_present_delete_all]
(
	@accountIDX int
)
AS
	DELETE FROM userPresentDB WHERE receiveIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for z_nouse_manage_member_list_paging
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_manage_member_list_paging]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_manage_member_list_paging]
GO

CREATE PROCEDURE [dbo].[z_nouse_manage_member_list_paging]
(
	@pageSize varchar(8)
,	@notInPage varchar(8)
)
As
	Declare @strSQL varchar(500)

	Set @strSQL = ''
	Set @strSQL = @strSQL + 'Select Top '+@pageSize+' a.accountIDX, a.userID, a.nickName, a.EMail, a.userType, b.cnnDate, a.regDate, b.visit_count, isNull(c.amtcash, 0) as ''amtcash'' From userMemberDB a '
	Set @strSQL = @strSQL + 'join userInfoDB b on a.accountIDX = b.accountIDX join userCashDB c on a.accountIDX = c.accountIDX '
	Set @strSQL = @strSQL + 'Where  a.userID not in (Select Top ' + @notInPage + ' userID From userMemberDB order by regDate desc) '
	Set @strSQL = @strSQL + 'order by a.regDate desc'

	Exec(@strSQL)
GO


-- ----------------------------
-- procedure structure for web_as_nday_game_connect_tutorial_fail_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_as_nday_game_connect_tutorial_fail_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_as_nday_game_connect_tutorial_fail_count]
GO

CREATE PROCEDURE [dbo].[web_as_nday_game_connect_tutorial_fail_count]
(
	@sDate varchar(10)
,	@eDate varchar(10)
)
AS
	SELECT count(*) FROM userGameDB WITH(NOLOCK) WHERE accountIDX in (
		SELECT accountIDX FROM userMemberDB WITH(NOLOCK) WHERE regDate >= @sDate and regDate < @eDate
	) and userState > 0
GO


-- ----------------------------
-- procedure structure for web_user_id_pwd_check
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_user_id_pwd_check]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_user_id_pwd_check]
GO

CREATE PROCEDURE [dbo].[web_user_id_pwd_check]
(
	@userID varchar(12)
,	@userPWD varchar(24)
)
AS

SET NOCOUNT ON

SELECT COUNT(*)
  FROM dbo.userMemberDB WITH(NOLOCK)
 WHERE userID = @userID
--   AND userPWD = @userPWD
GO


-- ----------------------------
-- procedure structure for web_member_cpID_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_cpID_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_cpID_count]
GO

CREATE PROCEDURE [dbo].[web_member_cpID_count]
(
	@cpID varchar(20)
,	@cpType smallint
)
AS
	SELECT count(*) FROM userCooperationDB WHERE cpID=@cpID and cpType=@cpType
GO


-- ----------------------------
-- procedure structure for game_oakbarrel_set_updatedate
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_oakbarrel_set_updatedate]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_oakbarrel_set_updatedate]
GO

CREATE PROCEDURE [dbo].[game_oakbarrel_set_updatedate]        
          
 @ACCOUNT_IDX INT        
AS            
          
 SET NOCOUNT ON;          
 SET LOCK_TIMEOUT 10000;          
         
 DECLARE @NOW_DATE DATETIME        
 SET @NOW_DATE = GETDATE()        
           
 BEGIN TRAN          
       
  UPDATE dbo.userOakBarrelDB WITH (XLOCK, ROWLOCK)           
     SET UpdateTime = @NOW_DATE          
   WHERE AccountIDX = @ACCOUNT_IDX;          
             
   IF(@@ROWCOUNT=0) OR (@@ERROR<>0)          
   BEGIN          
	ROLLBACK TRAN        
   
    SELECT -1, @NOW_DATE;   
   
	RETURN;  
         
   END           
             
 COMMIT TRAN          
         
 SELECT 0, @NOW_DATE;        
           
 RETURN;
GO


-- ----------------------------
-- procedure structure for web_class_define_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_class_define_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_class_define_count]
GO

CREATE PROCEDURE [dbo].[web_class_define_count]
AS
	SELECT count(*) FROM define_class WITH(NOLOCK)
GO


-- ----------------------------
-- procedure structure for manage_userinfo_get_quest_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_get_quest_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_get_quest_data]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_get_quest_data]
(
	@accountIDX int	
)
AS
	SELECT	quest1_type, quest1_time, quest2_type, quest2_time, quest3_type, quest3_time, quest4_type, quest4_time, quest5_type, quest5_time, 
			quest6_type, quest6_time, quest7_type, quest7_time, quest8_type, quest8_time, quest9_type, quest9_time, quest10_type, quest10_time, 
			quest11_type, quest11_time, quest12_type, quest12_time, quest13_type, quest13_time, quest14_type, quest14_time, quest15_type, quest15_time, 
			quest16_type, quest16_time, quest17_type, quest17_time, quest18_type, quest18_time, quest19_type, quest19_time, quest20_type, quest20_time 
	FROM userQuestCompleteDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for z_nouse_110414_game_guild_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_110414_game_guild_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_110414_game_guild_get_list]
GO

CREATE PROCEDURE [dbo].[z_nouse_110414_game_guild_get_list]
(
	@topn varchar(8)
,	@idx varchar(12)
)
AS
	DECLARE @sql varchar(1000)
	SET @sql = ''
	SET @sql = @sql + ' SELECT TOP ' + @topn + ' a.idx, a.guildName, a.aboutguild, a.guildmark, a.point, a.maxcount, a.regDate, a.membercount, a.todaypoint, a.guildLevel, a.regionType, '
	SET @sql = @sql + ' b.type1_win, b.type1_lose, b.type1_kill, b.type1_death '
	SET @sql = @sql + ' FROM userGuildDB a INNER JOIN userRecordGuildDB b ON a.idx = b.guildIDX WHERE a.idx < ' + @idx + ' ORDER BY a.idx DESC'

	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for game_present_delete
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_present_delete]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_present_delete]
GO

CREATE PROCEDURE [dbo].[game_present_delete]
(
	@idx int
)
AS
	DELETE FROM userPresentDB WHERE idx=@idx
GO


-- ----------------------------
-- procedure structure for manage_cash_log_list_sch_paging_temp
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_cash_log_list_sch_paging_temp]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_cash_log_list_sch_paging_temp]
GO

CREATE PROCEDURE [dbo].[manage_cash_log_list_sch_paging_temp]
(
	@pageSize varchar(8)
,	@notInPage varchar(8)
,	@schType varchar(12)
,	@schString varchar(20)
)
As
	Declare @strSQL varchar(500)

	Set @strSQL = ''
	Set @strSQL = @strSQL + 'Select Top '+@pageSize+' b.accountIDX, b.userID, b.nickName, a.userIP, a.amount, a.note, a.regDate From LosaGame_log.DBO.z_backup_101007_log_cash a join userMemberDB b on a.accountIDX=b.accountIDX '
	Set @strSQL = @strSQL + 'Where a.' + @schType + '=''' +@schString+''' and a.idx not in (Select Top ' + @notInPage + ' idx From LosaGame_log.DBO.z_backup_101007_log_cash where ' + @schType + '=''' + @schString + ''' order by idx desc) '
	Set @strSQL = @strSQL + 'order by a.idx desc'

	Exec(@strSQL)
GO


-- ----------------------------
-- procedure structure for web_as_nday_game_connect_tutorial_complete_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_as_nday_game_connect_tutorial_complete_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_as_nday_game_connect_tutorial_complete_count]
GO

CREATE PROCEDURE [dbo].[web_as_nday_game_connect_tutorial_complete_count]
(
	@sDate varchar(10)
,	@eDate varchar(10)
)
AS
	SELECT count(*) FROM userRecordBattleDB WITH(NOLOCK) WHERE accountIDX in (
		SELECT accountIDX FROM userGameDB WITH(NOLOCK) WHERE accountIDX in (
			SELECT accountIDX FROM userMemberDB WITH(NOLOCK) WHERE regDate >= @sDate and regDate < @eDate
		) and userState = -1 and userLevel = 0 and userEXP = 0 and gameMoney = 10000
	) and (type1_win + type1_lose + type1_kill + type1_death) = 0
GO


-- ----------------------------
-- procedure structure for web_search_userPWD_simple_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_search_userPWD_simple_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_search_userPWD_simple_get_data]
GO

CREATE PROCEDURE [dbo].[web_search_userPWD_simple_get_data]
(
	@userID varchar(12)
,	@email varchar(50)
)
AS
	SELECT userID, userPWD, EMail FROM userMemberDB WHERE userID = @userID and EMail = @email
GO


-- ----------------------------
-- procedure structure for web_member_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_count]
GO

CREATE PROCEDURE [dbo].[web_member_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM userMemberDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for game_oakbarrel_set_init
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_oakbarrel_set_init]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_oakbarrel_set_init]
GO

CREATE PROCEDURE [dbo].[game_oakbarrel_set_init]                  
                  
 @ACCOUNT_IDX INT,                  
 @LIMIT_SWORD INT      
             
AS                    
                  
 SET NOCOUNT ON;                  
 SET LOCK_TIMEOUT 10000;                  
                   
 DECLARE @RETURN INT;      
 SET @RETURN = 0;      
                    
  UPDATE dbo.userOakBarrelDB WITH (XLOCK, ROWLOCK)                   
     SET limitSword=@LIMIT_SWORD      
   WHERE AccountIDX = @ACCOUNT_IDX  
    
 SELECT @LIMIT_SWORD;
GO


-- ----------------------------
-- procedure structure for web_class_define_class_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_class_define_class_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_class_define_class_list]
GO

CREATE PROCEDURE [dbo].[web_class_define_class_list]
AS
	SELECT idx, classHanName, classEngName FROM define_class WITH(NOLOCK)
GO


-- ----------------------------
-- procedure structure for manage_userinfo_get_presenttype
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_get_presenttype]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_get_presenttype]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_get_presenttype]
(
	@accountIDX int
)
AS
	SELECT	DISTINCT(presentType) FROM userPresentDB WHERE receiveIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for z_nouse_110414_game_guild_battle_record_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_110414_game_guild_battle_record_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_110414_game_guild_battle_record_save]
GO

CREATE PROCEDURE [dbo].[z_nouse_110414_game_guild_battle_record_save]
(
	@guildIDX varchar(10)
,	@battleType varchar(2)
,	@win varchar(4)
,	@lose varchar(4)
,	@killed varchar(4)
,	@death varchar(4)
)
AS

	DECLARE @sql varchar(500)

	SET @sql = 'UPDATE userRecordGuildDB SET '
	SET @sql = @sql + 'type' + @battleType + '_win		= ' + @win + ', '
	SET @sql = @sql + 'type' + @battleType + '_lose		= ' + @lose + ', '
	SET @sql = @sql + 'type' + @battleType + '_kill		= ' + @killed + ', '
	SET @sql = @sql + 'type' + @battleType + '_death	= ' + @death + ' '
	SET @sql = @sql + 'WHERE guildIDX = ' + @guildIDX

	EXECUTE (@sql)
GO


-- ----------------------------
-- procedure structure for game_present_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_present_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_present_count]
GO

CREATE PROCEDURE [dbo].[game_present_count]
(
	@nickName varchar(20)
)
AS

SET NOCOUNT ON

DECLARE @accountIDX int
DECLARE @userID varchar(40)
DECLARE @cnt int

SET @accountIDX = (
	SELECT accountIDX
	  FROM dbo.userMemberDB WITH(NOLOCK)
	 WHERE nickName=@nickName
)
SET @userID = (
	SELECT userID
	  FROM dbo.userMemberDB WITH(NOLOCK)
	 WHERE nickName=@nickName
)
SET @cnt = (
	SELECT COUNT(*)
	  FROM dbo.userPresentDB WITH(NOLOCK)
	 WHERE receiveIDX=@accountIDX
	   AND flag NOT IN (2)
)

IF (@accountIDX is null)
BEGIN
	SELECT accountIDX, accountIDX AS 'cnt', userID
	  FROM dbo.userMemberDB WITH(NOLOCK)
	 WHERE nickName=@nickName
END
ELSE
BEGIN
	SELECT @accountIDX AS 'accountIDX', @cnt AS 'cnt', @userID AS 'userID'
END
GO


-- ----------------------------
-- procedure structure for manage_cash_log_list_sch_paging
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_cash_log_list_sch_paging]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_cash_log_list_sch_paging]
GO

CREATE PROCEDURE [dbo].[manage_cash_log_list_sch_paging]
(
	@pageSize varchar(8)
,	@notInPage varchar(8)
,	@schType varchar(12)
,	@schString varchar(20)
)
As
	Declare @strSQL varchar(500)

	Set @strSQL = ''
	Set @strSQL = @strSQL + 'Select Top '+@pageSize+' b.accountIDX, b.userID, b.nickName, a.userIP, a.amount, a.note, a.regDate From LosaGame_log.DBO.log_cash a join userMemberDB b on a.accountIDX=b.accountIDX '
	Set @strSQL = @strSQL + 'Where a.' + @schType + '=''' +@schString+''' and a.idx not in (Select Top ' + @notInPage + ' idx From LosaGame_log.DBO.log_cash where ' + @schType + '=''' + @schString + ''' order by idx desc) '
	Set @strSQL = @strSQL + 'order by a.idx desc'

	Exec(@strSQL)
GO


-- ----------------------------
-- procedure structure for web_agrend_parent_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_agrend_parent_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_agrend_parent_count]
GO

CREATE PROCEDURE [dbo].[web_agrend_parent_count]
(
	@accountIDX int
)
AS
	SELECT count(*) FROM userParentDB WITH(NOLOCK) WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_member_add_naver
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_add_naver]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_add_naver]
GO

CREATE PROCEDURE [dbo].[web_member_add_naver]
(
	@userID varchar(12)
,	@nickName varchar(12)
,	@EMail varchar(50)
,	@mailling int
,	@userType int
,	@joinType int
,	@gender int
,	@userIP varchar(15)
,	@naverIDX int
,	@naverID varchar(20)
,	@cpType int
,	@userName varchar(10)
,	@userBirthday varchar(6)
,	@userEnCode varchar(64)
,	@userNumber int
,	@returnValue int
,	@returnVal int output
)
As

	SET XACT_ABORT ON

	BEGIN TRAN

	DECLARE @accountIDX int

	-- 게임 관련 기본 데이터 저장
	INSERT INTO userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, eventType, cpType, limitType, limitDate, regDate)
	VALUES (@userID, @nickName, '', @EMail, @mailling, @userType, @joinType, 0, @cpType, 0, '1999-01-01', getdate())

	SET @accountIDX = (SELECT accountIDX FROM userMemberDB WHERE userID=@userID)

	INSERT INTO userCashDB (accountIDX, amtCash, amtBonus, amtLimit, amtSum, chgDate, regDate)
	VALUES (@accountIDX, 1000, 1000, 99900, 0, getdate(), getdate())

	INSERT INTO userInfoDB (accountIDX, visit_count, rec_index, rec_inc, rec_dec, checkDate, cnnDate, userIP, regDate)
	VALUES (@accountIDX, 0, 0, 0, 0, getdate()-1, '2000-01-01', @userIP, getdate())

	INSERT INTO userGameDB (accountIDX, userState, gameMoney, playTime, conn_count, userLevel, userEXP, rencpoint, renspoint, regionType, refillData, connDate,regDate)
	VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '2000-01-01', getdate())

	INSERT INTO userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, type3_win, type3_lose, type3_kill, type3_death, type4_win, type4_lose, type4_kill, type4_death, regDate)
	VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, getdate())

	INSERT INTO userLoginDB (accountIDX, encodeKey, gameServerID, connDate) VALUES (@accountIDX, '111111111111111', 0, getdate())


	-- 채널링 데이터
	INSERT INTO userCooperationDB (accountIDX, userID, cpIDX, cpID, cpType, note, regDate)
	VALUES (@accountIDX, @userID, 0, @naverID, @cpType, @naverIDX, getdate())

	INSERT INTO userNameDB (accountIDX, userName, userBirthday, userEnCode, userNumber, userGender, returnValue, userIP, regDate)
	VALUES (@accountIDX, @userName, @userBirthday, @userEnCode, @userNumber, @gender, @returnValue, @userIP, getdate())


	SET @returnVal = @@error

	if (@@error = 0)
	    Commit Tran
	else
	    Rollback Tran

	--INSERT INTO LINKED_CONNECTION_WEB.LosaWeb.DBO.web_user_avatar (accountIDX,NGR010,NFS020,NHD030,PHD040,NEY050,PEY060,NMT070,PMT080,NEB090,PEB100,NHR110,PHR120,NBS130,NBD140,PBD150,NUD160,PUD170,NFT180,PFT190,NPT200,PPT210,NST220,PST230,NJK240,PJK250,PAS260,gender,regDate)
	--VALUES (@accountIDX, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, @gender, getdate())

	--INSERT INTO LINKED_CONNECTION_WEB.LosaWeb.DBO.web_user_minihome (accountIDX, today_visit_count, total_visit_count, write_board_count, write_comt_count, regDate)
	--VALUES (@accountIDX,0, 0, 0, 0, getdate())
GO


-- ----------------------------
-- procedure structure for game_oakbarrel_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_oakbarrel_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_oakbarrel_get_data]
GO

CREATE PROCEDURE [dbo].[game_oakbarrel_get_data]          
          
 @ACCOUNT_IDX INT          
           
AS            
          
 SET NOCOUNT ON;          
 SET LOCK_TIMEOUT 10000;          
           
 SELECT step, Slot1, Slot2, Slot3, Slot4, Slot5, Slot6, Slot7, Slot8, Slot9, Slot10, Slot11, Slot12, updateTime, limitSword  
   FROM dbo.userOakBarrelDB WITH (NOLOCK)          
  WHERE AccountIDX = @ACCOUNT_IDX
GO


-- ----------------------------
-- procedure structure for web_character_movie_get_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_character_movie_get_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_character_movie_get_list]
GO

CREATE PROCEDURE [dbo].[web_character_movie_get_list]
AS
	SELECT idx, classHanName FROM define_class WITH(NOLOCK) ORDER BY movieorderby DESC
GO


-- ----------------------------
-- procedure structure for manage_userinfo_get_present_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_get_present_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_get_present_data]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_get_present_data]
(
	@accountIDX int
)
AS
	SELECT	idx, presentType, value1, value2, limitDate, regDate FROM userPresentDB WHERE receiveIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for z_nouse_110414_game_friend_list_asc
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_110414_game_friend_list_asc]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_110414_game_friend_list_asc]
GO

CREATE PROCEDURE [dbo].[z_nouse_110414_game_friend_list_asc]
(
	@idx varchar(10)
,	@accountIDX varchar(12)
,	@topNo varchar(10)
)
AS

	DECLARE @strSQL varchar(500)
	SET @strSQL = 'Select Top ' + @topNo + ' a.idx, b.nickName, a.regDate from userFriendDB a with(nolock) join userMemberDB b with(nolock) on a.friendAccIDX = b.accountIDX '
	SET @strSQL = @strSQL + ' where a.userAccIDX = ''' + @accountIDX + ''' and a.idx > ' + @idx + ' and a.flag=1 order by a.idx asc'
	EXEC (@strSQL)
GO


-- ----------------------------
-- procedure structure for game_present_add_tool
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_present_add_tool]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_present_add_tool]
GO

CREATE PROCEDURE [dbo].[game_present_add_tool]
(
	@sendNick varchar(20)
,	@receiveNick varchar(20)
,	@persentType smallint
,	@value1 int
,	@value2 int
,	@value3 int
,	@value4 int
,	@msgType smallint
,	@limitDate datetime
,	@flag smallint
)
AS

SET NOCOUNT ON

DECLARE @sendIDX int, @receiveIDX int

SET @sendIDX = (
	SELECT accountIDX
	  FROM dbo.userMemberDB WITH(NOLOCK)
	 WHERE nickName=@sendNick
)

SET @receiveIDX = (
	SELECT accountIDX
	  FROM dbo.userMemberDB WITH(NOLOCK)
	 WHERE nickName=@receiveNick
)

SELECT @sendIDX = ISNULL(@sendIDX, 1105) 

INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate)
VALUES (@sendIDX, @receiveIDX, @persentType, @value1, @value2, @value3, @value4, @msgType, @flag, @limitDate, GETDATE())
	
SELECT @receiveIDX AS recvIndex
GO


-- ----------------------------
-- procedure structure for manage_cash_log_list_sch_count_temp
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_cash_log_list_sch_count_temp]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_cash_log_list_sch_count_temp]
GO

CREATE PROCEDURE [dbo].[manage_cash_log_list_sch_count_temp]
(
	@schType varchar(12)
,	@schString varchar(15)
)
As
	Declare @strSQL varchar(200)
	Set @strSQL = 'select count(*) from LosaGame_log.DBO.z_backup_101007_log_cash where ' + @schType + ' = ''' + @schString + ''''
	EXEC (@strSQL)
GO


-- ----------------------------
-- procedure structure for web_agrend_get_dateinfo
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_agrend_get_dateinfo]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_agrend_get_dateinfo]
GO

CREATE PROCEDURE [dbo].[web_agrend_get_dateinfo]
(
	@accountIDX int
)
AS
	SELECT a.userBirthday, a.userNumber, b.agreeEDate FROM userNameDB a WITH(NOLOCK) LEFT JOIN userParentDB b WITH(NOLOCK) ON a.accountIDX=b.accountIDX WHERE a.accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_member_add_mgame
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_add_mgame]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_add_mgame]
GO

CREATE PROCEDURE [dbo].[web_member_add_mgame]
(
	@userID varchar(12)
,	@nickName varchar(12)
,	@EMail varchar(50)
,	@mailling int
,	@userType int
,	@joinType int
,	@gender int
,	@userIP varchar(15)
,	@mgameIDX int
,	@mgameID varchar(20)
,	@cpType int
,	@userName varchar(10)
,	@userBirthday varchar(6)
,	@userNumber int
,	@returnValue int
,	@zipcode varchar(8)
,	@address varchar(150)
,	@mobile varchar(16)
,	@returnVal int output
)
As

	SET XACT_ABORT ON

	BEGIN TRAN

	DECLARE @accountIDX int

	-- 게임 관련 기본 데이터 저장
	INSERT INTO userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, eventType, cpType, limitType, limitDate, regDate)
	VALUES (@userID, @nickName, '', @EMail, @mailling, @userType, @joinType, 0, @cpType, 0, '1999-01-01', getdate())

	SET @accountIDX = (SELECT accountIDX FROM userMemberDB WHERE userID=@userID)

	INSERT INTO userCashDB (accountIDX, amtCash, amtBonus, amtLimit, amtSum, chgDate, regDate)
	VALUES (@accountIDX, 1000, 1000, 99900, 0, getdate(), getdate())

	INSERT INTO userInfoDB (accountIDX, visit_count, rec_index, rec_inc, rec_dec, checkDate, cnnDate, userIP, regDate)
	VALUES (@accountIDX, 0, 0, 0, 0, getdate()-1, '2000-01-01', @userIP, getdate())

	INSERT INTO userGameDB (accountIDX, userState, gameMoney, playTime, conn_count, userLevel, userEXP, rencpoint, renspoint, regionType, refillData, connDate,regDate)
	VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '2000-01-01', getdate())

	INSERT INTO userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, type3_win, type3_lose, type3_kill, type3_death, type4_win, type4_lose, type4_kill, type4_death, regDate)
	VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, getdate())

	INSERT INTO userLoginDB (accountIDX, encodeKey, gameServerID, connDate) VALUES (@accountIDX, '111111111111111', 0, getdate())


	-- 채널링 데이터
	INSERT INTO userCooperationDB (accountIDX, userID, cpIDX, cpID, cpType, regDate)
	VALUES (@accountIDX, @userID, @mgameIDX, @mgameID, @cpType, getdate())

	INSERT INTO userNameDB (accountIDX, userName, userBirthday, userEnCode, userNumber, userGender, returnValue, userIP, regDate)
	VALUES (@accountIDX, @userName, @userBirthday, 'B82D00B33E1CB0084A8D43B52E13D579C6B2DE00', @userNumber, @gender, @returnValue, @userIP, getdate())

	INSERT INTO userInfoBDB (accountIDX, tel, mobile, zipcode, address1, address2, regDate)
	VALUES (@accountIDX, '', @mobile, @zipcode, @address, '', getdate())

	INSERT INTO LosaGame_log.DBO.log_mgame_cash_event (accountIDX, eventType, cash, flag, regDate)
	VALUES (@accountIDX, 1, 0, '0', getdate())


	SET @returnVal = @@error

	if (@@error = 0)
	    Commit Tran
	else
	    Rollback Tran

	--INSERT INTO LINKED_CONNECTION_WEB.LosaWeb.DBO.web_user_avatar (accountIDX,NGR010,NFS020,NHD030,PHD040,NEY050,PEY060,NMT070,PMT080,NEB090,PEB100,NHR110,PHR120,NBS130,NBD140,PBD150,NUD160,PUD170,NFT180,PFT190,NPT200,PPT210,NST220,PST230,NJK240,PJK250,PAS260,gender,regDate)
	--VALUES (@accountIDX, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, @gender, getdate())

	--INSERT INTO LINKED_CONNECTION_WEB.LosaWeb.DBO.web_user_minihome (accountIDX, today_visit_count, total_visit_count, write_board_count, write_comt_count, regDate)
	--VALUES (@accountIDX,0, 0, 0, 0, getdate())
GO


-- ----------------------------
-- procedure structure for game_oakbarrel_data_update
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_oakbarrel_data_update]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_oakbarrel_data_update]
GO

CREATE PROCEDURE [dbo].[game_oakbarrel_data_update]              
              
 @ACCOUNT_IDX INT,              
 @STEP			TINYINT,              
 @Slot1		 TINYINT,               
 @Slot2      TINYINT,               
 @Slot3      TINYINT,               
 @Slot4      TINYINT,               
 @Slot5      TINYINT,               
 @Slot6      TINYINT,               
 @Slot7      TINYINT,               
 @Slot8      TINYINT,               
 @Slot9      TINYINT,               
 @Slot10      TINYINT,               
 @Slot11      TINYINT,               
 @Slot12      TINYINT,  
 @LimitSword    INT             
AS                
              
 SET NOCOUNT ON;              
 SET LOCK_TIMEOUT 10000;              
               
 BEGIN TRAN              
  UPDATE dbo.userOakBarrelDB WITH (XLOCK, ROWLOCK)               
     SET step=@Step,               
      Slot1=@Slot1,               
      Slot2=@Slot2,               
      Slot3=@Slot3,               
      Slot4=@Slot4,               
      Slot5=@Slot5,               
      Slot6=@Slot6,               
      Slot7=@Slot7,               
      Slot8=@Slot8,               
      Slot9=@Slot9,              
      Slot10=@Slot10,               
      Slot11=@Slot11,               
      Slot12=@Slot12,  
      LimitSword=@LimitSword               
   WHERE AccountIDX = @ACCOUNT_IDX;              
          
   IF(@@ROWCOUNT=0)              
   BEGIN              
    INSERT dbo.userOakBarrelDB WITH(XLOCK, ROWLOCK) ( AccountIDX, Step, Slot1, Slot2, Slot3, Slot4, Slot5, Slot6, Slot7, Slot8, Slot9, Slot10, Slot11, Slot12, LimitSword, updateTime, regDate )                
     VALUES ( @ACCOUNT_IDX, @STEP, @Slot1, @Slot2, @Slot3, @Slot4, @Slot5, @Slot6, @Slot7, @Slot8, @Slot9, @Slot10, @Slot11, @Slot12, @LimitSword, getDate(), getDate() );              
                  
   END               
 COMMIT TRAN         
         
         
 SELECT Step, Slot1, Slot2, Slot3, Slot4, Slot5, Slot6, Slot7, Slot8, Slot9, Slot10, Slot11, Slot12, updateTime, limitSword          
  FROM dbo.userOakBarrelDB WITH(XLOCK, ROWLOCK)           
 WHERE AccountIDX= @ACCOUNT_IDX;
GO


-- ----------------------------
-- procedure structure for web_character_movie_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_character_movie_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_character_movie_count]
GO

CREATE PROCEDURE [dbo].[web_character_movie_count]
AS
	SELECT count(*) FROM define_class WITH(NOLOCK)
GO


-- ----------------------------
-- procedure structure for manage_userinfo_get_password
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_get_password]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_get_password]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_get_password]
(
	@accountIDX int
)
AS
	SELECT userID, userPWD FROM userMemberDB WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for z_nouse_110414_game_friend_join_list
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[z_nouse_110414_game_friend_join_list]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[z_nouse_110414_game_friend_join_list]
GO

CREATE PROCEDURE [dbo].[z_nouse_110414_game_friend_join_list]
(
	@idx varchar(10)
,	@accountIDX varchar(12)
,	@topNo varchar(10)
)
AS

	DECLARE @strSQL varchar(500)
	SET @strSQL = 'Select Top ' + @topNo + ' a.idx, a.friendAccIDX, b.nickName from userFriendDB a join userMemberDB b on a.friendAccIDX = b.accountIDX '
	SET @strSQL = @strSQL + ' where a.userAccIDX = ''' + @accountIDX + ''' and a.idx < ' + @idx + ' and flag=0 order by a.idx desc'
	EXEC (@strSQL)
GO


-- ----------------------------
-- procedure structure for game_present_add_idx
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_present_add_idx]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_present_add_idx]
GO

CREATE PROCEDURE [dbo].[game_present_add_idx]
(
	@sendIDX int
,	@receiveIDX int
,	@persentType smallint
,	@value1 int
,	@value2 int
,	@value3 int
,	@value4 int
,	@msgType smallint
,	@limitDate datetime
,	@flag smallint
,	@TranIDX	BIGINT	
)
AS
	-- 웹상점에서 넘어온 선물은 TranIDX가 존재하고 게임 상점은 0
	INSERT INTO userPresentDB (TranIDX, sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate)
	VALUES (@TranIDX, @sendIDX, @receiveIDX, @persentType, @value1, @value2, @value3, @value4, @msgType, @flag, @limitDate, getdate())
GO


-- ----------------------------
-- procedure structure for manage_cash_log_list_sch_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_cash_log_list_sch_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_cash_log_list_sch_count]
GO

CREATE PROCEDURE [dbo].[manage_cash_log_list_sch_count]
(
	@schType varchar(12)
,	@schString varchar(15)
)
As
	Declare @strSQL varchar(200)
	Set @strSQL = 'select count(*) from LosaGame_log.DBO.log_cash where ' + @schType + ' = ''' + @schString + ''''
	EXEC (@strSQL)
GO


-- ----------------------------
-- procedure structure for web_agreend_youth
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_agreend_youth]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_agreend_youth]
GO

CREATE PROCEDURE [dbo].[web_agreend_youth]
(
	@accountIDX int
)
AS

	BEGIN TRAN

	INSERT INTO LosaGame_log.DBO.backup_agrend_parent (accountIDX, parentName, parentBirth, parentJumin1, parentJumin2, parentEncode, parentNumber, email, agreeSDate, agreeEDate, agreeType, logIDX, regDate, initDate)
	SELECT accountIDX, parentName, parentBirth, parentJumin1, parentJumin2, parentEncode, parentNumber, email, agreeSDate, agreeEDate, agreeType, logIDX, regDate, getdate() FROM userParentDB WHERE accountIDX=@accountIDX

	UPDATE userParentDB SET agreeSDate=NULL, agreeEDate=NULL, agreeType=0, logIDX=0 WHERE accountIDX=@accountIDX
	UPDATE userMemberDB SET joinType=5 WHERE accountIDX=@accountIDX

	COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_factiontype_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_factiontype_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_factiontype_save]
GO

CREATE PROCEDURE [dbo].[game_factiontype_save]
(
	@accountIDX int
,	@factionType int
)
AS

SET NOCOUNT ON

UPDATE dbo.userGameDB
SET regionType=@factionType
WHERE accountIDX=@accountIDX
GO


-- ----------------------------
-- procedure structure for web_member_add_daum
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_add_daum]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_add_daum]
GO

CREATE PROCEDURE [dbo].[web_member_add_daum]
(
	@userID varchar(12)
,	@nickName varchar(12)
,	@EMail varchar(50)
,	@mailling int
,	@userType int
,	@joinType int
,	@gender int
,	@userIP varchar(15)
,	@daumUniqID varchar(20)
,	@daumID varchar(20)
,	@cpType int
,	@userName varchar(10)
,	@userBirthday char(6)
,	@userJumin1 char(12)
,	@userJumin2 char(14)
,	@userEnCode varchar(64)
,	@userNumber tinyint
,	@returnValue int
,	@realType int
,	@tel varchar(16)
,	@mobile varchar(16)
,	@zipcode varchar(8)
,	@address1 varchar(150)
,	@address2 varchar(50)
,	@returnVal int output
)
AS

	SET XACT_ABORT ON

	BEGIN TRAN

	DECLARE @accountIDX int

	-- 게임 관련 기본 데이터 저장
	INSERT INTO userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, eventType, cpType, limitType, limitDate, regDate)
	VALUES (@userID, @nickName, '', @EMail, @mailling, @userType, @joinType, 0, @cpType, 0, '1999-01-01', getdate())

	SET @accountIDX = (SELECT accountIDX FROM userMemberDB WHERE userID=@userID)

	INSERT INTO userCashDB (accountIDX, amtCash, amtBonus, amtLimit, amtSum, chgDate, regDate)
	VALUES (@accountIDX, 1000, 1000, 99900, 0, getdate(), getdate())

	INSERT INTO userInfoDB (accountIDX, visit_count, rec_index, rec_inc, rec_dec, checkDate, cnnDate, userIP, regDate)
	VALUES (@accountIDX, 0, 0, 0, 0, getdate()-1, '2000-01-01', @userIP, getdate())

	INSERT INTO userGameDB (accountIDX, userState, gameMoney, playTime, conn_count, userLevel, userEXP, rencpoint, renspoint, relateLevel, regionType, refillData, connDate, regDate)
	VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '2000-01-01', getdate())

	INSERT INTO userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, type3_win, type3_lose, type3_kill, type3_death, type4_win, type4_lose, type4_kill, type4_death, regDate)
	VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, getdate())

	INSERT INTO userLoginDB (accountIDX, encodeKey, gameServerID, connDate) VALUES (@accountIDX, '111111111111111', 0, getdate())


	-- 채널링 데이터
	INSERT INTO userCooperationDB (accountIDX, userID, cpIDX, cpID, cpType, note, regDate)
	VALUES (@accountIDX, @userID, '', @daumID, @cpType, @daumUniqID, getdate())

	If (@joinType >= 5)
	BEGIN
		INSERT INTO userNameDB (accountIDX, userName, userBirthday, userJumin1, userJumin2, userEnCode, userNumber, userGender, returnValue, userIP, realType, regDate)
		VALUES (@accountIDX, @userName, @userBirthday, @userJumin1, @userJumin2, @userEnCode, @userNumber, @gender, @returnValue, @userIP, @realType, getdate())
	END

	If (@joinType = 10)
	BEGIN
		INSERT INTO userInfoBDB (accountIDX, tel, mobile, zipcode, address1, address2, regDate)
		VALUES (@accountIDX, @tel, @mobile, @zipcode, @address1, @address2, getdate())
	END


	SET @returnVal = @@error

	if (@@error = 0)
	    Commit Tran
	else
	    Rollback Tran

	--INSERT INTO LINKED_CONNECTION_WEB.LosaWeb.DBO.web_user_avatar (accountIDX,NGR010,NFS020,NHD030,PHD040,NEY050,PEY060,NMT070,PMT080,NEB090,PEB100,NHR110,PHR120,NBS130,NBD140,PBD150,NUD160,PUD170,NFT180,PFT190,NPT200,PPT210,NST220,PST230,NJK240,PJK250,PAS260,gender,regDate)
	--VALUES (@accountIDX, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, @gender, getdate())

	--INSERT INTO LINKED_CONNECTION_WEB.LosaWeb.DBO.web_user_minihome (accountIDX, today_visit_count, total_visit_count, write_board_count, write_comt_count, regDate)
	--VALUES (@accountIDX,0, 0, 0, 0, getdate())
GO


-- ----------------------------
-- procedure structure for game_mission_set_init
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_mission_set_init]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_mission_set_init]
GO

CREATE PROCEDURE [dbo].[game_mission_set_init]

	@ACCOUNT_IDX		INT,
	@MISSION_TYPE		TINYINT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	DECLARE @nReturn			INT	
	SET @nReturn=0			-- True

	BEGIN TRAN

		UPDATE dbo.userMissionDB WITH (XLOCK, ROWLOCK) SET MissionStatus=4 
		WHERE AccountIDX=@ACCOUNT_IDX and MissionType=@MISSION_TYPE

		IF (@@ERROR<>0)			
		BEGIN	
			ROLLBACK TRAN
			SELECT -1
			RETURN;
		END

	COMMIT TRAN

	SELECT @nReturn
	RETURN;
GO


-- ----------------------------
-- procedure structure for web_channeling_play_get_member_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_channeling_play_get_member_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_channeling_play_get_member_data]
GO

CREATE PROCEDURE [dbo].[web_channeling_play_get_member_data]
(
	@userID varchar(12)
)
AS
	SELECT accountIDX, userID, nickName, cpType, limitType, limitDate FROM userMemberDB WITH(NOLOCK) WHERE userID=@userID
GO


-- ----------------------------
-- procedure structure for manage_userinfo_get_parent_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_get_parent_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_get_parent_info]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_get_parent_info]
(
	@accountIDX int
)
AS
	SELECT parentName, parentJumin1, parentJumin2, email, agreeSDate, agreeEDate, agreeType 
	FROM userParentDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_present_add_admin
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_present_add_admin]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_present_add_admin]
GO

CREATE PROCEDURE [dbo].[game_present_add_admin]    
(              
  @receiveIDX int    
, @presentType smallint              
, @value1 int              
, @value2 int              
            
)              
AS              
              
SET NOCOUNT ON              
              
         
DECLARE @sendIDX INT          
   SET @sendIDX = (              
 SELECT accountIDX              
   FROM dbo.userMemberDB WITH(NOLOCK)              
  WHERE nickName='개발자K'              
)              
          
         
 BEGIN        
  IF @receiveIDX = 0         
  RETURN -1        
 END         
         
         
INSERT INTO dbo.userPresentDB (              
 sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate              
)              
VALUES (              
 @sendIDX, @receiveIDX, @presentType, @value1, @value2, 0, 0, 3, 1, GetDate()+28, GetDate()             
)
GO


-- ----------------------------
-- procedure structure for manage_cash_log_list_paging
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_cash_log_list_paging]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_cash_log_list_paging]
GO

CREATE PROCEDURE [dbo].[manage_cash_log_list_paging]
(
	@pageSize varchar(8)
,	@notInPage varchar(8)
)
As
	Declare @strSQL varchar(500)

	Set @strSQL = ''
	Set @strSQL = @strSQL + 'Select Top '+@pageSize+' b.accountIDX, b.userID, b.nickname, a.userIP, a.amount, a.note, a.regDate From LosaGame_log.DBO.log_cash a join userMemberDB b on a.accountIDX = b.accountIDX '
	Set @strSQL = @strSQL + 'Where  a.idx not in (Select Top ' + @notInPage + ' idx From LosaGame_log.DBO.log_cash order by idx desc) '
	Set @strSQL = @strSQL + 'order by a.idx desc'

	Exec(@strSQL)
GO


-- ----------------------------
-- procedure structure for web_agreend_adult
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_agreend_adult]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_agreend_adult]
GO

CREATE PROCEDURE [dbo].[web_agreend_adult]
(
	@accountIDX int
)
AS

BEGIN TRAN

INSERT INTO LosaGame_log.DBO.backup_agrend_parent (
	accountIDX, parentName, parentBirth, parentJumin1, parentJumin2, parentEncode,
	parentNumber, email, agreeSDate, agreeEDate, agreeType, logIDX, regDate, initDate
)
SELECT accountIDX, parentName, parentBirth, parentJumin1, parentJumin2, parentEncode,
	   parentNumber, email, agreeSDate, agreeEDate, agreeType, logIDX, regDate, GETDATE()
  FROM dbo.userParentDB WITH(NOLOCK)
 WHERE accountIDX=@accountIDX

INSERT INTO LosaGame_log.DBO.backup_agrend_infob (
	accountIDX, tel, mobile, zipcode, address1, address2, regDate, initDate
)
SELECT accountIDX, tel, mobile, zipcode, address1, address2, regDate, GETDATE()
  FROM dbo.userInfoBDB WITH(NOLOCK)
 WHERE accountIDX=@accountIDX

DELETE FROM dbo.userParentDB
 WHERE accountIDX=@accountIDX

DELETE FROM dbo.userInfoBDB
 WHERE accountIDX=@accountIDX

UPDATE dbo.userNameDB
   SET realType=0,
	   ipinCI=NULL,
	   ipinDI=NULL
 WHERE accountIDX=@accountIDX

UPDATE dbo.userMemberDB
   SET joinType=5
 WHERE accountIDX=@accountIDX

COMMIT TRAN
GO


-- ----------------------------
-- procedure structure for game_event_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_save]
GO

CREATE PROCEDURE [dbo].[game_event_save]
(
	@idx int
,	@value1 int
,	@value2 int
)
AS

	UPDATE userEventDB SET
		value1 = @value1
,		value2 = @value2
	WHERE idx = @idx
GO


-- ----------------------------
-- procedure structure for web_member_add_buddybuddy
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_add_buddybuddy]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_add_buddybuddy]
GO

CREATE PROCEDURE [dbo].[web_member_add_buddybuddy]
(
	@userID varchar(12)
,	@nickName varchar(12)
,	@EMail varchar(50)
,	@mailling int
,	@userType int
,	@joinType int
,	@gender int
,	@userIP varchar(15)
,	@buddyIDX int
,	@buddyID varchar(20)
,	@cpType int
,	@userName varchar(10)
,	@userBirthday varchar(6)
,	@userNumber int
,	@returnValue int
,	@note varchar(20)
,	@returnVal int output
)
As

	SET XACT_ABORT ON

	BEGIN TRAN

	DECLARE @accountIDX int

	-- 게임 관련 기본 데이터 저장
	INSERT INTO userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, eventType, cpType, limitType, limitDate, regDate)
	VALUES (@userID, @nickName, '', @EMail, @mailling, @userType, @joinType, 0, @cpType, 0, '1999-01-01', getdate())

	SET @accountIDX = (SELECT accountIDX FROM userMemberDB WHERE userID=@userID)

	INSERT INTO userCashDB (accountIDX, amtCash, amtBonus, amtLimit, amtSum, chgDate, regDate)
	VALUES (@accountIDX, 1000, 1000, 99900, 0, getdate(), getdate())

	INSERT INTO userInfoDB (accountIDX, visit_count, rec_index, rec_inc, rec_dec, checkDate, cnnDate, userIP, regDate)
	VALUES (@accountIDX, 0, 0, 0, 0, getdate()-1, '2000-01-01', @userIP, getdate())

	INSERT INTO userGameDB (accountIDX, userState, gameMoney, playTime, conn_count, userLevel, userEXP, rencpoint, renspoint, regionType, refillData, connDate,regDate)
	VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '2000-01-01', getdate())

	INSERT INTO userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, type3_win, type3_lose, type3_kill, type3_death, type4_win, type4_lose, type4_kill, type4_death, regDate)
	VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, getdate())

	INSERT INTO userLoginDB (accountIDX, encodeKey, gameServerID, connDate) VALUES (@accountIDX, '111111111111111', 0, getdate())


	-- 채널링 데이터
	INSERT INTO userCooperationDB (accountIDX, userID, cpIDX, cpID, cpType, note, regDate)
	VALUES (@accountIDX, @userID, @buddyIDX, @buddyID, @cpType, @note, getdate())

	INSERT INTO userNameDB (accountIDX, userName, userBirthday, userEnCode, userNumber, userGender, returnValue, userIP, regDate)
	VALUES (@accountIDX, @userName, @userBirthday, 'B82D00B33E1CB0084A8D43B52E13D579C6B2DE00', @userNumber, @gender, @returnValue, @userIP, getdate())

	SET @returnVal = @@error

	if (@@error = 0)
	    Commit Tran
	else
	    Rollback Tran

	--INSERT INTO LINKED_CONNECTION_WEB.LosaWeb.DBO.web_user_avatar (accountIDX,NGR010,NFS020,NHD030,PHD040,NEY050,PEY060,NMT070,PMT080,NEB090,PEB100,NHR110,PHR120,NBS130,NBD140,PBD150,NUD160,PUD170,NFT180,PFT190,NPT200,PPT210,NST220,PST230,NJK240,PJK250,PAS260,gender,regDate)
	--VALUES (@accountIDX, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, @gender, getdate())

	--INSERT INTO LINKED_CONNECTION_WEB.LosaWeb.DBO.web_user_minihome (accountIDX, today_visit_count, total_visit_count, write_board_count, write_comt_count, regDate)
	--VALUES (@accountIDX,0, 0, 0, 0, getdate())
GO


-- ----------------------------
-- procedure structure for game_mission_set_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_mission_set_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_mission_set_data]
GO

CREATE PROCEDURE [dbo].[game_mission_set_data]

	@ACCOUNT_IDX		INT,
	@MISSION_TYPE		TINYINT,
	@MISSION_CODE		INT,
	@MISSION_VALUE		INT,
	@MISSION_STATUS		TINYINT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000

	DECLARE @nReturn			INT	
	SET @nReturn=0			-- True

	BEGIN TRAN

		--	MERGE dbo.userMissionDB as TARGET
		--	USING (SELECT @ACCOUNT_IDX, @MISSION_TYPE, @MISSION_CODE, @MISSION_VALUE, @MISSION_STATUS) AS SOURCE (AccountIDX, MissionType, MissionCode, MissionValue, MissionStatus)
		--	ON (TARGET.AccountIDX=SOURCE.AccountIDX and TARGET.MissionType=SOURCE.MissionType and TARGET.MissionCode=SOURCE.MissionCode)
		--	WHEN MATCHED THEN
		--		UPDATE SET MissionValue=SOURCE.MissionValue, MissionStatus=SOURCE.MissionStatus
		--	WHEN NOT MATCHED THEN
		--		INSERT (AccountIDX, MissionType, MissionCode, MissionValue, MissionStatus) VALUES (@ACCOUNT_IDX, SOURCE.MissionType, SOURCE.MissionCode, SOURCE.MissionValue, SOURCE.MissionStatus);

		UPDATE dbo.userMissionDB WITH (XLOCK, ROWLOCK) SET MissionValue=@MISSION_VALUE, MissionStatus=@MISSION_STATUS
		WHERE AccountIDX=@ACCOUNT_IDX and MissionType=@MISSION_TYPE and MissionCode=@MISSION_CODE

		IF (@@ROWCOUNT=0)
		BEGIN	

			INSERT dbo.userMissionDB WITH (XLOCK, ROWLOCK) (AccountIDX, MissionType, MissionCode, MissionValue, MissionStatus)
			VALUES (@ACCOUNT_IDX, @MISSION_TYPE, @MISSION_CODE, @MISSION_VALUE, @MISSION_STATUS)
			IF (@@ROWCOUNT=0) or (@@ERROR<>0)
			BEGIN
				ROLLBACK TRAN				
				SELECT -1
				RETURN;
			END
		END

	COMMIT TRAN

	SELECT @nReturn
	RETURN;
GO


-- ----------------------------
-- procedure structure for web_channeling_member_get_userID
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_channeling_member_get_userID]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_channeling_member_get_userID]
GO

CREATE PROCEDURE [dbo].[web_channeling_member_get_userID]
(
	@cpID varchar(20)
,	@cpType int
)
AS
	SELECT userID FROM userCooperationDB WITH(NOLOCK) WHERE cpID=@cpID and cpType=@cpType
GO


-- ----------------------------
-- procedure structure for manage_userinfo_get_parent_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_get_parent_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_get_parent_data]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_get_parent_data]
(
	@accountIDX int
)
AS
	SELECT a.parentName, a.parentJumin1, a.parentJumin2, a.email, a.agreeSDate, a.agreeEDate, a.agreeType, a.regDate as 'parentRegDate', b.email as 'sendEmail', b.permitDate, b.regDate as 'sendRegDate' 
	FROM userParentDB a LEFT JOIN Losagame_log.DBO.log_agree b ON a.logIDX=b.idx WHERE a.accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for game_present_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_present_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_present_add]
GO

CREATE PROCEDURE [dbo].[game_present_add]
(
	@sendNick varchar(20)
,	@receiveNick varchar(20)
,	@persentType smallint
,	@value1 int
,	@value2 int
,	@value3 int
,	@value4 int
,	@msgType smallint
,	@limitDate datetime
,	@flag smallint
)
AS
	DECLARE @sendIDX int, @receiveIDX int
	SET @sendIDX = (SELECT accountIDX FROM userMemberDB WHERE nickName=@sendNick)
	SET @receiveIDX = (SELECT accountIDX FROM userMemberDB WHERE nickName=@receiveNick)

	SELECT @sendIDX = ISNULL(@sendIDX, 1105) 
	
	INSERT INTO userPresentDB (sendIDX, receiveIDX, presentType, value1, value2, value3, value4, msgType, flag, limitDate, regDate)
	VALUES (@sendIDX, @receiveIDX, @persentType, @value1, @value2, @value3, @value4, @msgType, @flag, @limitDate, getdate())
GO


-- ----------------------------
-- procedure structure for USP_WEB_Member_Info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[USP_WEB_Member_Info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[USP_WEB_Member_Info]
GO

CREATE PROCEDURE [dbo].[USP_WEB_Member_Info]
	-- Add the parameters for the stored procedure here
	@intAccountIdx		int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED; 

    -- Insert statements for procedure here

	Select * From (
		Select Top 1 * From userMemberDB with (noLock)
		Where accountIDX = @intAccountIdx
	) As M 
	Left Outer Join userNameDB As N with (noLock)
	ON M.accountIDX = N.accountIDX


END
GO


-- ----------------------------
-- procedure structure for game_event_PirateRoulette_present_save
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_PirateRoulette_present_save]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_PirateRoulette_present_save]
GO

CREATE PROCEDURE [dbo].[game_event_PirateRoulette_present_save]
(
	@accountIDX int
,	@Reward1 tinyint
,	@reward2 tinyint
,	@reward3 tinyint
,	@reward4 tinyint
,	@reward5 tinyint
,	@reward6 tinyint
,	@reward7 tinyint
,	@reward8 tinyint
,	@reward9 tinyint
,	@reward10 tinyint
)
AS

SET NOCOUNT ON

UPDATE dbo.userEventPirateRoulette_Present
   SET reward1 = @reward1, reward2 = @reward2, reward3 = @reward3, reward4 = @reward4, reward5 = @reward5
	 , reward6 = @reward6, reward7 = @reward7, reward8 = @reward8, reward9 = @reward9, reward10 = @reward10
--     , reward11 = @reward11, reward12 = @reward12, reward13 = @reward13, reward14 = @reward14, reward15 = @reward15
WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_member_add
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_member_add]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_member_add]
GO

CREATE PROCEDURE [dbo].[web_member_add]
(
	@userID varchar(12)
,	@nickName varchar(12)
,	@userPWD varchar(24)
,	@EMail varchar(50)
,	@mailling int
,	@userType int
,	@joinType int
,	@gender int
,	@userIP varchar(15)
,	@returnVal int output
,	@trackingcode int = 0
,	@makeType tinyint = 0
)
As

	SET XACT_ABORT ON

	BEGIN TRAN

	DECLARE @accountIDX int

	-- 게임 관련 기본 데이터 저장
	INSERT INTO userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, limitType, limitDate, trackingcode, regDate, makeType)
	VALUES (@userID, @nickName, @userPWD, @EMail, @mailling, @userType, @joinType, 0, '1999-01-01', @trackingcode, getdate(), @makeType)

	SET @accountIDX = (SELECT accountIDX FROM userMemberDB with(nolock) WHERE userID=@userID)

	INSERT INTO userCashDB (accountIDX, amtCash, amtBonus, amtLimit, amtSum, chgDate, regDate)
	VALUES (@accountIDX, 1000, 1000, 99900, 0, getdate(), getdate())

	INSERT INTO userInfoDB (accountIDX, visit_count, rec_index, rec_inc, rec_dec, checkDate, cnnDate, userIP, regDate)
	VALUES (@accountIDX, 0, 0, 0, 0, getdate()-1, '2000-01-01', @userIP, getdate())

	INSERT INTO userGameDB (accountIDX, userState, gameMoney, playTime, conn_count, userLevel, userEXP, rencpoint, renspoint, relateLevel, regionType, refillData, connDate,regDate)
	VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '2000-01-01', getdate())

	-- userRecordBattleDB 쿼리 다시 만들것. 잊어버릴까봐 임시로 넣어 놓음.
	INSERT INTO userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, type3_win, type3_lose, type3_kill, type3_death, type4_win, type4_lose, type4_kill, type4_death, regDate)
	VALUES (@accountIDX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, getdate())

	INSERT INTO userLoginDB (accountIDX, encodeKey, gameServerID, connDate) VALUES (@accountIDX, '111111111111111', 0, getdate())

	SET @returnVal = @@error

	if (@@error = 0)
	    Commit Tran
	else
	    Rollback Tran

	--INSERT INTO LINKED_CONNECTION_WEB.LosaWeb.DBO.web_user_avatar (accountIDX,NGR010,NFS020,NHD030,PHD040,NEY050,PEY060,NMT070,PMT080,NEB090,PEB100,NHR110,PHR120,NBS130,NBD140,PBD150,NUD160,PUD170,NFT180,PFT190,NPT200,PPT210,NST220,PST230,NJK240,PJK250,PAS260,gender,regDate)
	--VALUES (@accountIDX, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, @gender, getdate())

	--INSERT INTO LINKED_CONNECTION_WEB.LosaWeb.DBO.web_user_minihome (accountIDX, today_visit_count, total_visit_count, write_board_count, write_comt_count, regDate)
	--VALUES (@accountIDX,0, 0, 0, 0, getdate())
GO


-- ----------------------------
-- procedure structure for game_mission_get_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_mission_get_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_mission_get_data]
GO

CREATE PROCEDURE [dbo].[game_mission_get_data]

	@ACCOUNT_IDX		INT

AS

	SET NOCOUNT ON
	SET LOCK_TIMEOUT 10000
		
	SELECT MissionType, MissionCode, MissionValue, MissionStatus FROM dbo.userMissionDB WITH (READUNCOMMITTED)
	WHERE AccountIDX=@ACCOUNT_IDX and MissionStatus<4

	IF (@@ERROR<>0)
	BEGIN	
		SELECT -1
		RETURN;
	END	

	RETURN;
GO


-- ----------------------------
-- procedure structure for web_channeling_member_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_channeling_member_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_channeling_member_count]
GO

CREATE PROCEDURE [dbo].[web_channeling_member_count]
(
	@cpID varchar(20)
,	@cpType int
)
AS
	SELECT count(*) FROM userCooperationDB WITH(NOLOCK) WHERE cpID=@cpID and cpType=@cpType
GO


-- ----------------------------
-- procedure structure for manage_userinfo_get_member_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_get_member_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_get_member_data]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_get_member_data]
(
	@searchType varchar(12)
,	@searchString varchar(20)
)
AS
	IF (@searchType = 'userID')
	BEGIN
		SELECT
			a.accountIDX, a.userID, a.nickName, a.email, a.mailling, a.userType,
			a.joinType, a.limitType, a.limitDate, a.regDate, a.cpType,
			b.gameMoney, b.userState, b.playTime, b.conn_count, b.userLevel,
			b.userEXP, b.userFishingLevel, b.userFishingEXP, b.rencpoint,
			b.renspoint, b.regionType, b.connDate,
			c.userName, c.userBirthday, c.userJumin1, c.userJumin2, c.userGender,
			d.tel, d.mobile, d.zipcode, d.address1, d.address2, e.userIP, f.cpID
		FROM userMemberDB a WITH(NOLOCK)
				JOIN userGameDB b WITH(NOLOCK) ON a.accountIDX=b.accountIDX
				LEFT JOIN userNameDB c WITH(NOLOCK) ON a.accountIDX=c.accountIDX
				LEFT JOIN userInfoBDB d WITH(NOLOCK) ON a.accountIDX=d.accountIDX
				LEFT JOIN userInfoDB e WITH(NOLOCK) ON a.accountIDX=e.accountIDX
				LEFT JOIN userCooperationDB f WITH(NOLOCK) ON a.accountIDX=f.accountIDX
		WHERE a.userID=@searchString
	END
	ELSE
	BEGIN
		SELECT
			a.accountIDX, a.userID, a.nickName, a.email, a.mailling, a.userType,
			a.joinType, a.limitType, a.limitDate, a.regDate, a.cpType,
			b.gameMoney, b.userState, b.playTime, b.conn_count, b.userLevel,
			b.userEXP, b.userFishingLevel, b.userFishingEXP, b.rencpoint,
			b.renspoint, b.regionType, b.connDate,
			c.userName, c.userBirthday, c.userJumin1, c.userJumin2, c.userGender,
			d.tel, d.mobile, d.zipcode, d.address1, d.address2, e.userIP, f.cpID
		FROM userMemberDB a WITH(NOLOCK)
				JOIN userGameDB b WITH(NOLOCK) ON a.accountIDX=b.accountIDX
				LEFT JOIN userNameDB c WITH(NOLOCK) ON a.accountIDX=c.accountIDX
				LEFT JOIN userInfoBDB d WITH(NOLOCK) ON a.accountIDX=d.accountIDX
				LEFT JOIN userInfoDB e WITH(NOLOCK) ON a.accountIDX=e.accountIDX
				LEFT JOIN userCooperationDB f WITH(NOLOCK) ON a.accountIDX=f.accountIDX
		WHERE a.nickName=@searchString
	END
GO


-- ----------------------------
-- procedure structure for web_event_honor_userip_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_honor_userip_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_honor_userip_count]
GO

CREATE PROCEDURE [dbo].[web_event_honor_userip_count]
(
	@userIP varchar(16)
)
AS
	SELECT count(*) FROM event_honor WHERE userIP=@userIP
GO


-- ----------------------------
-- procedure structure for game_practice_set_Time
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_practice_set_Time]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_practice_set_Time]
GO

CREATE PROCEDURE [dbo].[game_practice_set_Time]


	@ACCOUNT_IDX			INT,			-- 유저 인덱스
	@PRACTICE_IDX			INT,			-- 연습 인덱스
	@PRACTICE_GRADE			INT,			-- 수련장 등급
	@PRACTICE_COUNT			INT,			-- 수련장 입장횟수
	@PRACTICE_TIME			INT,			-- 수련장 시간
	@PRACTICE_RANK			INT				-- 수련장 랭크

AS

	SET NOCOUNT ON;
	SET LOCK_TIMEOUT 10000;
	
	DECLARE @nReturn		INT	
	SET @nReturn=0			-- True
	
	BEGIN TRAN

		IF (EXISTS(SELECT * FROM dbo.userPracticeDB WITH (NOLOCK) WHERE AccountIDX = @ACCOUNT_IDX AND PracticeIDX = @PRACTICE_IDX))
		BEGIN
			UPDATE dbo.userPracticeDB
			   SET PracticeGrade = @PRACTICE_GRADE, PracticeCount=@PRACTICE_COUNT
				, PracticeTime=@PRACTICE_TIME, PracticeRank=@PRACTICE_RANK
				, UpdateDate = GETDATE()
			 WHERE AccountIDX = @ACCOUNT_IDX
			   AND PracticeIDX = @PRACTICE_IDX;
		END
		ELSE
		BEGIN
			INSERT INTO dbo.userPracticeDB (AccountIDX, PracticeIDX, PracticeCount, PracticeGrade, PracticeTime, PracticeRank, UpdateDate, regDate) 
			VALUES ( @ACCOUNT_IDX, @PRACTICE_IDX, @PRACTICE_COUNT, @PRACTICE_GRADE, @PRACTICE_TIME, @PRACTICE_RANK, GETDATE(), GETDATE());
		END


		IF (@@ROWCOUNT = 0) or (@@ERROR <> 0)			
		BEGIN
			ROLLBACK TRAN
			SELECT -1;
			RETURN;
		END

	COMMIT TRAN
	
	SELECT @nReturn;
	RETURN;
GO


-- ----------------------------
-- procedure structure for usp_web_member_add_tooniland
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[usp_web_member_add_tooniland]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[usp_web_member_add_tooniland]
GO

CREATE PROCEDURE [dbo].[usp_web_member_add_tooniland]
	@sUserId	varchar(12),		-- 사용자아이디
	@sNickName	varchar(12),		-- 사용자닉네임
	@sEMail		varchar(50),		-- 이메일주소
	@nMailling	int = '',		-- 메일수신동의여부
	@nUserType	int,			-- 가입자등급(100:정회원)
	@nJoinType	int,			-- 회원확인
	@nGender	int,			-- 성별(M:남자, F:여자 )
	@sUserIP	varchar(15),		-- 사용자IP
	@nTooniIDX	int,			-- 투니랜드IDX
	@sTooniId	varchar(20),		-- 투니랜드ID
	@nCpType	int,			-- CP타입(투니랜드:700)
	@sUserName	varchar(10),		-- 사용자이름
	@sUserBirthday	varchar(6) = '',	-- 생년월일
	@sEncodeJumin1	varchar(12) = '',	-- 주민번호앞자리(암호화)
	@sEncodeJumin2	varchar(14) = '',	-- 주민번호뒷자리(암호화)
	@sUserEnCode	varchar(64) = '',	-- 전체주민번호(암호화)
	@nUserNumber	tinyint,		-- 주민번호뒷자리처음(남자:1, 여자:2, 2000년생은 3,4)
	@sZipcode	varchar(8) = '',	-- 우편번호	
	@sAddress1	varchar(150) = '',	-- 주소1
	@sAddress2	varchar(50) = '',	-- 주소2
	@sMobile	varchar(16) = ''	-- 핸드폰번호
AS
BEGIN
	-- 변수 선언
	DECLARE @nAccountIDX	int

	-- 변수 세팅
	SET @nAccountIDX = 0
	
	-- TRAN START 
	BEGIN TRAN

		-- 게임 관련 기본 데이터 저장
		INSERT INTO userMemberDB (userID, nickName, userPWD, EMail, mailling, userType, joinType, eventType, cpType, limitType, limitDate, regDate)
		     VALUES (@sUserId, @sNickName, '', @sEMail, @nMailling, @nUserType, @nJoinType, 0, @nCpType, 0, '1999-01-01', GETDATE())

		IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
		BEGIN
			ROLLBACK TRAN
			RETURN (-1)
		END

		-- 사용자idx
		SET @nAccountIDX = @@IDENTITY

		INSERT INTO userCashDB (accountIDX, amtCash, amtBonus, amtLimit, amtSum, chgDate, regDate)
		     VALUES (@nAccountIDX, 1000, 1000, 99900, 0, GETDATE(), GETDATE())

		IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
		BEGIN
			ROLLBACK TRAN
			RETURN (-2)
		END

		INSERT INTO userInfoDB (accountIDX, visit_count, rec_index, rec_inc, rec_dec, checkDate, cnnDate, userIP, regDate)
		     VALUES (@nAccountIDX, 0, 0, 0, 0, getdate() - 1, '2000-01-01', @sUserIP, GETDATE())

		IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
		BEGIN
			ROLLBACK TRAN
			RETURN (-2)
		END

		INSERT INTO userGameDB (accountIDX, userState, gameMoney, playTime, conn_count, userLevel, userEXP, rencpoint, renspoint, relateLevel, regionType, refillData, connDate, regDate)
		     VALUES (@nAccountIDX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '2000-01-01', GETDATE())

		IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
		BEGIN
			ROLLBACK TRAN
			RETURN (-3)
		END

		INSERT INTO userRecordBattleDB (accountIDX, type1_win, type1_lose, type1_kill, type1_death, type2_win, type2_lose, type2_kill, type2_death, type3_win, type3_lose, type3_kill, type3_death, type4_win, type4_lose, type4_kill, type4_death, regDate)
	 	     VALUES (@nAccountIDX, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, GETDATE())

		IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
		BEGIN
			ROLLBACK TRAN
			RETURN (-4)
		END

		INSERT INTO userLoginDB (accountIDX, encodeKey, gameServerID, connDate) 
		     VALUES (@nAccountIDX, '111111111111111', 0, GETDATE())

		IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
		BEGIN
			ROLLBACK TRAN
			RETURN (-5)
		END

		-- 채널링 데이터
		INSERT INTO userCooperationDB (accountIDX, userID, cpIDX, cpID, cpType, note, regDate)
		     VALUES (@nAccountIDX, @sUserId, @nTooniIDX, @sTooniId, @nCpType, '', GETDATE())

		IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
		BEGIN
			ROLLBACK TRAN
			RETURN (-6)
		END

		INSERT INTO userNameDB (accountIDX, userName, userBirthday, userJumin1, userJumin2, userEnCode, userNumber, userGender, returnValue, userIP, regDate)
		     VALUES (@nAccountIDX, @sUserName, @sUserBirthday, @sEncodeJumin1, @sEncodeJumin2, @sUserEnCode, @nUserNumber, @nGender, 1, @sUserIP, GETDATE())

		IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
		BEGIN
			ROLLBACK TRAN
			RETURN (-7)
		END
		
		INSERT INTO userInfoBDB (accountIDX, tel, mobile, zipcode, address1, address2, regDate)
		     VALUES (@nAccountIDX, '', @sMobile, @sZipcode, @sAddress1, @sAddress2, GETDATE())

		IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
		BEGIN
			ROLLBACK TRAN
			RETURN (-8)
		END

	-- COMMIT TRAN
	COMMIT TRAN 

	--INSERT INTO LINKED_CONNECTION_WEB.LosaWeb.DBO.web_user_avatar (accountIDX, NGR010, NFS020, NHD030, PHD040, NEY050, PEY060, NMT070, PMT080, NEB090, PEB100, NHR110, PHR120, NBS130, NBD140, PBD150, NUD160, PUD170, NFT180, PFT190, NPT200, PPT210, NST220, PST230, NJK240, PJK250, PAS260, gender, regDate)
	--     VALUES (@nAccountIDX, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, @nGender, GETDATE())

	--IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
	--BEGIN
	--	RETURN (-9)
	--END

	--INSERT INTO LINKED_CONNECTION_WEB.LosaWeb.DBO.web_user_minihome (accountIDX, today_visit_count, total_visit_count, write_board_count, write_comt_count, regDate)
	--     VALUES (@nAccountIDX, 0, 0, 0, 0, GETDATE())

	--IF @@ROWCOUNT <> 1 OR @@ERROR <> 0
	--BEGIN
	--	RETURN (-10)
	--END

	RETURN (1)
END
GO


-- ----------------------------
-- procedure structure for game_event_PirateRoulette_present_get
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_event_PirateRoulette_present_get]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_event_PirateRoulette_present_get]
GO

CREATE PROCEDURE [dbo].[game_event_PirateRoulette_present_get]
(
	@accountIDX int
)
AS

SET NOCOUNT ON

IF ( EXISTS(SELECT * FROM dbo.userEventPirateRoulette_Present WITH( NOLOCK ) WHERE accountIDX = @accountIDX) )
BEGIN
	SELECT reward1, reward2, reward3, reward4, reward5,
		   reward6, reward7, reward8, reward9, reward10
--		   reward11, reward12, reward13, reward14, reward15
	  FROM dbo.userEventPirateRoulette_Present WITH( NOLOCK )
	 WHERE accountIDX = @accountIDX
END
ELSE
BEGIN
	SELECT 0 AS reward1, 0 AS reward2, 0 AS reward3, 0 AS reward4, 0 AS reward5,
		   0 AS reward6, 0 AS reward7, 0 AS reward8, 0 AS reward9, 0 AS reward10
--		   0 AS reward11, 0 AS reward12, 0 AS reward13, 0 AS reward14, 0 AS reward15	 
END
GO


-- ----------------------------
-- procedure structure for web_medal_temp_get_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_medal_temp_get_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_medal_temp_get_count]
GO

CREATE PROCEDURE [dbo].[web_medal_temp_get_count]
(
	@accountIDX int
,	@medalIDX int
)
As
	SELECT count(*) FROM userMedalDB_receive WHERE accountIDX=@accountIDX and medalIDX=@medalIDX
GO


-- ----------------------------
-- procedure structure for game_member_total_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[game_member_total_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[game_member_total_count]
GO

CREATE PROCEDURE [dbo].[game_member_total_count]

AS

	SELECT count(*) FROM userMemberDB WITH(NOLOCK)
GO


-- ----------------------------
-- procedure structure for web_cash_get_user_info
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_cash_get_user_info]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_cash_get_user_info]
GO

CREATE PROCEDURE [dbo].[web_cash_get_user_info]
(
	@accountIDX int
)
AS
	SELECT a.userID, b.userName, b.userNumber, b.userBirthday, b.userJumin1, b.userJumin2, a.EMail, b.userGender, a.joinType, ISNULL(c.zipcode, '') as 'zipcode' 
	FROM userMemberDB a WITH(NOLOCK) INNER JOIN userNameDB b WITH(NOLOCK) ON a.accountIDX = b.accountIDX LEFT JOIN userInfoBDB c WITH(NOLOCK) ON a.accountIDX = c.accountIDX 
	WHERE a.accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for manage_userinfo_get_medal_data
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[manage_userinfo_get_medal_data]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[manage_userinfo_get_medal_data]
GO

CREATE PROCEDURE [dbo].[manage_userinfo_get_medal_data]
(
	@accountIDX int
)
AS
	SELECT	idx,
			item1_type, item1_class, item1_limitType, item1_limitDate, 
			item2_type, item2_class, item2_limitType, item2_limitDate, 
			item3_type, item3_class, item3_limitType, item3_limitDate, 
			item4_type, item4_class, item4_limitType, item4_limitDate, 
			item5_type, item5_class, item5_limitType, item5_limitDate, 
			item6_type, item6_class, item6_limitType, item6_limitDate, 
			item7_type, item7_class, item7_limitType, item7_limitDate, 
			item8_type, item8_class, item8_limitType, item8_limitDate, 
			item9_type, item9_class, item9_limitType, item9_limitDate, 
			item10_type, item10_class, item10_limitType, item10_limitDate 
	FROM userItemMedalDB WHERE accountIDX = @accountIDX
GO


-- ----------------------------
-- procedure structure for web_event_honor_jumin_count
-- ----------------------------
IF EXISTS (SELECT * FROM sys.all_objects WHERE object_id = OBJECT_ID(N'[dbo].[web_event_honor_jumin_count]') AND type IN ('P', 'PC', 'RF', 'X'))
	DROP PROCEDURE[dbo].[web_event_honor_jumin_count]
GO

CREATE PROCEDURE [dbo].[web_event_honor_jumin_count]
(
	@userencode varchar(64)
)
AS
	SELECT count(*) FROM event_honor WHERE userEncode=@userencode
GO


-- ----------------------------
-- Auto increment value for define_blockIP
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[define_blockIP]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table define_blockIP
-- ----------------------------
CREATE CLUSTERED INDEX [idx_userIP]
ON [dbo].[define_blockIP] (
  [userIP] ASC
)  
FILESTREAM_ON [NULL]
GO


-- ----------------------------
-- Auto increment value for define_class_price
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[define_class_price]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table define_class_price
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[define_class_price] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO


-- ----------------------------
-- Auto increment value for define_config
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[define_config]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table define_config
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[define_config] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_objName]
ON [dbo].[define_config] (
  [objName] ASC
)
GO


-- ----------------------------
-- Auto increment value for define_encode_key
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[define_encode_key]', RESEED, 1)
GO


-- ----------------------------
-- Auto increment value for define_game_server
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[define_game_server]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table define_game_server
-- ----------------------------
CREATE NONCLUSTERED INDEX [idx_connNumber]
ON [dbo].[define_game_server] (
  [connNumber] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_serverIP]
ON [dbo].[define_game_server] (
  [serverIP] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table define_game_server
-- ----------------------------
ALTER TABLE [dbo].[define_game_server] ADD CONSTRAINT [PK_define_game_server] PRIMARY KEY CLUSTERED ([serverID])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for define_gear_customidx
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[define_gear_customidx]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table define_gear_customidx
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[define_gear_customidx] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO


-- ----------------------------
-- Primary Key structure for table define_hero_price
-- ----------------------------
ALTER TABLE [dbo].[define_hero_price] ADD CONSTRAINT [PK_define_hero_price] PRIMARY KEY CLUSTERED ([HeroCode])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table define_hwid_blocklist
-- ----------------------------
ALTER TABLE [dbo].[define_hwid_blocklist] ADD CONSTRAINT [PK__define_h__410F6C4AC9299A23] PRIMARY KEY CLUSTERED ([hwid])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for define_manage
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[define_manage]', RESEED, 1)
GO


-- ----------------------------
-- Primary Key structure for table define_medal
-- ----------------------------
ALTER TABLE [dbo].[define_medal] ADD CONSTRAINT [PK_define_medal] PRIMARY KEY CLUSTERED ([medalCode])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for define_quest
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[define_quest]', RESEED, 1)
GO


-- ----------------------------
-- Auto increment value for define_site_config
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[define_site_config]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table define_site_config
-- ----------------------------
CREATE CLUSTERED INDEX [idx_objName]
ON [dbo].[define_site_config] (
  [objName] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_content]
ON [dbo].[define_site_config] (
  [content] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[define_site_config] (
  [idx] ASC
)
GO


-- ----------------------------
-- Auto increment value for event_chuchun
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[event_chuchun]', RESEED, 1)
GO


-- ----------------------------
-- Primary Key structure for table event_item_limited
-- ----------------------------
ALTER TABLE [dbo].[event_item_limited] ADD CONSTRAINT [PK_event_item_limited_AccountIDX] PRIMARY KEY CLUSTERED ([AccountIDX], [EventType], [GoodsIndex])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for itemCode
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[itemCode]', RESEED, 1)
GO


-- ----------------------------
-- Primary Key structure for table TB_LTS_WEEKTIME
-- ----------------------------
ALTER TABLE [dbo].[TB_LTS_WEEKTIME] ADD CONSTRAINT [PK_TB_LTS_WEEKTIME] PRIMARY KEY CLUSTERED ([userID], [GmtCodeNo], [Wday], [Wtime])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table TB_LTS_WEEKTIME_PARENT_CHILD_INFO
-- ----------------------------
ALTER TABLE [dbo].[TB_LTS_WEEKTIME_PARENT_CHILD_INFO] ADD CONSTRAINT [PK_TB_LTS_WEEKTIME_PARENT_CHILD_INFO] PRIMARY KEY NONCLUSTERED ([PARENT_ID], [CHILD_ID])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userAbilityDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userAbilityDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userAbilityDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userAbilityDB] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userAbilityDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Auto increment value for userAccessoryDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userAccessoryDB]', RESEED, 1)
GO


-- ----------------------------
-- Primary Key structure for table userAccessoryDB
-- ----------------------------
ALTER TABLE [dbo].[userAccessoryDB] ADD CONSTRAINT [PK_userAccessoryDB] PRIMARY KEY CLUSTERED ([AccountIDX], [idx])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userAttendanceDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userAttendanceDB]', RESEED, 1)
GO


-- ----------------------------
-- Primary Key structure for table userAttendDB
-- ----------------------------
ALTER TABLE [dbo].[userAttendDB] ADD CONSTRAINT [PK_GAME_LOG_LogIndex] PRIMARY KEY CLUSTERED ([AccountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userAwardDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userAwardDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userAwardDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userAwardDB] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userAwardDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userCashDB
-- ----------------------------
ALTER TABLE [dbo].[userCashDB] ADD CONSTRAINT [PK_userCashDB] PRIMARY KEY CLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userCharacterDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userCharacterDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userCharacterDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userCharacterDB] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userCharacterDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Auto increment value for userClassDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userClassDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userClassDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userClassDB] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userClassDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userCloverDB
-- ----------------------------
ALTER TABLE [dbo].[userCloverDB] ADD CONSTRAINT [PK_userCloverDB] PRIMARY KEY CLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userCoinDB
-- ----------------------------
ALTER TABLE [dbo].[userCoinDB] ADD CONSTRAINT [PK_userCoinDB] PRIMARY KEY CLUSTERED ([AccountIDX], [CoinType])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userConfigDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userConfigDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userConfigDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userConfigDB] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO


-- ----------------------------
-- Auto increment value for userConfigDB_TEST
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userConfigDB_TEST]', RESEED, 1)
GO


-- ----------------------------
-- Auto increment value for userCooperationDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userCooperationDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userCooperationDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_cpType]
ON [dbo].[userCooperationDB] (
  [cpType] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userCooperationDB] (
  [accountIDX] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_cpID]
ON [dbo].[userCooperationDB] (
  [cpID] ASC
)
GO


-- ----------------------------
-- Auto increment value for userCostumeDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userCostumeDB]', RESEED, 1)
GO


-- ----------------------------
-- Primary Key structure for table userCostumeDB
-- ----------------------------
ALTER TABLE [dbo].[userCostumeDB] ADD CONSTRAINT [PK_userCostumeDB] PRIMARY KEY CLUSTERED ([idx], [accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userCustomMedalDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userCustomMedalDB]', RESEED, 1)
GO


-- ----------------------------
-- Primary Key structure for table userEventBingo_Number
-- ----------------------------
ALTER TABLE [dbo].[userEventBingo_Number] ADD CONSTRAINT [PK_userEventBingo_Number] PRIMARY KEY CLUSTERED ([accountidx])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userEventBingo_Present
-- ----------------------------
ALTER TABLE [dbo].[userEventBingo_Present] ADD CONSTRAINT [PK_userEventBingo_Present] PRIMARY KEY CLUSTERED ([accountidx])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userEventDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userEventDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userEventDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userEventDB] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_accidx_evntype]
ON [dbo].[userEventDB] (
  [accountIDX] ASC,
  [eventType] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userEventDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userEventPirateRoulette_Number
-- ----------------------------
ALTER TABLE [dbo].[userEventPirateRoulette_Number] ADD CONSTRAINT [PK_userEventPirateRoulette_Number] PRIMARY KEY CLUSTERED ([accountidx])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userEventPirateRoulette_Present
-- ----------------------------
ALTER TABLE [dbo].[userEventPirateRoulette_Present] ADD CONSTRAINT [PK_userEventPirateRoulette_Present] PRIMARY KEY CLUSTERED ([accountidx])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userFishDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userFishDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userFishDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userFishDB] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userFishDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Auto increment value for userFriendBestDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userFriendBestDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userFriendBestDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[userFriendBestDB] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userFriendBestDB] (
  [accountIDX] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_flag]
ON [dbo].[userFriendBestDB] (
  [flag] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_friendIDX]
ON [dbo].[userFriendBestDB] (
  [friendIDX] ASC
)
GO


-- ----------------------------
-- Auto increment value for userFriendDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userFriendDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userFriendDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_userAccIDX]
ON [dbo].[userFriendDB] (
  [userAccIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_accIDX]
ON [dbo].[userFriendDB] (
  [userAccIDX] ASC,
  [friendAccIDX] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_friendAccIDX]
ON [dbo].[userFriendDB] (
  [friendAccIDX] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userFriendDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userGameDB
-- ----------------------------
ALTER TABLE [dbo].[userGameDB] ADD CONSTRAINT [PK_userGameDB] PRIMARY KEY CLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userGoldDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userGoldDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userGoldDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [NC_userGoldDB_idx]
ON [dbo].[userGoldDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userGoldDB
-- ----------------------------
ALTER TABLE [dbo].[userGoldDB] ADD CONSTRAINT [PK_userGoldDB] PRIMARY KEY CLUSTERED ([AccountIDX], [GoldType], [ExpirationDate], [idx])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Indexes structure for table userGuildAttendDB
-- ----------------------------
CREATE CLUSTERED INDEX [CX_userGuildAttendDB_RegDate_GuildIDX]
ON [dbo].[userGuildAttendDB] (
  [InitDate] ASC,
  [GuildIDX] ASC
)  
FILESTREAM_ON [NULL]
GO


-- ----------------------------
-- Primary Key structure for table userGuildAttendDB
-- ----------------------------
ALTER TABLE [dbo].[userGuildAttendDB] ADD CONSTRAINT [PK_userGuildAttendDB_RegDate_AccountIDX] PRIMARY KEY NONCLUSTERED ([InitDate], [AccountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userGuildDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userGuildDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userGuildDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userGuildDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userGuildDB
-- ----------------------------
ALTER TABLE [dbo].[userGuildDB] ADD CONSTRAINT [PK_userGuildDB] PRIMARY KEY CLUSTERED ([guildName])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userGuildHQDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userGuildHQDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userGuildHQDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [ncx_userGuildHQDB_ItemSerial]
ON [dbo].[userGuildHQDB] (
  [ItemSerial] ASC
)
INCLUDE ([ItemStatus])
GO


-- ----------------------------
-- Primary Key structure for table userGuildHQDB
-- ----------------------------
ALTER TABLE [dbo].[userGuildHQDB] ADD CONSTRAINT [PK_userGuildHQDB] PRIMARY KEY CLUSTERED ([GuildIDX], [ItemSerial])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userGuildHQVerDB
-- ----------------------------
ALTER TABLE [dbo].[userGuildHQVerDB] ADD CONSTRAINT [PK_userGuildHQVerDB] PRIMARY KEY CLUSTERED ([GuildIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userGuildInfoDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userGuildInfoDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userGuildInfoDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_guildIDX]
ON [dbo].[userGuildInfoDB] (
  [guildIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userGuildInfoDB] (
  [accountIDX] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userGuildInfoDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Auto increment value for userHqDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userHqDB]', RESEED, 1)
GO


-- ----------------------------
-- Primary Key structure for table userHqDB
-- ----------------------------
ALTER TABLE [dbo].[userHqDB] ADD CONSTRAINT [PK_userHqDB] PRIMARY KEY CLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Indexes structure for table userInfoBDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [idx_mobile]
ON [dbo].[userInfoBDB] (
  [mobile] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userInfoBDB
-- ----------------------------
ALTER TABLE [dbo].[userInfoBDB] ADD CONSTRAINT [PK_userInfoBDB] PRIMARY KEY CLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Indexes structure for table userInfoDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [idx_userIP]
ON [dbo].[userInfoDB] (
  [userIP] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userInfoDB
-- ----------------------------
ALTER TABLE [dbo].[userInfoDB] ADD CONSTRAINT [PK_userInfoDB] PRIMARY KEY CLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userItemDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userItemDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userItemDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userItemDB] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userItemDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Auto increment value for userItemEtcDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userItemEtcDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userItemEtcDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userItemEtcDB] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userItemEtcDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Auto increment value for userItemExtraDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userItemExtraDB]', RESEED, 1)
GO


-- ----------------------------
-- Auto increment value for userItemMedalDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userItemMedalDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userItemMedalDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userItemMedalDB] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userItemMedalDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Auto increment value for userItemMedalExtendDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userItemMedalExtendDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userItemMedalExtendDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[userItemMedalExtendDB] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userItemMedalExtendDB] (
  [accountIDX] ASC
)
GO


-- ----------------------------
-- Auto increment value for userLeagueAuthDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userLeagueAuthDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userLeagueAuthDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[userLeagueAuthDB] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userLeagueAuthDB] (
  [accountIDX] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_leagueIDX]
ON [dbo].[userLeagueAuthDB] (
  [leagueIDX] ASC
)
GO


-- ----------------------------
-- Auto increment value for userLeagueCheerDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userLeagueCheerDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userLeagueCheerDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userLeagueCheerDB] (
  [accountIDX] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_leagueIDX]
ON [dbo].[userLeagueCheerDB] (
  [leagueIDX] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userLeagueCheerDB
-- ----------------------------
ALTER TABLE [dbo].[userLeagueCheerDB] ADD CONSTRAINT [PK_userLeagueCheerDB] PRIMARY KEY CLUSTERED ([idx])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userLeagueInfoDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userLeagueInfoDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userLeagueInfoDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[userLeagueInfoDB] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_leagueIDX]
ON [dbo].[userLeagueInfoDB] (
  [leagueIDX] ASC
)
GO


-- ----------------------------
-- Auto increment value for userLeagueListDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userLeagueListDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userLeagueListDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userLeagueListDB] (
  [accountIDX] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userLeagueListDB
-- ----------------------------
ALTER TABLE [dbo].[userLeagueListDB] ADD CONSTRAINT [PK_userLeagueListDB] PRIMARY KEY CLUSTERED ([idx])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userLeagueRewardCheerDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userLeagueRewardCheerDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userLeagueRewardCheerDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userLeagueRewardCheerDB] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userLeagueRewardCheerDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Auto increment value for userLeagueRewardDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userLeagueRewardDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userLeagueRewardDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[userLeagueRewardDB] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userLeagueRewardDB] (
  [accountIDX] ASC
)
GO


-- ----------------------------
-- Auto increment value for userLeagueRewardUserDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userLeagueRewardUserDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userLeagueRewardUserDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_regDate]
ON [dbo].[userLeagueRewardUserDB] (
  [regDate] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userLeagueRewardUserDB] (
  [accountIDX] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userLeagueRewardUserDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Auto increment value for userLeagueRoundDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userLeagueRoundDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userLeagueRoundDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[userLeagueRoundDB] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_infoIDX]
ON [dbo].[userLeagueRoundDB] (
  [infoIDX] ASC
)
GO


-- ----------------------------
-- Auto increment value for userLeagueTeamDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userLeagueTeamDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userLeagueTeamDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [idx_leaderIDX]
ON [dbo].[userLeagueTeamDB] (
  [leaderIDX] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_leagueIDX]
ON [dbo].[userLeagueTeamDB] (
  [leagueIDX] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userLeagueTeamDB
-- ----------------------------
ALTER TABLE [dbo].[userLeagueTeamDB] ADD CONSTRAINT [PK_userLeagueTeamDB] PRIMARY KEY CLUSTERED ([idx])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userLeagueTeamMemberDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userLeagueTeamMemberDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userLeagueTeamMemberDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userLeagueTeamMemberDB] (
  [accountIDX] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_leagueIDX]
ON [dbo].[userLeagueTeamMemberDB] (
  [leagueIDX] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_teamIDX]
ON [dbo].[userLeagueTeamMemberDB] (
  [teamIDX] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userLeagueTeamMemberDB
-- ----------------------------
ALTER TABLE [dbo].[userLeagueTeamMemberDB] ADD CONSTRAINT [PK_userLeagueTeamMemberDB] PRIMARY KEY CLUSTERED ([idx])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userLeagueWinnerHistoryDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userLeagueWinnerHistoryDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userLeagueWinnerHistoryDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[userLeagueWinnerHistoryDB] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_endDate]
ON [dbo].[userLeagueWinnerHistoryDB] (
  [endDate] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_startDate]
ON [dbo].[userLeagueWinnerHistoryDB] (
  [startDate] ASC
)
GO


-- ----------------------------
-- Auto increment value for userLeagueWinnerInfoDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userLeagueWinnerInfoDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userLeagueWinnerInfoDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[userLeagueWinnerInfoDB] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userLeagueWinnerInfoDB] (
  [accountIDX] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_historyIDX]
ON [dbo].[userLeagueWinnerInfoDB] (
  [historyIDX] ASC
)
GO


-- ----------------------------
-- Indexes structure for table userLoginDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [idx_gameserverID]
ON [dbo].[userLoginDB] (
  [gameServerID] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userLoginDB
-- ----------------------------
ALTER TABLE [dbo].[userLoginDB] ADD CONSTRAINT [PK_userLoginDB] PRIMARY KEY CLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userMatchModeDailyRankingDB
-- ----------------------------
ALTER TABLE [dbo].[userMatchModeDailyRankingDB] ADD CONSTRAINT [PK_userMatchModeDailyRankingDB] PRIMARY KEY CLUSTERED ([AccountIDX], [Ranking])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userMatchModeDB
-- ----------------------------
ALTER TABLE [dbo].[userMatchModeDB] ADD CONSTRAINT [PK_userMatchModeDB] PRIMARY KEY CLUSTERED ([AccountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userMatchModeHistoryDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userMatchModeHistoryDB]', RESEED, 1)
GO


-- ----------------------------
-- Primary Key structure for table userMatchModeHistoryDB
-- ----------------------------
ALTER TABLE [dbo].[userMatchModeHistoryDB] ADD CONSTRAINT [PK_userMatchModeHistoryDB] PRIMARY KEY CLUSTERED ([AccountIDX], [PlayDate], [idx])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userMatchModeSeasonRankingDB
-- ----------------------------
ALTER TABLE [dbo].[userMatchModeSeasonRankingDB] ADD CONSTRAINT [PK_userMatchModeSeasonRankingDB] PRIMARY KEY CLUSTERED ([AccountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userMedalDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userMedalDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userMedalDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userMedalDB] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userMedalDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Auto increment value for userMedalDB_receive
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userMedalDB_receive]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userMedalDB_receive
-- ----------------------------
CREATE CLUSTERED INDEX [idx_acc_medalIDX]
ON [dbo].[userMedalDB_receive] (
  [accountIDX] ASC,
  [medalIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userMedalDB_receive] (
  [accountIDX] ASC
)
GO


-- ----------------------------
-- Auto increment value for userMemberDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userMemberDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userMemberDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userMemberDB] (
  [accountIDX] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_email]
ON [dbo].[userMemberDB] (
  [email] ASC
)
GO

CREATE UNIQUE NONCLUSTERED INDEX [UK_userMemberDB]
ON [dbo].[userMemberDB] (
  [nickName] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userMemberDB
-- ----------------------------
ALTER TABLE [dbo].[userMemberDB] ADD CONSTRAINT [PK_userMemberDB_1] PRIMARY KEY CLUSTERED ([userID])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userMissionDB
-- ----------------------------
ALTER TABLE [dbo].[userMissionDB] ADD CONSTRAINT [PK_userMissionDB_AccountIDX] PRIMARY KEY CLUSTERED ([AccountIDX], [MissionType], [MissionCode])
WITH (PAD_INDEX = OFF, FILLFACTOR = 80, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Indexes structure for table userNameDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [idx_jumin]
ON [dbo].[userNameDB] (
  [userJumin1] ASC,
  [userJumin2] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_userencode]
ON [dbo].[userNameDB] (
  [userEnCode] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_userName]
ON [dbo].[userNameDB] (
  [userName] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userNameDB
-- ----------------------------
ALTER TABLE [dbo].[userNameDB] ADD CONSTRAINT [PK_userNameDB] PRIMARY KEY CLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Indexes structure for table userParentDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [idx_parentencode]
ON [dbo].[userParentDB] (
  [parentEncode] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userParentDB
-- ----------------------------
ALTER TABLE [dbo].[userParentDB] ADD CONSTRAINT [PK_userParentDB] PRIMARY KEY CLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userPCBangPlayTimeDB
-- ----------------------------
ALTER TABLE [dbo].[userPCBangPlayTimeDB] ADD CONSTRAINT [PK_userPCBangPlayTimeDB] PRIMARY KEY CLUSTERED ([PCBangDate], [PCBangIndex], [AccountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userPCBangPregentDB
-- ----------------------------
ALTER TABLE [dbo].[userPCBangPregentDB] ADD CONSTRAINT [PK_userPCBangPregentDB] PRIMARY KEY CLUSTERED ([PCBangDate], [AccountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userPersonalHQDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userPersonalHQDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userPersonalHQDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [ncx_userPersonalHQDB_ItemSerial]
ON [dbo].[userPersonalHQDB] (
  [ItemSerial] ASC
)
INCLUDE ([ItemStatus])
GO


-- ----------------------------
-- Primary Key structure for table userPersonalHQDB
-- ----------------------------
ALTER TABLE [dbo].[userPersonalHQDB] ADD CONSTRAINT [PK_userPersonalHQDB] PRIMARY KEY CLUSTERED ([AccountIDX], [ItemSerial])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userPetDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userPetDB]', RESEED, 1)
GO


-- ----------------------------
-- Primary Key structure for table userPetDB
-- ----------------------------
ALTER TABLE [dbo].[userPetDB] ADD CONSTRAINT [PK_userPetDB_accountIDX_PetIDX] PRIMARY KEY CLUSTERED ([accountIDX], [petIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userPieceDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userPieceDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userPieceDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userPieceDB] (
  [accountIDX] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userPieceDB
-- ----------------------------
ALTER TABLE [dbo].[userPieceDB] ADD CONSTRAINT [PK_userPieceDB] PRIMARY KEY CLUSTERED ([idx])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userPopStoreDB
-- ----------------------------
ALTER TABLE [dbo].[userPopStoreDB] ADD CONSTRAINT [PK_userPopStoreDB_AccountIDX] PRIMARY KEY CLUSTERED ([AccountIDX], [PopupSlot])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userPracticeDB
-- ----------------------------
ALTER TABLE [dbo].[userPracticeDB] ADD CONSTRAINT [PK_userPracticeDB] PRIMARY KEY CLUSTERED ([AccountIDX], [PracticeIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userPracticeDB_Present
-- ----------------------------
ALTER TABLE [dbo].[userPracticeDB_Present] ADD CONSTRAINT [PK_userPracticeDB_Present] PRIMARY KEY CLUSTERED ([PresentValue])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Indexes structure for table userPracticeDB_Ranking
-- ----------------------------
CREATE NONCLUSTERED INDEX [NCI_userPracticeDB_Ranking]
ON [dbo].[userPracticeDB_Ranking] (
  [AccountIDX] ASC,
  [PracticeIDX] ASC
)
GO


-- ----------------------------
-- Auto increment value for userPresentDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userPresentDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userPresentDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[userPresentDB] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_receiveIDX]
ON [dbo].[userPresentDB] (
  [receiveIDX] ASC
)
GO


-- ----------------------------
-- Auto increment value for userQuestCompleteDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userQuestCompleteDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userQuestCompleteDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userQuestCompleteDB] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userQuestCompleteDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Auto increment value for userQuestDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userQuestDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userQuestDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userQuestDB] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userQuestDB] (
  [idx] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userRankingDB
-- ----------------------------
ALTER TABLE [dbo].[userRankingDB] ADD CONSTRAINT [PK_userRankingDB] PRIMARY KEY CLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Indexes structure for table userRankingDB_award
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userRankingDB_award] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO


-- ----------------------------
-- Auto increment value for userRankingDB_award_top100
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userRankingDB_award_top100]', RESEED, 1)
GO


-- ----------------------------
-- Auto increment value for userRankingDB_award_top3
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userRankingDB_award_top3]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userRankingDB_award_top3
-- ----------------------------
CREATE CLUSTERED INDEX [idx_dateIDX]
ON [dbo].[userRankingDB_award_top3] (
  [dateIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_awardType]
ON [dbo].[userRankingDB_award_top3] (
  [awardType] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userRankingDB_battle
-- ----------------------------
ALTER TABLE [dbo].[userRankingDB_battle] ADD CONSTRAINT [PK_userRankingDB_battle] PRIMARY KEY CLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Indexes structure for table userRankingDB_class
-- ----------------------------
CREATE CLUSTERED INDEX [idx_nowRanking]
ON [dbo].[userRankingDB_class] (
  [nowRanking] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userRankingDB_class] (
  [accountIDX] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_classType]
ON [dbo].[userRankingDB_class] (
  [classType] ASC
)
GO


-- ----------------------------
-- Auto increment value for userRankingDB_class_top100
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userRankingDB_class_top100]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userRankingDB_class_top100
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[userRankingDB_class_top100] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_classType]
ON [dbo].[userRankingDB_class_top100] (
  [classType] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_guildIDX]
ON [dbo].[userRankingDB_class_top100] (
  [guildIDX] ASC
)
GO


-- ----------------------------
-- Auto increment value for userRankingDB_class_top3
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userRankingDB_class_top3]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userRankingDB_class_top3
-- ----------------------------
CREATE CLUSTERED INDEX [idx_dateIDX]
ON [dbo].[userRankingDB_class_top3] (
  [dateIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_classType]
ON [dbo].[userRankingDB_class_top3] (
  [classType] ASC
)
GO


-- ----------------------------
-- Indexes structure for table userRankingDB_classgroup
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userRankingDB_classgroup] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_ranking1day]
ON [dbo].[userRankingDB_classgroup] (
  [ranking_1day] ASC
)
GO

CREATE NONCLUSTERED INDEX [idx_userLevel]
ON [dbo].[userRankingDB_classgroup] (
  [userLevel] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userRankingDB_classgroup
-- ----------------------------
ALTER TABLE [dbo].[userRankingDB_classgroup] ADD CONSTRAINT [PK_userRankingDB_classgroup] PRIMARY KEY NONCLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userRankingDB_classgroup_top10000
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userRankingDB_classgroup_top10000]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userRankingDB_classgroup_top10000
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[userRankingDB_classgroup_top10000] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userRankingDB_classgroup_top10000] (
  [accountIDX] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userRankingDB_faction
-- ----------------------------
ALTER TABLE [dbo].[userRankingDB_faction] ADD CONSTRAINT [PK_userRankingDB_faction] PRIMARY KEY CLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userRankingDB_hero
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userRankingDB_hero]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userRankingDB_hero
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userRankingDB_hero] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_daily]
ON [dbo].[userRankingDB_hero] (
  [daily] ASC
)
GO


-- ----------------------------
-- Indexes structure for table userRankingDB_medal
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userRankingDB_medal] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO


-- ----------------------------
-- Indexes structure for table userRankingDB_temp_expert
-- ----------------------------
CREATE CLUSTERED INDEX [idx_expert]
ON [dbo].[userRankingDB_temp_expert] (
  [expert] ASC
)  
FILESTREAM_ON [NULL]
GO


-- ----------------------------
-- Auto increment value for userRankingDB_temp_ranking
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userRankingDB_temp_ranking]', RESEED, 1)
GO


-- ----------------------------
-- Primary Key structure for table userRecordBattleDB
-- ----------------------------
ALTER TABLE [dbo].[userRecordBattleDB] ADD CONSTRAINT [PK_userRecordBattleDB] PRIMARY KEY CLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userRecordGuildDB
-- ----------------------------
ALTER TABLE [dbo].[userRecordGuildDB] ADD CONSTRAINT [PK_userRecordGuildDB] PRIMARY KEY CLUSTERED ([guildIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userRegionDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userRegionDB]', RESEED, 1)
GO


-- ----------------------------
-- Auto increment value for userRegionDB_compen
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userRegionDB_compen]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userRegionDB_compen
-- ----------------------------
CREATE CLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userRegionDB_compen] (
  [accountIDX] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_idx]
ON [dbo].[userRegionDB_compen] (
  [idx] ASC
)
GO


-- ----------------------------
-- Auto increment value for userRegionDB_history
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userRegionDB_history]', RESEED, 1)
GO


-- ----------------------------
-- Primary Key structure for table userRelativeLevelDB
-- ----------------------------
ALTER TABLE [dbo].[userRelativeLevelDB] ADD CONSTRAINT [PK_userRelativeLevelDB] PRIMARY KEY CLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userSBoxDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userSBoxDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userSBoxDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[userSBoxDB] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userSBoxDB] (
  [accountIDX] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userSpentGoldDB
-- ----------------------------
ALTER TABLE [dbo].[userSpentGoldDB] ADD CONSTRAINT [PK_userSpentGoldDB_AccountIDX] PRIMARY KEY CLUSTERED ([AccountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userSpentGoldLogDB
-- ----------------------------
ALTER TABLE [dbo].[userSpentGoldLogDB] ADD CONSTRAINT [PK_userSpentGoldLogDB_RegDate_AccountIDX] PRIMARY KEY CLUSTERED ([RegDate], [AccountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userSpiritDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userSpiritDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userSpiritDB
-- ----------------------------
CREATE NONCLUSTERED INDEX [NC_userSpiritDB_AccountIDX]
ON [dbo].[userSpiritDB] (
  [AccountIDX] ASC,
  [idx] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userSpiritDB
-- ----------------------------
ALTER TABLE [dbo].[userSpiritDB] ADD CONSTRAINT [PK_userSpiritDB] PRIMARY KEY CLUSTERED ([AccountIDX], [SpiritType])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userTimeCashDB
-- ----------------------------
ALTER TABLE [dbo].[userTimeCashDB] ADD CONSTRAINT [PK_userTimeCashDB_AccountIDX] PRIMARY KEY CLUSTERED ([AccountIDX], [ItemCode])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userTimeGateDB
-- ----------------------------
ALTER TABLE [dbo].[userTimeGateDB] ADD CONSTRAINT [PK_userTimeGateDB] PRIMARY KEY CLUSTERED ([AccountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Primary Key structure for table userTitleDB
-- ----------------------------
ALTER TABLE [dbo].[userTitleDB] ADD CONSTRAINT [PK_userTitleDB_AccountIDX] PRIMARY KEY CLUSTERED ([AccountIDX], [TitleCode])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO


-- ----------------------------
-- Auto increment value for userTradeDB
-- ----------------------------
DBCC CHECKIDENT ('[dbo].[userTradeDB]', RESEED, 1)
GO


-- ----------------------------
-- Indexes structure for table userTradeDB
-- ----------------------------
CREATE CLUSTERED INDEX [idx_idx]
ON [dbo].[userTradeDB] (
  [idx] ASC
)  
FILESTREAM_ON [NULL]
GO

CREATE NONCLUSTERED INDEX [idx_accountIDX]
ON [dbo].[userTradeDB] (
  [accountIDX] ASC
)
GO


-- ----------------------------
-- Primary Key structure for table userVIPDB
-- ----------------------------
ALTER TABLE [dbo].[userVIPDB] ADD CONSTRAINT [PK__userVIPD__30CF4CB9B70E29F0] PRIMARY KEY CLUSTERED ([accountIDX])
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)  
ON [PRIMARY]
GO

